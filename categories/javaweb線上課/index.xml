<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaWeb線上課 on 柚子茶室</title>
    <link>https://yoziming.github.io/categories/javaweb%E7%B7%9A%E4%B8%8A%E8%AA%B2/</link>
    <description>Recent content in JavaWeb線上課 on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Yoziming</copyright>
    <lastBuildDate>Wed, 09 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yoziming.github.io/categories/javaweb%E7%B7%9A%E4%B8%8A%E8%AA%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>柚子書城</title>
      <link>https://yoziming.github.io/post/220209-javaweb-book-market/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220209-javaweb-book-market/</guid>
      <description>柚子書城  柚子書城是一個不依賴Spring框架，純粹的JavaWeb項目，主要練習HTTP基本功、Servlet、Session等原理，以及JDBC、資料庫連接池等基礎的SQL操作。
 專案背景(Background)  本項目參考自 尚硅谷java web課程 https://www.bilibili.com/video/BV1Y7411K7zz 個人學習過程的詳細筆記(共14篇): https://yoziming.github.io/post/220101-agg-javaweb-01/ 我修復了一些邏輯並完善功能，並成功將網站部署到雲端，可以透過公開網址訪問  展示網站(Website)  已將專案部署到heroku，由於dyno長時間沒用會自動休眠，有時候訪問可能需要等待約30秒雲端server啟動時間 https://my-javaweb-book-market.herokuapp.com/ 可自行註冊帳號，管理員權限帳號密碼為 admin  學習技術 前端   html、css、javascript的基礎認識
 例如: 各種標籤&amp;lt;a href&amp;gt;、&amp;lt;input type&amp;gt;、&amp;lt;form&amp;gt;    jsp、jQuery、JSTL標籤庫、EL運算式
 例如: &amp;lt;c:if test=&amp;quot;&amp;quot;&amp;gt;、${key1}、綁定點擊事件&amp;hellip;等等    Ajax，非同步請求的基礎構成，例如: $.getJSON()
  後端  不依賴Spring框架的http請求與響應操作 Servlet、Filter、Listener、Cookie、Session、JSON 驗證資訊、權限隔離、防止重複提交 JDBC、資料庫連接池、DAO操作SQL MVC與三層架構、搭建javaweb專案 web容器的運作與部屬  實現功能(Service)  柚子書城是簡單的商城項目，依業務劃分可分為五個主要模組     模組 需求     用戶 能驗證資訊(ajax)即時提示的會員註冊、登入(透過cookie)功能   商品 能夠分頁顯示商品(圖書)、可依照價格區間篩選   購物車 以Session實現的購物車，用戶可以快速地瀏覽、增刪購物項目   訂單 提交訂單、查看訂單詳情、確認收貨等等   管理後台 能驗證管理員帳號，增刪改查商品訊息、訂單訊息    演示(Demo)  以下透過gif簡單展示相關功能，若顯示有問題，可以移至個人blog觀看 https://yoziming.</description>
    </item>
    
    <item>
      <title>JSON、AJAX、i18n</title>
      <link>https://yoziming.github.io/post/220111-agg-javaweb-11/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220111-agg-javaweb-11/</guid>
      <description>JSON  JavaScript Object Notation
  輕量(相較於xml)的資料交換格式 用一對大括號{}包裹，中間以:分隔鍵值對，用,分隔多對 裡面可以放:  數字(整數或浮點數，可用e表示指數)，不能是NaN 字串(用&amp;quot;&amp;quot;包裹) 布林值(boolean) (true 或 false) 陣列(用[]包裹) 物件 (用{ }套娃) null    javaScript中 &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var jsonObj = { &amp;#34;key1&amp;#34;: 123, &amp;#34;key2&amp;#34;: &amp;#34;abc&amp;#34;, &amp;#34;ket3&amp;#34;: [&amp;#34;中&amp;#34;, &amp;#34;文&amp;#34;] }; alert(jsonObj.ket3) var jsonString = JSON.stringify(jsonObj); alert(jsonString); var jsonObj2 = JSON.parse(jsonString); &amp;lt;/script&amp;gt;  JSON可以是:  物件，用於操作 字串，用於傳遞   用JSON.stringify()與JSON.parse()方法互相轉換  Java中  要引用第三方包，例如Gson或Jackson Gson範例:  @Test public void test1() { User user = new User(&amp;#34;zhung3&amp;#34;, &amp;#34;pass123&amp;#34;, &amp;#34;zhung3@goo.</description>
    </item>
    
    <item>
      <title>Filter過濾器、ThreadLocal</title>
      <link>https://yoziming.github.io/post/220110-agg-javaweb-10/</link>
      <pubDate>Mon, 10 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220110-agg-javaweb-10/</guid>
      <description>Filter過濾器  用來修飾請求或響應
   在Web資源被訪問前，檢查request物件，修改請求頭和請求正文，或對請求進行預處理操作
  將請求傳遞到下一個過濾器或目標資源
  在Web資源被訪問後，檢查response物件，修改回應頭和回應正文
  常用來做權限控管、設定統一編碼等等
  方法  Filter都是接口，用起來跟servlet一樣需要實現方法
前面都是偷雞造一個base去實現基本的方法然後繼承
   init (FilterConfig filterConfig):初始化，由web容器調用
  doFilter(ServletRequest request,SeivletResponse response, FilterChain chain):主要方法，在這邊對req或resp毛手毛腳，或是chain.doFilter再傳到下一個過濾器
  destroy():釋放被這個filter物件占用的資源，由web容器調用
  生命週期  構造、init():跟隨web工程而啟動，被執行一次 doFilter():在每次攔截請求都調用 destrory():跟隨web工程結束而消亡，也只執行一次  FilterConfig  跟Servlet基本一樣
   每個Filter都有自己伴生的FilterConfig實例物件，當web容器啟動時一併被創造出來，其中包含了它Filter的訊息
  filterconfig.getFilterName():
  filterconfig.getInitParameter():取得初始參數(例如寫在web.xml中的&amp;lt;init-param&amp;gt;
  filterconfig.getServletContext():也能獲得ServletContext
 記住取出的ServletContext context是整個web工程共用的唯一一個 複習:可以用來從url網址取到對應的硬碟路徑， 例如context.getRealPath(&amp;quot;/&amp;quot;) 也可以當map用存setAttribute，與取getAttribute    FilterChain  串聯多個過濾器，直到沒有chain.</description>
    </item>
    
    <item>
      <title>Cookie與Session，書城訂單模組</title>
      <link>https://yoziming.github.io/post/220109-agg-javaweb-09/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220109-agg-javaweb-09/</guid>
      <description>Cookie  因為HTTP是無狀態(stateless)的，當我們想保存資訊就要用到Cookie
  伺服器通知客戶端保存鍵值對的技術  白話:叫用戶保存住某個值   應用舉例:記住用戶名 由用戶的瀏覽器維護，視生命週期存在記憶體或硬碟中 單個最多4 KB  使用  很簡單就不多說了
  在Java中是Cookie類  protected void doCookie(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // 設定編碼  request.setCharacterEncoding(&amp;#34;UTF-8&amp;#34;); response.setContentType(&amp;#34;text/html; charset=UTF-8&amp;#34;); // 在Java造Cookie類物件  Cookie cookie1 = new Cookie(&amp;#34;key1&amp;#34;, &amp;#34;value1&amp;#34;); // 增，注意是response叫客戶端造cookie  response.addCookie(cookie1); response.getWriter().write(&amp;#34;cookie創建成功!&amp;#34;); // 取  Cookie[] cookies = request.getCookies(); // 取來的是所有cookies構成的數組  for (Cookie cookie2 : cookies) { response.getWriter().write(cookie2.getName() + &amp;#34;=&amp;#34; + cookie2.</description>
    </item>
    
    <item>
      <title>書城項目:Maven管理依賴、圖書模塊</title>
      <link>https://yoziming.github.io/post/220108-agg-javaweb-08/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220108-agg-javaweb-08/</guid>
      <description>Maven管理依賴   傳統作法是建一個lib資料夾然後手動引入
  項目越多就越麻煩，打包的時候還要注意引用的有沒有包到
  專案重構  把專案整個重構，可以先把src下做的那些頁面跟java檔複製出來
   第一層最好先造一個空的專案方便命名與分類
 如果直接拿第一層的project當同名的module用，我的IDEA偶爾會有奇怪的BUG，生出兩個同名的module 後來知道原因了，就是模組根目錄下的.iml檔案裡面有重復的句子導致，備份後把它刪了讓IDEA重創一份就可    我這邊放尚硅谷課程的練習，所以project就叫atguigu
   因為是空的專案，進去之後IDEA馬上會叫你建一個Module，選javaEE，模板選到webapp    如果不想重造，在專案設定 &amp;gt; Facets
 右上設定部屬的描述檔案，就是那些web.xml之類 右下決定資源根目錄，如果顯示紅字可以點它自動生成    由於管理選的maven，造出來會自帶一個pom.xml，這個就是maven的設定檔，一個maven專案的標準目錄結構是這樣
   點開pom.xml，裡面有一些描述，往下拉到&amp;lt;dependencies&amp;gt;標籤，在這邊告知項目要引用那些包   不像golang在終端輸入go get xxx就完事，maven導包需要寫標籤代碼，但還是能偷懶的，點開中央庫搜尋頁面 https://search.maven.org/#browse   查到想要找的包，對他一通按，點進去要引用的版本   看到右邊，貼心的代碼已經準備好了   愉快的一頓複製貼上之後，回到IDEA刷新maven，他會把這些從中央倉庫引用的jar包下載一份到(預設是我的文件中.m2資料夾)放好  所以第一次可能會比較久一點     之後有引用都是同理，從此不需要手動把jar包放進lib目錄，部屬打包的時候它也會自動去準備配菜  路徑優化  現在Servlet用註解方式引用，解放了web.xml 前端頁面用共通的head.</description>
    </item>
    
    <item>
      <title>檔案上傳與下載、書城項目優化</title>
      <link>https://yoziming.github.io/post/220107-agg-javaweb-07/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220107-agg-javaweb-07/</guid>
      <description>檔案上傳  讓用戶從前端上傳一個檔案給伺服器
   要有一個 form 標籤，method=post 請求
 因為get有長度限制    form標籤的 encType 屬性值必須為 multipart/form-data 值
  在 form 標籤中使用 input type=file 添加上傳的檔
  編寫伺服器代碼(Servlet 程式)接收，處理上傳的資料
  encType=multipart/form-data 表示提交的資料以多段(每一個表單項一個資料段)的形式進行拼接，然後整個以二進位流的形式發送給伺服器
  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;#34;http://localhost:8080/book/uploadServlet&amp;#34; method=&amp;#34;post&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt; 用戶名：&amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;username&amp;#34; /&amp;gt; &amp;lt;br&amp;gt; 頭像：&amp;lt;input type=&amp;#34;file&amp;#34; name=&amp;#34;photo&amp;#34; &amp;gt; &amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34; value=&amp;#34;上傳&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  創一個UploadServlet用於接收，並且到web.xml綁定，就能用doPost接收這個二進位流 顯然自己解析這個二進位流再拆開費力不討好，這邊用別人造好的輪子  commons-fileupload  導入:  commons-fileupload-1.</description>
    </item>
    
    <item>
      <title>Listener監聽器、EL表達式、JSTL標籤庫</title>
      <link>https://yoziming.github.io/post/220106-agg-javaweb-06/</link>
      <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220106-agg-javaweb-06/</guid>
      <description>Listener監聽器  是一個接口，用於監聽某種事物的變化  ServletContextListener 監聽器  ServletContextListener 它可以監聽 ServletContext 物件的創建和銷毀。 ServletContext 物件在 web 工程啟動的時候創建，在 web 工程停止的時候銷毀。 監聽到創建和銷毀之後都會分別調用 ServletContextListener 監聽器的方法回饋 兩個方法分別是:  public interface ServletContextListener extends EventListener { // 在ServletContext 物件創建之後馬上調用，做初始化 public void contextInitialized(ServletContextEvent sce); // 在ServletContext 物件銷毀之後調用 public void contextDestroyed(ServletContextEvent sce); 使用步驟   編寫一個類去實現 ServletContextListener
  實現其兩個回檔方法
  到 web.xml 中去配置監聽器
  監聽器實現類 public class MyServletContextListenerImpl implements ServletContextListener { @Override public void contextInitialized(ServletContextEvent sce) { System.</description>
    </item>
    
    <item>
      <title>JSP</title>
      <link>https://yoziming.github.io/post/220105-agg-javaweb-05/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220105-agg-javaweb-05/</guid>
      <description>JSP  Java Server Page
  接收請求、處理請求已經了解，現在來到響應的部分 當有人來請求，我們用servlet接收並動態回應，比如想輸出一個html頁面作為結果，servlet可以做到但實現的辦法很蠢，就是靠out.print拼接硬刻出標籤文本格式，改進辦法就是JSP JSP將java &amp;gt; html 的過程包裝起來，可以更好的處理View的部分  底層代碼其實也是拼接，不過Java就是這樣，一層套一層   轉換過程  a.jsp &amp;gt;(被web容器翻譯成servlet) &amp;gt; a_jsp.java &amp;gt; a_jsp.class 然後類似一個servlet的生命週期，不過jsp轉來的有自己的方法名 構造 &amp;gt; _jspInit() &amp;gt; _jspService() &amp;gt; _jspDestroy()    JSP與Servlet的異同  引用 https://ithelp.ithome.com.tw/articles/10133506
  兩者都是HttpServlet(Servlet API)的子類  URL對應  Servlet的URL對應是需要設定的 但是JSP的對應就是它的實體路徑  如何被載入  Servlet一開始就是被編譯成class檔案，然後被http request的時候在被Web Container掛載進來 JSP是在被第一次呼叫的時候才會被Web Container先翻譯成為Servlet的java寫法，才編譯成為class檔案，放在Web Container一個 暫時的資料夾。雖然第一次執行會比Servlet慢，不過掛載以後就一樣了(因為JSP和Servlet一樣，只會掛載一次)  更新方式  Servlet如果有修改，需要重新編譯，因此需要重啟Web Container的服務 JSP頁面因為Web Container有在監控，因此，只要有修改，他會重新翻譯、編譯然後掛載。因此不需要重啟Web Container就能看到最新修改  JSP過氣? 到了2021年現在技術已經傾向前後端分離，JSP這種從後端響應結果到前端的技術確實已經少用了，但學javaweb作為基礎知識還是很有必要的，畢竟框架例如springMVC也是基於這些技術搭建，夯實地基才能建高樓</description>
    </item>
    
    <item>
      <title>JavaWeb架構、Servlet頁面轉發</title>
      <link>https://yoziming.github.io/post/220104-agg-javaweb-04/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220104-agg-javaweb-04/</guid>
      <description>JavaWeb的實現 一個web程式分成用戶端(瀏覽器)B與服務端S，搭建代碼實現彼此的請求溝通，要上線一個網站簡單可分成3大步驟
 架構:就是寫程式碼，決定用戶端發送怎樣的請求，服務端如何處理、業務邏輯，回應 打包:包成war 部屬:使用web容器(例如tomcat)執行war包，在瀏覽器中訪問指定的網址  MVC架構  MVC是一種設計模式，目的是讓HTML代碼和業務邏輯代碼分開
  Model模型，處理應用程式中資料與業務邏輯部分，就是跟資料庫打交道 View檢視，資料顯示部分，給人看的 Controller控制，負責從檢視中讀取資料並向模型傳送資料等。看前台(View)點了啥菜，叫廚房(Model)料理然後擺盤送餐  套用到Java中  用戶端發送請求 服務端的servlet或controller接收請求（路由規則由後端制定，整個專案開發的權重大部分在後端） 調用service、dao代碼完成業務邏輯 返回jsp jsp展現一些動態的代碼   java中的MVC = JavaBean + JSP + Servlet  MVC是一個分類的方法，一種設計模式；而實作WEB專案中我們的路徑劃分、包的管理通常是使用三層架構  三層架構  基於業務邏輯來分層
 表現層(Presentation Layer)  User Show Layer，USL、Client Application，用戶層、UI層
  表現層前台:  介面顯示、與用戶互動 JSP、JS、HTML…Web前端技術(通常位於WebContent資料夾)   表現層後台(也有人稱為控制層，但嚴格意義上不能這樣說):  用於控制頁面跳轉、調用業務邏輯層 Servlet、SpringMVC的Controller、Struts2…(xxx.servlet包中)    業務邏輯層(Business Logic Layer)  簡稱BLL或Application Server，AP層、應用層、manage
  承上啟下，完成業務邏輯、事務的操作也是在這 工程路徑、包名例如:  com.</description>
    </item>
    
    <item>
      <title>XML、Servlet</title>
      <link>https://yoziming.github.io/post/220103-agg-javaweb-03/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220103-agg-javaweb-03/</guid>
      <description>XML  Extensible Markup Language 可延伸標記式語言 常用於:  保存資料 作為配置文件 傳輸(但現在json為主)    特性  格式:&amp;lt;標籤名&amp;gt;夾住的值&amp;lt;/標籤名&amp;gt;  或單標籤內用空格分開屬性&amp;lt;book id=&amp;quot;SN65421&amp;quot; name=&amp;quot;小王子&amp;quot;/&amp;gt;   標籤名不可以數字或符號開始 標籤名不可包含空格 所有標籤都必須關閉 大小寫敏感 必須正確嵌套，例如a元素在b元素中打開，也必須在b元素中關閉 屬性值必須用&amp;quot;&amp;quot;引號包住  範例 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!-- xml 聲明 version 是版本的意思 encoding 是編碼 --&amp;gt; &amp;lt;books&amp;gt; &amp;lt;!-- 這是 xml 注釋 --&amp;gt; &amp;lt;book id=&amp;#34;SN123123413241&amp;#34;&amp;gt; &amp;lt;!-- book 標籤描述一本圖書 id 屬性描述 的是圖書 的編號 --&amp;gt; &amp;lt;name&amp;gt;java 程式設計思想&amp;lt;/name&amp;gt; &amp;lt;!-- name 標籤描述 的是圖書 的資訊 --&amp;gt; &amp;lt;author&amp;gt;華仔&amp;lt;/author&amp;gt; &amp;lt;!-- author 單詞是作者的意思 ，描述圖書作者 --&amp;gt; &amp;lt;price&amp;gt;9.</description>
    </item>
    
    <item>
      <title>jQuery</title>
      <link>https://yoziming.github.io/post/220102-agg-javaweb-02/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220102-agg-javaweb-02/</guid>
      <description>jQuery  輔助JavaScript的類庫
  用於簡化HTML與JavaScript之間的操作  引用  下載jquery-1.7.2.js，放到指定位置，通常在static/script/之下  &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html; charset=UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Insert title here&amp;lt;/title&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;/static/script/jquery-1.7.2.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; $(function () { // 表示頁面載入完成 之後，相當 window.onload = function () {}  var $btnObj = $(&amp;#34;#btnId&amp;#34;); // 表示按 id 查詢標籤物件  $btnObj.click(function () { // 綁定按一下事件  alert(&amp;#34;jQuery 的按一下事件&amp;#34;); }); }); &amp;lt;/script&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;button id=&amp;#34;btnId&amp;#34;&amp;gt;SayHello&amp;lt;/button&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 核心函數$ $ 是jQuery 的核心函數，能完成jQuery 的很多功能。$()就是調用$這個函數
 傳入參數為 [ 函數 ] 時:表示頁面載入完成之後，相當於window.</description>
    </item>
    
    <item>
      <title>Web前端:HTML、CSS與JavaScript基礎知識</title>
      <link>https://yoziming.github.io/post/220101-agg-javaweb-01/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220101-agg-javaweb-01/</guid>
      <description>本筆記基於2020-02-26 尚硅谷最新版JavaWeb全套教程
https://www.bilibili.com/video/BV1Y7411K7zz
 Web前端三劍客  HTML(超文本標記語言):負責網頁的結構 CSS(層疊樣式表):負責網頁的樣式(比如顏色/字體/邊框等屬性設置) JavaScript(腳本語言):負責網頁的行為(點擊/輸入輸出/滾動等等)   他前端的課程幾乎都是過眼了解的程度而已，我也就沒做詳盡的筆記了
 HTML  用標籤表示語法，有幾點特性:  標籤無視大小寫 標籤要正確閉合 標籤不可嵌套使用 標籤中的屬性必須有值，屬性值必須加引號    &amp;lt;!-- 註釋 --&amp;gt; &amp;lt;標籤名&amp;gt;封裝的數據&amp;lt;/標籤名&amp;gt; &amp;lt;!--屬性必須有值，屬性值必須加引號 --&amp;gt; 正確：&amp;lt;font color=&amp;#34;blue&amp;#34;&amp;gt;Hello world&amp;lt;/font&amp;gt; &amp;lt;!--標籤的演示 div 標籤 預設獨佔一行 span 標籤 它的長度是封裝資料的長度 p 段落標籤 預設會在段落的上方或下方各空出一行來（如果已有就不再空） --&amp;gt; &amp;lt;div&amp;gt;div 標籤 1&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;div 標籤 2&amp;lt;/div&amp;gt; &amp;lt;span&amp;gt;span 標籤 1&amp;lt;/span&amp;gt; &amp;lt;span&amp;gt;span 標籤 2&amp;lt;/span&amp;gt; &amp;lt;p&amp;gt;p 段落標籤 1&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;p 段落標籤 2&amp;lt;/p&amp;gt; &amp;lt;!-- 圖片 --&amp;gt; &amp;lt;img src=&amp;#34;1.jpg&amp;#34; width=&amp;#34;200&amp;#34; height=&amp;#34;260&amp;#34; border=&amp;#34;1&amp;#34; alt=&amp;#34;無法顯示圖片時顯示的文字&amp;#34;/&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>事務、DAO、連接池、Dbutils工具包</title>
      <link>https://yoziming.github.io/post/211230-agg-jdbc-02/</link>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211230-agg-jdbc-02/</guid>
      <description>事務Transaction  Transaction，台灣:交易，中國:事務
   在MySQL中只有使用了Innodb資料庫引擎的資料庫或表才支援事務
  事務 = 一組操作資料庫的動作集合，使資料從一種狀態變換為另一種狀態
  一個事務保證一組SQL語句要嘛全部執行，要嘛全部不執行
 要嘛提交Commit，要嘛回滾Rollback    數據一旦提交，就不可回滾
  那些操作會自動提交?
 DDL(刪庫建表之類的操作):必定自動提交 DML(操作某筆資料):預設會自動提交，但可以set autocommit = false 關閉連接時，預設也會自動提交    事務的相關方法  由java.sql.Connection包提供，顯然這些方法都是由Connection物件調用
 public void setAutoCommit(boolean) public boolean getAutoCommit() public void commit() public void rollback() 事務實作流程  關閉自動提交 執行事務語句，可能有多行 commit()手動提交，並還原自動提交設定 於catch (Exception e) 區塊使用rollback()回滾  // 範例 public String delete(String id) { String ID = id; db = new getConnection(); Connection con = db.</description>
    </item>
    
    <item>
      <title>JDBC基礎、PreparedStatement增刪改查</title>
      <link>https://yoziming.github.io/post/211229-agg-jdbc-01/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211229-agg-jdbc-01/</guid>
      <description>本筆記基於2019年9月的 尚硅谷JDBC核心技术(新版jdbc)
https://www.bilibili.com/video/BV1eJ411c7rf
 JDBC  JDBC，全稱Java Database Connectivity 為java用來統一管理連接資料庫的接口 JDBC挺短的，且為JavaWeb的前置知識，我就歸到同一個筆記分類了  教學用資料庫  他官方的有編碼問題，這個是修正版的，用工具自己導入
PS1.DataGrip的導入常常出問題，針對導入最好用別款GUI
PS2.少了一個BLOB學到那邊自己插入即可
 -- -------------------------------------------------------- -- 主机: 127.0.0.1 -- 服务器版本: 8.0.22 - MySQL Community Server - GPL -- 服务器操作系统: Win64 -- HeidiSQL 版本: 11.1.0.6116 -- -------------------------------------------------------- /*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET NAMES utf8 */;/*!50503 SET NAMES utf8mb4 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&amp;#39;NO_AUTO_VALUE_ON_ZERO&amp;#39; */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;-- 导出 jdbc_learn 的数据库结构 DROPDATABASEIFEXISTS`jdbc_learn`;CREATEDATABASEIFNOTEXISTS`jdbc_learn`/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci *//*!</description>
    </item>
    
  </channel>
</rss>
