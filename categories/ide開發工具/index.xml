<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IDE開發工具 on 柚子茶室</title>
    <link>https://yoziming.github.io/categories/ide%E9%96%8B%E7%99%BC%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in IDE開發工具 on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Yoziming</copyright>
    <lastBuildDate>Sat, 26 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yoziming.github.io/categories/ide%E9%96%8B%E7%99%BC%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows 11與WSL</title>
      <link>https://yoziming.github.io/post/220226-win11-wsl2/</link>
      <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220226-win11-wsl2/</guid>
      <description>Win 11  其實單純就是手癢，順便記錄一下重灌後的事項  chocolatey  Windows 上的套件管理工具，類似apt跟brew 安裝使用powershell執行:  Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https://community.chocolatey.org/install.ps1&amp;#39;))  (非必要) 修改安裝路徑，預設是在  C:\ProgramData\chocolatey  他其實是一個系統環境變數，所以也可以手動修改，例如  setx.exe ChocolateyInstall D:\Chocolatey /M  安裝常用的工具，可以自己做批次腳本執行  -y的意思是自動確認，可以全自動安裝    choco install chocolateygui -y choco install -y notepadplusplus choco install qdir -y choco install -y git choco install -y hugo choco install typora --version=0.11.18.20211125 -y choco pin add --name=&amp;#34;&amp;#39;typora&amp;#39;&amp;#34; --version=&amp;#34;&amp;#39;0.</description>
    </item>
    
    <item>
      <title>從IDEA轉移至Eclipse</title>
      <link>https://yoziming.github.io/post/220224-idea-to-eclipse/</link>
      <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220224-idea-to-eclipse/</guid>
      <description>背景  進了公司才發現沒有買IDEA，既然下定決心要做長期的，只能一切重來了  下載  直接下載Spring Tools 4 for Eclipse: https://spring.io/tools  這玩意就是包好的Eclipse，然後針對spring有優化 下載回來會是一個.jar，執行它就會解壓縮成資料夾，點進去裡面SpringToolSuite4.exe就是開啟了    JDK設定  這個.ini裡面的vm是for Eclipse本身(Eclipse是用java寫的)，不要去改它，就用它自帶的就好，否則太低版本會啟動不了   專案裡面用的jdk版本那是另一回事，可以按alt+enter查看專案設定   設定從這邊進去   在這裡選定預設的JDK版本  插件  這邊可以安裝插件，有些插件還要選安裝範圍、還要按同意、總之挺麻煩的   透過這個內建的瀏覽器去開市集、安裝、移除插件都慢得離譜(好像是因為每次打開他都會下載整個清單) 還不如直接用瀏覽器開啟網站 https://marketplace.eclipse.org/  用拖曳的就可以安裝，把排名靠最前的都裝一裝基本不會錯    DevStyle  提供好看的主題，並且可以改成自己習慣的配色  編碼  需要手動設定成UTF-8   還有其他各種奇奇怪怪的地方也都要改，以及XML等等  改字型  超麻煩，需要一個一個點開然後修改  console  這個不改，執行前就會一直跳出警告，既然他說buffer最好要1000000，那一開始何必設80000，真的是有病  自動補完  Eclipse預設只對.起反應 搜尋Content Assist，手動把所有字都加進去   另外IDEA中自動補完的Tab在這裡變成alt+/，如果延遲設成0就不用按，直接用方向鍵上下選，然後enter套用(蠻難用的，不像IDEA一個Tab走天下) 但是這樣會出事，因為它很蠢的連按空格跟;都會自動選用補完的第一順位，導致超級難用，需要根據個人習慣的速度，像我設定延遲500毫秒  改檔案瀏覽器  路徑改成樹狀顯示(預設是Flat，這個相當於.</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA File scope</title>
      <link>https://yoziming.github.io/post/220208-idea-file-scpoe/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220208-idea-file-scpoe/</guid>
      <description>IDEA篩選檔案  IDEA預設的檔案瀏覽器真的很不優，我以前都很蠢的用搜尋然後一個一個翻。原來他還是能做到篩選的，就是步驟挺麻煩 首先要去scope裡面自己設定規則，還可以設定顏色之類的，參考官方: https://www.jetbrains.com/help/phpstorm/configuring-scopes-and-file-colors.html#predefined-scopes-list 一樣記得要設在&amp;quot;用於每個新專案&amp;quot;的設定，否則只會在當前專案生效 例如只想顯示設定檔，可以設定規則:  file:*.properties||file:*.yml||file:*.yaml  回到檔案瀏覽區，最好勾上compact，省得太多層資料夾會把列表拉得很長   切換到自定的scope規則，然後全部展開，就可以快速切換許多子模組的設定了   其他實用的篩選還有pom.xml、*config等等，可以自己發揮  </description>
    </item>
    
    <item>
      <title>Maven微服務多模組管理</title>
      <link>https://yoziming.github.io/post/220209-maven-parent-module/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220209-maven-parent-module/</guid>
      <description>Maven多模組管理  groupId、artifactId、version稱為gav，三個必要項組成座標  &amp;lt;project&amp;gt; ... &amp;lt;dependencies&amp;gt;  &amp;lt;dependency&amp;gt;  &amp;lt;groupId&amp;gt;實際項目&amp;lt;/groupId&amp;gt; 　&amp;lt;artifactId&amp;gt;模塊&amp;lt;/artifactId&amp;gt; 　&amp;lt;version&amp;gt;版本&amp;lt;/version&amp;gt; 　&amp;lt;type&amp;gt;依賴類型&amp;lt;/type&amp;gt; 　&amp;lt;scope&amp;gt;依賴範圍&amp;lt;/scope&amp;gt; 　&amp;lt;optional&amp;gt;依賴是否可選&amp;lt;/optional&amp;gt; 　&amp;lt;!—主要用於排除傳遞性依賴--&amp;gt; 　&amp;lt;exclusions&amp;gt; 　&amp;lt;exclusion&amp;gt; 　&amp;lt;groupId&amp;gt;…&amp;lt;/groupId&amp;gt; 　&amp;lt;artifactId&amp;gt;…&amp;lt;/artifactId&amp;gt; 　&amp;lt;/exclusion&amp;gt; 　&amp;lt;/exclusions&amp;gt; 　&amp;lt;/dependency&amp;gt; &amp;lt;dependencies&amp;gt; ... &amp;lt;/project&amp;gt;   compile，預設的依賴範圍，表示依賴需要參與當前項目的編譯，後續的測試、運行週期也參與其中，是比較強的依賴。
  test，表示依賴僅僅參與測試相關的工作，包括測試代碼的編譯和運行。比較典型的如 junit。
  runntime，表示依賴無需參與到項目的編譯，不過後期的測試和運行需要其參與其中。
  provided，表示打包的時候可以不用包進去，別的容器會提供。和 compile 相當，但是在打包階段做了排除的動作。
  system，從參與程度上來説，和 provided 類似，但不通過 Maven 倉庫解析，可能會造成構建的不可移植，要謹慎使用。
   部分引用自 沉默王二 鏈接：https://juejin.cn/post/7033652977973854244
 父項目的作用  父項目繼承spring框架  繼承spring-boot-starter-parent同時也會繼承properties例如java.</description>
    </item>
    
    <item>
      <title>整理常用的git操作</title>
      <link>https://yoziming.github.io/post/220205-git-common-use/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220205-git-common-use/</guid>
      <description>整理常用的git操作  這東西沒在用的時候硬學也記不住，用到的時候又總是順序不太對，這樣那樣的報錯，乾脆寫一篇筆記統一整理一下 首先git是以&amp;quot;資料夾&amp;quot;為單位進行版本控制(了解後感覺理所當然，但我一開始沒弄明白這點只會複製貼上教學的指令，就一直懵懵懂懂的) 我們幹的事是把&amp;quot;本地這個資料夾&amp;quot;連結到github上的遠端倉庫，針對某個分支進行某些操作  常用的git操作  所謂&amp;lt;倉庫網址&amp;gt;就是在github網站某倉庫，點右上角綠色的code顯示的那串，例如  https://github.com/yoziming/javamall.git
 下載遠端倉庫到本地，會得到一個資料夾  git clone https://github.com/yoziming/javamall.git  本地連到遠端倉庫  用於本地已經建了一個資料夾的狀況 origin是用來操作的別名，因為如果是載下來的倉庫預設就叫origin    git remote add origin &amp;lt;倉庫網址&amp;gt;  查看當前資料夾控制的遠端  git remote -v  切換分支(需要該分支確實存在)  git checkout &amp;lt;分支&amp;gt;  建立新的 branch 並切到新的 branch  git checkout -b &amp;lt;新分支名稱&amp;gt;  添加全部檔案  git add .  加上註解  使用git commit -e添加多行    git commit -m &amp;#34;一行註解&amp;#34;  推送到遠端  origin是別名    git push -u origin &amp;lt;分支名&amp;gt;  修改連線的倉庫網址  git remote set-url origin https://github.</description>
    </item>
    
    <item>
      <title>DockerDekstop掛載相關設定</title>
      <link>https://yoziming.github.io/post/220125-wsl2-docker/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220125-wsl2-docker/</guid>
      <description>Docker Dekstop   Docker Dekstop本身可以在Windows 上執行(基於wsl)，簡單使用沒問題，然而需要匯出匯入、掛載檔案就比較麻煩，
  wsl2可以透過加入一個中間橋(例如一個ubuntu)掛載雙方來達成操作檔案的目的
  PS.一般教學會用到Windows市集安裝，但我個人特別不喜歡Windows內建的那些東西，啥更新、市集全都在安裝後就砍光光了，所以只能全手動
  必要環境 Windows 10 64-bit：Home or Pro 2004 (build 19041) or higher, or Enterprise or Education 1909 (build 18363) or higher.
啟動wsl與hyper-V dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 安裝ubuntu   去微軟官方拿，我是選ubuntu-18.04版本
  手動下載網址: https://aka.ms/wsl-ubuntu-1804
  下載完直接改副檔名成.zip之類的，解壓縮
 注意好像必須在C槽且有管理員權限     執行這個一臉欠執行的.exe就會開始安裝，並且要求輸入建立用戶與密碼，記住帳號密碼  # 查看剛剛點ubuntu1804.exe裝的是否成功 wsl -l -v # 將 WSL 2 設定為預設版本 wsl --set-default-version 2 # 設定 WSL 預設 的Linux wsl --set-default Ubuntu-18.</description>
    </item>
    
    <item>
      <title>node版本對應、NVS快速切換</title>
      <link>https://yoziming.github.io/post/220121-npm-sass-webpack/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220121-npm-sass-webpack/</guid>
      <description>node版本一環套一環  webpack中有sass-loader，用途是載入 Sass/SCSS 檔並將他們編譯為 CSS 這玩意版本太高會有相容問題，目前大部分用的是7開頭，用最新的容易出錯  npm install sass-loader@7.3.1 --save-dev  然後sass-loader又是基於node-sass，也要求版本，比如七版sass-loader對應4版以上的node-sass  npm install node-sass@4.14.1 --save-dev   然後node-sass又又需要對應Node JS版本，關係如下:
  官網: https://github.com/sass/node-sass
  Node JS版本   官網: https://nodejs.org/en/download/releases/
  目前2022年1月，14或12版是相對妥的，選擇使用LTS版本
 Node.js 16.13.2	Gallium Node.js 14.18.3	Fermium Node.js 12.22.9	Erbium    然而切換Node JS版本很麻煩，所以又有人做了工具
  Node Version Switcher  官網: https://github.com/jasongin/nvs  # 安裝(有choco，沒的話自己手動載) choco install nvs # 安裝node nvs add 版本號 # 移除 nvs rm 版本號  使用超簡單，輸入nvs就會跳出互動介面   方向鍵選擇 + Enter就切換好了 但是注意每次新開一個CMD要npm之前要先nvs指定使用的版本，否則會找不到npm的bin報錯無法辨識 &#39;npm&#39; 詞彙是否為 Cmdlet、函數 詳細可以參考這篇 https://www.</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA Live Templates</title>
      <link>https://yoziming.github.io/post/211203-idea-live-templates/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211203-idea-live-templates/</guid>
      <description>IntelliJ IDEA Live Templates  盤點IDEA中Tab的實用招式，再配上alt+insert就能橫著走了
 基本聲明 psvm或main ▶ main 方法  st ▶ String  prsf ▶ private static final  psf ▶ public static final  psfi ▶ public static final int  psfs ▶ public static final String 創立物件 類名.new ▶ new 類名()  new 類名().var或.val ▶ 類 物件名 = new 類();  new 類名().field ▶ 在方法外聲明一個成員變量，並在這裡初始化一個 print sout ▶ System.out.println();  souf ▶ System.out.printf(&amp;#34;&amp;#34;);  &amp;#34;say something&amp;#34;.</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA設定與常用快捷鍵</title>
      <link>https://yoziming.github.io/post/211117-idea-shortkey/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211117-idea-shortkey/</guid>
      <description>IDEA基礎設定   安裝的根目錄，舉例&amp;hellip;\IntelliJ IDEA 2021.2.3\bin\idea64.exe.vmoptions
 編輯這個idea64.exe.vmoptions，改成-Xmx1024m -Xms2048m    ctrl+alt+s開啟設定 -&amp;gt; plugins插件 -&amp;gt; 搜尋chinese -&amp;gt; 安裝重啟 -&amp;gt; 中文化
  plugins插件 -&amp;gt; 搜尋save actions-&amp;gt; 安裝重啟 -&amp;gt; 存檔時自動格式化
  外觀-使用自定義字體打勾-Sarasa mono&amp;hellip;，大小改14
  更紗黑體Sarasa-Gothic
 https://github.com/be5invis/Sarasa-Gothic 特性:融合Iosevka(程式碼常用的等寬字型)跟Source Han Sans(思源黑)，有等距、繁簡中日韓不缺字，簡直完美    編譯器-字體-一樣改，大小我是設18、行高1.1
  插件 常用快捷鍵 視窗  Close All Tabs : alt + w Terminal : ctrl + alt + 0  選取  ctrl + E 最近使用的檔案列表 选中下一个相同内容的快捷键(vs code中的Ctrl+D)：Alt + J 選中匹配的大括號ctrl+] 或 ctrl+[ 快速移動到警告處(黃標或紅標)  以「行」為單位  複製 : ctrl + D 移動 : ctrl + shift + ↑/↓ 註解 : ctrl + / 刪除 : ctrl+x(其實是剪下)  以「區塊」為單位  擴增選取 : ctrl + W 遞減選取 : ctrl + shift + W 更改大小寫 : ctrl + shift + U  自動功能 :  自動補全 : alt + enter 自動產生 : alt + Ins 自動排版 : ctrl + alt + L  其他  顯示形參列表:ctrl+p shift + shift 全域搜索 查找當前文件結構(有哪些方法、屬性):ctrl+F12 ctrl+alt+shift+n 找方法 Ctrl+H查看當前接口或抽象的子類 全部折疊ctrl + shift + -減號  個人設定 快捷鍵 新專案設定  新專案設定，有時候覺得奇怪不是設定過怎又跑掉，原因是在這   比較重要的是這個properties編碼跟save Actions插件的自動格式化、導包等等設定  其他舒適設定  限制開啟視窗數量:File-&amp;gt;Settings-&amp;gt;Editor-&amp;gt;General-&amp;gt;Editor Tab-&amp;gt;Tab limit   過濾顯示檔案  *.</description>
    </item>
    
    <item>
      <title>修改css或js後瀏覽器快取不更新問題</title>
      <link>https://yoziming.github.io/post/211017-explorer-cache-problems/</link>
      <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211017-explorer-cache-problems/</guid>
      <description>修改css或js後瀏覽器快取不更新問題  當初我真的是被這個整到懷疑人生
 解決方式一：
​ 使用者按Ctrl + F5強制重新整理頁面或者手動清空了瀏覽器的快取。此時瀏覽器會重新向伺服器獲取CSS和JS檔案,新的檔案便會生效。
解決方式二：
​ 但是使用者量過大的時候總不能讓每個使用者一一清理快取吧，於是便從程式碼的角度著手解決這個問題。在js後面新增版本號，讓瀏覽器把這個JS檔案當做新的檔案重新向伺服器獲取資源。
加版本號前：
 &amp;lt;script type=&amp;#34;text/javascript&amp;#34; th:src=&amp;#34;@{/js/test/index.js}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  加版本號後：
 &amp;lt;script type=&amp;#34;text/javascript&amp;#34; th:src=&amp;#34;@{/js/test/index.js?v=1.0}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;  實際上這種方法在web也被很廣泛的應用，有時候開網頁看到網址後面一串?t=65412378946之類的，原來就是用時間產生的亂數，專門用來防快取
參考 https://www.itread01.com/content/1548610940.html</description>
    </item>
    
    <item>
      <title>Docker &amp; Hyper-V占用port問題</title>
      <link>https://yoziming.github.io/post/211015-docker-hyper-v-port-problem/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211015-docker-hyper-v-port-problem/</guid>
      <description>Docker &amp;amp; Hyper-V占用port問題 在window下用docker desktop有時候遇上port被莫名佔用 用指令netstat -ano | findstr xxx查詢xxx埠被誰佔用卻又顯示沒有
原來是因為在window下用docker需要依賴hyper-v技術， 而這個hyper-v每次都會隨機搶走一部分tcp埠，使用命令可以得知應避開的範圍:
# powershell / cmd netsh interface ipv4 show excludedportrange protocol=tcp 如果避不開就手動叫Hyper-V讓路   關閉hyper-v
# powershell / cmd dism.exe /Online /Disable-Feature:Microsoft-Hyper-V   配置ipv4動態埠 / 或者配置需要的埠不被佔用
# powershell / cmd 管理員許可權 # start 起始埠 num 表示可用埠數 按自己的需求來 netsh int ipv4 set dynamicport tcp start=30000 num=16383 // 叫他去用30000以後的阜  # 排除ipv4動態埠佔用 startport 起始埠 numberofports 埠數 netsh int ipv4 add excludedportrange protocol=tcp startport=50051 numberofports=1 // 或是指定端口50051為要讓路的   重新啟動hyper-v</description>
    </item>
    
    <item>
      <title>Linux常用操作、wsl2相關</title>
      <link>https://yoziming.github.io/post/211010-linux-common-operations/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211010-linux-common-operations/</guid>
      <description>Linux常用操作  ls：顯示檔或目錄資訊 mkdir：目前的目錄下創建一個空目錄 rmdir：要求目錄為空 touch：生成一個空檔或更改檔的時間 cp：複製檔或目錄 mv：移動檔或目錄、檔或目錄改名 rm：刪除檔或目錄 ln：建立連結檔 find：查找文件 cd 移動路徑 “.” 表示 目前的目錄 “..” 表示 上一級目錄 “-” 表示 上一次工作目錄 “~” 表示 用戶主目錄 sudo su root 取得su權限  // 解壓縮XX檔案到/usr/local sudo tar -C /usr/local -xzvf go1.17.1.linux-amd64.tar.gz // 文字編輯器 sudo gedit /home/yoziming/.config/go/env // 檔案總管 sudo nautilus // 啟用go mod go env -w GO111MODULE=on wsl2相關  優文參考: https://blog.csdn.net/qq_38856939/article/details/116528514  使用xfce4圖形介面  windows端  下載 X Server 例如 https://sourceforge.net/projects/vcxsrv/ 安裝後打開XLaunch 第一步 display number 預設可能是-1，改成0 下一步 setart no client 預設不用改 第三步 勾選 no access control 即完成監聽，等待linux來連線 查看IP，使用指令 ipconfig 注意看的是這個: 乙太網路卡 vEthernet (WSL): IPv4 位址 .</description>
    </item>
    
    <item>
      <title>Docker常用指令與操作</title>
      <link>https://yoziming.github.io/post/210930-docker-common-operations/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/210930-docker-common-operations/</guid>
      <description>Docker常用操作  官方 https://docs.docker.com/engine/reference/run/
 容器運行前  抓映像  docker pull xxx 容器運行中  檢視運行中的容器  docker ps  停止容器  啟動換成 start 重啟換成 restart 強殺換成 kill    docker stop 容器名或ID  批次全部重啟  這個在windows docker也有效，特別適合自己練習專案用 awk &#39;{ print $1}&#39;那種在windows就不行    docker restart $(docker ps -a -q)  刪除容器  docker rm -f 容器名或ID  檢視運行狀態(CPU、記憶體、I/O占用等等)  docker stats -a  顯示運行日誌  docker logs 容器名或ID  查看詳情  docker inspect 容器名或ID  更新運行參數  docker update --restart=always 容器名或ID  進入 Container  -i ：即使沒有附加也保持STDIN 打開 -t ：分配一個偽終端    docker exec -it &amp;lt;container_id&amp;gt; /bin/bash 容器內   就是進到/bin/sh之下，有個$符號的狀態</description>
    </item>
    
    <item>
      <title>Docker啟用MinIO</title>
      <link>https://yoziming.github.io/post/210929-docker-minio/</link>
      <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/210929-docker-minio/</guid>
      <description>Docker啟用MinIO儲存 執行 Image docker run -d --name minio -e &amp;#34;MINIO_ROOT_USER=root&amp;#34; -e &amp;#34;MINIO_ROOT_PASSWORD=root1234&amp;#34; -p 9000:9000 -p 9001:9001 minio/minio server /data --console-address &amp;#34;:9001&amp;#34;  --name minio，命名container名稱為minio。 -v /data/minio:/data/minio該命令將主機 /data/minio 目錄對映到容器中的 /data/minio 目錄中 MinIO 還提供了圖形管理介面，在瀏覽器輸入 ip:9001即可檢視 不管是圖形介面操作，還是客戶端操作，預設賬號密碼都為 minioadmin -e環境變數，這裡用了自定義賬號密碼，賬號不能小於 3 字元，密碼不能小於 8 字元  Go初始化 導入github.com/minio/minio-go/v7，注意這個後面的v7，在自動引包時可能會漏掉，導致使用到舊版的同名函數而報錯
func InitMinio() { 	ctx := context.Background() 	endpoint := &amp;#34;localhost:9000&amp;#34; 	accessKeyID := &amp;#34;root&amp;#34; 	secretAccessKey := &amp;#34;root1234&amp;#34; 	useSSL := false  	// Initialize minio client object.</description>
    </item>
    
  </channel>
</rss>
