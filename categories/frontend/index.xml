<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frontend on 柚子茶室</title>
    <link>https://yoziming.github.io/categories/frontend/</link>
    <description>Recent content in Frontend on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Yoziming</copyright>
    <lastBuildDate>Thu, 15 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yoziming.github.io/categories/frontend/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MJPEG轉canvas播放</title>
      <link>https://yoziming.github.io/post/220915-mjpeg-to-canvas/</link>
      <pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220915-mjpeg-to-canvas/</guid>
      <description>背景 IPCAM的影像要能在web上播放，但又是用無線網路訊號非常不穩，就有很多問題 問題 來自攝影機經過NVR的stream輸出是MJPEG格式，本來直接一個&amp;lt;img src=&amp;quot;url&amp;quot;就可以播放 但是用無線網路不穩定會掉包，就會導致net::ERR_INCOMPLETE_CHUNKED_ENCODING 200 (OK) 影像畫面會直接變一片白，需要重新request才可以 這種錯誤我試過onerror等方法都catch不到 解決 最後找到一個好一點的方法，就是用canvas轉一層。這樣做畫面會維持在最後一張，發生問題就重新request 效果變成影像源頭掛掉時，畫面停住(本來是直接一片白)，重新連上後再繼續更新 看畫面上時間可能是到了10:02卡住不動，之後跳成10:08又繼續播放 CODE url是影像來源，例如axxon的NVR系統是host&amp;hellip;/DeviceIpint.158/SourceEndpoint.video:0:1 var optstr = &amp;#34;&amp;lt;canvas id=&amp;#39;movie_canvas&amp;#39; width=&amp;#39;640px&amp;#39; height=&amp;#39;360px&amp;#39;&amp;gt;&amp;lt;/canvas&amp;gt;&amp;#34;; $(&amp;#34;#movie&amp;#34;).html(optstr); var ctx = document.getElementById(&amp;#39;movie_canvas&amp;#39;).getContext(&amp;#39;2d&amp;#39;); ctx.scale(0.33, 0.33) var img = new Image(); img.onload = function() { ctx.drawImage(img, 0, 0); }; var imgRefresher = setInterval(function() { img.src = url; }, 100) var movieDg = $(&amp;#34;#movie&amp;#34;).dialog({ modal: true, width: 690, height: 430, title: &amp;#34;即時影像&amp;#34;, close: function() { clearInterval(imgRefresher); $(&amp;#34;#movie_canvas&amp;#34;).remove(); window.</description>
    </item>
    
    <item>
      <title>DataTables實用code合籍</title>
      <link>https://yoziming.github.io/post/220825-datatables/</link>
      <pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220825-datatables/</guid>
      <description>DataTables小技巧 DataTables是前端非常好用的表格套件
https://datatables.net/manual/
自動序號 { width: &amp;#34;2%&amp;#34;, data: null, defaultContent: &amp;#39;&amp;#39;, orderable: false, title: &amp;#34;序號&amp;#34;, render: function(data, type, full, meta) { return meta.row + 1 + meta.settings._iDisplayStart; } } i18n中文化 搭配官方的 : http://cdn.datatables.net/plug-ins/1.12.1/i18n/
language: { url: &amp;#34;/scripts/DataTables-1.12.1/zh-HANT.json&amp;#34;, infoFiltered: &amp;#34;&amp;#34;, }, 防止預設的排序 order : []
格式化時間 { data: &amp;#34;time&amp;#34;, title: &amp;#34;時間&amp;#34;, render: function(data) { return data ? dayjs(data).format(&amp;#39;YYYY-MM-DD&amp;#39;) : &amp;#34;&amp;#34;; }, } 綁定特殊動作 比如說要設定某個onclick事件並傳入參數，如果參數很單純(例如純數字的id)那可以簡單的用render，例如: 這樣是把參數一起寫死到html的元素中了，按F12就可以直接看到 render: function(data) { return &amp;#39;&amp;lt;i class=&amp;#34;fa-solid fa-trash-can fa-2xl&amp;#34; onclick=&amp;#34;deleteById(&amp;#39; + data + &amp;#39;)&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;; }, 但如果要傳入的東西比較複雜(例如是一個多層的json object)，那用createdCell再用JQuery的.</description>
    </item>
    
    <item>
      <title>前端js到後端Java的時間格式接收轉換</title>
      <link>https://yoziming.github.io/post/220730-front-back-time-format/</link>
      <pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220730-front-back-time-format/</guid>
      <description>前後端傳送、接收時間格式 java的原始Date類是iso-8601的格式(2004-05-03T17:30:08Z)，UTC時間。或是接收Long的時間戳，像這樣1662084454350的 前端，用dayjs包起來(預設能夠解析local的2004-05-03，轉換成UTC) &amp;#34;startTime&amp;#34;: dayjs($(&amp;#34;#startDate&amp;#34;).val()), // 轉成UTC時間 後端可以註解時間的pattern在實體類 @JsonFormat(locale = &amp;#34;zh&amp;#34;, timezone = &amp;#34;GMT+8&amp;#34;, pattern = &amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;) @DateTimeFormat(pattern = &amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;) Date startTime; 或是加在controller上
@GetMapping(&amp;#34;/test&amp;#34;) public ResponseResource test( @RequestParam @DateTimeFormat(pattern = &amp;#34;yyyy-MM-dd&amp;#34;) Date startTime, @RequestParam @DateTimeFormat(pattern = &amp;#34;yyyy-MM-dd&amp;#34;) Date endTime) {...} 同場加映: 超過24小時的時間格式判斷是否在區間內 背景: 用到一個設定叫&amp;quot;晚上時段&amp;quot;，例如定義了18:00-28:00表示當天晚上8點到明天凌晨4點都屬於&amp;quot;晚上時段&amp;quot;，現在要判定updateTime是不是屬於&amp;quot;晚上時段&amp;quot;內
/** * 判斷updateTime是否為設定中的&amp;#34;晚上時段&amp;#34; */ private boolean isNightTime(String nightTimeRange, Date updateTime) { String[] nightTimeRangeArr = nightTimeRange.split(&amp;#34;-&amp;#34;); // 格式：##:##-##:##，範例：20:00-28:00 LocalTime startTime = LocalTime.parse(nightTimeRangeArr[0]); LocalDateTime startDayTime = LocalDateTime.</description>
    </item>
    
    <item>
      <title>JS關於Array的includes()的坑</title>
      <link>https://yoziming.github.io/post/220620-js-array-includes/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220620-js-array-includes/</guid>
      <description>JavaScript的includes() 想知道Array中有沒有包含某元素，可能會想到indexOf()方法，然而他回傳的是index位置或-1還要判斷有點麻煩，而includes()可以直接返回true或false更直觀一點
但是要注意如果是Object組成的Array的話可能會有坑，例如我想找array中有沒有name=&amp;lsquo;李四&amp;rsquo;的元素，乍看是這樣:
let array = [{name: &amp;#39;張三&amp;#39;}, {name: &amp;#39;李四&amp;#39;}, {name: &amp;#39;王五&amp;#39;}]; console.log(array.indexOf({name: &amp;#39;李四&amp;#39;}) !== -1); // false console.log(array.includes({name: &amp;#39;李四&amp;#39;})); // false 實際上比較的是記憶體指向的位置，例如: let man = {name: &amp;#39;李四&amp;#39;}; let array = [{name: &amp;#39;張三&amp;#39;}, man, {name: &amp;#39;王五&amp;#39;}]; console.log(array.indexOf(man) !== -1); // true console.log(array.includes(man)); // true 真的要查找Object組成的Array中是否有符合某屬性的元素，可以這樣用: let array = [{name: &amp;#39;張三&amp;#39;}, {name: &amp;#39;李四&amp;#39;}, {name: &amp;#39;王五&amp;#39;}]; array.includes(array.filter(e =&amp;gt; e.name === &amp;#39;李四&amp;#39;)[0]) 另外這個indexOf()比較的底層其實是相當於&amp;rsquo;===&amp;rsquo;，也就是說包含類型，例如ajax返回的是Object的類型，比較的是String類型的話也會找不到 還有NaN也是 const arrNum = [&amp;#39;12&amp;#39;,23,45,67,8,9,NaN]; console.log(arrNum.includes(NaN)) // true console.log(arrNum.indexOf(NaN)); // -1 總之includes()更好用 JQuery的val()搭配includes()導致的血案 前情提要，我有一個allObjectList是物件組成的清單(裡面的object有數字的id)</description>
    </item>
    
    <item>
      <title>ECharts基本應用</title>
      <link>https://yoziming.github.io/post/220425-echarts/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220425-echarts/</guid>
      <description>ECharts ECharts是百度捐給Apache，開源免費的圖表套件 官方: https://echarts.apache.org/zh/index.html 同一段時間內多條折線圖 基本的用法其實官方就很多範例，比較麻煩的其實是同一段時間內多組數據、多條折線圖的做法 我當初也是花了一陣時間才搞懂怎做，最後類似這樣的效果 思路是這樣的，首先確定X軸(時間)的起點與終點，然後根據分割的最小時間單位(例如每天)，先產生出timeNodeArray 時間刻度數組，例如我從5/1~5/30號，那就會有30個節點 timeNodeArray 可以在前端生成也可以在後端，我後來統一是做在後端，類似這樣 // 建立時間節點數組(xAxis) FastDateFormat sdf = FastDateFormat.getInstance(&amp;#34;yyyy-MM-dd&amp;#34;); List&amp;lt;String&amp;gt; xAxis = new ArrayList&amp;lt;&amp;gt;(); if (param.getStatsType() == 2) { // 以&amp;#34;月&amp;#34;為基本單位建立時間節點數組 sdf = FastDateFormat.getInstance(&amp;#34;yyyy-MM&amp;#34;); int monthsBetween = monthsBetween(param.getStartTime(), param.getEndTime()); Calendar cal = Calendar.getInstance(); cal.setTime(param.getStartTime()); for (int i = 0; i &amp;lt; monthsBetween; i++) { xAxis.add(sdf.format(cal.getTime())); cal.add(Calendar.MONTH, 1); } } else if (param.getStatsType() == 3) { // 以&amp;#34;日&amp;#34;為基本單位建立時間節點數組 sdf = FastDateFormat.getInstance(&amp;#34;yyyy-MM-dd&amp;#34;); int daysBetween = daysBetween(param.</description>
    </item>
    
    <item>
      <title>快速將前端的Html table(含CSS)匯出成Excel</title>
      <link>https://yoziming.github.io/post/220420-table-to-excel/</link>
      <pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220420-table-to-excel/</guid>
      <description>table2excel 網路上功能類似的套件有不少，名字也都很接近，最後我用的是這款 https://github.com/JackGit/table2excel.js 他的優勢在於導出中文不亂碼，而且能包含CSS樣式(其他很多套件不能識別colspan跟rowspan，還需要自己手動調整半天)，而這款使用起來非常簡單，所見即所得，實現的效果類似這樣 使用 總共需要引用3個JS，table2excel.core.js、exceljs.min.js、FileSaver.min.js
我是把它打包起來放到自己的工具JS集合
document.write(&amp;#39;&amp;lt;script src=&amp;#34;scripts/table2excel/table2excel.core.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;#39;); document.write(&amp;#39;&amp;lt;script src=&amp;#34;scripts/table2excel/exceljs.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;#39;); document.write(&amp;#39;&amp;lt;script src=&amp;#34;scripts/tableExport/FileSaver.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&amp;#39;); /** * 匯出 */ function tableToExcel(tableDomId, fileName) { const table2Excel = new Table2Excel(tableDomId) // new Table2Excel(&amp;#39;table&amp;#39;) table2Excel.export(fileName, &amp;#39;xlsx&amp;#39;) // table2Excel.export(&amp;#39;my-exported-table&amp;#39;, &amp;#39;xlsx&amp;#39;) } 調用的時候就這樣，首先我會先檢查表格是否有內容，如果表格是空的就early return 沒問題就傳入表格的html Dom Id，例如#textTable就是我的表格，以及檔案名稱 /** * 匯出 */ function exportData() { if ($(&amp;#34;#helpDiv&amp;#34;).is(&amp;#39;:visible&amp;#39;)) { alertMessage(&amp;#34;&amp;lt;spring:message code=&amp;#39;ec0203.0005&amp;#39;/&amp;gt;&amp;#34;); return; } tableToExcel(&amp;#34;#textTable&amp;#34;, &amp;#34;車種分析報表(年)&amp;#34;); } </description>
    </item>
    
    <item>
      <title>node版本對應、NVS快速切換</title>
      <link>https://yoziming.github.io/post/220121-npm-sass-webpack/</link>
      <pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220121-npm-sass-webpack/</guid>
      <description>node版本一環套一環 webpack中有sass-loader，用途是載入 Sass/SCSS 檔並將他們編譯為 CSS 這玩意版本太高會有相容問題，目前大部分用的是7開頭，用最新的容易出錯 npm install sass-loader@7.3.1 --save-dev 然後sass-loader又是基於node-sass，也要求版本，比如七版sass-loader對應4版以上的node-sass npm install node-sass@4.14.1 --save-dev 然後node-sass又又需要對應Node JS版本，關係如下:
官網: https://github.com/sass/node-sass
Node JS版本 官網: https://nodejs.org/en/download/releases/
目前2022年1月，14或12版是相對妥的，選擇使用LTS版本
Node.js 16.13.2	Gallium Node.js 14.18.3	Fermium Node.js 12.22.9	Erbium 然而切換Node JS版本很麻煩，所以又有人做了工具
Node Version Switcher 官網: https://github.com/jasongin/nvs # 安裝(有choco，沒的話自己手動載) choco install nvs # 安裝node nvs add 版本號 # 移除 nvs rm 版本號 使用超簡單，輸入nvs就會跳出互動介面 方向鍵選擇 + Enter就切換好了 但是注意每次新開一個CMD要npm之前要先nvs指定使用的版本，否則會找不到npm的bin報錯無法辨識 &#39;npm&#39; 詞彙是否為 Cmdlet、函數 詳細可以參考這篇 https://www.gushiciku.cn/pl/gEiA/zh-tw 小結 Node.js 12.22.9 配 node-sass@4.14.1 如果sass安裝異常可以用淘寶鏡像 npm i node-sass --sass_binary_site=https://npm.</description>
    </item>
    
  </channel>
</rss>
