<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring線上課 on 柚子茶室</title>
    <link>https://yoziming.github.io/categories/spring%E7%B7%9A%E4%B8%8A%E8%AA%B2/</link>
    <description>Recent content in Spring線上課 on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Yoziming</copyright>
    <lastBuildDate>Tue, 18 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yoziming.github.io/categories/spring%E7%B7%9A%E4%B8%8A%E8%AA%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>醫院管理API &amp; 服務註冊與發現</title>
      <link>https://yoziming.github.io/post/220118-agg-spring-08/</link>
      <pubDate>Tue, 18 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220118-agg-spring-08/</guid>
      <description>醫院管理系統  hospital-manage醫院管理系統，是一個已經完成的模組，功能是提供給醫院方操作，讓醫院管理人員上傳醫院的科室、排班資訊等等的一個小系統 我們的項目是預約掛號平台，要實現求診者與醫院的配對 現在就要模擬實際業務，參考提供的API文檔完成對接  連接MongoDB  練習點，這邊把醫院方上傳的資料存到mongoDB
  回到service-hosp模組，先去application.properties設定資料庫連線地址 建立接口繼承MongoRepository  @Repository public interface HospitalRepository extends MongoRepository&amp;lt;Hospital, String&amp;gt; {}  建立HospitalServiceImpl接口與實現類、ApiController開始對接API  上傳醫院  控制層知識點:  request.getParameterMap()拿到的是String[]，最好轉成Obj方便後續操作 這邊用了base64編碼傳了一張圖片，&amp;quot;+&amp;ldquo;變成了&amp;rdquo; &amp;ldquo;空白要還原 之後用&amp;lt;img src=&amp;quot;data:image/png;base64,編碼串&amp;quot;/&amp;gt;可以把圖片還原顯示出來    @ApiOperation(&amp;#34;上傳醫院&amp;#34;) @PostMapping(&amp;#34;saveHospital&amp;#34;) public Result saveHospital(HttpServletRequest request) {  Map&amp;lt;String, String[]&amp;gt; parameterMap = request.getParameterMap();  // 調用工具類把map中的string[]轉成obj  Map&amp;lt;String, Object&amp;gt; stringObjectMap = HttpRequestHelper.switchMap(parameterMap);  // base64編碼傳送過程中把&amp;#34;+&amp;#34;變成了&amp;#34; &amp;#34;空白，要轉換回來  String logoData = (String) stringObjectMap.get(&amp;#34;logoData&amp;#34;);  logoData = logoData.</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://yoziming.github.io/post/220117-agg-spring-07-mongodb/</link>
      <pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220117-agg-spring-07-mongodb/</guid>
      <description>MongoDB  茫狗DB
  屬於NoSQL，非關聯式 以JSON的格式儲存資料 強處:高併發讀寫、巨量資料、擴展好 弱點:交易  前置 # 拉取鏡像 docker pull mongo:latest  # 創建和啓動容器 docker run --name mymongo -p 27017:27017 -d mongo  # 進入容器 docker exec -it mymongo /bin/bash  # 使用MongoDB客户端進行操作 mongo 庫操作 //Help查看命令提示db.help()//切換/創建資料庫(如果不存在就創建)usetest//查詢所有資料庫showdbs//刪除當前使用資料庫db.dropDatabase()//查看當前使用的資料庫db或db.getName()//顯示當前db狀態db.stats()//當前db版本db.version()//查看當前db的鏈接機器地址db.getMongo() 剛建立的db在show看不到，直到其中存了實際的資料才算數  命名限制  不能是空字符串&amp;quot;&amp;quot; 不得含有&#39; &#39;(空格)、.、$、/、\和\0 (空字符) 避免用_下畫線開頭 應全部小寫 最多64字節  名詞對應    SQL Mongo 解釋/説明     table collection 表/集合   row document 行/文檔，即一筆資料(如:張三&amp;hellip;)   column field 字段/域，欄位(如:姓名)   index index 索引   join embedded 表連接，MongoDB叫嵌入但略有不同   primary key _id 主鍵，MongoDB自動將_id當主鍵，沒指定就自動創    集合操作  相當於操作&amp;quot;表&amp;quot;</description>
    </item>
    
    <item>
      <title>字典檔模組、Spring Cache&#43;Redis、Nginx</title>
      <link>https://yoziming.github.io/post/220116-agg-spring-06/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220116-agg-spring-06/</guid>
      <description>字典檔  暫時不知道作來幹嘛，就是放一些縣市級分區的資本資料
  一樣分前、後端實現功能  顯示列表 後端-建模組  建立service-cmn子模組  複習一下過程，在父節點service右鍵新增 選maven，無原型，用-命名，選Parent，其他不動 到pom.xml中    刪除 &amp;lt;properties&amp;gt;  &amp;lt;maven.compiler.source&amp;gt;8&amp;lt;/maven.compiler.source&amp;gt;  &amp;lt;maven.compiler.target&amp;gt;8&amp;lt;/maven.compiler.target&amp;gt; &amp;lt;/properties&amp;gt;  加入描述 &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;service-cmn&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;service-cmn&amp;lt;/description&amp;gt;  把servicehosp整包複製過來，取完整新包名yoziming.ad.servicecmn，開始改造名稱 可以用重命名功能與大量取代，注意大小寫與範圍   查到mybatis plus有自動生成功能，但看了一下有點亂，用複製的挺穩也快，先將就吧 最後記得對子模組右鍵，引入框架支援  看到application.properties裡面是灰的就要想到這點  裡面連的庫名與服務端口、服務名要改       swagger的@Api註解value與tags的區別  value用於描述 tags用於分組，類的tag會覆蓋方法的    後端-寫接口 // DictController @Api(value = &amp;#34;數據字典&amp;#34;, tags = &amp;#34;數據字典&amp;#34;) @RestController @RequestMapping(&amp;#34;/admin/cmn/Dict&amp;#34;) @CrossOrigin public class DictController {  @Autowired  private DictService dictService;   @ApiOperation(&amp;#34;根據id查詢子數據列表&amp;#34;)  @GetMapping(&amp;#34;getAllChildDictById/{id}&amp;#34;)  public Result getAllChildDictById(@PathVariable Long id) {  return Result.</description>
    </item>
    
    <item>
      <title>前端:後臺模板vue-admin-template</title>
      <link>https://yoziming.github.io/post/220115-agg-spring-05/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220115-agg-spring-05/</guid>
      <description>後臺模板  非常經典的模板，被用的很廣泛
  倉庫 https://github.com/PanJiaChen/vue-admin-template 解壓縮下載來的vue-admin-template-master，取個好名字放到自己的專案路徑下 進到資料夾，執行npm install安裝依賴  依賴除錯  課件給的老板本用起來很多錯誤，需要手動排查
 // 載都沒載直接報錯停止，可能是npm版本太高，降版本: npm install npm@6.14.10 -g /* node-sass問題，報錯為 node-sass@4.14.1 postinstall: `node scripts/build.js` node-sass跟Node.js版本有很大關係，不相容的時候可以這樣 */ npm install gulp-sass --save-dev npm install node-sass@latest // 清除緩存 npm cache clean --force  都沒問題使用npm run dev就能啟動了  後來我是去它倉庫抓4.4版本的，依賴都沒報錯，也不用修改登入接口那些    開始搭建 新增側邊欄  左邊那些表在vue中對應叫router，修改/src/router/index.js綁定要顯示的項目 @/是設定好的別名，表示/src路徑之下 然後在view中添加要顯示的內容，新增檔案後輸入veu+table就能產生模板  串接api  到@/api下編輯接口，複製一個預設的來改，點進去發現第一行import request from &#39;@/utils/request&#39;是已經引用好axios了  但是他這邊request.js裡面成功代號預設是20000，如果與後端用的不同要自己修改  改這個最好用全局取代，因為還有其他比如登入也用到這個代碼，要統一改     修改下面的請求方法，與後端api的URL對接  import request from &amp;#39;@/utils/request&amp;#39;  export default {  findPageHospitalSet(current, limit, searchObj) {  return request({  // ES6特性，反引號包裹強化字串  url: `http://localhost:8201/admin/hosp/hospitalSet/findPageHospitalSet/${current}/${limit}`,  // url: `/admin/hosp/hospitalSet/findPageHospitalSet/${current}/${limit}`,  method: &amp;#39;post&amp;#39;,  // data表示使用json傳遞給後端的@RequestBody  data: searchObj  })  } }  暫時先用完整的url跳過需要關閉mock與跨域問題  修改請求端口號  留坑，暫時先用完整的url跳過需要關閉mock與跨域問題</description>
    </item>
    
    <item>
      <title>前端:ES6、Vue、Node.js</title>
      <link>https://yoziming.github.io/post/220114-agg-spring-04/</link>
      <pubDate>Fri, 14 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220114-agg-spring-04/</guid>
      <description>ES6  ECMAScript 6(簡稱ES6)，是 JavaScript 語言新一代的標準，在 2015 年 6 月正式發佈 泛指 ES5.1 版以後的新一代 JavaScript 語言標準 Ecma International:歐洲一個定標準的組織，比較出名的有CD-ROM格式  特性  與傳統javascript的差別
  聲明變量用let取代var  有作用域，在{}之間 不可重複聲明   常量用const，且須顯式聲明 快速解構、快速定義:  let user = {name: &amp;#39;Helen&amp;#39;, age: 18} let { name, age } = user console.log(name, age)  let money=100 let type=&amp;#34;cat&amp;#34; let kitty={type,money} console.log(kitty)  模板字串:用反引號包裹，其中可以換行，可以用${}，{}中可以有運算  let name = &amp;#34;lucy&amp;#34; let age = 17 let info = `My name is ${name}, I am ${age+1}` console.</description>
    </item>
    
    <item>
      <title>醫院設定模組、swagger2、統一返回/異常/日誌</title>
      <link>https://yoziming.github.io/post/220113-agg-spring-03/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220113-agg-spring-03/</guid>
      <description>搭建醫院設定模組  service-hosp，提供查詢與管理醫院設定
  首先父節點service的pom已經將model設為依賴，可以引用其下的實體類model   進到service-hosp修改pom，引用spring-boot-maven-plugin，讓maven打包的時候把依賴也包進去，包成一個可以直接執行的jar包   添加application.properties，指定服務連接的名稱、端口、資料庫連接等等  # 服務端口 server.port=8201 # 服務名 spring.application.name=service-hosp # 環境設置：dev、test、prod spring.profiles.active=dev # mysql資料庫連接 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/yygh_hosp?characterEncoding=utf-8&amp;amp;useSSL=false&amp;amp;serverTimezone=GMT%2B8 spring.datasource.username=root spring.datasource.password=1234 #返回json的全局時間格式 spring.jackson.date-format=yyyy-MM-dd HH:mm:ss spring.jackson.time-zone=GMT+8  創建當前包servicehosp，加入啟動類  package yoziming.ad.servicehosp @SpringBootApplication public class ServiceHospApplication {  public static void main(String[] args) {  SpringApplication.run(ServiceHospApplication.class, args);  } }  在yoziming.ad.servicehosp包下新增三個包controller、mapper、service，實現mybatis+的要求以執行CRUD操作  mapper下新增接口，繼承BaseMapper&amp;lt;bean&amp;gt; @Mapper public interface HospitalSetMapper extends BaseMapper&amp;lt;HospitalSet&amp;gt; { } service下新增接口，繼承IService&amp;lt;bean&amp;gt; public interface HospitalSetService extends IService&amp;lt;HospitalSet&amp;gt; { }  service下再增加impl包，放實現類，繼承ServiceImpl&amp;lt;剛創的Mapper,bean&amp;gt;，實現接口 @Service public class HospitalSetServiceImpl extends ServiceImpl&amp;lt;HospitalSetMapper, HospitalSet&amp;gt; implements HospitalSetService { } Controller綁定網址，注入service，即可開始業務邏輯 @RestController @RequestMapping(&amp;#34;/admin/hosp/hospitalSet&amp;#34;) public class HospitalSetController {   // 注入service  @Autowired  private HospitalSetService hospitalSetService;   // 查詢醫院表所有訊息  @GetMapping(&amp;#34;findAll&amp;#34;)  public List&amp;lt;HospitalSet&amp;gt; findAllHospitalSet(){  return hospitalSetService.</description>
    </item>
    
    <item>
      <title>MyBatis-Plus快速上手</title>
      <link>https://yoziming.github.io/post/220112-agg-spring-02-mybatis-plus/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220112-agg-spring-02-mybatis-plus/</guid>
      <description>MyBatis-Plus  非常好用的ORM框架
  https://baomidou.com/ 它官網目前2022年1月是最新3.5.0版本，以下基於此版本與MySQL 8演示  依賴 &amp;lt;!--mybatis-plus--&amp;gt; &amp;lt;dependency&amp;gt;  &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;  &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt;  &amp;lt;version&amp;gt;3.5.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--mysql依賴--&amp;gt; &amp;lt;dependency&amp;gt;  &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;  &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--lombok用來簡化實體類--&amp;gt; &amp;lt;dependency&amp;gt;  &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;  &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;  &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--spring-boot-starter 如果沒有要加--&amp;gt; &amp;lt;dependency&amp;gt;  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;  &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt;  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;  &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; application.properties #MySQL 8 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.url=jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8 spring.datasource.username=root spring.datasource.password=1234 #mybatis日誌，開啟後更好查看SQL操作 mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl 綁定Mapper  最傳統是在xml中一個一個綁定bean的屬性與資料庫的表格，Mapper就是他們的映射關係。
在MyBatis-Plus中只要繼承他封裝好的BaseMapper就能直接開始CRUD
 在實體類(pojo/bean/entity)的包下先建立對應的實體類(例如User.java)，用@Data標記讓Lombok快速生成，不用Lombok就自己手動生成setter那些
@Data public class User { 創建包名mapper，下面建立對應的Mapper接口，繼承BaseMapper&amp;lt;User&amp;gt;，泛型&amp;lt;&amp;gt;中放bean，並用@Repository標記(為了後面測試生成實例時不泛紅報錯)，例如:</description>
    </item>
    
    <item>
      <title>Spring框架、預約就醫項目</title>
      <link>https://yoziming.github.io/post/220112-agg-spring-01/</link>
      <pubDate>Wed, 12 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220112-agg-spring-01/</guid>
      <description>本筆記基於:尚医通项目:尚硅谷Java微服务+分布式+全栈项目【尚医通】 https://www.bilibili.com/video/BV1V5411K7rT
 Spring  輕量(檔案才幾MB)的開源框架，用以簡化開發過程 最主要目的就是降低耦合 非侵入式:框架的API不會出現在業務邏輯中，業務邏輯本身是乾淨的方便轉移 容器:用容器管理物件的生命週期與依賴關係 Spring的核心為IoC與Aop  IoC  Inversion of Control，直譯控制反轉不好理解，其實就是一種依賴關係的轉移 傳統方法例如&amp;quot;貓叫&amp;quot;，我要先造一隻貓，然後讓貓執行叫方法 現在反過來，我從&amp;quot;叫&amp;quot;出發，告訴容器要執行叫的是一隻貓，這個貓由容器來提供  如果想換成&amp;quot;狗叫&amp;quot;，我一樣是從叫出發，只是跟容器說現在要給我狗   如此一來，降低了耦合(不需要親自造貓用貓)，提高了復用性(一個叫不僅貓狗，雞豬牛羊都行) 傳統依賴關係是需要先主動造貓或造狗之後用來叫，現在反過來從&amp;quot;叫&amp;quot;讓容器造對應的物件去想叫的地方，所以說是控制反轉  DI  IoC算是一個思想，實作上Spring使用DI將其實現
   Dependency Injection，依賴注入，是IOC思想的具體實現，即由容器建立物件，並且把物件注入到要用的地方
  被依賴物件透過外部注入至依賴物件的地方使用
  就是把物件實例化交給框架管理
  本來Book book = new Book()
  現在用工廠代理+反射交給框架創建，降低耦合
    Bean管理   Spring的Bean管理，流程分為創建物件與注入屬性
  想造物件首先要有一個工廠，Spring提供有兩種:
  BeanFactory:框架內部用的接口，在獲取物件時才創物件
  ApplicationContext:是BeanFactory的子接口，在加載時就創好物件，一般用的都是這個
    AOP  Aspect-Oriented Programming 切面導向程式設計，它的目的在於將許多的共同方法抽離出來，與物件導向程式設計類似，但AOP 與OOP 不同的地方就在於，AOP 不用原方法呼叫共同方法，只需要指定執行共同方法的時機點即可。 不好理解，看專業的說明吧  https://ithelp.</description>
    </item>
    
  </channel>
</rss>
