<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>柚子茶室</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yoziming</copyright>
    <lastBuildDate>Sun, 17 Oct 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>修改css或js後瀏覽器快取不更新問題</title>
        <link>https://yoziming.github.io/post/211017-%E4%BF%AE%E6%94%B9css%E6%88%96js%E5%BE%8C%E7%80%8F%E8%A6%BD%E5%99%A8%E5%BF%AB%E5%8F%96%E4%B8%8D%E6%9B%B4%E6%96%B0%E5%95%8F%E9%A1%8C/</link>
        <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211017-%E4%BF%AE%E6%94%B9css%E6%88%96js%E5%BE%8C%E7%80%8F%E8%A6%BD%E5%99%A8%E5%BF%AB%E5%8F%96%E4%B8%8D%E6%9B%B4%E6%96%B0%E5%95%8F%E9%A1%8C/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211017-%E4%BF%AE%E6%94%B9css%E6%88%96js%E5%BE%8C%E7%80%8F%E8%A6%BD%E5%99%A8%E5%BF%AB%E5%8F%96%E4%B8%8D%E6%9B%B4%E6%96%B0%E5%95%8F%E9%A1%8C/ -&lt;h1 id=&#34;修改css或js後瀏覽器快取不更新問題&#34;&gt;修改css或js後瀏覽器快取不更新問題&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;當初我真的是被這個整到懷疑人生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解決方式一：&lt;/p&gt;
&lt;p&gt;​    使用者按Ctrl + F5強制重新整理頁面或者手動清空了瀏覽器的快取。此時瀏覽器會重新向伺服器獲取CSS和JS檔案,新的檔案便會生效。&lt;/p&gt;
&lt;p&gt;解決方式二：&lt;/p&gt;
&lt;p&gt;​    但是使用者量過大的時候總不能讓每個使用者一一清理快取吧，於是便從程式碼的角度著手解決這個問題。在js後面新增版本號，讓瀏覽器把這個JS檔案當做新的檔案重新向伺服器獲取資源。&lt;/p&gt;
&lt;p&gt;加版本號前：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;type&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;th:src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@{/js/test/index.js}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;加版本號後：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;type&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;th:src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@{/js/test/index.js?v=1.0}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;參考&#34;&gt;參考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.itread01.com/content/1548610940.html&#34;&gt;https://www.itread01.com/content/1548610940.html&lt;/a&gt;&lt;/p&gt;
- https://yoziming.github.io/post/211017-%E4%BF%AE%E6%94%B9css%E6%88%96js%E5%BE%8C%E7%80%8F%E8%A6%BD%E5%99%A8%E5%BF%AB%E5%8F%96%E4%B8%8D%E6%9B%B4%E6%96%B0%E5%95%8F%E9%A1%8C/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker &amp; Hyper-V占用port問題</title>
        <link>https://yoziming.github.io/post/211015-docker-hyper-v%E5%8D%A0%E7%94%A8port%E5%95%8F%E9%A1%8C/</link>
        <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211015-docker-hyper-v%E5%8D%A0%E7%94%A8port%E5%95%8F%E9%A1%8C/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211015-docker-hyper-v%E5%8D%A0%E7%94%A8port%E5%95%8F%E9%A1%8C/ -&lt;h1 id=&#34;docker--hyper-v占用port問題&#34;&gt;Docker &amp;amp; Hyper-V占用port問題&lt;/h1&gt;
&lt;p&gt;在window下用docker desktop有時候遇上port被莫名佔用
用指令&lt;code&gt;netstat -ano | findstr xxx&lt;/code&gt;查詢xxx埠被誰佔用卻又顯示沒有&lt;/p&gt;
&lt;p&gt;原來是因為在window下用docker需要依賴hyper-v技術，
而這個hyper-v每次都會隨機搶走一部分tcp埠，使用命令可以得知應避開的範圍:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# powershell / cmd&lt;/span&gt;
netsh interface ipv4 show excludedportrange protocol=tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如果避不開就手動叫hyper-v讓路&#34;&gt;如果避不開就手動叫Hyper-V讓路&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;關閉hyper-v&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# powershell / cmd&lt;/span&gt;
dism.exe /Online /&lt;span style=&#34;color:#658b00&#34;&gt;Disable-Feature&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Microsoft-Hyper&lt;/span&gt;-V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置ipv4動態埠 / 或者配置需要的埠不被佔用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# powershell / cmd 管理員許可權&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;# start 起始埠  num 表示可用埠數     按自己的需求來&lt;/span&gt;
netsh int ipv4 &lt;span style=&#34;color:#658b00&#34;&gt;set &lt;/span&gt;dynamicport tcp start=30000 num=16383
// 叫他去用30000以後的阜

&lt;span style=&#34;color:#228b22&#34;&gt;# 排除ipv4動態埠佔用 startport 起始埠 numberofports 埠數&lt;/span&gt;
netsh int ipv4 add excludedportrange protocol=tcp startport=50051 numberofports=1
// 或是指定端口50051為要讓路的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新啟動hyper-v&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fdocker%2Ffor-win%2Fissues%2F3171%23issuecomment-459205576&#34;&gt;https://github.com/docker/for-win/issues/3171#issuecomment-459205576&lt;/a&gt;&lt;/p&gt;
- https://yoziming.github.io/post/211015-docker-hyper-v%E5%8D%A0%E7%94%A8port%E5%95%8F%E9%A1%8C/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>ubuntu常用操作</title>
        <link>https://yoziming.github.io/post/211010-ubuntu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211010-ubuntu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211010-ubuntu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/ -&lt;h1 id=&#34;ubuntu常用操作&#34;&gt;ubuntu常用操作&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;ubuntu 屋奔兔，算是最常見的Linux系統&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;// 解壓縮XX檔案到/usr/local
sudo tar -C /usr/local -xzvf go1.17.1.linux-amd64.tar.gz&lt;/p&gt;
&lt;p&gt;// 文字編輯器
sudo gedit /home/yoziming/.config/go/env&lt;/p&gt;
&lt;p&gt;// 檔案總管
sudo nautilus&lt;/p&gt;
&lt;p&gt;// 啟用go mod
go env -w GO111MODULE=on&lt;/p&gt;
- https://yoziming.github.io/post/211010-ubuntu%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Kubernetes基礎認識</title>
        <link>https://yoziming.github.io/post/211006-k8s/</link>
        <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211006-k8s/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211006-k8s/ -&lt;h1 id=&#34;kubernetes基礎認識&#34;&gt;Kubernetes基礎認識&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;自動化地以容器的形式管理你的應用程式
To host your application in the form of containers in a automated fashion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20211014130933320.png&#34; alt=&#34;image-20211014130933320&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;名詞解釋&#34;&gt;名詞解釋&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cluster:集群，計算、儲存資源的集合。一個Cluster通常包含一個Controller Plane和數個Node，視需求而定(也可能有Multi-Controller Plane 的集群)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controller Plane:(以前叫Mater)控制主節點，調度指揮所
&lt;ul&gt;
&lt;li&gt;APIserver:管理整個 K8s 所需 API 的接口(Endpoint)，提供HTTP Rest介面的關鍵服務處理程序，是集群中各個節點的溝通橋樑&lt;/li&gt;
&lt;li&gt;etcd:存資料&lt;/li&gt;
&lt;li&gt;Scheduler:資源調配，例如調度Pod運行在哪個Node&lt;/li&gt;
&lt;li&gt;Controller-manager:總經理，負責管理並運行 &lt;code&gt;controller&lt;/code&gt; ，controller定義各種Pod的部屬特性(如最常用的Deployment)來滿足不同的業務場景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node:節點，讓物件(resource-objects)運行的實體或虛擬機器
&lt;ul&gt;
&lt;li&gt;kubelet:對應api-server的接口，可以看成每個Node上的&amp;quot;實際執行者&amp;quot;或&amp;quot;操作者&amp;quot;，負責接收來自api-server的訊息，並做出相對應的動作，例如，負責Pod對應的容器的建立、啟動或停止等。&lt;/li&gt;
&lt;li&gt;kube-proxy:維護網路規則(iptables)，這些規則允許從群集內部或外部的與Pod進行通訊。&lt;/li&gt;
&lt;li&gt;Container Runtime:容器的運行引擎，預設是Docker，也支援其他滿足CRI標準的。
&lt;ul&gt;
&lt;li&gt;Pod:可被調度的最小單位，每個Pod包含一或多個容器，Pod內共享生命週期、資源、通信(使用同一個網路namespace，即相同的IP與port)、儲存空間。通常使用是一個Pod中放一個容器；當需要高度共享資源時才會用一個Pod內多個容器的形式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;延伸觀念&#34;&gt;延伸觀念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Deployment:部屬，例如把Pod做橫向擴展，適用自動管理，或達成無停機系統升級&lt;/li&gt;
&lt;li&gt;Service:服務，Deployment可以部屬多個Pod，每個Pod都有自己的IP，隨時都在生滅浮動，外界如何訪問? 答案就是透過Service，可以說Controller負責運行Pod，而Service負責訪問Pod。&lt;/li&gt;
&lt;li&gt;Ingress:Service 中是將每個 Service 元件對外的 port number 跟 Node 上的 port number 做 mapping，這樣在我們的 Service 變多時，port number 以及分流規則的管理變得相當困難。而 Ingress 可以透過 HTTP/HTTPS，在我們眾多的 Service 前搭建一個 reverse-proxy。這樣 Ingress 可以幫助我們統一一個對外的 port number，並且根據 hostname 或是 pathname 決定封包要轉發到哪個 Service 上&lt;/li&gt;
&lt;li&gt;Namespace:命名空間，假如有多個用戶使用同一個Cluster，想把他們創建的Controller、Pod等資源分開，就靠Namespace。Namespace將物理的Cluster從邏輯上切成多個虛擬Cluster，每一個虛擬Cluster就是一個Namespace，不同Namespace中的資源完全隔離。K8s默認創建2個Namespace:
&lt;ul&gt;
&lt;li&gt;default:如果不指定，資源就預設放這&lt;/li&gt;
&lt;li&gt;kube-system:K8s自己創建的系統資源會放在這個Namespace中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211006-k8s/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>MySQL常用語句 &amp; Workbench</title>
        <link>https://yoziming.github.io/post/211005-mysql-%E5%B8%B8%E7%94%A8%E8%AA%9E%E5%8F%A5/</link>
        <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211005-mysql-%E5%B8%B8%E7%94%A8%E8%AA%9E%E5%8F%A5/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211005-mysql-%E5%B8%B8%E7%94%A8%E8%AA%9E%E5%8F%A5/ -&lt;h1 id=&#34;mysql-常用語句&#34;&gt;MySQL 常用語句&lt;/h1&gt;
&lt;p&gt;資料庫database&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create database XXX;
show databases;
use XXX;
drop database XXX;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;資料表table&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create table mytable(school char(5),name char(10),id int);
show tables;
describe mytable; // 顯示這表有哪些欄位跟屬性
drop table mytable;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from mytable; // 顯示mytable中所有資料

insert into mytable(school, name, id) values (&#39;NCTU&#39;,&#39;Jerry&#39;,&#39;123&#39;);
insert into mytable values (&#39;NCTU&#39;,&#39;Jerry&#39;,&#39;123&#39;);

update mytable set name = &#39;HaHa&#39; where id = &#39;123&#39;;

delete from mytable where name = &#39;HaHa&#39;;
delete from 表格; // 把表格內資料都刪除(但格式宣告還在)

select * from mytable where id = &#39;123&#39; order by name DESC;  // 資料表查詢+條件+排序 (DESC 代表由大到小排序)

load data local infile &amp;quot;c:\\data.txt&amp;quot; into table mytable; //匯入
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;mysql-workbench-常用操作&#34;&gt;MySQL Workbench 常用操作&lt;/h1&gt;
&lt;h3 id=&#34;欲編輯某張表的某個資料&#34;&gt;欲編輯某張表的某個資料&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在左方導航點開那張表，移到它的右上角可以看資訊、進入編輯模式等等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;image-20211016183042070.png&#34; alt=&#34;image-20211016183042070&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;對資料欄位左鍵2下修改，改完之後按Apply，會跳出sql語句的確定視窗，再次Apply後應用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;導出入資料&#34;&gt;導出/入資料 &lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;上方選到 Server &amp;gt; Data Import，會出現這個畫面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;image-20211016183300110.png&#34; alt=&#34;image-20211016183300110&#34;&gt;&lt;/p&gt;
&lt;p&gt;照著按就是了，導出也差不多，不過導出可以選擇是否含格式還是單純資料值&lt;/p&gt;
- https://yoziming.github.io/post/211005-mysql-%E5%B8%B8%E7%94%A8%E8%AA%9E%E5%8F%A5/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker啟用Redis</title>
        <link>https://yoziming.github.io/post/211002-docker%E5%95%9F%E7%94%A8redis/</link>
        <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211002-docker%E5%95%9F%E7%94%A8redis/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211002-docker%E5%95%9F%E7%94%A8redis/ -&lt;h1 id=&#34;docker啟用redis&#34;&gt;Docker啟用Redis&lt;/h1&gt;
&lt;h2 id=&#34;抓映象檔&#34;&gt;抓映象檔&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull redis:6.0
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;拉一個6.0版本的redis&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;執行-image&#34;&gt;執行 Image&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --name redis6 -p 6379:6379 -d redis:6.0 redis-server --appendonly yes
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;–name redis6 ：將 Container 取名為 redis6&lt;/li&gt;
&lt;li&gt;-p 6379:6379 ：將 Container 的 6379 Port 映射到主機的 6379 Port (前面代表主機，後面代表容器)&lt;/li&gt;
&lt;li&gt;-d :後台執行 Container ，並返回ID&lt;/li&gt;
&lt;li&gt;redis-server –appendonly yes : 在 Container 執行 redis-server 啟動命令，並打開redis持久化配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;進入-container&#34;&gt;進入 Container&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec -it redis6 bash
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;-i ：即使沒有附加也保持STDIN 打開&lt;/li&gt;
&lt;li&gt;-t ：分配一個偽終端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料庫測試&#34;&gt;資料庫測試&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;redis-cli
set hello world
get hello
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/211002-docker%E5%95%9F%E7%94%A8redis/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker啟用Mysql</title>
        <link>https://yoziming.github.io/post/211001-docker%E5%95%9F%E7%94%A8mysql/</link>
        <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211001-docker%E5%95%9F%E7%94%A8mysql/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211001-docker%E5%95%9F%E7%94%A8mysql/ -&lt;h1 id=&#34;docker啟用mysql&#34;&gt;Docker啟用Mysql&lt;/h1&gt;
&lt;h2 id=&#34;抓映象檔&#34;&gt;抓映象檔&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull mysql/mysql-server:8.0
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;拉一個8.0版本的mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;執行-image&#34;&gt;執行 Image&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d -it --name mysql8 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=mydb mysql:8 --default-authentication-plugin=mysql_native_password
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;：同&lt;code&gt;--detach&lt;/code&gt;，以背景模式執行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v ~/mysql-docker-data:/var/lib/mysql&lt;/code&gt;：同&lt;code&gt;--volume&lt;/code&gt;，掛載host目錄到container目錄，也就是host的&lt;code&gt;~/mysql-docker-data&lt;/code&gt;會保存container &lt;code&gt;/var/lib/mysql&lt;/code&gt;的資料；windos docker app這樣做的話，資料是暫時的重開機後會不見。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-it&lt;/code&gt;：同&lt;code&gt;--interactive&lt;/code&gt;加&lt;code&gt;--tty&lt;/code&gt;，作用為運行container時可登入其bash操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--name mysql8&lt;/code&gt;，命名container名稱為&lt;code&gt;mysql8&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;：同&lt;code&gt;--publish&lt;/code&gt;。作用為將container的3306 port對映到&amp;quot;主機(host)&amp;ldquo;的3306 port&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;：同&lt;code&gt;--env&lt;/code&gt;，設定環境變數。&lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt;設定MySQL root帳號的登入密碼為&lt;code&gt;1234&lt;/code&gt;，&lt;code&gt;MYSQL_DATABASE&lt;/code&gt;設定資料庫名稱為&lt;code&gt;mydb&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql:8&lt;/code&gt;：&lt;code&gt;mysql&lt;/code&gt;為image名稱，&lt;code&gt;8&lt;/code&gt;為image tag。所以運行的是&lt;code&gt;mysql:8&lt;/code&gt;的image。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-authentication-plugin=mysql_native_password&lt;/code&gt;：把儲存密碼的方式改為MySQL 5的&lt;code&gt;mysql_native_password&lt;/code&gt;，因為MySQL 8的儲存方式預設為&lt;code&gt;caching_sha2_password&lt;/code&gt;，但一些免費的MySQL client圖形工具如Sequel Pro，Navicat等會無法連線，所以設定此參數。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;檢視運行中的容器&#34;&gt;檢視運行中的容器&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;進入-container&#34;&gt;進入 Container&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec mysql8 mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker exec&lt;/code&gt;指令的作用為在運行的container執行指令，所以意思就是在&lt;code&gt;mysql8&lt;/code&gt;這個container執行&lt;code&gt;mysql -u root -p&lt;/code&gt;的指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container exec -it mysql8 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;遇到權限問題用這個&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;進入mysql&#34;&gt;進入Mysql&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mysql -uroot -p
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;新增-1-個開放外部連線的帳號&#34;&gt;新增 1 個開放外部連線的帳號&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE USER &#39;user01&#39;@&#39;%&#39; IDENTIFIED BY &#39;1234&#39;;
GRANT ALL ON your_database.* TO &#39;user01&#39;@&#39;%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;IDENTIFIED BY &amp;lsquo;1234&amp;rsquo;=密碼&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;允許-mysql-被遠程訪問&#34;&gt;允許 MySQL 被遠程訪問&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;grant all privileges on *.* to &#39;root&#39;@&#39;%&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;這是一個強力手段(有權限風險)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211001-docker%E5%95%9F%E7%94%A8mysql/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker常用語句</title>
        <link>https://yoziming.github.io/post/210930-docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210930-docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210930-docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/ -&lt;h1 id=&#34;docker常用語句&#34;&gt;Docker常用語句&lt;/h1&gt;
&lt;h2 id=&#34;抓映象檔&#34;&gt;抓映象檔&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull xxx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;檢視運行中的容器&#34;&gt;檢視運行中的容器&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;進入-container&#34;&gt;進入 Container&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec -it  &amp;lt;container_id&amp;gt;  /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;-i ：即使沒有附加也保持STDIN 打開&lt;/li&gt;
&lt;li&gt;-t ：分配一個偽終端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看字元編碼&#34;&gt;查看字元編碼&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;locale
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;臨時改成utf8&#34;&gt;臨時改成UTF8&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export  LANG=&amp;quot;en_US.UTF-8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;永久設置需在Dockerfile中設置環境字元集環境變數&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ENV LANG=&amp;quot;en_US.UTF-8&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/210930-docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker啟用MinIO</title>
        <link>https://yoziming.github.io/post/210929-docker%E5%95%9F%E7%94%A8minio%E5%84%B2%E5%AD%98/</link>
        <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210929-docker%E5%95%9F%E7%94%A8minio%E5%84%B2%E5%AD%98/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210929-docker%E5%95%9F%E7%94%A8minio%E5%84%B2%E5%AD%98/ -&lt;h1 id=&#34;docker啟用minio儲存&#34;&gt;Docker啟用MinIO儲存&lt;/h1&gt;
&lt;h2 id=&#34;執行-image&#34;&gt;執行 Image&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d --name minio -e &amp;quot;MINIO_ROOT_USER=root&amp;quot; -e &amp;quot;MINIO_ROOT_PASSWORD=root1234&amp;quot; -p 9000:9000 -p 9001:9001 minio/minio server /data --console-address &amp;quot;:9001&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name minio&lt;/code&gt;，命名container名稱為&lt;code&gt;minio&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v /data/minio:/data/minio&lt;/code&gt;該命令將主機 &lt;code&gt;/data/minio&lt;/code&gt; 目錄對映到容器中的 &lt;code&gt;/data/minio&lt;/code&gt; 目錄中&lt;/li&gt;
&lt;li&gt;MinIO 還提供了圖形管理介面，在瀏覽器輸入 &lt;code&gt;ip:9001&lt;/code&gt;即可檢視&lt;/li&gt;
&lt;li&gt;不管是圖形介面操作，還是客戶端操作，預設賬號密碼都為 &lt;code&gt;minioadmin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;環境變數，這裡用了自定義賬號密碼，賬號不能小於 3 字元，密碼不能小於 8 字元&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;go初始化&#34;&gt;Go初始化&lt;/h2&gt;
&lt;p&gt;導入&lt;code&gt;github.com/minio/minio-go/v7&lt;/code&gt;，注意這個後面的&lt;code&gt;v7&lt;/code&gt;，在自動引包時可能會漏掉，導致使用到舊版的同名函數而報錯&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;InitMinio&lt;/span&gt;() {
	ctx := context.&lt;span style=&#34;color:#008b45&#34;&gt;Background&lt;/span&gt;()
	endpoint := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;localhost:9000&amp;#34;&lt;/span&gt;
	accessKeyID := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;
	secretAccessKey := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root1234&amp;#34;&lt;/span&gt;
	useSSL := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;

	&lt;span style=&#34;color:#228b22&#34;&gt;// Initialize minio client object.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	minioClient, err := minio.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;(endpoint, &amp;amp;minio.Options{
		Creds:  credentials.&lt;span style=&#34;color:#008b45&#34;&gt;NewStaticV4&lt;/span&gt;(accessKeyID, secretAccessKey, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;),
		Secure: useSSL,
	})
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalln&lt;/span&gt;(err)
	}

	&lt;span style=&#34;color:#228b22&#34;&gt;// 創建預設的bucket
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// Make a new bucket called mymusic.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	bucketName := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mymusic&amp;#34;&lt;/span&gt;
	location := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 這個是AWS用的，詳細查他官方
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	

	err = minioClient.&lt;span style=&#34;color:#008b45&#34;&gt;MakeBucket&lt;/span&gt;(ctx, bucketName, minio.MakeBucketOptions{Region: location})
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#228b22&#34;&gt;// Check to see if we already own this bucket (which happens if you run this twice)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		exists, errBucketExists := minioClient.&lt;span style=&#34;color:#008b45&#34;&gt;BucketExists&lt;/span&gt;(ctx, bucketName)
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; errBucketExists == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; exists {
			log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;We already own %s\n&amp;#34;&lt;/span&gt;, bucketName)
		} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
			log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalln&lt;/span&gt;(err)
		}
	} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
		log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Successfully created %s\n&amp;#34;&lt;/span&gt;, bucketName)
	}
	    &lt;span style=&#34;color:#228b22&#34;&gt;// 試著上傳一個.zip
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    objectName := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;golden-oldies.zip&amp;#34;&lt;/span&gt;
    filePath := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/tmp/golden-oldies.zip&amp;#34;&lt;/span&gt;
    contentType := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;application/zip&amp;#34;&lt;/span&gt;

    &lt;span style=&#34;color:#228b22&#34;&gt;// Upload the zip file with FPutObject
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    info, err := minioClient.&lt;span style=&#34;color:#008b45&#34;&gt;FPutObject&lt;/span&gt;(ctx, bucketName, objectName, filePath, minio.PutObjectOptions{ContentType: contentType})
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
        log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalln&lt;/span&gt;(err)
    }

    log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Successfully uploaded %s of size %d\n&amp;#34;&lt;/span&gt;, objectName, info.Size)
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配合gin框架範例&#34;&gt;配合Gin框架範例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 假定要上傳頭像，先獲取圖片文件資訊
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	file, _ := ctx.&lt;span style=&#34;color:#008b45&#34;&gt;FormFile&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;avatar&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#228b22&#34;&gt;// 這裡使用minioClient.PutObject（）方法上傳，入參是file.Open()。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	f, _ := file.&lt;span style=&#34;color:#008b45&#34;&gt;Open&lt;/span&gt;()
	&lt;span style=&#34;color:#228b22&#34;&gt;// 新增一個哈希命名規則防止圖片覆蓋
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	m5 := md5.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;()
	m5.&lt;span style=&#34;color:#008b45&#34;&gt;Write&lt;/span&gt;([]&lt;span style=&#34;color:#658b00&#34;&gt;byte&lt;/span&gt;(file.Filename+時間或uuid等等)
	fileName_hash := hex.&lt;span style=&#34;color:#008b45&#34;&gt;EncodeToString&lt;/span&gt;(m5.&lt;span style=&#34;color:#008b45&#34;&gt;Sum&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt;))
	&lt;span style=&#34;color:#228b22&#34;&gt;// 上傳到minio 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	info, err := model.MinioClient.&lt;span style=&#34;color:#008b45&#34;&gt;PutObject&lt;/span&gt;(ctx, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;avatar&amp;#34;&lt;/span&gt;, fileName_hash, f, -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, minio.PutObjectOptions{ContentType: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;avatar&amp;#34;&lt;/span&gt;})
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
		log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalln&lt;/span&gt;(err)
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;
	}
	log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Successfully uploaded %s of size %d\n&amp;#34;&lt;/span&gt;, file.Filename, info.Size)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;細節補充&#34;&gt;細節補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;minio儲存的單位是 BUCKETS(桶)，創建完之後預設的Access Policy為Private，外部無法訪問，要改成public才行&lt;/li&gt;
&lt;li&gt;預設上傳的檔案網址就是http://{endpoint}/{buckets}/{Filename}，只要BUCKETS是public就能直接訪問&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/210929-docker%E5%95%9F%E7%94%A8minio%E5%84%B2%E5%AD%98/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>consul基礎使用練習</title>
        <link>https://yoziming.github.io/post/210928-consul%E4%BD%BF%E7%94%A8%E7%B7%B4%E7%BF%92/</link>
        <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210928-consul%E4%BD%BF%E7%94%A8%E7%B7%B4%E7%BF%92/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210928-consul%E4%BD%BF%E7%94%A8%E7%B7%B4%E7%BF%92/ -&lt;h1 id=&#34;consul基礎使用練習&#34;&gt;consul基礎使用練習&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;想像去郵局辦事，consul類似於發號碼牌的那個機器&lt;/p&gt;
&lt;p&gt;伺服端(櫃台人員)去找consul註冊服務，比如說櫃台1~3提供儲蓄，櫃台4~6提供郵寄服務&lt;/p&gt;
&lt;p&gt;客戶進來透過服務發現，把要辦的事丟給consul，它查看哪個櫃台健康，幫你匹配對應的服務或叫號&lt;/p&gt;
&lt;p&gt;(感覺這例子不太完善，就&amp;hellip;類似的理解啦，實際用了才會懂)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下載&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 官網:
https://www.consul.io/downloads
# ubuntu shell: (下載&amp;gt;解壓縮&amp;gt;把二進位執行檔丟進去)
wget https://releases.hashicorp.com/consul/1.10.3/consul_1.10.3_linux_amd64.zip
unzip consul_1.10.3_linux_amd64.zip
sudo mv consul /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;測試&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;consul -h
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;啟動server&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -node=n1 -bind=192.168.234.128 -ui -rejoin -config-dir=/etc/consul.d/ -client 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這個IP=192.168.234.128=ubuntu的ip&lt;/p&gt;
&lt;p&gt;*若/etc/consul.d/不存在要先自己創&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看服務&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://192.168.234.128:8500/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;註冊自訂的健康檢查服務，範例:&lt;/p&gt;
&lt;p&gt;剛剛自訂的配置檔路徑/etc/consul.d/下新增一個web.json&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&amp;quot;service&amp;quot;: {
    &amp;quot;name&amp;quot;: &amp;quot;web&amp;quot;,
    &amp;quot;tags&amp;quot;: [&amp;quot;extract&amp;quot;, &amp;quot;verify&amp;quot;, &amp;quot;compare&amp;quot;, &amp;quot;idcard&amp;quot;],
    &amp;quot;address&amp;quot;: &amp;quot;192.168.234.128&amp;quot;,
    &amp;quot;port&amp;quot;: 9000,
    &amp;quot;check&amp;quot;: {
        &amp;quot;id&amp;quot;: &amp;quot;api&amp;quot;,
        &amp;quot;name&amp;quot;: &amp;quot;HTTP API on port 9000&amp;quot;,
        &amp;quot;http&amp;quot;: &amp;quot;http://localhost:9000&amp;quot;,
        &amp;quot;interval&amp;quot;: &amp;quot;10s&amp;quot;,
        &amp;quot;timeout&amp;quot;: &amp;quot;1s&amp;quot;
        }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重啟server並查看服務&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20210929143815247.png&#34; alt=&#34;image-20210929143815247&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;結果是不健康，因為沒有東西回應它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;透過consul來傳遞一個簡單服務案例&#34;&gt;透過consul來傳遞一個簡單服務案例:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;person.proto&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;syntax=&amp;quot;proto3&amp;quot;;
package pb;
option go_package=&amp;quot;/.;pb&amp;quot;;
message Person{
    string name=1;
    int32 age=2;
}

service hello{
    rpc sayHello(Person) returns(Person);
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;context&amp;quot;
	&amp;quot;fmt&amp;quot;

	&amp;quot;github.com/hashicorp/consul/api&amp;quot;
	&amp;quot;github.com/my/repo/consul/pb&amp;quot;
)

type Children struct {
}

// 綁定方法實現接口
func (c *Children) SayHello(ctx context.Context, p *pb.Person) (*pb.Person, error) {
	p.Name = &amp;quot;hello&amp;quot; + p.Name
	return p, nil
}

func main() {
	// 1. 把grpc註冊到consul，初始化
	consulConfig := api.DefaultConfig()

	// 2. 創建consul對象
	consulClient, err := api.NewClient(consulConfig)
	if err != nil {
		fmt.Println(&amp;quot;api.NewClient err&amp;quot;, err)
		return
	}

	// 3. 告訴consul將要註冊的服務消息
	reg := api.AgentServiceRegistration{
		ID:      &amp;quot;bj38&amp;quot;,
		Tags:    []string{&amp;quot;grpc&amp;quot;, &amp;quot;consul&amp;quot;},
		Name:    &amp;quot;grpc And Consul&amp;quot;,
		Address: &amp;quot;127.0.0.1&amp;quot;,
		Port:    8800,
		Check: &amp;amp;api.AgentServiceCheck{
			CheckID:  &amp;quot;consul grpc test&amp;quot;,
			TCP:      &amp;quot;127.0.0.1:8800&amp;quot;,
			Timeout:  &amp;quot;1s&amp;quot;,
			Interval: &amp;quot;5s&amp;quot;,
		},
	}
	// 4. 註冊到consul上
	consulClient.Agent().ServiceRegister(&amp;amp;reg)
	fmt.Println(&amp;quot;服務啟動...&amp;quot;)

}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;client&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;context&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;strconv&amp;quot;

	&amp;quot;github.com/hashicorp/consul/api&amp;quot;
	&amp;quot;github.com/my/repo/consul/pb&amp;quot;
	&amp;quot;google.golang.org/grpc&amp;quot;
)

func main() {
	// 初始化consul
	consulConfig := api.DefaultConfig()
	consulClient, err := api.NewClient(consulConfig)
	if err != nil {
		fmt.Println(&amp;quot;api.NewClient err&amp;quot;, err)
	}

	// 服務發現，從consul上獲取健康的服務
	services, _, err := consulClient.Health().Service(&amp;quot;grpc And Consul&amp;quot;, &amp;quot;grpc&amp;quot;, true, nil)
	if err != nil {
		fmt.Println(&amp;quot;consulClient.Health().Service err&amp;quot;, err)
		return
	}
	// 拼接出服務的IP跟端口
	fmt.Println(services[0].Service.Address)
	fmt.Println(services[0].Service.Port)
	addr := services[0].Service.Address + &amp;quot;:&amp;quot; + strconv.Itoa(services[0].Service.Port)

	grpcConn, _ := grpc.Dial(addr, grpc.WithInsecure())

	grpcClient := pb.NewHelloClient(grpcConn)
	var person pb.Person
	person.Name = &amp;quot;Tom~&amp;quot;
	person.Age = 18

	p, err := grpcClient.SayHello(context.TODO(), &amp;amp;person)
	fmt.Println(p, err)

}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;記得隨便用個cmd 開啟consul當橋梁&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ consul agent -dev
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210928-consul%E4%BD%BF%E7%94%A8%E7%B7%B4%E7%BF%92/ - yoziming</description>
        </item>
    
    
  </channel>
</rss> 