<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>柚子茶室</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yoziming</copyright>
    <lastBuildDate>Sun, 12 Dec 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>路徑、正反斜槓與檔名的一些規則</title>
        <link>https://yoziming.github.io/post/211212-slash-file-name/</link>
        <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211212-slash-file-name/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211212-slash-file-name/ -&lt;h1 id=&#34;正反斜槓&#34;&gt;正反斜槓&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;這個符號 「/」就是斜槓，呈現上右下左。&lt;/li&gt;
&lt;li&gt;而 「\」是反斜槓，呈現上左下右。&lt;/li&gt;
&lt;li&gt;斜線的方向，有時候真的是很容易搞混。其實只要回想一下手寫幾月幾日的時候，劃斜槓習慣往哪個方向就好了。反之，若寫起來感覺方向不太順手，那它就是反的。by IrisAndMimi&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;路徑&#34;&gt;路徑&lt;/h1&gt;
&lt;h3 id=&#34;windows系統&#34;&gt;Windows系統&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只有Windows系統會用反斜槓\表達路徑，原因是上古時代DOS把正斜&amp;quot;/&amp;ldquo;當作參數命令，於是就把反斜槓這個惡魔放了出來表示路徑，記憶法:W的第一筆畫就是\&lt;/li&gt;
&lt;li&gt;常見的Windows系統系統下的路徑:&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;image-20211205034748736.png&#34; alt=&#34;image-20211205034748736&#34;&gt;&lt;/li&gt;
&lt;li&gt;除開使用DOS，&lt;strong&gt;大多數情況下用正斜槓Windows也能識別路徑&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他系統&#34;&gt;其他系統&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不論是網址、MAC系統、Linux系統都是用&amp;rdquo;/&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;image-20211205034620505.png&#34; alt=&#34;image-20211205034620505&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;雙斜槓&#34;&gt;雙斜槓&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;//雙斜槓：協議和主機名之間的分隔符 （比如http://localhost:8080）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\\雙反斜線 ：在windows里表示絕對地址的第一項，比如后面跟上IP地址的話，就是需要打開這個IP地址的網絡共享資源，舉例windows使用網路芳鄰會看到這樣:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20211205035722275_proc.jpg&#34; alt=&#34;image-20211205035722275_proc&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在大部分的程式語言中，把\反斜槓當作轉譯字符使用了，比如\n、\t，單用一個反斜槓很容易引起錯誤。最好還是用/正斜槓表達路徑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;檔名的大小寫規則&#34;&gt;檔名的大小寫規則&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;檔名不分大小寫:Windows系統、MAC系統&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;檔名區分大小寫:Linux系統&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git則可以自己手動設定，使用命令:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config core.ignorecase true
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料夾的命名建議&#34;&gt;資料夾的命名建議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大寫開頭的通常是系統預設的資料夾，Windows系統、MAC系統、Linux系統都有這個特性，舉例:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20211205044410447.png&#34; alt=&#34;image-20211205044410447&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20211205044440984.png&#34; alt=&#34;image-20211205044440984&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;個人在長期的、大項的、很少更動的資料夾我才用大寫開頭，其他一律小寫&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;檔名的命名建議&#34;&gt;檔名的命名建議&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免搞事，有需要上傳網路的、跨平台的檔案，使用者命名時最好用全英文小寫，之間用連接符&amp;quot;-&amp;ldquo;或下劃線&amp;rdquo;_&amp;ldquo;相連&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用符號不要超過ASCII的範圍、不要用符號作為檔名開頭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更嚴謹應該也不要用數字作為開頭，但我個人常用日期數字當開頭方便排序，在真有嚴格規定的地方前面多加英文字(通常是類型的縮寫)區分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有些程式對於&lt;strong&gt;空格&lt;/strong&gt;的判斷也挺麻煩，檔名最好也不要使用任何空白，真有需要用下劃線&amp;rdquo;_&amp;ldquo;取代&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211212-slash-file-name/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Map、HashMap、Collections工具類</title>
        <link>https://yoziming.github.io/post/211209-agg-ja-24/</link>
        <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211209-agg-ja-24/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211209-agg-ja-24/ -&lt;h1 id=&#34;map&#34;&gt;Map&lt;/h1&gt;
&lt;p&gt;Map接口:雙列數據，保存具有映射關係(key-value)成對的物件&lt;/p&gt;
&lt;h3 id=&#34;分類&#34;&gt;分類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;HashMap:主要實現類，線程不安全、效率高、可以存null
&lt;ul&gt;
&lt;li&gt;LinkedHashMap:遍歷時可以按照添加順序排列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TreeMap:可以按照key(必須都是同類)來排序，底層是紅黑樹&lt;/li&gt;
&lt;li&gt;Hashtable:古老的實現類，注意t是小寫，線程安全、效率低、不能存null
&lt;ul&gt;
&lt;li&gt;Properties:常用來處理配置文件，key跟value都是String類型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;結構&#34;&gt;結構&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;key:無序、不可重複的，使用Set儲存。key決定存放位置，key的所在類必須重寫equals()與hashCode()&lt;/li&gt;
&lt;li&gt;value:無序，可重複的，使用Collection儲存，value的所在類必須重寫equals()&lt;/li&gt;
&lt;li&gt;一對key與value構成一個Entry物件，使用Set儲存，當然也是無序、不可重複的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hashmap源碼分析&#34;&gt;HashMap源碼分析&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;以JDK7為例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;HashMap map = new HashMap():實例化時，底層創建了一個長度16的一維數組Entry[] table&lt;/li&gt;
&lt;li&gt;map.put(key1, value1):放數據時，調用key1所在類的hashcode()方法算出哈希值，以此哈希值再經過&lt;strong&gt;某些位運算&lt;/strong&gt;，得到在Entry[] table數組中的存放位置，此時:
&lt;ul&gt;
&lt;li&gt;若位置是空的，放入成功&lt;/li&gt;
&lt;li&gt;若已經有人(可能有一個數據或鏈表)，就來比較key1跟佔位者(可能有多個，全都要比一遍)的哈希值
&lt;ul&gt;
&lt;li&gt;如果哈希值都不同，添加成功(放成鏈表)&lt;/li&gt;
&lt;li&gt;如果key1的哈希值跟已存在的某數據(舉例為key2, value2)哈希值相同，此時再比較key1所在類的equals()方法，此時:
&lt;ul&gt;
&lt;li&gt;如果equals()返回false，表示key不同只是恰好哈希值一樣，添加成功(放成鏈表)&lt;/li&gt;
&lt;li&gt;如果equals()返回true，表示兩者key真的一樣，&lt;del&gt;那就進入至尊對決&lt;/del&gt;，此時把put()方法理解為覆蓋，將舊的value2換成新的value1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所謂放成鏈表跟前面Set提到的一樣，類似於&amp;quot;卜&amp;quot;字的概念，從該位置延伸出去存放新的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;擴容:超過臨界值(容量*負載因子)且要存的位置非空就會擴容，預設的擴容方式為造一個新的兩倍長數組，然後將原有的複製過來
&lt;ul&gt;
&lt;li&gt;預設容量:16&lt;/li&gt;
&lt;li&gt;預設負載因子:0.75&lt;/li&gt;
&lt;li&gt;擴容的邏輯是這樣的，為了減少哈希碰撞(就是不希望分支的鏈表太多太長)，所以不會等他裝到滿才擴容。假如負載因子0.9可能老是撞車分支很多，負載因子0.2可能一直在擴容，折衷就定負載因子0.75效率高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;jdk8的改動&#34;&gt;JDK8的改動&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;new HashMap():實例化時，底層沒有創建數組，首次調用put()方法才創建，類似懶漢式&lt;/li&gt;
&lt;li&gt;底層數組用Node[]取代Entry[]&lt;/li&gt;
&lt;li&gt;當數組某一個位置上的元素以鏈表形式存在的數據&amp;gt;8且當前主幹數組長度&amp;gt;64時，將鏈表改為紅黑樹儲存，提高查找效率&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;linkedhashmap&#34;&gt;LinkedHashMap&lt;/h5&gt;
&lt;p&gt;繼承了HashMap的Node，但又多了before跟after兩個屬性，所以形成雙向鏈表可以再添加時記錄前後順序&lt;/p&gt;
&lt;h3 id=&#34;map常用方法&#34;&gt;Map常用方法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;預設使用一個HashMap的實例物件作為調用的主體演示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Object put(Object  key, Object  value):添加或修改，並且返回null或被取代的value&lt;/li&gt;
&lt;li&gt;void putAll(Map m):將m所有的對都放進去&lt;/li&gt;
&lt;li&gt;Object remove(Object  key):移除指定key的鍵值對，返回被刪除的value&lt;/li&gt;
&lt;li&gt;void clear():清空當前map中所有數據，注意與map=null不同，只是清空數據，本身還在&lt;/li&gt;
&lt;li&gt;Object get(Object  key):獲取對應的value&lt;/li&gt;
&lt;li&gt;boolean containsKey(Object  key):是否有此key&lt;/li&gt;
&lt;li&gt;boolean containsValue(Object  value):是否有此value&lt;/li&gt;
&lt;li&gt;int size():返回鍵值對個數&lt;/li&gt;
&lt;li&gt;boolean isEmpty():是否size=0&lt;/li&gt;
&lt;li&gt;boolean equals(Object  key):判斷當前map與obj是否相等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;遍歷map&#34;&gt;遍歷Map&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;切出Collection的部分再用Iterator來遍歷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set keySet():返回所有key構成的Set集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collection values():返回所有value構成的Collection集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set entrySet():返回所有key-value構成的Set集合，得到的元素每個都是entry，故也能強轉回去Map再進行一些操作，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;HashMap map = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap();
map.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;, 123);
map.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;, 1234);
map.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;, 14564);
Set entrySet = map.&lt;span style=&#34;color:#658b00&#34;&gt;entrySet&lt;/span&gt;();
Iterator iterator = entrySet.&lt;span style=&#34;color:#658b00&#34;&gt;iterator&lt;/span&gt;();
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (iterator.&lt;span style=&#34;color:#658b00&#34;&gt;hasNext&lt;/span&gt;()) {
    Object obj = iterator.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
    Map.&lt;span style=&#34;color:#658b00&#34;&gt;Entry&lt;/span&gt; entry = (Map.&lt;span style=&#34;color:#658b00&#34;&gt;Entry&lt;/span&gt;) obj;
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(entry.&lt;span style=&#34;color:#658b00&#34;&gt;getKey&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;=&amp;gt;&amp;#34;&lt;/span&gt; + entry.&lt;span style=&#34;color:#658b00&#34;&gt;getValue&lt;/span&gt;());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;treemap&#34;&gt;TreeMap&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;實際發開中非常少用，了解即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;規定了key必須都是同類，單看key其實就是TreeSet，排序的規則都是一樣的必須重寫compareTo()或compare()方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自然排序:加入的類若實現了Comparable接口，此時比較兩個物件是用重寫的compareTo()方法而非equals()，要注意自己重寫時的比較邏輯，否則可能會產生兩個物件被誤認為重複元素的況狀&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;訂製排序:用自訂的比較器，此時比較兩個物件是用重寫的compare()方法而非equals()，舉例:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;key跟value都是String類型，常用於配置文件&lt;/li&gt;
&lt;li&gt;有個load(文件流)與getProperty(String)方法，專門用來讀取配置文件的訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;collections工具類&#34;&gt;Collections工具類&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;雖然叫做Collections，但他能操作Set、List還有Map等集合&lt;/li&gt;
&lt;li&gt;既然是工具類，顯然都是靜態方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用方法&#34;&gt;常用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reverse(List):反轉List中元素的順序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shuffle(List):隨機排序List中的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sort(List):按照元素自然排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sort(List, Comparator):依照指定的Comparator對元素排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;swap(List, int, int):交換索引位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object max(Collection):根據自然排序返回最大值；也有min方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object max(Collection, Comparator):根據指定的Comparator返回最大值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int frequency(Collection, Object):返回Object出現次數&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void copy(List dest, List src):將scr的內容複製到dest中，要注意長度，想被貼上的list長度不能比原來的短，可以新建一個填滿null的等長數組去接，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;List list = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList();
&lt;span style=&#34;color:#228b22&#34;&gt;// 對list塞了一些元素後，想作為src複製到新的dest
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;List dest = Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;asList&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Object[list.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;()]);
Collections.&lt;span style=&#34;color:#658b00&#34;&gt;copy&lt;/span&gt;(dest,list);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boolean replaceAll(List list, 舊, 新):全替換&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;synchronizedXXX(xxx):返回一個線程安全的xxx集合&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Map:由Set存成key(無序不可重複)，由Collection存成value(無序可重複)，key與value組合成無序不可重複的Entry或說Node結構&lt;/li&gt;
&lt;li&gt;HashMap的底層原理:16位長的數組，put元素時算key的hashCode()再位移運算得出要放的位置，若已經有東西，再比key的euqals()方法，若false表示哈希值恰好相同，在此處分支成鏈表結構儲存；若euqals()返回true表示key完全相等，則進行覆蓋的操作&lt;/li&gt;
&lt;li&gt;Hashtable:古老、線程安全、效率低，過時不用；但其下有Properties常用來存配置，特色是K-V都是String&lt;/li&gt;
&lt;li&gt;HashTree:key的部分就是SetTree，要求key都是同類，重寫compareTo()或compare()方法後可以用key排序&lt;/li&gt;
&lt;li&gt;遍歷Map，用keySet方法取出key為一個Set就能用Iterator遍歷了，還可以用這個key調用get方法獲取對應的value執行各種操作&lt;/li&gt;
&lt;li&gt;Collection是一個抽象接口，其下有List跟Set與對應的實現類用來存取單列數據&lt;/li&gt;
&lt;li&gt;Collections是一個工具類，有很多靜態方法去操作List、Set還有Map&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211209-agg-ja-24/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>集合:Collection、疊代器Iiterator、List、Set</title>
        <link>https://yoziming.github.io/post/211208-agg-ja-23/</link>
        <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211208-agg-ja-23/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211208-agg-ja-23/ -&lt;h1 id=&#34;集合概述&#34;&gt;集合概述&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;集合、數組都是用來儲存多個數據(在記憶體中)的結構，簡稱Java容器&lt;/li&gt;
&lt;li&gt;數組在聲明時長度跟數據類型就定死了，還強制是有序的，增刪改查都不變&lt;/li&gt;
&lt;li&gt;Java集合分成兩種體系，有各種接口與實現類:
&lt;ul&gt;
&lt;li&gt;Collection接口:單列數據，用來存一個一個的物件
&lt;ul&gt;
&lt;li&gt;List接口:元素有序、可重複，又稱為&amp;quot;動態數組&amp;quot;
&lt;ul&gt;
&lt;li&gt;ArrayList&lt;/li&gt;
&lt;li&gt;LinkedList&lt;/li&gt;
&lt;li&gt;Vector&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set接口:元素無序、不可重複
&lt;ul&gt;
&lt;li&gt;HashSet&lt;/li&gt;
&lt;li&gt;LinkedHashSet&lt;/li&gt;
&lt;li&gt;TreeSet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Map接口:雙列數據，保存具有映射關係(key-value)成對的物件
&lt;ul&gt;
&lt;li&gt;HashMap
&lt;ul&gt;
&lt;li&gt;LinkedHashMap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TreeMap&lt;/li&gt;
&lt;li&gt;Hashtable
&lt;ul&gt;
&lt;li&gt;Properties&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;collection&#34;&gt;Collection&lt;/h1&gt;
&lt;p&gt;Collection接口本身沒有直接的實現類，而是要通過其子類List與Set各自的實現類來完成物件的實例化&lt;/p&gt;
&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;用一個實現Collection接口的實例物件調用，例如:Collection coll = new ArrayList();&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;add(Object e):將Object e加入集合中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;size():返回元素個數&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;addAll(Collection c):將集合c的內容全加進來&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;clear():清空元素，注意不是刪除集合本身，只是清掉其中的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isEmpty():判定是否為空&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;contains(Object obj):判斷集合中是否存在obj物件，注意這邊調用的是該類的equals()方法，也就是說預設類型他是比內容；而若自訂的類沒有重寫equals()方法，則會是比地址值(相當於&amp;quot;==&amp;quot;)，一般來說在&lt;strong&gt;集合用到自訂類我們都要求該類必須重寫equals()方法&lt;/strong&gt;，不然太搞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;containsAll(Collection c):判斷當前集合是否包含整個集合c，與順序無關，每個元素都有就算&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boolean remove(Object obj):判斷集合中是否存在obj物件，有則&lt;strong&gt;移除一個&lt;/strong&gt;並返回true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;containsAll(Collection c):只要當前集合跟集合c有共通的項目，就&lt;strong&gt;全部移除&lt;/strong&gt;(相當於數學上的差集)，並返回true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;retainAll(Collection c):判斷當前集合與集合c的交集，只保留相同部分(重複的他不會去修改數量)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;equals():判斷兩個集合所有元素是否相等，注意順序有差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;toArray():將集合轉成並返回數組&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arrays.asList():Arrays的靜態方法，將數組轉為List，使用時注意可能將數組形參視為&amp;quot;一整個引用類型物件&amp;quot;，前後類別要特別寫清楚，有懷疑就用size方法看看元素個數是否吻合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iterator():返回Iterator接口的疊代器實例，用於遍歷集合元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;疊代器iterator&#34;&gt;疊代器Iterator&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;專門用來遍歷Collection集合的接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Collection繼承自Iterable接口，表明該類可以用於疊代器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當某個類實現Iterable接口時，我們就能稱這個類是一個&amp;quot;可數&amp;quot;的類，也就是可以使用iterator()方法獲取一個疊代器Iterator，然後使用這個Iterator實例去遍歷這個類&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Iterator接口:如果某個類實現了Iterable接口，那麼他也需要創建一個內部類去實現一個Iterator類，讓調用Iterable接口中的iterator()時，能夠獲取到一個iterator實例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;調用時&lt;strong&gt;創建一個疊代器物件&lt;/strong&gt;，此時疊代器的&lt;strong&gt;游標指向在第一元素之前&lt;/strong&gt;，並且有幾個常用的方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;.next():顯示下一個元素內容，並將指針後移一位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.hasNext():判斷是否存在下一個元素內容，返回布林，可以用while配合循環遍歷集合，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Iterator iterator = col.&lt;span style=&#34;color:#658b00&#34;&gt;iterator&lt;/span&gt;();
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (iterator.&lt;span style=&#34;color:#658b00&#34;&gt;hasNext&lt;/span&gt;()) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(iterator.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;());
}
&lt;span style=&#34;color:#228b22&#34;&gt;// 純遍歷用foreach更快，foreach相較之下的特性是失去了索引
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.remove():只能用在next()之後且一對一，用於刪除剛剛返回的元素；注意跟Collection本身的remove(Object obj)方法不一樣&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;疊代器本身不作為容器，只是看門幫忙數數的，不要搞錯主體&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;foreach的代碼底層就是調用了疊代器，舉例:for (Object o : arr){&amp;hellip;，他是創建了一個臨時的Object o，每次疊代把arr取出的元素賦給Object o，之後執行下面代碼的操作，可別傻傻的對o進行賦值之類的操作，沒用的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;list接口&#34;&gt;List接口&lt;/h1&gt;
&lt;h3 id=&#34;list特性&#34;&gt;List特性&lt;/h3&gt;
&lt;p&gt;特性為有序、可重複，又稱為&amp;quot;動態數組&amp;quot;，此接口有三個實現類分別為:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList:主要實現類，線程不安全、效率高，底層使用Object[]結構，他的源碼分析(基於JDK7):
&lt;ul&gt;
&lt;li&gt;在new一個ArrayList時，底層創建了一個長度10的Object[]數組
&lt;ul&gt;
&lt;li&gt;在JDK8的話，這邊創造的是長度為空的數組，類似於懶漢式，有真的用到才擴容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add時判斷元素個數，若超過了現有則擴容，預設擴為原來的1.5倍，同時整組複製過去新家&lt;/li&gt;
&lt;li&gt;啟示:開發中用到ArrayList時，最好選帶參數、指定好預估數量的構造器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LinkedList:對於頻繁的插入、刪除操作效率高，因為底層是雙向鏈表
&lt;ul&gt;
&lt;li&gt;雙向鏈表，每一節都包含前後兩個node的指向資訊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vector:過時的實現類，線程安全、效率低，底層使用Object[]結構
&lt;ul&gt;
&lt;li&gt;底層創建了一個長度10的Object[]數組，擴容時為2倍&lt;/li&gt;
&lt;li&gt;即使他是線程安全的，實際開發中也不會用他，而是用Collections工具類中的synchronizedList方法，可以說Vector近乎廢棄了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;list方法&#34;&gt;List方法&lt;/h3&gt;
&lt;p&gt;由於list是有序的，所以有些方法不太一樣(有些重寫有些重載，注意形參)，主要是針對指定位置的操作，例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;void add(int index,Object obj):在index處插入元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;blooean addAll(int index,Collection c):在index處插入集合中的每個元素，注意不要把&amp;quot;整個集合&amp;quot;當成一個元素而誤用add方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int indexOf(Object obj):返回指定obj首次出現位置；lastIndexOf:最末&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object remove(int index):刪除指定位置的元素並返回刪除的元素，使用時&lt;strong&gt;注意形參&lt;/strong&gt;，不要跟Collection的boolean remove(Object obj)搞錯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object set(int index,Object obj):用obj取代指定位置的元素並返回被取代的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List sublist(int 含頭,int 不含尾):切出新的sub&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;set接口&#34;&gt;Set接口&lt;/h1&gt;
&lt;h3 id=&#34;set特性&#34;&gt;Set特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;元素無序:所謂無序並不等於隨機，他底層也是數組(其實是HashMap的key部分)，但在儲存時並非依照數組索引一個一個加進去，而是先計算元素的哈希值，以這個哈希值再通過某種算法計算後決定放哪&lt;/li&gt;
&lt;li&gt;不可重複:保證添加的元素按照equals()判斷時不能返回ture，即相同的元素只能存在一個&lt;/li&gt;
&lt;li&gt;底層邏輯:當我添加一個元素b，先算b的哈希值，從b的哈希再算出存放位置，此時:
&lt;ul&gt;
&lt;li&gt;若存放位置為空，則添加b成功&lt;/li&gt;
&lt;li&gt;若存放位置已經有元素a存在(或以鏈表形式存在的多個元素)，則比較a跟b的哈希值:
&lt;ul&gt;
&lt;li&gt;若哈希值不同，則添加b成功(插到鏈表裡)&lt;/li&gt;
&lt;li&gt;若哈希值相同，則再比較equals()方法
&lt;ul&gt;
&lt;li&gt;返回true表示a跟b真的是一樣的東西，添加b失敗&lt;/li&gt;
&lt;li&gt;返回false表示他們只是恰好哈希值一樣，添加b成功(插到鏈表裡)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所謂的&amp;quot;插到鏈表&amp;quot;，即是說這個位置換成一個鏈表去儲存多個元素，可以想像成&amp;quot;卜&amp;quot;字的樣子:
&lt;ul&gt;
&lt;li&gt;JDK7是頭插法，直觀的一個一個排隊接上去&lt;/li&gt;
&lt;li&gt;JDK8是尾插法，新來的擠佔分支口，把舊的元素一個一個往外推&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;鏈表長度超過8則會改成紅黑樹，巨難巨複雜，暫時先知道就好&lt;/li&gt;
&lt;li&gt;當set使用&lt;strong&gt;自訂類，必須重寫equals跟hashcode方法&lt;/strong&gt;，不然拖出去打&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;set實現類&#34;&gt;Set實現類&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Set的實現類底層其實都是用到對應的map&lt;/p&gt;
&lt;p&gt;實際開發中比較少用，並且沒有額外定義的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HashSet:主力，線程不安全、可以儲存null&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LinkedHashSet:子類，遍歷時可以按照&amp;quot;添加的順序&amp;quot;排列
&lt;ul&gt;
&lt;li&gt;其實就是添加元素時額外記錄了前後索引(想像成一個曲折的的雙向鏈表，類似有一群小朋友每個人都知道自己前後一號是誰，平時散裝著亂跑無所謂，但是要排隊遍歷時能夠找出順序)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TreeSet:底層為紅黑樹結構，可以按照添加對象的指定屬性進行排序，要求添加的元素必須是同類物件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自然排序:加入的類若實現了Comparable接口，此時比較兩個物件是用重寫的compareTo()方法而非equals()，要注意自己重寫時的比較邏輯，否則可能會產生兩個物件被誤認為重複元素的況狀&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;訂製排序:用自訂的比較器，此時比較兩個物件是用重寫的compare()方法而非equals()，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Comparator com = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Comparator() {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;compare&lt;/span&gt;(Object o1, Object o2) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 想比較的屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
};
TreeSet set = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TreeSet(com);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;應用&#34;&gt;應用&lt;/h3&gt;
&lt;p&gt;去除list內的重複項-裝到set裡，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;HashSet set = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashSet();
set.&lt;span style=&#34;color:#658b00&#34;&gt;addAll&lt;/span&gt;(list);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;set面試題&#34;&gt;Set面試題&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Person&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String name;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id, String name) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt; = id;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; = name;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;toString&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Person{&amp;#34;&lt;/span&gt; +
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;id=&amp;#34;&lt;/span&gt; + id +
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;, name=&amp;#39;&amp;#34;&lt;/span&gt; + name + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; +
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;equals&lt;/span&gt;(Object o) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt; == o) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (o == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; || getClass() != o.&lt;span style=&#34;color:#658b00&#34;&gt;getClass&lt;/span&gt;()) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
        Person person = (Person) o;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; id == person.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt; &amp;amp;&amp;amp; Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(name, person.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;hashCode&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Objects.&lt;span style=&#34;color:#658b00&#34;&gt;hash&lt;/span&gt;(id, name);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        HashSet set = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashSet();
        Person p1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Person(101, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;AA&amp;#34;&lt;/span&gt;);
        Person p2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Person(102, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;BB&amp;#34;&lt;/span&gt;);
        set.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(p1);
        set.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(p2);
        p1.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;CC&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 此時放的位置是以原AA算的，但內容被改為CC
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(set.&lt;span style=&#34;color:#658b00&#34;&gt;remove&lt;/span&gt;(p1)); &lt;span style=&#34;color:#228b22&#34;&gt;// 返回false，因為p1內容現在是101CC，而原先的位置是101AA，不同位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        set.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Person(101, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;CC&amp;#34;&lt;/span&gt;)); &lt;span style=&#34;color:#228b22&#34;&gt;// 能放進去，即使內容一樣，但哈希計算後放的位置不同
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        set.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Person(101, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;AA&amp;#34;&lt;/span&gt;)); &lt;span style=&#34;color:#228b22&#34;&gt;// 能放進去，即使同位置有人，但比equals不一樣
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(set);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Collection用到自訂類，必須重寫euqals方法，否則物件是否存在時(例如:contains、remove)會判斷錯誤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比較:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;線程安全&lt;/th&gt;
&lt;th&gt;效率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedList&lt;/td&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;雙向鏈表，針對頻繁插入刪除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vector&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;低，已廢棄的上古類&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;List有序可重複、Set無序不可重複&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211208-agg-ja-23/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>枚舉類enum、註解annotation</title>
        <link>https://yoziming.github.io/post/211207-agg-ja-22/</link>
        <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211207-agg-ja-22/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211207-agg-ja-22/ -&lt;h1 id=&#34;枚舉類enum&#34;&gt;枚舉類(enum)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;當類的物件數量是有限定的、確定的，例如:星期、性別、季節、支付方式、XX狀態&lt;/li&gt;
&lt;li&gt;需要定義一組常量時，強烈建議使用枚舉類&lt;/li&gt;
&lt;li&gt;如果類中只有一個物件，可以用單例模式&lt;/li&gt;
&lt;li&gt;enum，發音&amp;quot;衣-囊&amp;quot;，名詞枚舉&lt;/li&gt;
&lt;li&gt;enumerate，發音&amp;quot;以-new-merate&amp;quot;，動詞枚舉&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自訂枚舉類&#34;&gt;自訂枚舉類&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK 5以前&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;聲明物件的屬性，用private final修飾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將構造器私有化，給物件屬性賦上預想好的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在本類中預先創立好物件，用public static final修飾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供toSting方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供其他訴求，例如:get屬性等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;PayMethod&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String name;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String desc;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;PayMethod&lt;/span&gt;(String name, String desc) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; = name;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;desc&lt;/span&gt; = desc;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; PayMethod CASH = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PayMethod(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;現金&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;真金白銀&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; PayMethod VISA = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PayMethod(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;VISA卡&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;VISA金融卡&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; PayMethod ONLINE = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PayMethod(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;電子支付&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;街口支付&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;toString&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;PayMethod{&amp;#34;&lt;/span&gt; +
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name=&amp;#39;&amp;#34;&lt;/span&gt; + name + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; +
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;, desc=&amp;#39;&amp;#34;&lt;/span&gt; + desc + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt; +
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 調用，因為是靜態，直接類名.屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test1&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        PayMethod p1 = PayMethod.&lt;span style=&#34;color:#658b00&#34;&gt;CASH&lt;/span&gt;;
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(p1);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;關鍵字enum&#34;&gt;關鍵字enum&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK 5後新增的，快速有效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用enum取代class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聲明物件，用()包裹想要的屬性，彼此以&amp;quot;,&amp;ldquo;分行，以;結尾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聲明構造器，用()包裹屬性類型與屬性名，因為枚舉類new不出物件的，所以不用private&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; PayMethod {
    CASH(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;現金&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;真金白銀&amp;#34;&lt;/span&gt;),
    VISA(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;VISA卡&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;VISA金融卡&amp;#34;&lt;/span&gt;),
    ONLINE(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;電子支付&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;街口支付&amp;#34;&lt;/span&gt;);
    PayMethod(String name, String desc) {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果沒有要特別的屬性，只是單純做標籤使用，可以不寫構造器，留一個get方法對外就夠了，例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; Status{
	FREE,BUSY;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不同於Obj類，enum繼承於java.lang.Enum，toString預設返回是&amp;quot;物件名&amp;rdquo;，也可以自己再重寫&lt;/li&gt;
&lt;li&gt;枚舉類名.values():返回枚舉類的物件數組，配合for-each可以快速得知共有哪些預設物件
&lt;ul&gt;
&lt;li&gt;for-each:在IDEA中，&amp;ldquo;數組.for&amp;rdquo;+tab，遍歷數組所有元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;枚舉類名.valueOf(&amp;ldquo;String&amp;rdquo;):根據物件名返回對應的枚舉類物件
&lt;ul&gt;
&lt;li&gt;可以看作是一種創建枚舉類物件的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;枚舉類實現接口&#34;&gt;枚舉類實現接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聲明時加上implements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重寫抽象方法實現接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以每一個物件分別實現，都存在時以個別物件的優先，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;info&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;();
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; PayMethod &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; info {
    CASH(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;現金&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;真金白銀&amp;#34;&lt;/span&gt;) {
        &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;() {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;拿很多現金付錢&amp;#34;&lt;/span&gt;);
        }
    },
    ONLINE(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;電子支付&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;街口支付&amp;#34;&lt;/span&gt;),
    VISA(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;VISA卡&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;VISA金融卡&amp;#34;&lt;/span&gt;);

    PayMethod(String name, String desc) {
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;準備付錢&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;註解annotation&#34;&gt;註解(Annotation)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;框架 = 註解 + 反射 + 設計模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;就是加在聲明上面的@，不光是文字說明，甚至可以看作一種變相的形參&lt;/li&gt;
&lt;li&gt;annotation，發音&amp;quot;A-ㄋ-tation&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jdk內建的三種註解&#34;&gt;JDK內建的三種註解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@Override:重寫的方法&lt;/li&gt;
&lt;li&gt;@Deprecated:廢棄的老方法&lt;/li&gt;
&lt;li&gt;@SuppressWarnings(&amp;ldquo;參數&amp;rdquo;):抑制警告
&lt;ul&gt;
&lt;li&gt;all:全部別跳警告&lt;/li&gt;
&lt;li&gt;unused:別警告未使用的&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;rawtypes&lt;/li&gt;
&lt;li&gt;&amp;hellip;很多自己查文檔&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自訂註解&#34;&gt;自訂註解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聲明使用&amp;quot;@interface 註解名{}&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它自動繼承了java.lang.annotataion.Annotation接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成員變量是&amp;quot;無參數方法&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法名稱為參數名，若只有一個預設叫value&lt;/li&gt;
&lt;li&gt;返回值是參數類型，一般都是String，也可以是其他類&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以指定成員變量的初始值，用default，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#707a7c&#34;&gt;@interface&lt;/span&gt; MyAnnotation {
    String &lt;span style=&#34;color:#008b45&#34;&gt;value&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;tag&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用註解時，若想給指定參數寫賦值，需要用&amp;quot;參數名= &amp;ldquo;；預設名為value的參數則可以省略，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@MyAnnotation&lt;/span&gt;(tag = 4)
&lt;span style=&#34;color:#707a7c&#34;&gt;@MyAnnotation&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;something&amp;#34;&lt;/span&gt;) = &lt;span style=&#34;color:#707a7c&#34;&gt;@MyAnnotation&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;something&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;沒有成員的annotation稱為標記&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定義註解必須配上註解的訊息處理流程才有意義&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;元註解&#34;&gt;元註解&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;就是註解的註解，@在一串@之上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@Retention(RetentionPolicy.參數):指定所修飾註解的生命週期&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SOURCE:注解只保留在原始檔案，當Java檔編譯成class檔的時候，注解被遺棄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CLASS:注解被保留到class檔，但jvm載入class檔時候被遺棄，這是默認的生命週期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RUNTIME:注解不僅被保存到class檔中，jvm載入class檔之後，仍然存在，反射要用這個&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Target(ElementType.參數):指定所修飾的註解可以應用在那些結構&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIELD&lt;/li&gt;
&lt;li&gt;PARAMETER&lt;/li&gt;
&lt;li&gt;METHOD&lt;/li&gt;
&lt;li&gt;CONSTRUCTOR&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Documented:被它修飾的註解，會在文檔中保存下來&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Inherited:被它修飾的註解，將具有繼承性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可重複註解&#34;&gt;可重複註解&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK 8新增的特性，先大致了解就好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在想讓它能重複的註解上面聲明@Repeatable(註解名s.class)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.lang.annotation.Repeatable&lt;/span&gt;;

&lt;span style=&#34;color:#707a7c&#34;&gt;@Repeatable&lt;/span&gt;(MyAnnotations.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#707a7c&#34;&gt;@interface&lt;/span&gt; MyAnnotation {
    String[] &lt;span style=&#34;color:#008b45&#34;&gt;value&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;再造一個註解名s的新註解，返回值是原註解的數組&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#707a7c&#34;&gt;@interface&lt;/span&gt; MyAnnotations {
    MyAnnotation[] &lt;span style=&#34;color:#008b45&#34;&gt;value&lt;/span&gt;();

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;注意他們的@Retention、@Target跟@Inherited等等元註解屬性必須相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;類型註解&#34;&gt;類型註解&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;也是JDK 8新增的特性，讓註解能用在更廣的地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;前面學的元註解@Target(ElementType.參數)可以決定註解能用在哪，JDK8有新參數:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TYPE_PARAMETER:表示該註解能寫在類型變量的聲明語句中(如泛型)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TYPE_USE:表示該註解能寫在使用類型的任何語句中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;枚舉類:用於類中的物件個數確定、有限的&lt;/li&gt;
&lt;li&gt;枚舉類物件使用public static final修飾&lt;/li&gt;
&lt;li&gt;元註解=註解的註解，Retention修飾生命週期，Target修飾使用範圍&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211207-agg-ja-22/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>日期時間、比較器、其他常用類</title>
        <link>https://yoziming.github.io/post/211206-agg-ja-21/</link>
        <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211206-agg-ja-21/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211206-agg-ja-21/ -&lt;h1 id=&#34;日期時間jdk-8前&#34;&gt;日期時間(JDK 8前)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;提前說下，這些過時的類型跟方法實際95%用不上，了解一下就夠了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;System類中的currentTimeMillis():返回當下與1970年1月1日之間的時間差，單位毫秒
&lt;ul&gt;
&lt;li&gt;這一長串的數字稱為時間戳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;javautildate類&#34;&gt;java.util.Date類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;創建&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用空參構造器:創建一個當前時間的物件，格式為Wed Dec 01 13:35:20 CST 2021&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;形參傳入時間戳，創建一個該時間戳的物件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;toString():顯示時間&lt;/li&gt;
&lt;li&gt;getTime():返回時間戳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;javasqldate類&#34;&gt;java.sql.Date類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本身是java.util.Date的子類，用來對應數據庫中的日期變量
&lt;ul&gt;
&lt;li&gt;為了區分，最好使用全類名例如:java.sql.Date d2 = new java.sql.Date(d1.getTime());&lt;/li&gt;
&lt;li&gt;創建:形參必須傳入時間戳&lt;/li&gt;
&lt;li&gt;方法:
&lt;ul&gt;
&lt;li&gt;toString():顯示時間，格式只有日期，如:2021-12-01&lt;/li&gt;
&lt;li&gt;getTime():返回時間戳&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;java.util.Date語java.sql.Date轉換:形參中填入getTime()即可互轉&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;simpledateformat類&#34;&gt;SimpleDateFormat類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;顧名思義，把Date類格式化成String用的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建一個形參為你想要的格式(如常見的&amp;quot;yyyy-MM-dd hh:mm:ss&amp;quot;)的SimpleDateFormat物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用此物件調用format(date物件)方法返回想要的String，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Date d1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Date();

SimpleDateFormat sdf = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yyyy-MM-dd hh:mm:ss&amp;#34;&lt;/span&gt;);
String s1 = sdf.&lt;span style=&#34;color:#658b00&#34;&gt;format&lt;/span&gt;(d1);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;s1 = &amp;#34;&lt;/span&gt; + s1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;還原(解析)文字重回Date類，也要符合該物件生成時的格式，並且用try包裹，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                Date d2 = sdf.&lt;span style=&#34;color:#658b00&#34;&gt;parse&lt;/span&gt;(s1);
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;d2 = &amp;#34;&lt;/span&gt; + d2);
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (ParseException e) {
                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;calendar類&#34;&gt;Calendar類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;日曆，用於找&amp;quot;今天是今年第幾天&amp;quot;之類的問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本身是個抽象類，要調用時可選擇創建其子類&amp;quot;GregorianCalendar&amp;quot;的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或是更簡便的調用其靜態方法 getTnstance()，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Calendar ca = Calendar.&lt;span style=&#34;color:#658b00&#34;&gt;getInstance&lt;/span&gt;();

&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; days1 = ca.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(Calendar.&lt;span style=&#34;color:#658b00&#34;&gt;DAY_OF_YEAR&lt;/span&gt;);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;days1 = &amp;#34;&lt;/span&gt; + days1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這個例子中，物件ca預設就是當前時間，然而他是可以被操作的，使用set()或add()方法去改變其自身屬性，解決例如&amp;quot;n天後是今年第幾天&amp;quot;這種問題，但這個實在很怪，個人覺得使用場景不多&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getTime():從日曆類轉成date類&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setTime():從date類轉成日曆類，用於解決例如給一個日期&amp;quot;Wed Dec 01 16:49:56 CST 2021&amp;quot;要你算出他是今年第幾天之類的問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用時注意，一月=0、二月=1&amp;hellip;十二月=11，周日=1、周一=2&amp;hellip;周六=7，簡直搞事&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;日期時間jdk-8後&#34;&gt;日期時間(JDK 8後)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;前面那些實在缺點太多太難用，大家都用Joda-Time這個第三方時間包，後來就被官方收編成了java.time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;localdatetime&#34;&gt;LocalDateTime&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;now():返回當前時間&lt;/li&gt;
&lt;li&gt;of(形參):設置指定的時間&lt;/li&gt;
&lt;li&gt;getXXX():獲取相對時間，例如當月的第幾日之類&lt;/li&gt;
&lt;li&gt;withXXX(形參):返回一個不可變的LocalDateTime類物件，設置相對時間用，例如某年的5月&lt;/li&gt;
&lt;li&gt;plusXXX(時間):返回一個增加多久時間的LocalDateTime類物件，例如今天買會員，3個月後過期&lt;/li&gt;
&lt;li&gt;minusXXX(時間):同上，減少&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;instant&#34;&gt;Instant&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;精準到納秒的時間類，跟java.util.Date類九成像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Instant.now():靜態方法，返回當前時間，根據UTC時區&lt;/li&gt;
&lt;li&gt;atOffset(ZoneOffset.ofHour(8):返回一個offsetDateTime類的物件，位於+8時區&lt;/li&gt;
&lt;li&gt;toEpochMilli():返回自1970開始的時間戳&lt;/li&gt;
&lt;li&gt;ofEpochMilli(時間戳):從時間戳創立物件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;datetimeformatter&#34;&gt;DateTimeFormatter&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;格式化，跟SimpleDateFormat類九成像&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;預設標準格式ISO_XXX&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地化格式ofLocalizedDateTime(FormatStyle)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ofPattern(自訂格式):靜態方法，返回一個DateTimeFormatter物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;format(時間物件):格式化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parse(string):還原&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他api&#34;&gt;其他API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ZoneID:時區&lt;/li&gt;
&lt;li&gt;Duration:兩個時間間隔&lt;/li&gt;
&lt;li&gt;Period:兩個日期間隔&lt;/li&gt;
&lt;li&gt;TemporalAdjusters:該類通過靜態方法提供大量firstdayofxx、nextXXX之類的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;java比較器&#34;&gt;Java比較器&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;只要涉及到物件要比較大小、排序就會用到這2個接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;comparable&#34;&gt;Comparable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;又稱自然排序，一般都是從低到高、小到大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像String、包裝類等等已經內建實現了Comparable接口，重寫了compareTo(obj)方法，可以自然用Arrays.sort(欲排列數組)方法排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是一個自訂類，則需要手動實現重寫compareTo(obj)方法，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 指明排序方式，例如價格低到高
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;compareTo&lt;/span&gt;(Object o) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (o &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; Goods) {
            Goods goods = (Goods) o; &lt;span style=&#34;color:#228b22&#34;&gt;// 為了健壯性先強轉
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 基本寫法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;price&lt;/span&gt; &amp;gt; goods.&lt;span style=&#34;color:#658b00&#34;&gt;price&lt;/span&gt;) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;price&lt;/span&gt; &amp;lt; goods.&lt;span style=&#34;color:#658b00&#34;&gt;price&lt;/span&gt;) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -1;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 0;
                &lt;span style=&#34;color:#228b22&#34;&gt;// 可以繼續比較其他條件，例如名稱
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#228b22&#34;&gt;// return this.name.compareTo(goods.name);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#228b22&#34;&gt;// 反著排加&amp;#34;-&amp;#34; return -this.name.compareTo(goods.name);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
            }
            &lt;span style=&#34;color:#228b22&#34;&gt;// 直接調用該數據類型的compare
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//            return Integer.compare(this.price, goods.price);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RuntimeException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;傳入類型不一致&amp;#34;&lt;/span&gt;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優勢在於，我的類實現了此接口，創立出來的物件都可以比較排序了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comparator&#34;&gt;Comparator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;訂製排序，與Comparable不同之處在於Comparable的方法A.compareTo(B)是先需要一個當前類的物件A去跟B比較&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而Comparator實現的方法是compare(obj1,obj2)，常用匿名內部類實現，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;String[] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String[]{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;aa&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;bb&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;dd&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cc&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;zz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;rr&amp;#34;&lt;/span&gt;};
Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;sort&lt;/span&gt;(arr, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Comparator&amp;lt;String&amp;gt;() {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;compare&lt;/span&gt;(String o1, String o2) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 可以在這邊自訂排序的規則，例如我想從z to a
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -o1.&lt;span style=&#34;color:#658b00&#34;&gt;compareTo&lt;/span&gt;(o2);
    }
});
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(arr));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優勢:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用在比如自訂類不方便去實現Comparable接口的場合&lt;/li&gt;
&lt;li&gt;直接在Arrays.sort形參後面加個&amp;quot;,&amp;ldquo;就可以非常方便一次性使用&lt;/li&gt;
&lt;li&gt;可以用lambda表達式，例如:Arrays.sort(arr, (o1, o2) -&amp;gt; 0);，既優雅效率又高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;system類&#34;&gt;System類&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;位於java.lang包下&lt;/li&gt;
&lt;li&gt;由於該類的構造器是private，所以無法創造物件&lt;/li&gt;
&lt;li&gt;內部的成員變量或方法都是靜態的，可以直接調用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;成員變量&#34;&gt;成員變量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;System.in:標準輸入流(鍵盤)&lt;/li&gt;
&lt;li&gt;System.out:標準輸出流(螢幕)&lt;/li&gt;
&lt;li&gt;System.err:標準錯誤輸出流(螢幕)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;成員方法&#34;&gt;成員方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;currentTimemillis():返回時間戳&lt;/li&gt;
&lt;li&gt;exit(int status):退出程序，status=退出代碼，0表示正常&lt;/li&gt;
&lt;li&gt;gc():呼叫垃圾車&lt;/li&gt;
&lt;li&gt;getProperty(String key):獲取一些系統訊息，key的舉例:&amp;ldquo;user.name&amp;quot;返回使用者名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;math類&#34;&gt;Math類&lt;/h1&gt;
&lt;p&gt;常用的數學相關、科學常數等等，操作的數據通常都是double型，舉例:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abs:絕對值&lt;/li&gt;
&lt;li&gt;sqrt:平方根&lt;/li&gt;
&lt;li&gt;random:返回0.0~1.0隨機數&lt;/li&gt;
&lt;li&gt;&amp;hellip;有用到再去查即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;biginteger類&#34;&gt;BigInteger類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來表示&lt;strong&gt;不可變的、任意精度的整數&lt;/strong&gt;，並支援大多數math相關方法，多大數字都能用它&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bigdecimal類&#34;&gt;BigDecimal類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用來表示&lt;strong&gt;不可變的、任意精度的有符號的十進制帶點數&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;跟錢有關的，大多數都採用這個&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;臨時複習&#34;&gt;臨時複習&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;突然想到，發現有點搞不清了，趕緊再複習一次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;重寫(override):繼承時，子類的形參、返回、異常類型以及權限範圍不能擴大，但可以有自己的處理方式；即外殼不變、內容改寫&lt;/li&gt;
&lt;li&gt;重載(overload):同一類中，同樣的方法名可以存在多個，只要他們參數不同，調用時會自己套用到對應的；最常見於構造器&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;關於時間，想要本地時間LocalDateTime，想要格式化用DateTimeFormatter&lt;/li&gt;
&lt;li&gt;物件想比較或排序，用Comparator&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211206-agg-ja-21/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>String相關常用類與方法</title>
        <link>https://yoziming.github.io/post/211205-agg-ja-20/</link>
        <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211205-agg-ja-20/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211205-agg-ja-20/ -&lt;h1 id=&#34;string類&#34;&gt;String類&lt;/h1&gt;
&lt;h3 id=&#34;string類特性&#34;&gt;String類特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;表示字符串，內容以&amp;quot;&amp;ldquo;包裹表示，稱為字面量的定義方式&lt;/li&gt;
&lt;li&gt;是一個final類，不可被繼承&lt;/li&gt;
&lt;li&gt;實現了Serializable接口，可以序列化&lt;/li&gt;
&lt;li&gt;實現了Comparable接口，表示可以比較大小&lt;/li&gt;
&lt;li&gt;內部定義了一個final char[] value數組來實際儲存數據，代表不可變的字符序列
&lt;ul&gt;
&lt;li&gt;當我們用字面量(區別於new)定義了一個String str1=&amp;ldquo;abc&amp;rdquo;，相當於在方法區的字符串常量池中新增了一個&amp;quot;abc&amp;quot;序列，其為不可變的&lt;/li&gt;
&lt;li&gt;字符串常量池中不會儲存內容相同的字符串，比如我再新增一個str2=&amp;ldquo;abc&amp;rdquo;，則他們指向同一地址。
&lt;ul&gt;
&lt;li&gt;延伸str6=&amp;ldquo;a&amp;rdquo;+&amp;ldquo;bc&amp;rdquo;，在聲明時字面量相加，等於常量跟常量拼接，都是在常量池，所以指向同樣位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而當我把str1=&amp;ldquo;hello&amp;rdquo;，或是用+拼接了其他內容，或是用replace取代了其中某一位的字，都是在常量池重新開闢空間，所謂不可變是這個意思&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是用String str3=new String(&amp;ldquo;abc&amp;rdquo;);方法生成，則是創在堆中，str3本身是指向堆的地址，去比==都是false。這個動作實際開闢了2個記憶體空間，它在堆中的value才指向常量池
&lt;ul&gt;
&lt;li&gt;如果是new一個構造器生成時賦予的name傳入形參則跟new String是不同的，傳入形參也是類似於字面量的方法(因為顯然多在堆中開闢位置是毫無必要的)&lt;/li&gt;
&lt;li&gt;若是用+拼接有任何涉及到變量的，例如str4=str1+&amp;ldquo;def&amp;rdquo;，都是相當於在堆空間new的操作，==去比較時全都false&lt;/li&gt;
&lt;li&gt;但如果變量被final修飾(正常不會有人這麼做)，相當於這個變量存在常量池，又會是常量跟常量拼接，所以指向同樣位置&lt;/li&gt;
&lt;li&gt;若是用intern()方法，例如str5=str1.intern();，返回值是在常量池中，==比較是true&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面試題-判斷結果&#34;&gt;面試題-判斷結果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;StringTest&lt;/span&gt; {
    String str = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] ch = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;};

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;change&lt;/span&gt;(String str, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] ch) {
        str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;bad&amp;#34;&lt;/span&gt;;
        ch[0] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        StringTest ex = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StringTest();
        ex.&lt;span style=&#34;color:#658b00&#34;&gt;change&lt;/span&gt;(ex.&lt;span style=&#34;color:#658b00&#34;&gt;str&lt;/span&gt;, ex.&lt;span style=&#34;color:#658b00&#34;&gt;ch&lt;/span&gt;);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(ex.&lt;span style=&#34;color:#658b00&#34;&gt;str&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// good
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(ex.&lt;span style=&#34;color:#658b00&#34;&gt;ch&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// best
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;切記傳形參時，引用類型傳的是地址值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這個案例中形參只是正好也叫str而已，仔細看編譯器提示它應該會是灰色的，因為根本沒用到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;change的str是方法的形參，當屬性的str作為實參傳入時，把屬性str的地址給了形參&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;形參str指向方法區造了一個&amp;quot;bad&amp;rdquo;，但也沒用到然後隨著方法結束就消亡了。而屬性str仍然指向&amp;quot;good&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ch的狀況同理，它的地址被傳進去給了形參，形參跟實參都是指向同一個位置，地址指向的首位元素被改成了b，所以改變&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而若使用this.str = &amp;ldquo;bad&amp;rdquo;;，形參叫啥名字、或有無這個string的形參根本都無所謂，是等同於在其他地方str = &amp;ldquo;bad&amp;rdquo;;，在方法區常量池中重新開闢並重新賦值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string常用方法&#34;&gt;String常用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;int length():返回字數(一個中英文字母都是1)&lt;/li&gt;
&lt;li&gt;char charAt(index):返回指定下標，小心越位&lt;/li&gt;
&lt;li&gt;boolean isEmpty():返回是否空字串&lt;/li&gt;
&lt;li&gt;boolean equals(Object obj):比較內容是否相同&lt;/li&gt;
&lt;li&gt;boolean equalsIgnoreCase(String str):忽略大小寫比較內容是否相同&lt;/li&gt;
&lt;li&gt;String concat(String str2):將str2拼接到後面，等同於&amp;quot;+&amp;quot;&lt;/li&gt;
&lt;li&gt;int CompareTo(String str2):根據字符串編碼，拿調用者減去str2，可以用在排序&lt;/li&gt;
&lt;li&gt;String toLowerCase():返回一份全轉為小寫的副本&lt;/li&gt;
&lt;li&gt;String toUpperCase():返回一份全轉為大寫的副本&lt;/li&gt;
&lt;li&gt;String trim():刪除前後的空格(中間的不算)&lt;/li&gt;
&lt;li&gt;String substring(int 開始,結尾):根據下標取切片，左閉右開(含頭不含尾)，結尾可省略
&lt;ul&gt;
&lt;li&gt;即是說想從頭複製到尾形參是(0,length)，注意超過會溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;boolean endsWith(String str):返回是否以str結尾，區分大小寫，長度不限&lt;/li&gt;
&lt;li&gt;boolean startsWith(String str):返回是否以str開頭，區分大小寫，長度不限
&lt;ul&gt;
&lt;li&gt;boolean startsWith(String str,int 下標):從指定下標開始(含)算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;boolean contains(String str):返回是否包含一個以上str，區分大小寫，長度不限&lt;/li&gt;
&lt;li&gt;int indexOf(String str):返回第一次匹配到str的下標，區分大小寫，長度不限。-1表示無
&lt;ul&gt;
&lt;li&gt;int indexOf(String str,int 下標):從指定下標開始(含)算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;int lastIndexOf(String str):返回最後一次匹配到str的下標，區分大小寫，長度不限。-1表示無
&lt;ul&gt;
&lt;li&gt;int lastIndexOf(String str,int 下標):從指定下標開始(含)反向搜索(往左搜)&lt;/li&gt;
&lt;li&gt;當indexOf與lastIndexOf返回相同，要嘛只存在一個解，要嘛都-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;String replace(string 舊,新):拿舊換新，區分大小寫，長度不限，預設全部取代&lt;/li&gt;
&lt;li&gt;String replaceAll(string 正則,新):正則式替換，全部取代&lt;/li&gt;
&lt;li&gt;String replaceFirst(string 正則,新):正則式替換，只取代第一個匹配&lt;/li&gt;
&lt;li&gt;boolean match(string 正則):匹配是否符合正則&lt;/li&gt;
&lt;li&gt;String[] split(string 正則):依照正則切分成字符串的數組
&lt;ul&gt;
&lt;li&gt;String[] split(string 正則,int limit):最多切成幾個元素，超過全放在最後&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string類基本數據轉換複習&#34;&gt;String類、基本數據轉換(複習)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;String轉成基本數據、包裝類:Integer.parseInt(str)&lt;/li&gt;
&lt;li&gt;基本數據、包裝類轉String:String.valueOf(num)
&lt;ul&gt;
&lt;li&gt;或是直接str2=num+&amp;quot;&amp;quot;;  // 是在堆裡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;String轉成char[]:toCharArray()
&lt;ul&gt;
&lt;li&gt;反轉，直接調用構造器=new String(arr)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;String轉成byte[]:getBytes()，會返回位元組(字節)，預設編碼utf-8(中文字大多是3位)，utf-8本身是一個可變長度的編碼方式
&lt;ul&gt;
&lt;li&gt;getBytes(字元編碼):也可以指定編碼&lt;/li&gt;
&lt;li&gt;反轉，一樣調用構造器=new String(arr)，形參也可以加,&amp;ldquo;指定編碼&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringbuffer&#34;&gt;StringBuffer&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;面試重點題&lt;/th&gt;
&lt;th&gt;字符序列&lt;/th&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;不可變&lt;/td&gt;
&lt;td&gt;改變等於新創，效率最低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringBuffer&lt;/td&gt;
&lt;td&gt;可變&lt;/td&gt;
&lt;td&gt;線程安全、效率低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringBuilder&lt;/td&gt;
&lt;td&gt;可變&lt;/td&gt;
&lt;td&gt;線程不安全、效率高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;以下沒特別講都是StringBuffer跟StringBuilder都共有的特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;底層都是char[]，但不同於String有final修飾，StringBuffer的內容是可變的&lt;/li&gt;
&lt;li&gt;new StringBuffer或StringBuilder時，capacity預設容量是16，注意容量不等於當前長度length&lt;/li&gt;
&lt;li&gt;當使用append拼接其他內容時，會先判斷是否超過容量，超過就創立一個新的數組容量是原有*2再+2，把原來的複製過去再拼接&lt;/li&gt;
&lt;li&gt;超過太多會考慮直接計算欲拼接完的字符長度來當新容量&lt;/li&gt;
&lt;li&gt;實際開發中，由於拼接複製效率低，最好在構造時就預想好需使用的容量，StringBuffer(int capacity)、StringBuilder(int capacity)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stringbuffer常用方法&#34;&gt;StringBuffer常用方法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;範圍沒特別說都是左閉右開(含頭不含尾)，預設返回都是對this操作&lt;/p&gt;
&lt;p&gt;都是StringBuffer跟StringBuilder共有的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;append(xxx):拼接，內容xxx都視為String拚上去&lt;/li&gt;
&lt;li&gt;delete(int start,int end):刪除指定範圍的內容&lt;/li&gt;
&lt;li&gt;replace(首,尾,str):取代指定範圍的內容為str&lt;/li&gt;
&lt;li&gt;setCharAt(index,ch):修改指定位內容為ch&lt;/li&gt;
&lt;li&gt;insert(index,str):從指定位置插入str，插完的index位即是str開頭&lt;/li&gt;
&lt;li&gt;reverse():序列反轉&lt;/li&gt;
&lt;li&gt;indexOf(String str):返回第一次匹配到str的下標，區分大小寫，長度不限。-1表示無&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string算法題練習&#34;&gt;String算法題練習&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CharCount&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 获取一个字符串在另一个字符串中出现的次数。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//比如：获取“ ab”在“abkkcadkabkebfkabkskab” 中出现的次数
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String s0 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abkkcadkabkebfkabkskab&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#228b22&#34;&gt;//        String s0 = &amp;#34;abkkcadkabkebfkabababababababababababababerg654erg654erg564abababkskab&amp;#34;;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String st = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ab&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; count = 0;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (s0.&lt;span style=&#34;color:#658b00&#34;&gt;contains&lt;/span&gt;(st)) {
            String s1 = s0.&lt;span style=&#34;color:#658b00&#34;&gt;replace&lt;/span&gt;(st, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] c1 = s1.&lt;span style=&#34;color:#658b00&#34;&gt;toCharArray&lt;/span&gt;();
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(c1));
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; c1.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (c1[i] == 64) {
                    count++;
                }
            }
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            count = 0;
        }
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;次數=&amp;#34;&lt;/span&gt; + count);
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    老師思路:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    while包住，用indexOf(子str,index)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    匹配有，就count++，index+=子str長度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Reverse&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为”abfedcg”
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; left = 2; &lt;span style=&#34;color:#228b22&#34;&gt;// 擷取左邊保留位數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; right = 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 擷取右邊倒數保留位數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
        String str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abcdefghijk&amp;#34;&lt;/span&gt;;
        String s2 = str.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(left, str.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;() - right);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;欲反轉順序區=&amp;#34;&lt;/span&gt; + s2);

        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] rs2 = s2.&lt;span style=&#34;color:#658b00&#34;&gt;toCharArray&lt;/span&gt;();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; rs2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; / 2; i++) {
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; c = rs2[i];
            rs2[i] = rs2[rs2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1 - i];
            rs2[rs2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1 - i] = c;

        }
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;反轉後=&amp;#34;&lt;/span&gt; + Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(rs2));
        String rrs2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String(rs2);
        String str3 = str.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(0, left) + rrs2 + str.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(str.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;() - right);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;最終=&amp;#34;&lt;/span&gt; + str3);
    }
}
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;老師的思路一:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;不切出sub數組，而是在for循環直接換位
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;for(int x=左,y=右;x&amp;lt;y;x++,y--){
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;char temp=arr[x];
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;arr[x]=arr[y]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;思路二:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;切出來，倒著遍歷數組，拼成一個反著的string，再接回去
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;思路三:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;切出來，用stringBuilder裝，反轉
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Contain&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 4.获取两个字符串中最大相同子串。比如：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//str1 = &amp;#34;abcwerthelloyuiodef“;str2 = &amp;#34;cvhellobnm&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//前提，只存在一解
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//提示：将短的那个串进行长度依次递减的子串与较长的串比较。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String str1 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abcwerthelloyuiodef&amp;#34;&lt;/span&gt;;
        String str2 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cvhellobnm&amp;#34;&lt;/span&gt;;
        String ans = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; str2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;(); i++) {
            String str3 = str2.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(i);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (str1.&lt;span style=&#34;color:#658b00&#34;&gt;contains&lt;/span&gt;(str3)) {
                ans = str3;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                String str4 = str2.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(i, str2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;() - 1 - i);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (str1.&lt;span style=&#34;color:#658b00&#34;&gt;contains&lt;/span&gt;(str4)) {
                    ans = str4;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                }
            }
        }
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ans=&amp;#34;&lt;/span&gt; + ans);

    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    老師思路:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;用兩個循環包住，外部控制位數從長度--，內部一個個去切，直到contains符合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;String類的不可變性:底層是一個final char[]，長度跟內容自然不可變，改變都是新造一個重給地址&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211205-agg-ja-20/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>線程安全、線程通信、JDK5.0特性、線程池</title>
        <link>https://yoziming.github.io/post/211204-agg-ja-19/</link>
        <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211204-agg-ja-19/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211204-agg-ja-19/ -&lt;h1 id=&#34;線程安全&#34;&gt;線程安全&lt;/h1&gt;
&lt;h3 id=&#34;線程的生命週期&#34;&gt;線程的生命週期&lt;/h3&gt;
&lt;p&gt;Thread.State類中定義了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建:Thread類的物件被創建&lt;/li&gt;
&lt;li&gt;就緒:start()後等待分配CPU資源的階段，可能是獲取了同步鎖、被notify()&lt;/li&gt;
&lt;li&gt;運行:拿到實際資源、開始執行run()方法&lt;/li&gt;
&lt;li&gt;阻塞:被暫時掛起，可能是sleep()或是被join()、或等待同步鎖、wait()&lt;/li&gt;
&lt;li&gt;死亡:跑完或提前stop()、出錯了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;同步代碼塊&#34;&gt;同步代碼塊&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解決多線程安全問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (同步器) {
&lt;span style=&#34;color:#228b22&#34;&gt;// 需要同步的代碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步器可以是任何物件，只需要滿足&amp;quot;&lt;strong&gt;它是多個線程共用的&lt;/strong&gt;&amp;quot;，比如同類中的一個變量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若是靠實現Runnable接口方法的多線程，可以用this，因為只有一個該類，當前對象是同一個&lt;/li&gt;
&lt;li&gt;如果是繼承類實現的多線程，則可以用static變量，或是考慮&amp;quot;類名.class&amp;quot;(這玩意也是唯一的)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但這樣做實質等於單線程了，效率不高&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;同步方法&#34;&gt;同步方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解決多線程安全問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SynTest&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ticket = 100;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        show();
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; ticket &amp;gt; 0; ) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                Thread.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(10);
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
            }
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;賣票&amp;#34;&lt;/span&gt; + ticket);
            ticket--;
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        SynTest s1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SynTest();
        Thread thread0 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
        Thread thread1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
        Thread thread2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
        thread0.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        thread1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        thread2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把要鎖的地方提取出來，寫成一個synchronized修飾的方法，切記不是寫在run()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非靜態的同步方法，此時的同步器=this。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同理，若是由繼承類實現的多線程，它必然是一個靜態方法(加上static的)，此時的同步器是類.class(類本身)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;懶漢單例模式改進&#34;&gt;懶漢單例模式改進&lt;/h3&gt;
&lt;p&gt;雙重判斷是為了增加效率，同時也線程安全了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Bank &lt;span style=&#34;color:#008b45&#34;&gt;getInstance&lt;/span&gt;(){
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (Bank.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
                instance=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Bank();
            }
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;死鎖deadlock&#34;&gt;死鎖deadlock&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不同的線程分別占用對方需要的同步資源不放棄，都在等待對方釋出資源，就形成死鎖&lt;/li&gt;
&lt;li&gt;形成死鎖後不會報錯，只會互相阻塞無法繼續&lt;/li&gt;
&lt;li&gt;解法:專門的算法、原則，盡量減少定義同步資源，盡量避免嵌套同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可重入鎖reentrantlock&#34;&gt;可重入鎖ReentrantLock&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;解決線程安全問題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;造一個ReentrantLock類的物件 (Reentrant=可重入)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上鎖，然後用try把要保護的地方包起來&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;finally區塊寫上解鎖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.locks.ReentrantLock&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SynTest&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ticket = 100;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; ReentrantLock lock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ReentrantLock(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
            lock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 這裡加鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (ticket &amp;gt; 0) {
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;賣票&amp;#34;&lt;/span&gt; + ticket);
                    ticket--;
                } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                }
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
                lock.&lt;span style=&#34;color:#658b00&#34;&gt;unlock&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 這裡解鎖，切記
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        SynTest s1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SynTest();
        Thread thread0 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
        Thread thread1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
        Thread thread2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
        thread0.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        thread1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        thread2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;new ReentrantLock(true);後面的true表示是一個公平鎖，先入先出；預設沒寫則=false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同樣的，若是由繼承類實現的多線程，new lock時還要加上static&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優勢在於Lock可以靈活手動控制，而synchronized只能自動&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;練習lock&#34;&gt;練習Lock&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;同時存錢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.locks.ReentrantLock&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Account&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; balance = 0;
    ReentrantLock lock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ReentrantLock(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;deposit&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; amt) {
        lock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (amt &amp;gt; 0) {
                balance = balance + amt;
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;存錢成功&amp;#34;&lt;/span&gt;);
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;餘額&amp;#34;&lt;/span&gt; + balance);
            }
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
            lock.&lt;span style=&#34;color:#658b00&#34;&gt;unlock&lt;/span&gt;();
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Customer&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Thread {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Account acct;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Customer&lt;/span&gt;(Account acct) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;acct&lt;/span&gt; = acct;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 3; i++) {
            acct.&lt;span style=&#34;color:#658b00&#34;&gt;deposit&lt;/span&gt;(1000);
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BankTest&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Account acct = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Account();
        Customer c1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(acct);
        Customer c2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(acct);
        c1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        c2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;線程的通信&#34;&gt;線程的通信&lt;/h1&gt;
&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;wait():使當前線程進入阻塞狀態，並釋放同步器&lt;/li&gt;
&lt;li&gt;notifly():喚醒被wait的一個線程，若有多個則喚醒優先極高的那個&lt;/li&gt;
&lt;li&gt;notifyAll():全叫醒&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;限制&#34;&gt;限制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三個方法必須位於同步代碼塊或同步方法中&lt;/li&gt;
&lt;li&gt;三個方法的調用者必須是同一個的計數器，例如都是this；否則會IllegalMonitorStateException&lt;/li&gt;
&lt;li&gt;從任何物件都能成為計數器可以得知，這些方法都是位於Object類中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;範例&#34;&gt;範例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Number&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num = 1;
    Object obj = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Object();

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;notify&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// this可省略
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (num &amp;lt;= 100) {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                        Thread.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(1);
                        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + num);
                        num++;
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;wait&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// this可省略
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#228b22&#34;&gt;// 注意要先執行完才wait，否則會多一次
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
                        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
                    }
                } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                }
            }
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ComTest&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Number number = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Number();
        Thread thread1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(number);
        Thread thread2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(number);
        thread1.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;t1&amp;#34;&lt;/span&gt;);
        thread2.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;t2&amp;#34;&lt;/span&gt;);
        thread1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        thread2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;面試題-sleep與wait&#34;&gt;面試題-sleep與wait&lt;/h3&gt;
&lt;p&gt;相同:都能使當前線程進入阻塞&lt;/p&gt;
&lt;p&gt;相異:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;sleep()&lt;/th&gt;
&lt;th&gt;wait()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;調用的主體&lt;/td&gt;
&lt;td&gt;Thread類&lt;/td&gt;
&lt;td&gt;Object類&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用的位置&lt;/td&gt;
&lt;td&gt;任意場景&lt;/td&gt;
&lt;td&gt;同步代碼塊或方法中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;重新就緒條件&lt;/td&gt;
&lt;td&gt;設定的時間&lt;/td&gt;
&lt;td&gt;等到被notify為止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否釋放同步器&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;經典例題-生產者與消費者&#34;&gt;經典例題-生產者與消費者&lt;/h3&gt;
&lt;p&gt;可能同時有複數的生產者跟消費者都在使用同一個資源(產品)，它們共同的屬性:經過店員當作中轉&lt;/p&gt;
&lt;p&gt;所以造一個店員類，店員擁有這個資源(產品)作為屬性&lt;/p&gt;
&lt;p&gt;而生產者跟消費者都繼承Thread類，並且以同一個店員作為構造器生成物件(生出來的實例都有同一個&amp;quot;店員&amp;quot;屬性，所以可以拿這個店員當共同的計數器，實現線程間的溝通&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Clerk&lt;/span&gt; { &lt;span style=&#34;color:#228b22&#34;&gt;// 店員
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Product = 0;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;launchProduct&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Product &amp;lt; 20) {
            Product++;
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() +
                    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:上架第&amp;#34;&lt;/span&gt; + Product + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;個產品&amp;#34;&lt;/span&gt;);
            notify(); &lt;span style=&#34;color:#228b22&#34;&gt;// 上架了就能喚醒消費者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                wait();
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
            }
        }

    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sellProduct&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Product &amp;gt; 0) {

            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() +
                    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:消費了第&amp;#34;&lt;/span&gt; + Product + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;個產品&amp;#34;&lt;/span&gt;);
            Product--;
            notify(); &lt;span style=&#34;color:#228b22&#34;&gt;// 消費了就能喚醒生產者
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                wait();
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
            }
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Producer&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Thread {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Clerk clerk;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(getName() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;開始生產商品&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                sleep(100);
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
            }
            clerk.&lt;span style=&#34;color:#658b00&#34;&gt;launchProduct&lt;/span&gt;();
        }
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Producer&lt;/span&gt;(Clerk clerk) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;clerk&lt;/span&gt; = clerk;
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Customer&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Thread {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Clerk clerk;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Customer&lt;/span&gt;(Clerk clerk) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;clerk&lt;/span&gt; = clerk;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(getName() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;開始消費商品&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                sleep(1000);
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
            }
            clerk.&lt;span style=&#34;color:#658b00&#34;&gt;sellProduct&lt;/span&gt;();
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ProductTest&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Clerk c1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Clerk();
        Customer cus = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(c1);
        Customer cus2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(c1);
        Producer pro = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Producer(c1);
        cus.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;消費者&amp;#34;&lt;/span&gt;);
        cus2.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;消費者2&amp;#34;&lt;/span&gt;);
        pro.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;生產者&amp;#34;&lt;/span&gt;);
        cus.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        cus2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        pro.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;jdk50新增的線程特性&#34;&gt;JDK5.0新增的線程特性&lt;/h1&gt;
&lt;h3 id=&#34;callable接口&#34;&gt;Callable接口&lt;/h3&gt;
&lt;p&gt;與Runnable相比，Callable有以下優勢:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以有&lt;strong&gt;返回值&lt;/strong&gt;，並支持泛型的返回值&lt;/li&gt;
&lt;li&gt;方法可以&lt;strong&gt;拋出異常&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;需要藉助FutureTask類，例如獲取返回結果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;future接口&#34;&gt;Future接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以對具體Runnable、Callable任務的執行結果進行取消、查詢等等&lt;/li&gt;
&lt;li&gt;FutureTask類是Future接口的唯一實現類&lt;/li&gt;
&lt;li&gt;FutureTask同時實現了Runnable與Future接口，他既可以做為Runnable被線程執行，也可以作為Future獲取Callable的返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法三-實現callable接口&#34;&gt;方法三-實現Callable接口&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;其實跟Runnable沒差多少，就是多套了一層FutureTask當中轉來解決返回值跟拋異常的需求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;創建一個自訂類實現Callable接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在自訂類實現call方法，裡面放進想多線程的代碼(類似於run)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建此自訂類的實例物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將剛剛創立的物件作為形參傳遞到FutureTask構造器中，創立FutureTask類的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將剛剛創立的FutureTask物件作為形參傳遞到Thread構造器，創立Thread類的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以此Thread類物件調用start()方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若想獲取返回值，使用FutureTask類的物件.get()，並且此方法可以拋出異常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.Callable&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.ExecutionException&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.FutureTask&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;NumThread&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Callable {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#008b45&#34;&gt;call&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = 0;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 100; i++) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i);
            sum += i;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; sum;
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CallTest&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        NumThread numThread = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NumThread();
        FutureTask futureTask = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; FutureTask(numThread);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(futureTask).&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            Object sum = futureTask.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;總合為&amp;#34;&lt;/span&gt; + sum);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (ExecutionException e) {
            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
        }

    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;方法四-使用線程池&#34;&gt;方法四-使用線程池&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;實際開發中使用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用ExecutorService 接口名 = Executors.newFixedThreadPool();創造指定線程數量的線程池接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設置線程池的各種屬性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;他們的關係其實是這樣:
ThreadPoolExecutor extends AbstractExecutorService 
AbstractExecutorService implements ExecutorService
所以可以向下強轉接口得到方便設置屬性的物件&lt;/li&gt;
&lt;li&gt;ThreadPoolExecutor 物件名= (ThreadPoolExecutor) 接口名;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;線程池接口.execute調用Runnable方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;線程池接口.submit調用Callable方法，或再加.get()獲取返回值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;線程池接口.shutdown()關閉線程池&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.*&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;NumThread1&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 10; i++) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-i=&amp;#34;&lt;/span&gt; + i);
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;NumThread2&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Callable {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#008b45&#34;&gt;call&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = 0;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 10; i++) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-i=&amp;#34;&lt;/span&gt; + i);
            sum += i;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; sum;
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ThreadPool&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;span style=&#34;color:#228b22&#34;&gt;//        1. 使用ExecutorService 接口名 = Executors.newFixedThreadPool();創造指定線程數量的線程池接口
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ExecutorService service = Executors.&lt;span style=&#34;color:#658b00&#34;&gt;newFixedThreadPool&lt;/span&gt;(5);
&lt;span style=&#34;color:#228b22&#34;&gt;//        2. 設置線程池的各種屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ThreadPoolExecutor serviceObj = (ThreadPoolExecutor) service;
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(service.&lt;span style=&#34;color:#658b00&#34;&gt;getClass&lt;/span&gt;());
        serviceObj.&lt;span style=&#34;color:#658b00&#34;&gt;setCorePoolSize&lt;/span&gt;(15);
        serviceObj.&lt;span style=&#34;color:#658b00&#34;&gt;setKeepAliveTime&lt;/span&gt;(100, TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;MILLISECONDS&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;//        3. 線程池接口.execute調用Runnable方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        service.&lt;span style=&#34;color:#658b00&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NumThread1());

&lt;span style=&#34;color:#228b22&#34;&gt;//        4. 線程池接口.submit調用Callable方法，或再加.get()獲取返回值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            Object obj = service.&lt;span style=&#34;color:#658b00&#34;&gt;submit&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NumThread2()).&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;返回值=&amp;#34;&lt;/span&gt; + obj);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (ExecutionException e) {
            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
        }

&lt;span style=&#34;color:#228b22&#34;&gt;//        5. 線程池接口.shutdown()關閉線程池
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        service.&lt;span style=&#34;color:#658b00&#34;&gt;shutdown&lt;/span&gt;();
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;線程的就緒:被notify、獲取了同步器&lt;/li&gt;
&lt;li&gt;線程的阻塞:sleep、wait、被join、等待同步器&lt;/li&gt;
&lt;li&gt;同步器:必須是多個線程間共用的物件，要嘛是this、要嘛static的則是類.class本身&lt;/li&gt;
&lt;li&gt;確保線程安全時，鎖的性能考慮:ReentranLock &amp;gt; 同步代碼塊 &amp;gt; 同步方法&lt;/li&gt;
&lt;li&gt;創建多線程的4種方式與關鍵點
&lt;ul&gt;
&lt;li&gt;繼承Thread類:用static&lt;/li&gt;
&lt;li&gt;實現Runnable接口:用this&lt;/li&gt;
&lt;li&gt;實現Callable接口:可返回，用FutureTask中轉&lt;/li&gt;
&lt;li&gt;線程池:便於開發使用，記得關&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211204-agg-ja-19/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>IntelliJ IDEA Live Templates</title>
        <link>https://yoziming.github.io/post/211203-intellij_idea-live_templates/</link>
        <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211203-intellij_idea-live_templates/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211203-intellij_idea-live_templates/ -&lt;h1 id=&#34;intellij-idea-live-templates&#34;&gt;IntelliJ IDEA Live Templates&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;盤點IDEA中tab的實用招式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;基本&#34;&gt;基本&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;psvm或main &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; main 方法
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;for&#34;&gt;for&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;fori &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; ; i++)
    
itar &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++)
    
iter &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;-each
    
數組或泛型物件.&lt;span style=&#34;color:#658b00&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;-each
    
數組物件.&lt;span style=&#34;color:#658b00&#34;&gt;forr&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; i &amp;gt;= 0; i--) &lt;span style=&#34;color:#228b22&#34;&gt;// 反向
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;print&#34;&gt;print&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;sout &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
souf &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;say something&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sout&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;say something&amp;#34;&lt;/span&gt;);
obj.&lt;span style=&#34;color:#658b00&#34;&gt;sout&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(obj);

obj.&lt;span style=&#34;color:#658b00&#34;&gt;soutv&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;obj = &amp;#34;&lt;/span&gt; + obj);

obj.&lt;span style=&#34;color:#658b00&#34;&gt;serr&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(obj); &lt;span style=&#34;color:#228b22&#34;&gt;// 印錯誤
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;null&#34;&gt;null&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (obj == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {

obj.&lt;span style=&#34;color:#658b00&#34;&gt;nn&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (obj != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;boolean&#34;&gt;boolean&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;bool.&lt;span style=&#34;color:#658b00&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (bool) {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;創立物件&#34;&gt;創立物件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;類名.&lt;span style=&#34;color:#658b00&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類名()

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類名().&lt;span style=&#34;color:#658b00&#34;&gt;var或&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 類 物件名 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類();

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類名().&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 在方法外聲明一個成員變量&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;並在這裡初始化一個
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;類型轉換&#34;&gt;類型轉換&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 適用於多態物件，例如Object obj = new String();
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;cast&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; ((String) obj)
((String) obj).&lt;span style=&#34;color:#658b00&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; String obj1 = (String) obj;

也可以一次搞定
obj.&lt;span style=&#34;color:#658b00&#34;&gt;castvar&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; String s = (String) obj;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;some string&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 格式化字串

物件.&lt;span style=&#34;color:#658b00&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (obj) {

執行語句();.&lt;span style=&#34;color:#658b00&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 用try-catch包裹

obj.&lt;span style=&#34;color:#658b00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; obj;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RuntimeException().&lt;span style=&#34;color:#658b00&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RuntimeException();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/211203-intellij_idea-live_templates/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>多線程:名詞解釋、基本用法</title>
        <link>https://yoziming.github.io/post/211203-agg-ja-18/</link>
        <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211203-agg-ja-18/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211203-agg-ja-18/ -&lt;h1 id=&#34;多線程&#34;&gt;多線程&lt;/h1&gt;
&lt;h3 id=&#34;名詞解釋&#34;&gt;名詞解釋&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;英文&lt;/th&gt;
&lt;th&gt;台灣&lt;/th&gt;
&lt;th&gt;中國&lt;/th&gt;
&lt;th&gt;意義&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Program&lt;/td&gt;
&lt;td&gt;程式&lt;/td&gt;
&lt;td&gt;程序&lt;/td&gt;
&lt;td&gt;靜態的程式碼集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Process&lt;/td&gt;
&lt;td&gt;程序(進程)&lt;/td&gt;
&lt;td&gt;進程&lt;/td&gt;
&lt;td&gt;動態、被執行中且載入記憶體的program，也是 OS 分配資源的最小單位。打開工作管理員看到的就是這個&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Thread&lt;/td&gt;
&lt;td&gt;執行緒&lt;/td&gt;
&lt;td&gt;線程&lt;/td&gt;
&lt;td&gt;一個進程裡至少會有一個線程，表示內部的一條執行路徑。把進程比喻為一個工廠，線程則是工廠裡面的工人，負責任務的實際執行。同一個Process內的Thread使用相同的Memory Space，但這些Thread各自擁有其Stack。換句話說，Thread能透過reference存取到相同的Object，但是local variable卻是各自獨立的。白話:共享方法區跟堆，獨立棧跟計數器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Coroutine&lt;/td&gt;
&lt;td&gt;協程&lt;/td&gt;
&lt;td&gt;協程&lt;/td&gt;
&lt;td&gt;輕量級的執行緒，由使用者掌控，例如GO的goroutine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Concurrent&lt;/td&gt;
&lt;td&gt;並行&lt;/td&gt;
&lt;td&gt;並發&lt;/td&gt;
&lt;td&gt;一個 CPU 會去做多件事，但是同一個時間點之內只會做一件事，像是早上做 Job1、下午做 Job2、晚上做 Job3不斷的切換，目標是希望能做更多的事&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Parallel&lt;/td&gt;
&lt;td&gt;平行&lt;/td&gt;
&lt;td&gt;並行&lt;/td&gt;
&lt;td&gt;多個 CPU 在同一個時間點內會去做多件事，例如會有三個人同時分別在做 Job1、Job2、Job3 的事情。目標是希望能把事情更快速的做完。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;需求來源&#34;&gt;需求來源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;希望同時執行複數的任務，例如一邊執行main方法，GC一邊收垃圾&lt;/li&gt;
&lt;li&gt;需要等待的狀況，例如等用戶輸入、等IO、等網路連接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java多線程-方法一&#34;&gt;Java多線程-方法一&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;造一個類，繼承Thread&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重寫此類的run方法(將想多線程執行的代碼包進去)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實例化此類的一個物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;透過此物件調用start();，此時啟動此線程並且調用他的run()方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若想再啟動另一條線程，需要再new一個物件，同一物件start多次會報IllegalThreadStateException&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyThread&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Thread {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 2 == 0) {
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;新造#####&amp;#34;&lt;/span&gt;);
            }
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 2 == 0) {
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;主線程*****&amp;#34;&lt;/span&gt;);
            }
        }
        MyThread t1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; MyThread();
        t1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread() {
            &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++) {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 2 != 0) {
                        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;匿名類?????&amp;#34;&lt;/span&gt;);
                    }
                }
            }
        }.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以透過匿名類的方法&amp;quot;new Thread(){//要執行的代碼}.start();&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;thread類的常用方法&#34;&gt;Thread類的常用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;start():啟動當前線程、調用其run()&lt;/li&gt;
&lt;li&gt;currentThread():靜態方法，返回當前執行代碼的線程&lt;/li&gt;
&lt;li&gt;getName():獲取當前線程的名字，常與&amp;quot;currentThread().getName()&amp;ldquo;這樣連用&lt;/li&gt;
&lt;li&gt;setName(String):設定線程名，在start前後都有用，也可以透Thread.currentThread().setName(&amp;ldquo;設定主線程名&amp;rdquo;);&lt;/li&gt;
&lt;li&gt;yeild():靜態方法，釋放當前線程的執行權(但也有可能馬上又搶回)，會拋異常&lt;/li&gt;
&lt;li&gt;join():在線程A中調用線程B的join()，此時A就阻塞，等B完全做完才繼續A。白話:在我的地盤說誰.join就是我讓誰插隊&lt;/li&gt;
&lt;li&gt;sleep(毫秒):當前線程休息，休息時是阻塞的，會拋異常&lt;/li&gt;
&lt;li&gt;isAlive():判斷當前線程是否存活&lt;/li&gt;
&lt;li&gt;setDaemon(true):轉為守護線程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;線程的優先級&#34;&gt;線程的優先級&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;寫在Thread中的，最小是1，預設是5，最大是10&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MIN_PRIORITY = 1;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; NORM_PRIORITY = 5;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MAX_PRIORITY = 10;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;getPriority():獲取優先級&lt;/li&gt;
&lt;li&gt;setPriority(int):設置優先級&lt;/li&gt;
&lt;li&gt;但並不是說高優先就一定先執行完，只是機率上的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java多線程-方法二&#34;&gt;Java多線程-方法二&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;造一個實現Runnable接口的類&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實現其中的抽象方法run()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建實現類的實例物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將此物件作為參數，傳到Thread類的構造器中，創建Thread類的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通過此Thread類的物件調用start()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自訂的類是作為形參，想再創一個線程只要new Thread即可，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyThread2&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 100; i++) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + i);
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;test&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        MyThread2 m2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; MyThread2();
        Thread t1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(m2);
        t1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
        Thread t2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(m2);
        t2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優勢在於&lt;strong&gt;只造了一個類&lt;/strong&gt;，假如類中有個屬性需要被共用，不管後面造了多少線程都是共用這個變量(而不需使用static宣告)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;還一個優勢在於，本身類可能已經有繼承對象了，而我只要實現接口就可以&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其實方法一點開源碼看也是方法二，實際就優先用方法二吧&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;多線程的核心就是重寫run()、調用start()方法&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211203-agg-ja-18/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>項目練習3-開發團隊調度系統</title>
        <link>https://yoziming.github.io/post/211202-agg-ja-17/</link>
        <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211202-agg-ja-17/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211202-agg-ja-17/ -&lt;h1 id=&#34;項目練習3-開發團隊調度系統&#34;&gt;項目練習3-開發團隊調度系統&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然不是特別難，實做一遍還是會遇到不少坑，以下個人復盤的筆記&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A類中用到B類的物件，引包後可以直接&amp;quot;private B類 物件名=new B類&amp;quot;一個預設的來用&lt;/li&gt;
&lt;li&gt;忽略大小寫可用equalsIgnoreCase&lt;/li&gt;
&lt;li&gt;繼承的子類重複用到結構類似的方法，提取出相同因子在父類做一個public的然後去子類各自重寫，也能用來解決孫子super不到爺爺的困境&lt;/li&gt;
&lt;li&gt;遍歷時注意.length的長度是在數組建立時就&lt;strong&gt;定死了&lt;/strong&gt;，絕對不等於當前數組內的元素個數，如果遍歷.length有可能去遍歷到後面null的指針而報錯&lt;/li&gt;
&lt;li&gt;單純只是想遍歷最好用for-each&lt;/li&gt;
&lt;li&gt;手動複製數組使用System.arraycopy&lt;/li&gt;
&lt;li&gt;方法形參是父類，想篩選傳進來的是否為某具體子類，用&amp;quot;if(!(物件 instanceof 子類))可以優雅的判斷&lt;/li&gt;
&lt;li&gt;switch-case如果沒有return記得break&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211202-agg-ja-17/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>利用bat一鍵更新HugoBlog</title>
        <link>https://yoziming.github.io/post/211201-blog-one-key-update/</link>
        <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211201-blog-one-key-update/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211201-blog-one-key-update/ -&lt;h1 id=&#34;一鍵更新&#34;&gt;一鍵更新&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;透過.bat一鍵打包+git發布上傳到你的github專案倉庫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;既然是個人的倉庫，首先要解決一個權限問題，否則隨便路人都可以亂上傳到你的倉庫豈不是亂套&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作法簡單來說，在電腦本機生成一個key(一串暗號)，然後到github網頁上設定，約好拿這個key來的人就允許上傳&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生成本機key&#34;&gt;生成本機key&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh-keygen                                   # 產生金鑰
Generating public/private rsa key pair.
Enter file in which to save the key :   
# 金鑰存放路徑，預設會放到我的文件/.ssh
# 放哪不是特別重要，有強迫症可以自己改，否則直接按Enter

Enter passphrase (empty for no passphrase):    # 密碼，可設定可不設定，設定的話每次上傳會多需要輸入一次密碼
Enter same passphrase again:                   # 再輸入一次密碼
The key fingerprint is:                        # 之後會顯示你的 fingerprint，到這裡就完成 key 的產生了

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;將key報備到專案&#34;&gt;將key報備到專案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到生成的路徑，找id_rsa.pub，右鍵筆記本編輯打開，會看到很長一行開頭是&amp;quot;ssh-rsa &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.&amp;quot;，全選複製&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128105840868.png&#34; alt=&#34;image-20211128105840868&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回你的github專案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128105742295.png&#34; alt=&#34;image-20211128105742295&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;內容貼上剛剛複製的那行&lt;/li&gt;
&lt;li&gt;自己給這個key起個名，懶得命名可以取剛剛那串最尾的&amp;quot;使用者@電腦&amp;quot;當名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建立批次執行檔&#34;&gt;建立批次執行檔&lt;/h3&gt;
&lt;p&gt;起一個.bat檔案，放在hugo的根目錄(跟config.toml同層)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@echo off
set pan=.\public\
set repo=git@github.com:yoziming/yoziming.github.io.git
set branch=master
if exist %pan% (
    echo &amp;quot;clean public directory&amp;quot;
    rd /S /Q %pan%
    echo &amp;quot;Hugo again for new site&amp;quot;
    hugo
) else (
    echo &amp;quot;can not find public directory&amp;quot;
    echo &amp;quot;Hugo again for new site&amp;quot;
    hugo
)
if exist %pan% (
    cd %pan%
    echo &amp;quot;git init and commit&amp;quot;
    git init
    git add --all
    git commit -m &amp;quot;update site at %time%&amp;quot;
    echo &amp;quot;set remote repository and push forcely&amp;quot;
    git remote add origin %repo%
    git push -f origin master:master -v
) else (
    echo &amp;quot;can not find public directory, hugo fail!&amp;quot;
)
pause
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中這2行要自己編輯&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set repo=git@github.com:yoziming/yoziming.github.io.git
// 修改成你的用戶名
set branch=master
/* branch是倉庫裡的分支，預設有可能是main，這邊是用master

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;更改專案預設分支&#34;&gt;更改專案預設分支&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128104929795.png&#34; alt=&#34;image-20211128104929795&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;更改個人頁面的資料來源&#34;&gt;更改個人頁面的資料來源&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128104750907.png&#34; alt=&#34;image-20211128104750907&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;完成&#34;&gt;完成&lt;/h3&gt;
&lt;p&gt;以後更新只要執行這個bat瞬間就搞定&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128105931063.png&#34; alt=&#34;image-20211128105931063&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;補充1&#34;&gt;補充1&lt;/h3&gt;
&lt;p&gt;在末尾加入，增加上傳完畢等5秒自動關閉功能&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;quot;ALL DONE&amp;quot;
echo &amp;quot;ALL DONE&amp;quot;
echo &amp;quot;ALL DONE&amp;quot;
echo &amp;quot;waiting for auto exit...&amp;quot;
timeout /t 5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;補充2&#34;&gt;補充2&lt;/h3&gt;
&lt;p&gt;如果文章時間設在未來然後用draft控制是否顯示的，用-F可以強制把未來日期的文章也一併上傳&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;把有用到hugo指令的地方都改成
hugo -F
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/211201-blog-one-key-update/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>異常處理:try、catch、finally、throw</title>
        <link>https://yoziming.github.io/post/211201-agg-ja-16/</link>
        <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211201-agg-ja-16/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211201-agg-ja-16/ -&lt;h1 id=&#34;異常的分類&#34;&gt;異常的分類&lt;/h1&gt;
&lt;p&gt;在Java中，程序執行中的異常分為Exception與Error，他們都繼承自Throwable&lt;/p&gt;
&lt;p&gt;(語法錯誤跟邏輯錯誤那不叫異常)&lt;/p&gt;
&lt;h3 id=&#34;error&#34;&gt;Error&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;錯誤，JVM系統內部錯誤虛擬機無法解決的問題、資源耗盡等嚴重情況，比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;無限迴圈產生堆疊溢位(Stack Overflow)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寫錯分配導致記憶體不足(Out-Of-Memory)，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解決方法就是把它寫對&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exception&#34;&gt;Exception&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;例外，發生了出乎預料的事，又依&amp;quot;受不受檢&amp;quot;分成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Checked Exception:又稱編譯時異常，通常在原始碼中必須顯式地catch並且處理，比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IOException、讀取文件不存在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClassNotFoundException&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這部分在compile time就會檢查&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unchecked Exception:又稱RuntimeException，運行時異常，比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NullPointerException，空指針訪問&lt;/li&gt;
&lt;li&gt;ArrayIndexOutOfBoundsException，數組角標越界&lt;/li&gt;
&lt;li&gt;ClassCastException，類型轉換異常&lt;/li&gt;
&lt;li&gt;NumberFormatException，數字類型不合&lt;/li&gt;
&lt;li&gt;InputMismatchException，輸入數據不符合，例如scan int結果來了字串&lt;/li&gt;
&lt;li&gt;ArithmeticException，算法異常，例如把某數除以0&lt;/li&gt;
&lt;li&gt;通常是透過撰寫相應程式以避免的邏輯錯誤, 可以根據當下的情境來判斷是不是要catch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;異常處理&#34;&gt;異常處理&lt;/h1&gt;
&lt;p&gt;代碼執行時，一旦出現異常，就會在異常處生成一個對應異常類的物件，並將其拋出，拋出後的代碼就不再執行&lt;/p&gt;
&lt;h3 id=&#34;try-catch&#34;&gt;try-catch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(str);
} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) {
    e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 印出異常
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// something
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用try{&amp;hellip;}將可能有異常的代碼段包起來，當運行中異常發生時，走到哪停在哪，且生成一個異常的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用catch預測可能生成的異常物件類，當有對應的就進入處理(類似於switch-case結構)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;catch想抓的異常類型，如果有子父類關係，必須從小到大，否則報錯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在try結構中聲明的變量，只能在try中使用，出了try就不能再被調用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;try-catch-finally&#34;&gt;try-catch-finally&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@org.junit.Test&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;test1&lt;/span&gt;() {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = method();
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(n);
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;method&lt;/span&gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[3];
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr[5]);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;異常發生之後的語句&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 不會執行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (ArrayIndexOutOfBoundsException e) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;抓到對應的異常類&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 先執行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 2;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;必執行&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 後執行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 3; &lt;span style=&#34;color:#228b22&#34;&gt;// 最後真正返回的值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;finally&lt;strong&gt;不是必要&lt;/strong&gt;的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當使用finally時，只要真的有異常，則其中的語句必定會被執行，即使前面的異常處理有return、throw new之類也不管，總之finally就是要墊底走一趟&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像是數據庫連接、IO輸出入、網路socket等資源，JVM不能自動回收的，我們需要手動寫資源釋放，就會把這塊放在finally中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;try-catch-finally可以嵌套使用，例如我要關掉數據庫的連接，上面try區包了一個連接用的物件conn，出了try區想在finally區寫&amp;quot;conn.close()&amp;ldquo;卻編譯報錯不給用，只好再用一個try-catch把finally包起來。舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;FileInputStream file = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 操作...
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (FileNotFoundException e) {
} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (file != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            file.&lt;span style=&#34;color:#658b00&#34;&gt;close&lt;/span&gt;();
        }
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (IOException e) {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;throws異常類型&#34;&gt;throws+異常類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式:聲明在方法之後，指明這個方法執行時，可能會拋出的異常類型，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception,RuntimeException{}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拋出的異常類型可以是複數&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;體會:只是將異常拋給方法的調用者，適合用在方法有層層遞進關係的程式碼中，達成一個集中處理提高可讀性。但拋到最後總要有個接鍋俠去try-catch真正解決問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果父類的方法沒有拋出，則子類重寫的方法也不能拋出，只能在原地try-catch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子類重寫的方法，拋出的異常類型不能比父類本來拋出的類型還大(兒子犯的錯，要老爸罩得住)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;手動拋出異常&#34;&gt;手動拋出異常&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;想要手動的把某些狀況讓JVM當作是異常來處理，使用關鍵字&amp;rdquo;&lt;strong&gt;throw new 異常類&lt;/strong&gt;&amp;quot;，注意沒有s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Student s1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            s1.&lt;span style=&#34;color:#658b00&#34;&gt;register&lt;/span&gt;(-5);
            &lt;span style=&#34;color:#228b22&#34;&gt;// 當異常發生時，不希望以下的代碼被執行，所以在方法手動拋出
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;生成成功，ID為&amp;#34;&lt;/span&gt; + s1.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;); 
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
&lt;span style=&#34;color:#228b22&#34;&gt;//            e.printStackTrace();
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(e.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (id &amp;gt; 0) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt; = id;
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Exception(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;數據非法!&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 這邊手動拋
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 或使用throw new RuntimeException(&amp;#34;數據非法!&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 就不需要上面方法處的thorws，但就只是單純報錯停下而無處理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自定義異常類&#34;&gt;自定義異常類&lt;/h3&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyException&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; RuntimeException {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 身分證號
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; serialVersionUID = -70348971907457669L;

    &lt;span style=&#34;color:#228b22&#34;&gt;// 構造器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;MyException&lt;/span&gt;() {

    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;MyException&lt;/span&gt;(String msg) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;(msg);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;throw:通常跟new一起用，手動拋出一個異常類的物件，聲明在方法體內，表明執行到這就要丟異常了，誰準備來接吧&lt;/li&gt;
&lt;li&gt;throws:是方法聲明如何處理異常的一種選擇，表示此方法可能拋出的異常種類，但不想要執行時一遇到異常就停止，而是交給他的上級呼叫者集中處理。throws聲明在與方法名同一行的尾端&lt;/li&gt;
&lt;li&gt;個人理解:把throw比喻成&amp;quot;小朋友衝上街&amp;quot;這個動作，而throws用來修飾&amp;quot;照顧小朋友&amp;quot;這個方法，表示預期考慮某種錯誤的發生。我執行照顧小朋友時，有可能遇到小朋友衝上街這種錯誤，若發生了我就將小朋友捕獲起來，交給他的父母處理&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211201-agg-ja-16/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>抽象abstract、接口interface、內部類</title>
        <link>https://yoziming.github.io/post/211130-agg-ja-15/</link>
        <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211130-agg-ja-15/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211130-agg-ja-15/ -&lt;h1 id=&#34;抽象abstract&#34;&gt;抽象abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;隨著繼承不斷疊代，子類越來越具體，而父類越來越通用。&lt;/p&gt;
&lt;p&gt;類的設計必須保證子類與父類共有特徵，有時候我們將父類設計得非常抽象，以至於它沒有具體的實例，這樣的類稱為&lt;strong&gt;抽象類&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;定義&#34;&gt;定義&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;abstract屬於Java中的關鍵字，可以用來修飾類與方法，以下分別說明&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abstract修飾類&#34;&gt;abstract修飾類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;此類不能實例化&lt;/li&gt;
&lt;li&gt;必定有構造器被繼承&lt;/li&gt;
&lt;li&gt;開發中都會提供抽象類的子類，讓子類形成實例來調用&lt;/li&gt;
&lt;li&gt;不能修飾final類，final類規定不能被繼承，玩毛線&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abstract修飾方法&#34;&gt;abstract修飾方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;稱為抽象方法，只有聲明，沒有方法體 (就沒要讓你具體用)&lt;/li&gt;
&lt;li&gt;此方法不能被調用&lt;/li&gt;
&lt;li&gt;包含抽象方法的類，必定是一個抽象類。反之抽象類不一定要有抽象方法&lt;/li&gt;
&lt;li&gt;實際開發中的調用必須是被子類繼承後重寫，所有的抽象方法都被重寫後此子類才能實例化(否則，存在繼承來的抽象方法你就是個抽象類)&lt;/li&gt;
&lt;li&gt;不能修飾私有private方法，因為抽象就是為了被繼承，抽象與其矛盾&lt;/li&gt;
&lt;li&gt;不能修飾靜態static方法，靜態方法跟類共存亡，可以直接被類調用，通常是去弄靜態屬性的，抽象與其矛盾&lt;/li&gt;
&lt;li&gt;不能修飾final方法，final方法規定是不能被重寫，抽象與其矛盾&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;應用-模板方法設計&#34;&gt;應用-模板方法設計&lt;/h3&gt;
&lt;p&gt;在軟體開發中，實現某種功能時，整體中很固定、通用的方法，在父類中就寫好了；而其他不確定、易變的就先抽象起來，交給子類去實現&lt;/p&gt;
&lt;h3 id=&#34;匿名子類的匿名對象&#34;&gt;匿名子類的匿名對象&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在一次性使用的場合，不想實際造一個匿名類的實體子類，可以在new 匿名類()後面接{}，{內直接重寫方法，範例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Person&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;work&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Person {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;work&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生讀書&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        method(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student());
        method(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Person() {
            &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;work&lt;/span&gt;() {
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用一次的街友&amp;#34;&lt;/span&gt;);
            }
        });
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;method&lt;/span&gt;(Person person) {
        person.&lt;span style=&#34;color:#658b00&#34;&gt;work&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;接口interface&#34;&gt;接口interface&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;繼承是is a的關係，例如學生是人，關係重點在於&amp;quot;是不是&amp;quot;；而接口則是&amp;quot;能不能&amp;quot;的關係。Java中，接口跟類是並列的兩個結構(平級關係)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;定義-1&#34;&gt;定義&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用關鍵字interface 接口名{}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK7以前:只能定義全局常量public static final，和抽象方法public abstract&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK8包含以上兩種，還可以定義靜態方法、默認方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Flyable&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MAX_SPEED = 7900;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MIN_SPEED = 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 關鍵字可以省略
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;fly&lt;/span&gt;();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;stop&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 關鍵字可以省略
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口中不能定義構造器，它是不能實例化的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口通過讓類實現(implement)來使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果實現類覆蓋(重寫)了接口中的所有方法，則此實現類可以實例化；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反之，沒有完全實現接口的類，就只能是一個抽象類&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Plane&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Flyable{

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;fly&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;飛機起飛&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;stop&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;飛機停止&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個類可以實現多個接口，(算是JAVA彌補單繼承的一個解決方案)，格式範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;A2&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; A1 implement CC,DD,EE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口之間可以繼承，而且可以多繼承，格式範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AA&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; BB,CC
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接口實現了多態性&lt;/li&gt;
&lt;li&gt;接口其實是定義了一種規範&lt;/li&gt;
&lt;li&gt;比如我把某方法的形參用接口，管你啥類只要實現了這個接口，此類實例化的物件就可以調用這個方法，(用起來跟go的沒啥區別)&lt;/li&gt;
&lt;li&gt;Java8特性:
&lt;ul&gt;
&lt;li&gt;接口中定義的靜態方法，只能透過接口去調用(類似工具類)&lt;/li&gt;
&lt;li&gt;默認方法:使用default修飾，實現類的物件，可以調用接口中的默認方法；若實現時重寫了方法，那調用的還是重寫的方法。只是說用default修飾，可以免去把抽象方法一一實現的過程而直接調用默認的方法&lt;/li&gt;
&lt;li&gt;如果實現類繼承的父類和實現的接口聲明了同名同參的方法，沒有重寫的情況下，優先調用父類的那個，稱為類優先原則&lt;/li&gt;
&lt;li&gt;如果實現類實現了多個接口，其中存在複數同名同參的方法，在沒有重寫的情況下，報錯-接口衝突&lt;/li&gt;
&lt;li&gt;假如有重寫，但想調用接口中的默認方法:接口名.super.方法名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;內部類inner-class&#34;&gt;內部類inner class&lt;/h1&gt;
&lt;p&gt;Java允許在類A中聲明一個類B，此時B是內部類，A稱為外部類。他們在編譯時都會生成字節碼文件(XX.class)&lt;/p&gt;
&lt;p&gt;內部類可分成:成員內部類(靜態、非靜態)與局部內部類(方法內、代碼塊內、構造器內)，以下細說&lt;/p&gt;
&lt;h3 id=&#34;成員內部類&#34;&gt;成員內部類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作為外部類的成員&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以調用外部類的結構&lt;/li&gt;
&lt;li&gt;可以被static修飾&lt;/li&gt;
&lt;li&gt;可以被4種權限修飾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另一方面，本身作為一個類&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;類內可以定義屬性、方法、構造器&amp;hellip;等等&lt;/li&gt;
&lt;li&gt;內部類可以被繼承(甚至可以被其他類以&amp;quot;extends 外部類.內部類&amp;quot;的方式繼承，但如果內部類沒有static的話，還需要提前建立一個封閉實例，很難搞)，可以被abstract修飾&lt;/li&gt;
&lt;li&gt;可以被final修飾來表示不能被繼承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; {
    String name;

    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;eat&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;eat something&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Cat&lt;/span&gt; {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;() {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;小貓睡覺&amp;#34;&lt;/span&gt;);
        }
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Dog&lt;/span&gt; {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;() {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;小狗看門&amp;#34;&lt;/span&gt;);
            Animal.&lt;span style=&#34;color:#658b00&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;eat&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 調用外部類的方法，
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 其實&amp;#34;Animal.this.&amp;#34;可以省略
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實例化:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 創建靜態的成員內部類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Animal.&lt;span style=&#34;color:#658b00&#34;&gt;Cat&lt;/span&gt; c1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal.&lt;span style=&#34;color:#658b00&#34;&gt;Cat&lt;/span&gt;();
c1.&lt;span style=&#34;color:#658b00&#34;&gt;show&lt;/span&gt;();

&lt;span style=&#34;color:#228b22&#34;&gt;// 創建非靜態的成員內部類實例，需要先有一個外部成員實例，再用這個實例去new
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Animal a1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal();
Animal.&lt;span style=&#34;color:#658b00&#34;&gt;Dog&lt;/span&gt; d1 = a1.&lt;span style=&#34;color:#658b00&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Dog&lt;/span&gt;();
d1.&lt;span style=&#34;color:#658b00&#34;&gt;show&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;區分調用的屬性或方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;用this.&lt;span style=&#34;color:#658b00&#34;&gt;指向當前內部類&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;用&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;外部類名.this.&amp;#34;&lt;/span&gt;指向外部類
當然最好還是不要有重名的屬性或方法
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編譯時生成字節碼文件格式為&amp;quot;外部類$內部類.class&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;局部內部類&#34;&gt;局部內部類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;局部內部類可以聲明在方法內、代碼塊內、構造器內&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部內部類中，若用到其外一層的屬性，則這個屬性必須是final的，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;someMethod&lt;/span&gt;() {
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age = 18;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AA&lt;/span&gt; { &lt;span style=&#34;color:#228b22&#34;&gt;// 局部內部類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;(){
           age=10; &lt;span style=&#34;color:#228b22&#34;&gt;// 會報錯，因為這個age相當於是外面傳進來的副本
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(age);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實際開發中較少用，比較可能見到是在android開發中，某方法為了實現某個接口，而暫時創建的一個局部內部類。類似上面提到過的匿名子類的匿名對象的用法，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 比如點某按鈕就要跳出某訊息的方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreate&lt;/span&gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; number = 10;
    &lt;span style=&#34;color:#228b22&#34;&gt;// View.onClickListener()是一個接口需要被實現
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    button.&lt;span style=&#34;color:#658b00&#34;&gt;setOnClickListener&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; View.&lt;span style=&#34;color:#658b00&#34;&gt;onClickListener&lt;/span&gt;() {
       &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onClick&lt;/span&gt;(){
           System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;點按鈕後產生的訊息&amp;#34;&lt;/span&gt;+number);
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編譯時生成字節碼文件格式為&amp;quot;外部類$數字 內部類.class&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;抽象類:不能實例化、單繼承、有構造器&lt;/li&gt;
&lt;li&gt;接口:不能實例化、多繼承、接口不會有構造器、可以有默認方法&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211130-agg-ja-15/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>關鍵字:static、main、final、代碼塊、單例模式</title>
        <link>https://yoziming.github.io/post/211129-agg-ja-14/</link>
        <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211129-agg-ja-14/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211129-agg-ja-14/ -&lt;h1 id=&#34;關鍵字static&#34;&gt;關鍵字static&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;意義:靜態的，類中共用的，生命週期跟隨類的&lt;/li&gt;
&lt;li&gt;使用對象:屬性、方法、內部類、代碼塊，以下分別說明&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用static修飾屬性&#34;&gt;使用static修飾屬性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;稱為&amp;quot;靜態變量&amp;quot;或&amp;quot;類變量&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先複習關於變量的知識&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211126131625719.png&#34; alt=&#34;image-20211126131625719&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;實例變量是每個造出來的物件各自有的，比如:大明跟小明各自的age不同&lt;/li&gt;
&lt;li&gt;類變量是整個類共用的，比如:大明跟小明的nation都是TW
&lt;ul&gt;
&lt;li&gt;類變量隨著類的加載而加載，可以通過&amp;quot;類.靜態變量&amp;quot;進行調用&lt;/li&gt;
&lt;li&gt;物件沒創建之前類變量就已經存在&lt;/li&gt;
&lt;li&gt;由於類只會加載一次，靜態變量在記憶體中也只存在一份，位於方法區的靜態域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在哪應用靜態屬性:
&lt;ul&gt;
&lt;li&gt;類中共用的，生命週期跟隨類的
&lt;ul&gt;
&lt;li&gt;舉例:構造器中自動生成編號的基數(比如從1001開始、1002..)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常量也常聲明為static，再加上final修飾
&lt;ul&gt;
&lt;li&gt;舉例:Math.PI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用static修飾方法&#34;&gt;使用static修飾方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;稱為靜態方法，規則大致與上面相同&lt;/li&gt;
&lt;li&gt;隨著類的加載而加載，可以通過&amp;quot;類.靜態方法&amp;quot;進行調用&lt;/li&gt;
&lt;li&gt;不能在靜態方法中調用非靜態的屬性或方法(畢竟沒有物件)&lt;/li&gt;
&lt;li&gt;在靜態方法中，不能使用this或super關鍵字(物件都沒出生當然不能用)&lt;/li&gt;
&lt;li&gt;在哪應用靜態方法:
&lt;ul&gt;
&lt;li&gt;操作靜態屬性的方法，通常設為靜態&lt;/li&gt;
&lt;li&gt;工具類的方法，比如Math、Array、Collections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;單例singleton設計模式&#34;&gt;單例(singleton)設計模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定義:整個系統中，強制某個類只存在一個實例，減少資源消耗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;應用場合:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;網站的計數器，只造一個，不然難以同步&lt;/li&gt;
&lt;li&gt;日誌:通常是一個日誌文件一直被開著，最好只有一個實例去操作它&lt;/li&gt;
&lt;li&gt;數據庫的連接池&lt;/li&gt;
&lt;li&gt;Windows的Task Manager跟Recycle Bin也是很典型的單例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;餓漢式&amp;quot;實現:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;私有化的構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;內部創建類靜態的實例 (一上來就造好，只給你訪問這個)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供外部的靜態方法，返回類的實例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優劣:加載時間長，但線程安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Bank&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Bank&lt;/span&gt;() {
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Bank instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Bank();

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Bank &lt;span style=&#34;color:#008b45&#34;&gt;getInstance&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;懶漢式&amp;quot;實現:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;私有化的構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聲明類的靜態實例，但&lt;strong&gt;不初始化&lt;/strong&gt;(沒用到就不造所以稱為懶)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聲明外部的、靜態的返回當前類實例的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優劣:延遲創建，但線程不安全，需要加鎖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Order&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Order&lt;/span&gt;() {
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Order instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
&lt;span style=&#34;color:#228b22&#34;&gt;// synchronized=上同步鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Order &lt;span style=&#34;color:#008b45&#34;&gt;getInstance&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Order();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字main&#34;&gt;關鍵字main&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其實就是一個靜態的方法，作為入口，生命週期是跟隨類本身&lt;/li&gt;
&lt;li&gt;以往寫的東西老是造對象然後透過實例調用，其實也可以透過static修飾然後直接&amp;quot;類.屬性或方法&amp;quot;來調用&lt;/li&gt;
&lt;li&gt;形參(String[] args)，其實就是命令行，可以跟控制台互動在調用的時候加入一些參數&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;代碼塊&#34;&gt;代碼塊&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;類似go中的init，初始化時執行的區塊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定義:在類中用大括弧{}包裹的區塊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修飾:只能考慮使用static&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;區別:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;static靜態初始化塊:隨著&lt;strong&gt;類的加載&lt;/strong&gt;而執行，而且只執行一次，通常用來初始化類的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非靜態初始化塊:隨著實體&lt;strong&gt;物件的創立&lt;/strong&gt;而執行，在創立物件時，將物件的屬性進行初始化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以存在多個，執行順序按上下決定，但不建議這樣做&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若創立一個物件，代碼塊的執行先於構造器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由父及子，靜態先行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字final&#34;&gt;關鍵字final&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;意義:最終的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用對象:類、方法、變量，以下分別說明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用final修飾類:此類不能被繼承(絕子絕孫)，例如String類、System類、StringBuffer類&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用final修飾方法:此方法不能被重寫，例如Object類中的getClass();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用final修飾成員變量:修飾實例變量時，此時的&amp;quot;變量&amp;quot;就是一個常變量，即每個物件的這個屬性可能不同，但出生時就定死了不會再改(舉例:每個人的生日)，可以考慮的位置有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顯式初始化&lt;/li&gt;
&lt;li&gt;代碼塊中初始化&lt;/li&gt;
&lt;li&gt;構造器中初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;static final用來修飾類的屬性(類變量):全局常量，整個類都會用到，加載類的時候就定死不會改的東西，用於:比如物理常數&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用final修飾局部變量:修飾局部變量時，類似const，就是一個不能再改的常量，用於:比如想定死一個形參的變量值、寫到一個方法中用到的某變量不想它被改變&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;static修飾的屬性:生命週期跟隨類、隨著類加載一次，存在方法區的靜態域&lt;/li&gt;
&lt;li&gt;單例模式:希望整個類只有一個實例達省資源，把構造器私有化，接著分成餓漢模式:提前造一個，對外唯一get方法調用它；懶漢模式:聲明靜態實例為null，要用時若null就造一個給你調用，否則就調生好那個給你用&lt;/li&gt;
&lt;li&gt;代碼塊:起到一個init的作用，執行優先於構造器&lt;/li&gt;
&lt;li&gt;final:不想被繼承的類、不想被重寫的方法、不想被改的變量&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211129-agg-ja-14/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>多態:instanceof、object類、包裝類</title>
        <link>https://yoziming.github.io/post/211128-agg-ja-13/</link>
        <pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211128-agg-ja-13/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211128-agg-ja-13/ -&lt;h1 id=&#34;多態性&#34;&gt;多態性&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;類似go接口的概念，就是為了讓子類能調用父類的方法&lt;/p&gt;
&lt;p&gt;白話:為了實現代碼的通用性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一個事物的多種形態&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父類的引用指向子類的物件(子類的物件賦給父類的引用)，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Father obj = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Child();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用:&lt;strong&gt;虛擬方法調用&lt;/strong&gt;，編譯期只能調用父類中聲明的方法，但運行時執行的是子類重寫父類的方法。多態只有在運行那一個才知道要調用哪個方法，即多態是個&lt;strong&gt;運行時行為&lt;/strong&gt;，又稱為&lt;strong&gt;動態綁定&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白話:&lt;strong&gt;編譯看左，運行看右&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前提:類的繼承關係、方法的重寫，缺一不可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目的:避免重複寫很多重載的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;體現:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;舉例Person類 之下有子類 Chinese&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;Japanese&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;American
Person類有welcome方法&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;被各自子類以該國語言重寫過
我的某功能調用welcome時能接受Person類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;依照實際子類物件呈現不同語言的welcome結果
該功能即不需要Chinese&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;Japanese&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;American都寫一次
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Atest&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Atest test = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Atest();
               test.&lt;span style=&#34;color:#658b00&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Dog());  &lt;span style=&#34;color:#228b22&#34;&gt;// 多態體現在這
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;func&lt;/span&gt;(Animal animal) { &lt;span style=&#34;color:#228b22&#34;&gt;//Animal animal=new Dog();
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        animal.&lt;span style=&#34;color:#658b00&#34;&gt;eat&lt;/span&gt;();
        animal.&lt;span style=&#34;color:#658b00&#34;&gt;shout&lt;/span&gt;();     
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;eat&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;動物吃&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;shout&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;動物叫&amp;#34;&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Dog&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Animal {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;eat&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;狗吃骨頭&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;shout&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;狗旺旺叫&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 調用數據庫
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Driver&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;doData&lt;/span&gt;(Connection conn) { &lt;span style=&#34;color:#228b22&#34;&gt;// conn=new MySqlConnection
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        conn.&lt;span style=&#34;color:#658b00&#34;&gt;method1&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只適用於方法，&lt;strong&gt;屬性沒有多態&lt;/strong&gt;!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白話:屬性全看左&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;小復習&#34;&gt;小復習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 面試陰險考點
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Child objC = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Child() &lt;span style=&#34;color:#228b22&#34;&gt;// 造一個子類物件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Father objF=objC; &lt;span style=&#34;color:#228b22&#34;&gt;// 子類物件賦值給父類形成多態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;此時objF&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;objC地址值是相同的 &lt;span style=&#34;color:#228b22&#34;&gt;// 即objF==objC為true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;但他們的屬性可以是各自的(屬性沒有多態)
方法則是動態綁定(編譯看左&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;運行看右)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子類可以獲取父類中private的屬性或方法，但無法直接調用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法的重寫:繼承後，同名同參的方法，對於子類重寫的方法來說，權限範圍不能縮小，返回值與拋出異常必須同類或是其子類。被重寫的方法必須非private、非static&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重載:同一類中，只要參數的類型或個數不同，允許存在同名的方法或構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;構造器的繼承與重載&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;this(形參列表):本類重載其他的構造器&lt;/li&gt;
&lt;li&gt;super(形參列表):調用父類中指定的構造器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字instanceof&#34;&gt;關鍵字instanceof&lt;/h1&gt;
&lt;h3 id=&#34;前提&#34;&gt;前提&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;父類 多態物件=new 子類&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;當有了物件的多態性以後，因為右邊是有=new 子類，記憶體中其實是有加載子類特有的屬性與方法的，只是由於變量聲明為父類類型，導致編譯時無法直接調用&lt;/li&gt;
&lt;li&gt;可以用&amp;quot;(子類名)多態物件&amp;quot;向下強轉，但可能報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用instanceof&#34;&gt;使用instanceof&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;a instanceof A&amp;rdquo;，判斷物件a是否為類A的實例，返回boolean，舉例:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Animal a1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Dog();
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (a1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; Dog) {
    Dog a2 = (Dog) a1;
    a2.&lt;span style=&#34;color:#658b00&#34;&gt;shout&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;對於祖父類也適用，即可以一直向上追溯都能返回true的意思&lt;/li&gt;
&lt;li&gt;實際開發很少用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;陰險面試題&#34;&gt;陰險面試題&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Base&lt;/span&gt; { &lt;span style=&#34;color:#228b22&#34;&gt;// 一個父類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;... arr) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;base&amp;#34;&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Sub&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Base { &lt;span style=&#34;color:#228b22&#34;&gt;// 一個子類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sub1&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; c) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sub2&amp;#34;&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
    Base t = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Sub(); &lt;span style=&#34;color:#228b22&#34;&gt;// 創建一個多態的物件t
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    t.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(1, 2, 3);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 結果是sub1，因為編譯器認為int...跟int[]一樣
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 形參一樣，構成重寫，所以出來sub1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    Sub s = (Sub) t;
    s.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(1, 2, 3);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 子類有自己確定性的方法，優先調用，結果是sub2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[]{4, 5, 6};
    s.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(1, arr);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 結果是sub1，理由同上，有優先適用的形參
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;object類&#34;&gt;Object類&lt;/h1&gt;
&lt;p&gt;在Java中Object類是所有類的父類，意味著Object類中的屬性與方法具有共通性，以下挑幾個常用的介紹&lt;/p&gt;
&lt;h3 id=&#34;運算符&#34;&gt;運算符&amp;quot;==&amp;quot;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;==&amp;ldquo;可以用在基本數據類型，判斷值是否相等(類型不一定要相同，可能自動提升)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;==&amp;ldquo;也可以用在引用類型，判斷地址是否相等(即是否指向同一個物件)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;equals&#34;&gt;equals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Object類中equals()的定義等同於&amp;rdquo;==&amp;quot;，比的還是地址值是否相同，源碼如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;equals&lt;/span&gt;(Object obj) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt; == obj);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;而String、Date、File、包裝類等都重寫了Object類中equals()方法，重寫後比較的是&amp;quot;實體內容&amp;quot;是否相同&lt;/li&gt;
&lt;li&gt;通常情況下，我們自訂義類用equals()時想比的也是實體內容而非地址，就必須重寫
&lt;ul&gt;
&lt;li&gt;重寫的原則:比較類的關鍵屬性是否相同，也可以自動生成
&lt;ul&gt;
&lt;li&gt;對稱性:若x.equals(y)=true，則y.equals(x)也必須是true&lt;/li&gt;
&lt;li&gt;自反性:x.equals(x)=必須true&lt;/li&gt;
&lt;li&gt;傳遞性:若x.equals(y)=true，且y.equals(z)=true，則z.equals(x)=true&lt;/li&gt;
&lt;li&gt;一致性:若x.equals(y)=true，只要x與y內容不變，則不管重複幾次結果都是true&lt;/li&gt;
&lt;li&gt;任何情況下x.equals(null)必須=flase，x.equals(非x類對象)必須=flase&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面試題與equals的區別&#34;&gt;面試題:==與equals()的區別&lt;/h3&gt;
&lt;p&gt;==用來比較基本數據類型，而引用類型==與equals()就根本上追溯到object類其實是一樣的，比較的是地址值。只是通常我們在用equals()時都重寫了，變成用來比較實體內容&lt;/p&gt;
&lt;h3 id=&#34;tostring&#34;&gt;toString&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;當我們輸出一個物件的引用時(看地址)，實際上就是調用toString()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源碼&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;toString&lt;/span&gt;() {
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; getClass().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt; + Integer.&lt;span style=&#34;color:#658b00&#34;&gt;toHexString&lt;/span&gt;(hashCode());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;而String、Date、File、包裝類等都重寫了Object類中toString()方法，重寫後返回的是&amp;quot;實體內容&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;包裝類&#34;&gt;包裝類&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把基本數據類型封裝成類，真正實現&amp;quot;一切都是物件&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:手動Float f1 = new Float(12.3)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK 5.0後，會自動拆裝箱，所以其實直接用就可以了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本數據類型、包裝類都可以簡單地透過valueOf轉換成String，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Float f1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Float(12.&lt;span style=&#34;color:#658b00&#34;&gt;3&lt;/span&gt;);
String str = String.&lt;span style=&#34;color:#658b00&#34;&gt;valueOf&lt;/span&gt;(f1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String轉回基本數據類型則使用parseXXX，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;String str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(str);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面試題-1&#34;&gt;面試題-1&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Object o1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt; ? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Integer(1) : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Double(2.&lt;span style=&#34;color:#658b00&#34;&gt;0&lt;/span&gt;);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(o1); &lt;span style=&#34;color:#228b22&#34;&gt;// 1.0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;乍看可能覺得是1&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;但三元運算符後面兩個條件必須是同類型(否則編譯就報錯了)
於是1被自動類型提升成Double&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;答案變1.&lt;span style=&#34;color:#658b00&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;。&lt;/span&gt;
若把題目那一行拆成if-else結構那就是1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;面試題-2&#34;&gt;面試題-2&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Integer i = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Integer(1);
Integer j = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Integer(1);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i == j); &lt;span style=&#34;color:#228b22&#34;&gt;// false，地址值不同
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
Integer m = 1;
Integer n = 1;
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(m == n); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
Integer x = 128;
Integer y = 128;
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(x == y); &lt;span style=&#34;color:#228b22&#34;&gt;// false，地址值不同
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
Integer內部定義了一個IntegerCache結構&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;造了一個數組保存了 - 128 ~127 內的整數&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;
我們日常使用自動裝箱其實就是使用這個數組內的元素&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;不用一直new物件&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;達到增加效率&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;。&lt;/span&gt;
而當超出這個範圍&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;就相當於new了新物件&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;所以x跟y地址不同   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習題-vector可變長度容器&#34;&gt;練習題-Vector可變長度容器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可以當做一個可變長度的數組來用&lt;/p&gt;
&lt;p&gt;添加元素:vector.addElement(Object obj);&lt;/p&gt;
&lt;p&gt;查看元素內容:vector.elementAt(下標)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
Vector v = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Vector();
Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxScore = 0;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; loopFlag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; loopFlag; i++) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入學生成績，負數離開&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; inputInt = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (inputInt &amp;lt; 0) {
        loopFlag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (inputInt &amp;gt; 100) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;成績有誤，重新輸入&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
        &lt;span style=&#34;color:#228b22&#34;&gt;// 這個continue蠻關鍵的，當輸入有誤雖然i++了但不會插入錯誤值到數組中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 因為&amp;#34;跳過這次&amp;#34;了，下面的語句不會執行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 再退一步說其實for的i就是多餘的，因為addElement不用遍歷插入值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// loopFlag也是多餘的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (maxScore &amp;lt; inputInt) {
        maxScore = inputInt;
    }
    v.&lt;span style=&#34;color:#658b00&#34;&gt;addElement&lt;/span&gt;(inputInt);

}
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;最高分是&amp;#34;&lt;/span&gt; + maxScore);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = 0;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; v.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(); i++) {
    Object obj = v.&lt;span style=&#34;color:#658b00&#34;&gt;elementAt&lt;/span&gt;(i);
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; score = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) obj;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (maxScore - score &amp;gt; 40) {
        sum++;
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為&amp;#34;&lt;/span&gt; + score + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，不合格\n&amp;#34;&lt;/span&gt;);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為&amp;#34;&lt;/span&gt; + score + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，合格\n&amp;#34;&lt;/span&gt;);
    }
}
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;不合格人數是&amp;#34;&lt;/span&gt; + sum);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/211128-agg-ja-13/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>繼承:方法重寫、super、物件實例化</title>
        <link>https://yoziming.github.io/post/211127-agg-ja-12/</link>
        <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211127-agg-ja-12/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211127-agg-ja-12/ -&lt;h1 id=&#34;繼承&#34;&gt;繼承&lt;/h1&gt;
&lt;h3 id=&#34;好處&#34;&gt;好處&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;減少代碼冗餘、提高復用性&lt;/li&gt;
&lt;li&gt;便於功能擴展&lt;/li&gt;
&lt;li&gt;為多態鋪路&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;格式&#34;&gt;格式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; B{} &lt;span style=&#34;color:#228b22&#34;&gt;// A延展了B
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;A:子類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;派生類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;subclass
B:父類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;超類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;基類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;superclass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;繪圖時，通常用&lt;strong&gt;實心箭頭從子指向父&lt;/strong&gt;，例如:Student→Person，表示學生類繼承了人類&lt;/p&gt;
&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A繼承B之後，子類A就獲取了B聲明的所有屬性與方法，&lt;strong&gt;包含了私有(private)的&lt;/strong&gt;，&lt;strong&gt;但是&lt;/strong&gt;由於封裝性的影響，&lt;strong&gt;子類無法直接調用&lt;/strong&gt;父類私有(private)的屬性與方法&lt;/li&gt;
&lt;li&gt;不允許多重繼承(一人只能有一個老爸)&lt;/li&gt;
&lt;li&gt;可以多層繼承(允許有孫子，孫子也會繼承爺爺的特性)&lt;/li&gt;
&lt;li&gt;一個父類可以有多個子類(允許家族開枝散葉)&lt;/li&gt;
&lt;li&gt;所有類都繼承自java.lang.Object，換言之所有類都具有Object類的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;權限修飾符protected的應用&#34;&gt;權限修飾符protected的應用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;之前提過protected的範圍是&lt;strong&gt;不同包的子類&lt;/strong&gt;也能用，就是應在這了
&lt;ul&gt;
&lt;li&gt;實際發開中用的比較少一點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;方法的重寫&#34;&gt;方法的重寫&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;子類繼承父類後，對父類&lt;strong&gt;同名同參數&lt;/strong&gt;的方法，進行覆蓋&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子類重寫的方法權限修飾符必須不小於父類被重寫的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白話:不能把公車私有化，權限範圍不能縮小&lt;/li&gt;
&lt;li&gt;注意:不能重寫父類中聲明為private的方法(本身就見不到)，可以在子類中硬寫一個同名的方法，但那就不是構成重寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若父類被重寫的方法返回值是void，子類重寫的方法也必須返回void&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若父類被重寫的方法返回值是A類型，子類重寫的方法返回值可以是A類或A類的子類&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;舉例:父類返回值是動物類，子類可以重寫返回動物類或貓類狗類&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若父類被重寫的方法返回值是基本數據類型，子類重寫的方法返回值必須是相同基本數據類&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;舉例:父類返回double子類也必須是double，&lt;strong&gt;不能&lt;/strong&gt;是int期待他自動類型提升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拋出異常(throws)的規則與返回值相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以上白話小結:&lt;strong&gt;權限不能小於爸爸、返回值不能大於爸爸&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;補充:子類與父類同名同參數的方法要嘛都聲明為非static的(考慮重寫)，要嘛都聲明為static的(不是重寫，靜態類的方法不能被覆蓋)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字super&#34;&gt;關鍵字super&lt;/h1&gt;
&lt;p&gt;用來表示&lt;strong&gt;父類中的&lt;/strong&gt;屬性、方法、構造器&lt;/p&gt;
&lt;h3 id=&#34;調用屬性與方法&#34;&gt;調用屬性與方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以在子類的方法或構造中，用&amp;quot;super.方法&amp;quot;或&amp;quot;super.屬性&amp;quot;來顯式調用父類中聲明的屬性或方法&lt;/li&gt;
&lt;li&gt;就近原則，比如有人很欠揍的在A01類A02類A03類三代中都命名了同為id的屬性，我在A03調super.id會調到A02的id&lt;/li&gt;
&lt;li&gt;方法則基本上就是用來區分重寫的子類方法，跟原先父類的同名方法&lt;/li&gt;
&lt;li&gt;super不能突破封裝性的限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;調用構造器&#34;&gt;調用構造器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在子類的構造器中，顯示使用&amp;quot;super(形參列表)&amp;ldquo;顯式調用父類中聲明的指定構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;super(形參列表)&amp;ldquo;必須聲明在子類構造器的首行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意味著&amp;quot;super(形參列表)&amp;ldquo;與&amp;quot;this(形參列表)&amp;ldquo;只能二選一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若沒寫則首行默認是一個&amp;quot;super()&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意味著子類構造器中必定至少存在一個構造器來自於父類&lt;/li&gt;
&lt;li&gt;要是在父類中的空參構造器寫了某個特徵，那他所有往下的子類都帶有這個特徵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;子類物件實例化的過程&#34;&gt;子類物件實例化的過程&lt;/h1&gt;
&lt;h3 id=&#34;從結果上來看&#34;&gt;從結果上來看&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;子類繼承父類後，就獲取了父類聲明的屬性或方法&lt;/li&gt;
&lt;li&gt;創建子類的物件，在堆空間中就會加載所有父類中聲明的屬性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;從過程上來看&#34;&gt;從過程上來看&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當創建子類的物件時，必定會直接或間接的調用其父類的構造器，層層往上直到調用了java.lang.Object類中的空參構造器為止，正因為加載過所有父類的結構，所以才可以看到內存中有父類的結構，子類物件才可以考慮進行調用&lt;/li&gt;
&lt;li&gt;雖然子類創立物件時調用了父類的構造器，但自始至終就只new一個子類的物件&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211127-agg-ja-12/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>項目練習2-客戶訊息管理</title>
        <link>https://yoziming.github.io/post/211126-agg-ja-11/</link>
        <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211126-agg-ja-11/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211126-agg-ja-11/ -&lt;h1 id=&#34;項目練習-客戶訊息管理&#34;&gt;項目練習-客戶訊息管理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有點基礎這部分都蠻簡單的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有個知識點是這邊在&amp;quot;刪除用戶&amp;quot;的功能用到了循環鏈表的概念&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;deleteCustomer&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; index) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (customers[index] != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = index; i &amp;lt; total - 1; i++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 不能搬到total，否則[i+1]會越位
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            customers[i] = customers[i + 1];
        }
        customers[total - 1] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
        total--;

        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;刪除用戶成功!&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;索引無效，操作失敗&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;total表示當前數組中用戶總數，這個i &amp;lt; total - 1蠻關鍵的，我原先沒想到這邊要-1，還想著讓他把後面的null往前搬就好，沒考慮到末尾可能會越位的情況。&lt;/p&gt;
&lt;p&gt;搬完再跟customers[total - 1] = null搭配使用，這樣才是健壯的&lt;/p&gt;
- https://yoziming.github.io/post/211126-agg-ja-11/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>封裝性、構造器、this、包</title>
        <link>https://yoziming.github.io/post/211125-agg-ja-10/</link>
        <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211125-agg-ja-10/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211125-agg-ja-10/ -&lt;h1 id=&#34;封裝的設計思想&#34;&gt;封裝的設計思想&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;高內聚:類的內部數據操作細節自己完成，不允許外部干涉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;低耦合:對外露出少量的方法(API)供使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;舉例:微波爐，我不需要用戶控制燈光、波照、轉盤等等，只要他放入東西按下&amp;quot;解凍&amp;quot;即可。即所謂的&amp;quot;一鍵XX&amp;quot;功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;封裝性的體現&#34;&gt;封裝性的體現&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;將類的屬性私有化(private)，通過公共的(public)的set與get方法讓外部調用，舉例:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Animal a1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal();
        a1.&lt;span style=&#34;color:#658b00&#34;&gt;setAge&lt;/span&gt;(10);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(a1.&lt;span style=&#34;color:#658b00&#34;&gt;getAge&lt;/span&gt;());
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setAge&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i) {
        age = i;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getAge&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; age;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不對外公開的私有方法(比如對外是各種排序方法，內部自己寫了一個交換兩數據位置的&amp;quot;小工具&amp;quot;)&lt;/li&gt;
&lt;li&gt;單例模式(將構造器私有化)&lt;/li&gt;
&lt;li&gt;&amp;hellip;等等&lt;/li&gt;
&lt;li&gt;需要權限修飾符來配合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;權限修飾符&#34;&gt;權限修飾符&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JAVA中有4種權限修飾符，各自的範圍是: (從小到大，下包含上)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;private:限當前類內部使用&lt;/li&gt;
&lt;li&gt;default(缺省，就是不寫):同一個包名就可以調用&lt;/li&gt;
&lt;li&gt;protected:不同包它的子類可以調用&lt;/li&gt;
&lt;li&gt;public:相當於開放的&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;修飾的對象&#34;&gt;修飾的對象&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;以上4種可以用於修飾&lt;strong&gt;類的內部結構&lt;/strong&gt;:屬性、方法、構造器、內部類&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;class本身的修飾只能是缺省或public&lt;/strong&gt;，一個.java檔只能包含一個public類&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;構造器constructor&#34;&gt;構造器(constructor)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;作用:創立物件、初始化物件的屬性&lt;/li&gt;
&lt;li&gt;說明:如果沒有顯示定義構造器，則系統默認提供一個空參的構造器&lt;/li&gt;
&lt;li&gt;格式:權限修飾符 類名(形參列表){}，注意&lt;strong&gt;構造器名=類名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在一個類中可以定義多個構造器，彼此構成重載，舉例:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Animal a1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal(5);
        Animal a2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal(4, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;狗&amp;#34;&lt;/span&gt;);

    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String kind;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a) {
        age = a;
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;初始化並定義年齡為&amp;#34;&lt;/span&gt; + a);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, String k) {
        age = a;
        kind = k;
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;初始化並定義年齡為&amp;#34;&lt;/span&gt; + a + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，種類為&amp;#34;&lt;/span&gt; + kind);

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;初始化的順序&#34;&gt;初始化的順序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;默認初始化:0或null那種，例如private int age;，new一個實例出來age默認是0&lt;/li&gt;
&lt;li&gt;顯式初始化:定義屬性時直接寫好的，例如private int age=18;&lt;/li&gt;
&lt;li&gt;代碼塊初始化:專門做初始化的一個{}區(若有人手很賤把代碼塊放在顯式初始化之上，則代碼塊會比顯式先執行，但看到這樣做的人先拖出去打)&lt;/li&gt;
&lt;li&gt;構造器初始化，造實例時同時賦值&lt;/li&gt;
&lt;li&gt;造完物件後調用賦值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;javabean&#34;&gt;JavaBean&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaBean是一個遵循特定寫法的Java類，是一種Java語言編寫的可重用元件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它的方法命名，構造及行為必須符合特定的約定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;這個類必須具有一個公共的(public)空參構造器&lt;/li&gt;
&lt;li&gt;所有屬性私有化（private）&lt;/li&gt;
&lt;li&gt;私有化的屬性必須通過public型別的方法（getter和setter）暴露給其他程式，並且方法的命名也必須遵循一定的命名規範。&lt;/li&gt;
&lt;li&gt;這個類應是可序列化的（比如可以實現Serializable 介面，用於實現bean的永續性）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;uml類圖&#34;&gt;UML類圖&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Unified Modeling Language，統一建模語言，用於快速表示類&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20211123131818447.png&#34; alt=&#34;image-20211123131818447&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三個分區:從上到下為類名、屬性、方法&lt;/li&gt;
&lt;li&gt;權限修飾符:- private、+ public、# protected&lt;/li&gt;
&lt;li&gt;()內表示形參&lt;/li&gt;
&lt;li&gt;:後表示返回值類型&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字this的使用&#34;&gt;關鍵字This的使用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以用來修飾屬性、方法、構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this.XX，就是表明&amp;quot;&lt;strong&gt;當前物件&lt;/strong&gt;&amp;quot;，用在例如:形參與屬性同名時&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用在本類中構造器調用&lt;strong&gt;其他構造器&lt;/strong&gt;，最多一個且必須聲明在首行，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String kind;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt; = age;
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;初始化並定義年齡為&amp;#34;&lt;/span&gt; + age);
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age, String k) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;(age); &lt;span style=&#34;color:#228b22&#34;&gt;// 調用形參為age的，就是上面那個構造器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    kind = k;
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，種類為&amp;#34;&lt;/span&gt; + kind);

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-銀行用戶清單&#34;&gt;練習題-銀行用戶清單&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;造一個Account類，可以顯示餘額、存取錢&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Account&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; balance;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Account&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; init_balance) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;balance&lt;/span&gt; = init_balance;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getBalance&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; balance;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;deposit&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; amt) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (amt &amp;gt; 0) {
            balance += amt;
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;存錢成功&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;金額錯誤&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;withdraw&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; amt) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (balance &amp;gt;= amt) {
            balance -= amt;
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;取錢成功&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
        }
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;金額錯誤&amp;#34;&lt;/span&gt;);
    }

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;造一個Customer類，可以顯示用戶名跟他名下的Account&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Customer&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String name;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Account account;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Customer&lt;/span&gt;(String name) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; = name;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Account &lt;span style=&#34;color:#008b45&#34;&gt;getAccount&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; account;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setAccount&lt;/span&gt;(Account account) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;account&lt;/span&gt; = account;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;getName&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; name;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setName&lt;/span&gt;(String name) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; = name;
    }
}


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;造一個Bank類，可以存用戶列表為數組，跟用戶數量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Bank&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Customer[] customers;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; numberOfCustomer = 0;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Bank&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n) {
        customers = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer[n];
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;初始化了一個客戶清單，上限個數為&amp;#34;&lt;/span&gt; + n);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addCustomer&lt;/span&gt;(String name) {
        Customer cust = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(name);
        customers[numberOfCustomer++] = cust;
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;添加客戶成功&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Customer &lt;span style=&#34;color:#008b45&#34;&gt;getCustomer&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; index) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (index &amp;gt;= 0 &amp;amp;&amp;amp; index &amp;lt; numberOfCustomer) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; customers[index];
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;

    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getNumberOfCustomer&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; numberOfCustomer;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;調用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Bank b1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Bank(10);
        b1.&lt;span style=&#34;color:#658b00&#34;&gt;addCustomer&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;);
        b1.&lt;span style=&#34;color:#658b00&#34;&gt;getCustomer&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;setAccount&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Account(1000));
        b1.&lt;span style=&#34;color:#658b00&#34;&gt;getCustomer&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getAccount&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;withdraw&lt;/span&gt;(400);
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; balance = b1.&lt;span style=&#34;color:#658b00&#34;&gt;getCustomer&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getAccount&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getBalance&lt;/span&gt;();
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用戶&amp;#34;&lt;/span&gt; + b1.&lt;span style=&#34;color:#658b00&#34;&gt;getCustomer&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() +
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的餘額為&amp;#34;&lt;/span&gt; + balance);

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mvc設計模式&#34;&gt;MVC設計模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;太基礎不多提了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;M:數據庫，資料存這&lt;/li&gt;
&lt;li&gt;C:控制器，一切操作都寫這&lt;/li&gt;
&lt;li&gt;V:視圖，用戶實際交互的UI&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;package的使用&#34;&gt;Package的使用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;為了方便管理，類似命名空間的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用package聲明類或接口所屬的包，聲明在文件首行&lt;/li&gt;
&lt;li&gt;包名屬於標示符，遵循規範(全小寫aaa.bbb.ccc)，見明知意&lt;/li&gt;
&lt;li&gt;每&amp;quot;.&amp;ldquo;一次，代表一層文件目錄&lt;/li&gt;
&lt;li&gt;同一個包下，不能存在同名的類、接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;import的使用&#34;&gt;Import的使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;格式:import 包名&lt;/li&gt;
&lt;li&gt;聲明在包名和類的聲明之間(第二區塊的意思)&lt;/li&gt;
&lt;li&gt;可以用XXX.*來導入XXX下所有包(一層而已，之下的子包還是需要顯式導入)&lt;/li&gt;
&lt;li&gt;當前包與系統預設的(如java.lang)包可以不用寫導入&lt;/li&gt;
&lt;li&gt;若想調用&lt;strong&gt;當前包的子包&lt;/strong&gt;則還是需要顯式導入&lt;/li&gt;
&lt;li&gt;若想調用&lt;strong&gt;不同包下同名的類&lt;/strong&gt;，則需在調用時使用&amp;quot;全類名&amp;rdquo;，舉例:java.lang.String&lt;/li&gt;
&lt;li&gt;import static可以導入指定類或接口下的靜態屬性或方法 (很少用)&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211125-agg-ja-10/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>細說方法、重載、值傳遞</title>
        <link>https://yoziming.github.io/post/211124-agg-ja-09/</link>
        <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211124-agg-ja-09/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211124-agg-ja-09/ -&lt;h1 id=&#34;細說方法&#34;&gt;細說方法&lt;/h1&gt;
&lt;h3 id=&#34;方法的重載overload&#34;&gt;方法的重載(overload)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定義:同一各類中，允許存在一個以上的同名方法，只要他們的參數個數或參數類型不同即可&lt;/li&gt;
&lt;li&gt;跟方法的權限修飾符、返回值類型、形參變量名、方法體&lt;strong&gt;無關&lt;/strong&gt;，判斷重點在於參數本身&lt;/li&gt;
&lt;li&gt;可能會自動類型提升，舉例:傳入的是int形，方法中沒有int但有double，就會調用double&lt;/li&gt;
&lt;li&gt;典型的例子就是內建的println()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可變個數形參&#34;&gt;可變個數形參&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;格式:方法名(形參類型 &amp;hellip; 形參名)&lt;/li&gt;
&lt;li&gt;調用時傳入的形參數量可以是0到多個，包含數組&lt;/li&gt;
&lt;li&gt;與本類中方法名相同，形參不同的方法間構成重載(可共存)&lt;/li&gt;
&lt;li&gt;與本類中方法名相同，形參類型也相同的數組之間不構成重載(不可共存)
&lt;ul&gt;
&lt;li&gt;PS.這是歷史遺留問題，因為可變個數形參是JDK5加入的，以前都是用數組&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法內把它當作數組使用，遍歷itar (i=0;i&amp;lt;形參名.length;i++){}&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;必須聲明在末尾&lt;/strong&gt;，且最多只能有一個&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法參數的值傳遞&#34;&gt;方法參數的值傳遞&lt;/h3&gt;
&lt;h4 id=&#34;先複習一下變量的賦值規則&#34;&gt;先複習一下變量的賦值規則&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;變量是基本數據類型(byte、short、int、long、char、float、double、boolean)，賦值的是變量所保存的數據值&lt;/li&gt;
&lt;li&gt;變量是引用類型(引用類型就只有null跟地址值兩種情況)，賦值給的是所保存數據的地址值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;名詞解釋&#34;&gt;名詞解釋&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;形參:方法定義時，聲明的小括號中的參數&lt;/li&gt;
&lt;li&gt;實參:方法調用時，實際傳給形參的數據&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;傳參規則&#34;&gt;傳參規則&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;跟變量的賦值規則其實相同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果參數是基本數據類型，實參賦給形參的是&lt;strong&gt;數據值&lt;/strong&gt;(類似給一份副本)&lt;/li&gt;
&lt;li&gt;如果參數是引用類型，實參賦給形參的是&lt;strong&gt;地址值&lt;/strong&gt;(包含變量的數據類型)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;陷阱題&#34;&gt;陷阱題&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;println在char[]這有個特例，要避免踩坑就是調用時多看看方法格式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[]{1, 2, 3};
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr1); &lt;span style=&#34;color:#228b22&#34;&gt;// [I@1b6d3586
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] arr2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[]{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;};
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr2); &lt;span style=&#34;color:#228b22&#34;&gt;// abc
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習-在方法中引用其他類的方法並調用&#34;&gt;練習-在方法中引用其他類的方法並調用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        PassObject t1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PassObject();
        Circle c = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Circle();
        t1.&lt;span style=&#34;color:#658b00&#34;&gt;printAreas&lt;/span&gt;(c, 5);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(c.&lt;span style=&#34;color:#658b00&#34;&gt;radius&lt;/span&gt;);
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Circle&lt;/span&gt; {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; radius;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;findArea&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Math.&lt;span style=&#34;color:#658b00&#34;&gt;PI&lt;/span&gt; * radius * radius;
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;PassObject&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;printAreas&lt;/span&gt;(Circle c, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; t) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Radius\t\tArea&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= t; i++) {
            c.&lt;span style=&#34;color:#658b00&#34;&gt;radius&lt;/span&gt; = i;
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(c.&lt;span style=&#34;color:#658b00&#34;&gt;radius&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t\t&amp;#34;&lt;/span&gt; + c.&lt;span style=&#34;color:#658b00&#34;&gt;findArea&lt;/span&gt;());
        }
        c.&lt;span style=&#34;color:#658b00&#34;&gt;radius&lt;/span&gt; = t + 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;遞歸方法&#34;&gt;遞歸方法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;方法中調用自己達成類似for的效果，但注意必須能收斂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;求1到n之和&#34;&gt;求1到n之和&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getSum&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n == 1) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; n + getSum(n - 1);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;求某已知數列&#34;&gt;求某已知數列&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;已知數列f(0)=1,	f(1)=4,	f(n+2)=2*f(n+1)+f(n)，求f(10)=?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n == 0) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n == 1) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 4;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 2 * f(n - 1) + f(n - 2);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重點在不能寫f(n+2)=2*f(n+1)+f(n)，寫+2就死龜了，要左右都-2&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211124-agg-ja-09/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>物件導向:基本概念與學習路線</title>
        <link>https://yoziming.github.io/post/211123-agg-ja-08/</link>
        <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211123-agg-ja-08/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211123-agg-ja-08/ -&lt;h1 id=&#34;物件導向&#34;&gt;物件導向&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Object-oriented programming中國翻為&amp;quot;面向對象&amp;quot;，台灣則翻為物件導向&lt;/p&gt;
&lt;p&gt;我個人也覺得&amp;quot;物件導向&amp;quot;翻的比較信雅達，可以參考這篇知乎問答的解釋&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/22515658/answer/120754062&#34;&gt;https://www.zhihu.com/question/22515658/answer/120754062&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;
&lt;p&gt;首先用咖啡機煮咖啡為例:&lt;/p&gt;
&lt;h5 id=&#34;過程導向process-oriented&#34;&gt;過程導向(Process-oriented)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;過程導向強調的是功能行為，以&lt;strong&gt;函數為最小單位，考慮如何做&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;執行加咖啡豆方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行加水方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行煮咖啡方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行喝咖啡方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;物件導向object-oriented&#34;&gt;物件導向(Object-oriented)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;物件導向則是先將功能封裝進物件，強調具備功能的物件，以&lt;strong&gt;類/物件為最小單位，考慮誰來做&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在執行煮咖啡操作前要抽象出：人和咖啡機（分類），然後開始執行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;人.加咖啡豆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人.加水&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;咖啡機.煮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人.喝咖啡&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;物件導向的三大特徵&#34;&gt;物件導向的三大特徵&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;封裝(Encapsulation)&lt;/li&gt;
&lt;li&gt;繼承(Inheritance)&lt;/li&gt;
&lt;li&gt;多態(Polymorphism)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;類和實例&#34;&gt;類和實例&lt;/h3&gt;
&lt;p&gt;類(class):抽象的模板、概念上的定義&lt;/p&gt;
&lt;p&gt;物件(object):是實際存在的個體，也稱為實例(Instance)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如說有輪子、吃汽油跑的是汽車類。小弟的車new march則為實例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;類的設計&#34;&gt;類的設計&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;設計類其實就是設計類的成員&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;屬性(field):成員變量，又稱域、字段、欄位&lt;/p&gt;
&lt;p&gt;行為(method):成員方法，又稱函數&lt;/p&gt;
&lt;p&gt;舉例:汽車類的屬性有輪子大小、有品牌名稱；汽車的行為有吃汽油跑&lt;/p&gt;
&lt;h3 id=&#34;練習-在java創建類並實例化&#34;&gt;練習-在JAVA創建類並實例化&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Car&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    String brand;
    String owner;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; isNew = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 可以給預設值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 行為(方法)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;crash&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (isNew) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(owner + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;新買的&amp;#34;&lt;/span&gt; + brand + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;出車禍，很嘔&amp;#34;&lt;/span&gt;);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;老車，撞就撞了&amp;#34;&lt;/span&gt;);
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 實例化
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        car c1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Car();
        c1.&lt;span style=&#34;color:#658b00&#34;&gt;owner&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;小弟&amp;#34;&lt;/span&gt;;
        c1.&lt;span style=&#34;color:#658b00&#34;&gt;brand&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;march&amp;#34;&lt;/span&gt;;

        &lt;span style=&#34;color:#228b22&#34;&gt;// 調用
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        c1.&lt;span style=&#34;color:#658b00&#34;&gt;crash&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;屬性成員變量與局部變量的差異&#34;&gt;屬性(成員變量)與局部變量的差異&lt;/h3&gt;
&lt;h5 id=&#34;聲明的位置&#34;&gt;聲明的位置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;屬性:直接放在類的一對{}內&lt;/li&gt;
&lt;li&gt;局部變量:聲明在方法、方法形餐、代碼塊、構造器形參、構造器內部的變量&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;記憶體中位置&#34;&gt;記憶體中位置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;屬性:對於非static的屬性，放在堆。
&lt;ul&gt;
&lt;li&gt;static為線程共享，在類加載階段就實例化，放在方法區&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;局部變量:放在棧&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;權限修飾符&#34;&gt;權限修飾符&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;封裝時會用到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;屬性:可以在聲明時修飾權限，常見的有private、public、protected、缺省&lt;/li&gt;
&lt;li&gt;局部變量:只允許使用final&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;默認初始化狀態&#34;&gt;默認初始化狀態&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;屬性:根據其類型有對應的默認值，也可以在聲明時自定義&lt;/li&gt;
&lt;li&gt;局部變量:沒有默認初始化值，調用之前一定要顯示賦值，否則報錯。
&lt;ul&gt;
&lt;li&gt;形參則是調用時賦值即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法的聲明與使用&#34;&gt;方法的聲明與使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;方法:描述類應該具有的功能，例如:狗類會汪汪叫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;聲明格式&#34;&gt;聲明格式&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;方法名是標示符，依規範用小駝峰(舉例:touchCat)表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;權限修飾符 返回值類型 &lt;span style=&#34;color:#008b45&#34;&gt;方法名&lt;/span&gt;(形參列表){
&lt;span style=&#34;color:#228b22&#34;&gt;//方法體
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
舉例:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; hour){} &lt;span style=&#34;color:#228b22&#34;&gt;// void=無返回值
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;權限修飾符-1&#34;&gt;權限修飾符&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;常見的4種為private、public、protected、缺省&lt;/li&gt;
&lt;li&gt;進階的有static、final、abstract後面封裝時再講&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;返回值與形參&#34;&gt;返回值與形參&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;有沒有返回值跟形參，要看具體情境判斷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果有返回值，必須在聲明時指定返回值的類型，且方法中必須使用&amp;quot;return 數據&amp;quot;返回該類型的變量或常量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若沒有返回值，聲明時用void，通常就不用return；也可以用，但只能純&amp;quot;return&amp;quot;表示結束方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以聲明0或多個形參，格式:數據類型1 形參1,數據類型2 形參2,&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;使用注意&#34;&gt;使用注意&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;方法中可以調用當前類的屬性或其他方法&lt;/li&gt;
&lt;li&gt;也可以調用自己(遞歸調用)，但切記要能閉合而不是造成無限循環&lt;/li&gt;
&lt;li&gt;方法中不能再定義方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習-建立一個學生類的數組&#34;&gt;練習-建立一個學生類的數組&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;創建一個學生類，包含學號1~20、隨機的年級與成績，用數組表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        Student[] stus = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student[20];
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 20; i++) {
            stus[i] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student(); &lt;span style=&#34;color:#228b22&#34;&gt;// 相當於給數組中的每個元素賦值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;number&lt;/span&gt; = i + 1;
            stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;state&lt;/span&gt; = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) (Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;() * 6 + 1);
            stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;score&lt;/span&gt; = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) (Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;() * 101);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; stus.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學號&amp;#34;&lt;/span&gt; + stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;number&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;,年級是&amp;#34;&lt;/span&gt; + stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;state&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;,成績是&amp;#34;&lt;/span&gt; + stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;score&lt;/span&gt;);
        }
    }
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt; {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; number;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; state;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; score;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重點:new了數組stus後，其中每一個物件stus[n]也都需要new才能使用&lt;/p&gt;
&lt;h3 id=&#34;匿名物件&#34;&gt;匿名物件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一次性使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類名.&lt;span style=&#34;color:#658b00&#34;&gt;欲調用的屬性或方法&lt;/span&gt;
或在參數中直接new &lt;span style=&#34;color:#008b45&#34;&gt;Circle&lt;/span&gt;()調用一個預設的類的實例
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;h3 id=&#34;學習物件導向的三條主線&#34;&gt;學習物件導向的三條主線&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;類及類的成員:屬性、方法、構造器；代碼塊、內部類&lt;/li&gt;
&lt;li&gt;物件導向特徵:封裝、繼承、多態、抽象&lt;/li&gt;
&lt;li&gt;其他關鍵字:this、super、abstract、interface、static、final、package、import&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一切都是物件&#34;&gt;一切都是物件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在JAVA中我們把功能、結構都封裝到類中，通過類的實例化來調用具體的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;類與物件的操作順序&#34;&gt;類與物件的操作順序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;創建類，定義屬性、方法&lt;/li&gt;
&lt;li&gt;類的實例化(new一個該類的物件)&lt;/li&gt;
&lt;li&gt;調用物件的結構(物件.屬性、物件.方法)&lt;/li&gt;
&lt;/ol&gt;
- https://yoziming.github.io/post/211123-agg-ja-08/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>數組的填值、複製、查找、排序、常用工具類</title>
        <link>https://yoziming.github.io/post/211122-agg-ja-07/</link>
        <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211122-agg-ja-07/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211122-agg-ja-07/ -&lt;h1 id=&#34;數組常用算法&#34;&gt;數組常用算法&lt;/h1&gt;
&lt;h3 id=&#34;數據結構&#34;&gt;數據結構&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;程序=數據結構+演算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;數據間的邏輯關係:集合、一對一、一對多、多對多&lt;/li&gt;
&lt;li&gt;數據的儲存結構:
&lt;ul&gt;
&lt;li&gt;線性表:順序表(如:數組)、鏈表、棧、隊列&lt;/li&gt;
&lt;li&gt;樹形結構:二叉樹&lt;/li&gt;
&lt;li&gt;圖形結構&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;演算法-algorithm&#34;&gt;演算法-Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;檢索&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加密&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-帕斯卡三角&#34;&gt;練習題-帕斯卡三角&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;形狀不是很漂亮&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20211120160204410.png&#34; alt=&#34;image-20211120160204410&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[10][];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
    arr[i] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[i + 1];
    &lt;span style=&#34;color:#228b22&#34;&gt;// 兩外邊都是1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    arr[i][0] = 1; 
    arr[i][i] = 1;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i &amp;gt; 1) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 1; j &amp;lt; arr[i].&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; j++) {
            arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j];
        }
    }
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; arr[i].&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; j++) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(arr[i][j] + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;題外話-關於行列&#34;&gt;題外話-關於行列&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;台灣教育部規定跟小學老師教的是&amp;quot;直行橫列&amp;quot;，但這個已經不合時宜了&lt;/p&gt;
&lt;p&gt;比如說&amp;quot;一行文字&amp;quot;，現代人直覺想到是橫的一行字；程式碼&amp;quot;line幾&amp;quot;我們也說&amp;quot;第幾行&amp;quot;&lt;/p&gt;
&lt;p&gt;如果溝通時混淆可以用英文，這有個記憶小訣竅&lt;/p&gt;
&lt;p&gt;column，看col中的l就是直的，列。而row，寫w是橫著寫過去，所以是橫的，行&lt;/p&gt;
&lt;p&gt;中國、日本都是這樣用，確實比較合理。現在連公文都橫式了，台灣教育部不改革真的失職&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;難題-螺旋矩陣&#34;&gt;難題-螺旋矩陣&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;這個leetcode中等難度了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = 5;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[n][n];
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; count = 0; &lt;span style=&#34;color:#228b22&#34;&gt;// 填入的數值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxX = n - 1; &lt;span style=&#34;color:#228b22&#34;&gt;// x軸最大下標
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxY = n - 1;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; minX = 0; &lt;span style=&#34;color:#228b22&#34;&gt;// x軸最小下標
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; minY = 0;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (minX &amp;lt;= maxX) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; x = minX; x &amp;lt;= maxX; x++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 左到右
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arr[minY][x] = ++count; &lt;span style=&#34;color:#228b22&#34;&gt;// y不變，x從0、1、2..直到填滿
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    minY++; &lt;span style=&#34;color:#228b22&#34;&gt;// 走到右上角頂了，此時x固定，開始加+Y往下走
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; y = minY; y &amp;lt;= maxY; y++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 右到下
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arr[y][maxX] = ++count;
    }
    maxX--;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; x = maxX; x &amp;gt;= minX; x--) { &lt;span style=&#34;color:#228b22&#34;&gt;// 下到左
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arr[maxY][x] = ++count;
    }
    maxY--;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; y = maxY; y &amp;gt;= minY; y--) { &lt;span style=&#34;color:#228b22&#34;&gt;// 左到上
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arr[y][minX] = ++count;
    }
    minX++;
}
&lt;span style=&#34;color:#228b22&#34;&gt;// 印
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; arr[i].&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; j++) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(arr[i][j] + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;java產生隨機數&#34;&gt;JAVA產生隨機數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Math.random()方法是返回一個0到1之間，前閉後開[)aka含前不含後的double值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;()*10) &lt;span style=&#34;color:#228b22&#34;&gt;// 返回0到9的隨機整數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;()*n) &lt;span style=&#34;color:#228b22&#34;&gt;// 返回0到n-1的隨機整數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;()*100)+1 &lt;span style=&#34;color:#228b22&#34;&gt;// 返回1到100的隨機整數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;() * (99 - 10 + 1) + 10) &lt;span style=&#34;color:#228b22&#34;&gt;// 返回2位正整數[10,99]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;()*(MAX-min+1)) + min &lt;span style=&#34;color:#228b22&#34;&gt;// 返回min到m的隨機整數
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;數組的淺複製&#34;&gt;數組的淺複製&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JAVA中引用類型互相賦值其實是傳遞指針，舉例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr1 = {1, 2, 3};
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr2;
arr2 = arr1; &lt;span style=&#34;color:#228b22&#34;&gt;// 其實是指到同一個記憶體地址了，畢竟沒有new東西
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr2[0] = 9;
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arr2=\t&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j : arr2) { &lt;span style=&#34;color:#228b22&#34;&gt;// 順便練習一下for-each遍歷數組
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(j + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
}
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arr1=\t&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j : arr1) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(j + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
}
&lt;span style=&#34;color:#228b22&#34;&gt;// arr1跟arr2的[0]都變成9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;真正複製數組&#34;&gt;真正複製數組&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;new一個然後一一對應賦值，舉例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[10];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr1.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
    arr2[i] = arr1[i];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;數組序列反轉&#34;&gt;數組序列反轉&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;記得/2，不然又全換回去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; / 2; i++) {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp = arr[i];
    arr[i] = arr[arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - i - 1];
    arr[arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - i - 1] = tmp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 方法2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0, j = arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; i &amp;lt; j; i++, j--) {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;數組的查找&#34;&gt;數組的查找&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;比對String是否相同使用.equals()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;String[] arr = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;李四&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;王五&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;劉六&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;張三&amp;#34;&lt;/span&gt;};
String dest = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;張三&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (dest.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(arr[i])) {
        flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;找到對應元素，下標為&amp;#34;&lt;/span&gt; + i);
    }
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;查無結果&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二分查找&#34;&gt;二分查找&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;重點在於建立head、middle、end三個下標索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr = {1, 20, 22, 41, 52, 53, 67, 75, 80, 99};
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; dest = 80;
&lt;span style=&#34;color:#228b22&#34;&gt;// 二分查找
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; head = 0; &lt;span style=&#34;color:#228b22&#34;&gt;// 索引首
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; end = arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 索引尾
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (head &amp;lt;= end) {
	&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; mid = (head + end) / 2; &lt;span style=&#34;color:#228b22&#34;&gt;// 這個mid每輪都要更新不能放在while外
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (dest == arr[mid]) {
		System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;找到了，下標為&amp;#34;&lt;/span&gt; + mid);
		flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
	} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (dest &amp;lt; arr[mid]) {
		end = mid - 1;
	} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
		head = mid + 1;
	}
}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
	System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;沒找到&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;排序&#34;&gt;排序&lt;/h1&gt;
&lt;h3 id=&#34;衡量排序法優劣的指標&#34;&gt;衡量排序法優劣的指標&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;時間複雜度:比較的次數、移動的次數&lt;/li&gt;
&lt;li&gt;空間複查度:所需記憶體&lt;/li&gt;
&lt;li&gt;穩定性:若序列中A與B的關鍵字值相等，排序後A、B次序保持不變，稱為穩定的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;排序分類&#34;&gt;排序分類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;內部排序:不需要額外的儲存器(如硬碟)，在記憶體中就能完成&lt;/li&gt;
&lt;li&gt;外部排序:參與的數據量極大，需藉由外部儲存協助完成，常見的有多路歸併排序。可以認為外部排序是多次配部排序組成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;十大經典排序法&#34;&gt;十大經典排序法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hustcc/JS-Sorting-Algorithm&#34;&gt;https://github.com/hustcc/JS-Sorting-Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;動態圖文講解+各大語言實例，簡直完美&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;確定性算法的五大特徵&#34;&gt;確定性算法的五大特徵&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;輸入:有0或多個輸入數據，必須清楚描述與定義&lt;/li&gt;
&lt;li&gt;輸出:至少1個輸出結果，不可沒有結果&lt;/li&gt;
&lt;li&gt;有限性:不可無限循環，且每步驟在可接受的時間內完成&lt;/li&gt;
&lt;li&gt;明確性:每一步都有明確含意，不可有歧意&lt;/li&gt;
&lt;li&gt;可行性:每一步都是清楚可行的，能讓用戶紙筆記算求出答案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java冒泡排序bubble-sort&#34;&gt;JAVA冒泡排序(Bubble Sort)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;N個元素要進行冒泡排序，最多總共進行N-1趟排序，第i趟的比較次數為(N-i)次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; i++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 外圈循環趟數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - i - 1; j++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 內圈比較次數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (arr[j] &amp;gt; arr[j + 1]) { &lt;span style=&#34;color:#228b22&#34;&gt;// 若前比後大則交換。排完由小到大
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; temp = arr[j];
            arr[j] = arr[j + 1];
            arr[j + 1] = temp;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;arrays工具類的使用&#34;&gt;Arrays工具類的使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;util包提供常用的功能如下，還有很多可以自己探索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(arr1,arr2)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;判斷2數組是否完全相符
Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(arr)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;將arr完整轉成string&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;方便印出
Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;fill&lt;/span&gt;(arr,n)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;將n作為元素填滿數組&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;方便初始化
Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;sort&lt;/span&gt;(arr)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;快速排序
Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;binarySearch&lt;/span&gt;(arr,dest)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;二分查找返回下標或負數(找不到)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;生成0到99長度為n的序列並排序&#34;&gt;生成0到99長度為n的序列並排序&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// creat and print array
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = 10; &lt;span style=&#34;color:#228b22&#34;&gt;// arr.length
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[n];
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
    arr[i] = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) (Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;() * 100);
}
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arr=&amp;#34;&lt;/span&gt; + Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(arr));
&lt;span style=&#34;color:#228b22&#34;&gt;// sort
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;sort&lt;/span&gt;(arr);
&lt;span style=&#34;color:#228b22&#34;&gt;// print array after sort
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arr&amp;#39;=&amp;#34;&lt;/span&gt; + Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(arr));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;數組常見的錯誤&#34;&gt;數組常見的錯誤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ArrayIndexOutOfBoundsException，下標越界&lt;/li&gt;
&lt;li&gt;NullPointerException，空指針異常，比如想存取一個引用類型其中某元素但沒賦值的情況&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211122-agg-ja-07/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>數組Array</title>
        <link>https://yoziming.github.io/post/211121-agg-ja-06/</link>
        <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211121-agg-ja-06/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211121-agg-ja-06/ -&lt;h1 id=&#34;數組array&#34;&gt;數組Array&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;多個相同類型的數據按一定的順序排列的集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;結構&#34;&gt;結構&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;數組名&lt;/li&gt;
&lt;li&gt;元素&lt;/li&gt;
&lt;li&gt;下標aka角標/索引&lt;/li&gt;
&lt;li&gt;長度(元素的個數)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;數組本身是引用數據類型，其中的元素可以是任何類型&lt;/li&gt;
&lt;li&gt;數組的排列是有序的&lt;/li&gt;
&lt;li&gt;在記憶體中開闢一整塊連續的空間，數組名引用的是這塊連續空間的首地址&lt;/li&gt;
&lt;li&gt;長度確定後就&lt;strong&gt;不可更改&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;聲明與初始化&#34;&gt;聲明與初始化&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;數組必須初始化才能使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;方法1-靜態初始化，創建時填入已知的元素內容，由系統判定長度&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array1; &lt;span style=&#34;color:#228b22&#34;&gt;// 聲明
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;array1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[]{1, 2, 3}; &lt;span style=&#34;color:#228b22&#34;&gt;// 靜態初始化:同時對元素賦值了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 也可以合併成
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[]{1, 2, 3};
&lt;span style=&#34;color:#228b22&#34;&gt;// 可以再縮寫成 (類型推斷)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array1 = {1, 2, 3};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;方法2-動態初始化，創建時填入已知的長度，元素內容為0或空(系統默認，後述)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array3 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[3]; &lt;span style=&#34;color:#228b22&#34;&gt;// 動態初始化，注意後面的[5]是指長度
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;訪問數組內的元素&#34;&gt;訪問數組內的元素&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;沒特別的，一樣從0~長度-1。長度=array.length&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;舉例:array[0]、array[1]&amp;hellip;array[array.length-1]&lt;/p&gt;
&lt;h3 id=&#34;遍歷&#34;&gt;遍歷&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;直接print數組會得到類似[I@1b6d3586這樣的一個地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; array.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(array[i]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上可用for-each縮寫&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j : array) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(j);
}
&lt;span style=&#34;color:#228b22&#34;&gt;// 這是JAVA5後增加的for-each寫法，用在不管下標，專門只遍歷的情境，格式為
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(元素的數據類型 變量 : Collection集合or數組){
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;各種元素的系統默認值&#34;&gt;各種元素的系統默認值&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;剛剛提到動態初始化時，只定了長度，元素內容由系統賦予默認值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;整型(byte、short、int)為0&lt;/li&gt;
&lt;li&gt;浮點數為0.0&lt;/li&gt;
&lt;li&gt;char為\u0000(ASCII碼的null)，不是&#39;0&amp;rsquo;也不是空格(空格的編號是\u0020)，就顯示為空，要注意&lt;/li&gt;
&lt;li&gt;boolean為false&lt;/li&gt;
&lt;li&gt;引用數據類型則為null，就是空&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一維數組在記憶體中的情況&#34;&gt;一維數組在記憶體中的情況&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;比較複雜，引用課堂的截圖&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Kb411W75N?p=146&amp;amp;t=763.1&#34;&gt;https://www.bilibili.com/video/BV1Kb411W75N?p=146&amp;amp;t=763.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20211119215010800.png&#34; alt=&#34;image-20211119215010800&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;棧裡面放局部變量&lt;/li&gt;
&lt;li&gt;堆裡面放new出來的東西&lt;/li&gt;
&lt;li&gt;這張圖是簡單表示執行右上角的程式碼時記憶體中發生的事&lt;/li&gt;
&lt;li&gt;有瑕疵，因為string也是引用類型，那個劉德華、張學友其實不是那樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-學生成績分級&#34;&gt;練習題-學生成績分級&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;輸入學生人數與成績，找出最高分，並依照最高分-10以內為A級、-20為B、-30為C、其餘不及格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入學生人數&amp;lt;數字正整數&amp;gt;...&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; stuNum = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] stuScore = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[stuNum];
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxScore = 0;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; stuNum; i++) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績&amp;lt;數字正整數&amp;gt;...&amp;#34;&lt;/span&gt;);
    stuScore[i] = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (stuScore[i] &amp;gt; maxScore) {
        maxScore = stuScore[i];
    }
}
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;成績登記完畢，最高分為&amp;#34;&lt;/span&gt; + maxScore);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; stuNum; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((maxScore - stuScore[i]) &amp;lt;= 10) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為A等級&amp;#34;&lt;/span&gt;);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((maxScore - stuScore[i]) &amp;lt;= 20) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為B等級&amp;#34;&lt;/span&gt;);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((maxScore - stuScore[i]) &amp;lt;= 30) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為C等級&amp;#34;&lt;/span&gt;);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績不及格&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;二維數組&#34;&gt;二維數組&lt;/h1&gt;
&lt;h3 id=&#34;聲明&#34;&gt;聲明&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 靜態初始
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][]{{1, 2}, {3, 4, 5}, {6}};
&lt;span style=&#34;color:#228b22&#34;&gt;// 靜態+類型推斷
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr2 = {{1, 2}, {3, 4, 5}, {6}};
&lt;span style=&#34;color:#228b22&#34;&gt;// 動態初始1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;String[][] arr3 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String[4][5]; &lt;span style=&#34;color:#228b22&#34;&gt;//相當於一個4X5的表格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 動態初始2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;String[][] arr4 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String[3][]; &lt;span style=&#34;color:#228b22&#34;&gt;// 已知行，省略列。反之報錯
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;String[][][] arr6 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String[3][][]; &lt;span style=&#34;color:#228b22&#34;&gt;//相當於3X?X?的表格，總之第一個[](外層元素)必須指定長度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 也正確的寫法，容易混淆不建議
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr5[] = {{1, 2}, {3, 4, 5}, {6}};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;遍歷-1&#34;&gt;遍歷&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr = {{1, 2, 3}, {4, 5}};
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; arr[i].&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; j++) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(arr[i][j]);
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;記憶體解析&#34;&gt;記憶體解析&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[3][4];
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr);
&lt;span style=&#34;color:#228b22&#34;&gt;// [[I@1b6d3586，[[表示二維數組
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr[0]);
&lt;span style=&#34;color:#228b22&#34;&gt;// 得到[I@4554617c，[表示一維數組，I表示類型是int，@地址位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[3][];
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr2[0]); &lt;span style=&#34;color:#228b22&#34;&gt;// 得到null
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;image-20211120132815535.png&#34; alt=&#34;image-20211120132815535&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;外層元素在棧，也是外層元素(第一個[])必須指定長度的原因&lt;/p&gt;
&lt;h3 id=&#34;練習題-二維數組邏輯判斷&#34;&gt;練習題-二維數組邏輯判斷&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211120135915226.png&#34; alt=&#34;image-20211120135915226&#34;&gt;&lt;/p&gt;
- https://yoziming.github.io/post/211121-agg-ja-06/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>台灣人常唸錯的IT英文單字</title>
        <link>https://yoziming.github.io/post/211120-it-english-taiwanese-problems/</link>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211120-it-english-taiwanese-problems/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211120-it-english-taiwanese-problems/ -&lt;h1 id=&#34;台灣人常唸錯的it英文單字&#34;&gt;台灣人常唸錯的IT英文單字&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;非母語有一些口音在所難免，我不求最正宗的發音，但至少不太要離譜甚至產生歧意，畢竟能夠順利溝通交流才是最重要的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cache，錯誤&amp;quot;catch&amp;quot;，正確它和&amp;quot;cash&amp;quot;同音&lt;/p&gt;
&lt;p&gt;archive，錯誤&amp;quot;阿起府&amp;quot;，正確&amp;quot;阿-凱f&amp;quot;，f幾乎不發音&lt;/p&gt;
&lt;p&gt;SQL，錯誤&amp;quot;circle&amp;quot;，正確&amp;quot;see-qual&amp;quot;&lt;/p&gt;
&lt;p&gt;hidden，錯誤&amp;quot;嗨-等&amp;quot;，正確&amp;quot;he-等&amp;quot;&lt;/p&gt;
&lt;p&gt;suite，錯誤&amp;quot;訴-特&amp;quot;，正確&amp;quot;sweet&amp;quot;，發音相同都是swēt&lt;/p&gt;
&lt;p&gt;virtual，錯誤&amp;quot;V-糗&amp;quot;，正確&amp;quot;ver-秋歐&amp;quot;，虛擬的&lt;/p&gt;
&lt;p&gt;visual，正確&amp;quot;V-九歐&amp;quot;，視覺的，微軟的Visual Studio Code是這個&lt;/p&gt;
&lt;p&gt;mobile，錯誤&amp;quot;哞比歐&amp;quot;，正確&amp;quot;ㄇㄡ-ㄅㄛˇ&amp;quot;&lt;/p&gt;
&lt;p&gt;maintain，man-ten，動詞維護&lt;/p&gt;
&lt;p&gt;maintenance，名詞維護，正確&amp;quot;咩-特-ㄋㄜˇ-死&amp;quot;4個音，重音在特&lt;/p&gt;
&lt;p&gt;module，正確&amp;quot;媽-九&amp;quot;&lt;/p&gt;
&lt;p&gt;enum，正確&amp;quot;衣-囊&amp;quot;，名詞枚舉&lt;/p&gt;
&lt;p&gt;enumerate，正確&amp;quot;以-new-merate&amp;quot;，動詞枚舉&lt;/p&gt;
&lt;p&gt;annotation，正確&amp;quot;A-ㄋ-tation&amp;quot;，名詞註解&lt;/p&gt;
&lt;p&gt;Azure，正確&amp;quot;阿九兒&amp;quot;，連一起速念&lt;/p&gt;
&lt;p&gt;parameter，錯誤&amp;quot;怕拉-咪特&amp;quot;，正確&amp;quot;ㄆ˙-ㄌㄩㄝ-ㄇ˙-ter&amp;quot;4個音，第一是輕聲ㄆ，重音在第二個音節&lt;/p&gt;
&lt;p&gt;error，錯誤&amp;quot;ㄟ摟&amp;quot;，正確&amp;quot;ㄟ-惹&amp;quot;&lt;/p&gt;
&lt;p&gt;format，錯誤&amp;quot;否-妹t&amp;quot;，正確&amp;quot;F歐-美t&amp;quot;&lt;/p&gt;
&lt;p&gt;Period，正確&amp;quot;P-re-诶&amp;quot;&lt;/p&gt;
&lt;p&gt;copy，錯誤&amp;quot;摳比&amp;quot;，正確&amp;quot;咖痞&amp;quot;&lt;/p&gt;
&lt;p&gt;lambda，正確&amp;quot;ㄌ一ㄢ-打&amp;quot;&lt;/p&gt;
&lt;p&gt;image，錯誤&amp;quot;一美舉&amp;quot;，正確&amp;quot;一米舉&amp;quot;&lt;/p&gt;
&lt;p&gt;Algorithm，正確&amp;quot;凹狗-rithm&amp;quot;&lt;/p&gt;
&lt;p&gt;width，錯誤&amp;quot;wide&amp;quot;，正確&amp;quot;with&amp;quot;，當作d不存在&lt;/p&gt;
&lt;p&gt;lock，錯誤&amp;quot;肉可&amp;quot;，正確&amp;quot;辣可&amp;quot;&lt;/p&gt;
&lt;p&gt;query，錯誤&amp;quot;誇-李&amp;quot;，正確&amp;quot;ㄎㄨㄧ-ㄜˇ-ry&amp;quot;3音連速念&lt;/p&gt;
&lt;p&gt;confirm，錯誤&amp;quot;康鳳&amp;quot;，正確&amp;quot;ken-firm&amp;quot;，firm=&amp;ldquo;份兒&amp;quot;連念。這是認證、確認的意思&lt;/p&gt;
&lt;p&gt;conform，錯誤&amp;quot;康鳳&amp;rdquo;，正確&amp;quot;ken-form&amp;quot;。這是符合的意思，兩字常常誤用誤念&lt;/p&gt;
&lt;p&gt;register，錯誤&amp;quot;re-季-ster&amp;quot;，正確&amp;quot;ㄌㄩㄝ-幾-ster&amp;quot;&lt;/p&gt;
&lt;p&gt;Arduino，正確&amp;quot;阿督衣no&amp;quot;&lt;/p&gt;
&lt;p&gt;result，錯誤&amp;quot;re-造&amp;quot;，正確&amp;quot;re-奏特&amp;quot;，奏特連念&lt;/p&gt;
&lt;p&gt;chrome，錯誤&amp;quot;恐龍米&amp;quot;，正確&amp;quot;窟窿&amp;quot;連念到近乎一個音&lt;/p&gt;
&lt;p&gt;null，有些人念&amp;quot;怒偶&amp;quot;，正宗應為&amp;quot;鬧&amp;quot;、或&amp;quot;NO&amp;quot;，但這跟區域有關係，就算誤念成nil大概也能懂，不用太強求&lt;/p&gt;
&lt;p&gt;record，做名詞紀錄時，正確&amp;quot;ㄌㄩㄝ-渴d&amp;quot;，d幾乎不發音&lt;/p&gt;
&lt;p&gt;record，做動詞紀錄時，正確&amp;quot;re-扣d&amp;quot;，規律幾乎都是名詞重音在前，動詞重音在後&lt;/p&gt;
&lt;p&gt;resume，做名詞履歷時，正確&amp;quot;ㄌㄩㄝ-su-美&amp;quot;，重音在前&lt;/p&gt;
&lt;p&gt;resume，做動詞恢復時，正確&amp;quot;re-zoom&amp;quot;，重音在後&lt;/p&gt;
&lt;p&gt;modem，錯誤&amp;quot;某店&amp;quot;，正確&amp;quot;ㄇㄡ-等&amp;quot;&lt;/p&gt;
&lt;p&gt;cancel，正確&amp;quot;ken-叟&amp;quot;，取消&lt;/p&gt;
&lt;p&gt;cancer，正確&amp;quot;ken-ser&amp;quot;，癌症，兩字常常誤用誤念&lt;/p&gt;
&lt;p&gt;guarantee，正確&amp;quot;ㄍㄟ-掄-替&amp;quot;&lt;/p&gt;
&lt;p&gt;standard，錯誤&amp;quot;stan-打&amp;quot;，正確&amp;quot;stan-得兒&amp;quot;&lt;/p&gt;
&lt;p&gt;execute，正確&amp;quot;ㄟ-ser-cute&amp;quot;&lt;/p&gt;
&lt;p&gt;compile，正確&amp;quot;康-派-偶&amp;quot;，動詞編譯&lt;/p&gt;
&lt;p&gt;compiler，正確&amp;quot;康-派l-惹&amp;quot;，l幾乎不發音，名詞編譯器&lt;/p&gt;
&lt;p&gt;exit，正確&amp;quot;ㄟㄎ-sit&amp;quot;，常誤念成exist&lt;/p&gt;
&lt;p&gt;vehicle，正確&amp;quot;V-诶口&amp;quot;&lt;/p&gt;
- https://yoziming.github.io/post/211120-it-english-taiwanese-problems/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>嵌套循環、break、continue、項目練習1-家庭收支</title>
        <link>https://yoziming.github.io/post/211120-agg-ja-05/</link>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211120-agg-ja-05/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211120-agg-ja-05/ -&lt;h1 id=&#34;嵌套循環&#34;&gt;嵌套循環&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;就是for中有for，有時候需要多花點時間理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;內層循環整個遍歷完，外層循環才執行一次&lt;/li&gt;
&lt;li&gt;假設外層循環要執行m次，內層循環要執行n次。整個跑完內層循環一共執行了m*n次&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-印菱形&#34;&gt;練習題-印菱形&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入想印的菱形邊長n=...&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;span style=&#34;color:#228b22&#34;&gt;// 上半部分(含中間最長邊)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= n; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; n - i; j++) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; k = 0; k &amp;lt; i; k++) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;* &amp;#34;&lt;/span&gt;);
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
}
&lt;span style=&#34;color:#228b22&#34;&gt;// 下半部分(從最長-1開始)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= n; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; i; j++) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; k = 0; k &amp;lt; n - i; k++) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;* &amp;#34;&lt;/span&gt;);
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習題-乘法表&#34;&gt;練習題-乘法表&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 9; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 1; j &amp;lt;= 9; j++) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; + j + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; + i * j + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
}
&lt;span style=&#34;color:#228b22&#34;&gt;// 只想要半邊則第二行j&amp;lt;=9改成j&amp;lt;=i
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習題-找完全數&#34;&gt;練習題-找完全數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;完全數（Perfect number），又稱完美數或完備數，是一些特殊的自然數：它所有的真因子（即除了自身以外的因數）的和，恰好等於它本身。例如6，它有因數1、2、3、6，除去它本身6外，其餘3個數相加，{1}+{2}+{3}=6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 1000; i++) {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = 0;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 1; j &amp;lt; i; j++) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % j == 0) {
            sum += j;
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (sum == i) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;為完全數&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習題-找質數&#34;&gt;練習題-找質數&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直觀版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 若把這行放在第一個循環中，則會聲明99次，占資源
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 2; i &amp;lt;= 10000; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 2; j &amp;lt; i; j++) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % j == 0) { &lt;span style=&#34;color:#228b22&#34;&gt;// i被某數(2~自己-1)除盡
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 不是質數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;是質數&amp;#34;&lt;/span&gt;);
    }
    flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 重置flag
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小優化版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 若把這行放在第一個循環中，則會聲明99次，占資源
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 2; i &amp;lt;= 10000; i ++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 2; j &amp;lt; Math.&lt;span style=&#34;color:#658b00&#34;&gt;sqrt&lt;/span&gt;(i); j++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 優化1.開平方
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % j == 0) { &lt;span style=&#34;color:#228b22&#34;&gt;// i被某數(2~自己-1)除盡
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 不是質數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 優化2.找到一個因數就停
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;是質數&amp;#34;&lt;/span&gt;);
    }
    flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 重置flag
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;label簡潔版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;label:
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 2; i &amp;lt;= 10000; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 2; j &amp;lt; Math.&lt;span style=&#34;color:#658b00&#34;&gt;sqrt&lt;/span&gt;(i); j++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 優化1.開平方
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % j == 0) { &lt;span style=&#34;color:#228b22&#34;&gt;// i被某數(2~自己-1)除盡
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt; label; &lt;span style=&#34;color:#228b22&#34;&gt;// 找到任何因數就跳出(這裡要連跳出兩層，所以用label)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;是質數&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;補充-計算運行耗時&#34;&gt;補充-計算運行耗時&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;學到單元測試之前先用耗時當作運行效率的參考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; start = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
&lt;span style=&#34;color:#228b22&#34;&gt;// ...待測程式碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; end = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;耗時為&amp;#34;&lt;/span&gt; + (end - start) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;毫秒&amp;#34;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;break與continue&#34;&gt;break與continue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;break會&lt;strong&gt;跳出循環體&lt;/strong&gt;，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 10; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 5 == 0) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(i);
}
&lt;span style=&#34;color:#228b22&#34;&gt;// 結果為1234
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;continue是&lt;strong&gt;跳過該次&lt;/strong&gt;循環體語句，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 10; i++) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 5 == 0) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
    }
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(i);
}
&lt;span style=&#34;color:#228b22&#34;&gt;// 結果為12346789
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共通點:break跟continue之下都不能再聲明執行語句，否則報錯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;break跟continue都只會跳過&lt;strong&gt;一層&lt;/strong&gt;(就近原則)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在break跟continue後面接label使用達成跳轉，強烈不推薦&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;實作練習-家庭收支系統&#34;&gt;實作練習-家庭收支系統&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.Objects&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.Scanner&lt;/span&gt;;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;FamilyAccount&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; money = 10000;
        String detail = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;收支\t變動\t餘額\t說明\n初始\t金額\t&amp;#34;&lt;/span&gt; + money + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t系統給你的&amp;#34;&lt;/span&gt;;
        Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (flag) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===家庭收支系統===&amp;#34;&lt;/span&gt;);
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===1.查看明細===&amp;#34;&lt;/span&gt;);
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===2.登記收入===&amp;#34;&lt;/span&gt;);
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===3.登記支出===&amp;#34;&lt;/span&gt;);
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===4.退    出===&amp;#34;&lt;/span&gt;);
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;請輸入&amp;lt;1-4&amp;gt;...&amp;#34;&lt;/span&gt;);
            String input = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取使用者輸入
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (input) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;:
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===1.查看明細===&amp;#34;&lt;/span&gt;);
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(detail);
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;明細結束!&amp;#34;&lt;/span&gt;);
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;:
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===2.登記收入===&amp;#34;&lt;/span&gt;);
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入金額...&amp;#34;&lt;/span&gt;);
                    String moneyInStr = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
                    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; moneyIn = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(moneyInStr);
                    money += moneyIn;
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入說明...&amp;#34;&lt;/span&gt;);
                    String infoIn = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
                    detail += &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\n收入\t&amp;#34;&lt;/span&gt; + moneyInStr + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t\t&amp;#34;&lt;/span&gt; + money + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt; + infoIn;
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;登記成功!&amp;#34;&lt;/span&gt;);
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;:
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===3.登記支出===&amp;#34;&lt;/span&gt;);
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入金額...&amp;#34;&lt;/span&gt;);
                    String moneyOutStr = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
                    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; moneyOut = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(moneyOutStr);
                    money -= moneyOut;
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入說明...&amp;#34;&lt;/span&gt;);
                    String infoOut = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
                    detail += &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\n支出\t&amp;#34;&lt;/span&gt; + moneyOutStr + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t\t&amp;#34;&lt;/span&gt; + money + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt; + infoOut;
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;登記成功!&amp;#34;&lt;/span&gt;);
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;:
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;確認退出?&amp;lt;Y/N&amp;gt;不分大小寫...&amp;#34;&lt;/span&gt;);
                    String confirmExit = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取使用者輸入
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(confirmExit, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;) || Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(confirmExit, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;)) {
                        flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
                        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;歡迎下次使用!&amp;#34;&lt;/span&gt;);
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(confirmExit, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;) || Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(confirmExit, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;)) {
                        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;繼續使用&amp;#34;&lt;/span&gt;);
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                    }
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入有誤，請重新輸入&amp;#34;&lt;/span&gt;);
            }
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;知識點&#34;&gt;知識點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;scan.next()收到空白內容(\t、\n、&amp;quot; &amp;ldquo;)它當作啥事都沒發生，比如我想接收&amp;quot;Y&amp;rdquo;，輸入&amp;quot;   Y&amp;quot;竟然也符合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比對string使用Objects.equals(目標string物件, &amp;ldquo;內容&amp;rdquo;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string轉int使用int int_val = Integer.parseInt(str);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;關於中英數字混合使用\t對不齊的原因與解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t是補全&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;（&lt;/span&gt;8-前面字元的位元數%8&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;）&lt;/span&gt;的距離&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;
也就是說前面有1個字元那麼在1個字元後輸出一個&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;則&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t的長度為7個字元長度
輸出結果對不齊是因為輸出的資料有些大於8個字元&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;有些小於8個字元
解法:用&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; \t&amp;#34;&lt;/span&gt;(前面加一個空格)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;或直接用&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t來對齊
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211120-agg-ja-05/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>流程控制:if、switch、for、while</title>
        <link>https://yoziming.github.io/post/211119-agg-ja-04/</link>
        <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211119-agg-ja-04/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211119-agg-ja-04/ -&lt;h1 id=&#34;分支控制&#34;&gt;分支控制&lt;/h1&gt;
&lt;h3 id=&#34;if-else&#34;&gt;if-else&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;基礎都一樣不多贅述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特殊情況有人不加{}，這種情境下就近原則且只控制一行(到第一個;為止)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (1 == 2)
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;);
結果為
b
c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有單行時可以接else且也會就近選擇&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (1 == 2)
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;);
結果為d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多行時直接報錯&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (1 == 2)
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;);
System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
報錯
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小結:不加{}的全部拖出去打&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;switch-case&#34;&gt;switch-case&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;結構:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (表達式) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 常量1:
        &lt;span style=&#34;color:#228b22&#34;&gt;// 執行語句
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 常量2...
        ...
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
        &lt;span style=&#34;color:#228b22&#34;&gt;// 預設執行語句
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;如果不加break;就不會跳出，而是會穿透且之下的語句全都執行一遍&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基於上述特性，可以合併使用，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 1:
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 2:
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 3:
     &lt;span style=&#34;color:#228b22&#34;&gt;// 執行語句123的情況
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 4:
...
也可以用在需要壘加的情況&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;舉例
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 9:
a += 10
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 8:
a += 5
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 7:
a += 100
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表達式只能為6種類型: byte、short、char、int、枚舉、string，&lt;strong&gt;不能是bool&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;case後只能放常量，不能是範圍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;default不一定要有且位置是靈活可變的，但注意若不擺在最尾需要加入break;，否則會多執行下一行，很蠢，不建議這樣用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分支控制小結&#34;&gt;分支控制小結&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;凡是可以用switch-case結構的都能轉成if-else，反之不成立&lt;/li&gt;
&lt;li&gt;兩種都可用的情況(條件不要太多)優先考慮switch-case，執行效率較高&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;循環控制&#34;&gt;循環控制&lt;/h1&gt;
&lt;h3 id=&#34;for&#34;&gt;for&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for的結構&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(初始條件;循環條件;疊代){
    循環體;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;題外話疊代與迭代&#34;&gt;題外話：「疊代」與「迭代」&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;「疊代」：累進取代，不斷重複進行後者加上前者、替換掉前者的動作；&lt;/li&gt;
&lt;li&gt;「迭代」：替換取代，表示幾個固定的物件彼此輪替取代的動作；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;繁體中文兩種用法都存在，迭代用於只有幾個條件在那邊不停輪換的情況，比如四季迭代。一般軟體用的應為疊代。&lt;/p&gt;
&lt;h3 id=&#34;獲取使用者輸入&#34;&gt;獲取使用者輸入&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Scanner scanner = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;System.in開啟了一個InputStream來獲取使用者的輸入
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;把使用者的輸入傳給剛剛new建立的scanner物件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;這個scanner物件是來自java.util.Scanner包中定義的Scanner類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;接著用scanner.next類型()來決定要接收的數據類型，舉例接收i
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; number = scanner.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;for練習題-最大公因數與最小公倍數&#34;&gt;for練習題-最大公因數與最小公倍數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;輸入m、n，求最大公因數與最小公倍數&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;        Scanner scanner = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入數字m...&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m = scanner.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入數字n...&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = scanner.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; min = 0, max = 0;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;gt; 0; i++) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (m % i == 0 &amp;amp;&amp;amp; n % i == 0) {
                min = i;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % m == 0 &amp;amp;&amp;amp; i % n == 0) {
                max = i;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
        }
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;數字&amp;#34;&lt;/span&gt; + m + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;與數字&amp;#34;&lt;/span&gt; + n + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;之最大公因數為&amp;#34;&lt;/span&gt; + min + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;最小公倍數為&amp;#34;&lt;/span&gt; + max);
&lt;span style=&#34;color:#228b22&#34;&gt;// 這個效率不夠高，改進: 先找出輸入的2數誰大
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 最大公因數=for循環從大往小減，遇到第一個就break
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;for練習題-水仙花數&#34;&gt;for練習題-水仙花數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;水仙花數：是指一個n位的正整數(n&amp;gt;=3),它的每個數字的n次冪之和等於它本身。例如：1^3 + 5^3+ 3^3 = 153&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 100; i &amp;lt; 1000; i++) {
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a = i / 100; &lt;span style=&#34;color:#228b22&#34;&gt;// 百位
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; b = i % 100 / 10; &lt;span style=&#34;color:#228b22&#34;&gt;// 十位
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; c = i % 10; &lt;span style=&#34;color:#228b22&#34;&gt;// 個位
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i == (a * a * a + b * b * b + c * c * c)) {
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i);
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;循環控制while&#34;&gt;循環控制while&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;其實教學影片中這是第5天的內容，不過while跟for類似所以我筆記寫一起了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;while的結構&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;初始條件;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(循環條件){
    循環體;
    疊代;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for跟while可以互相轉換，他們實際的差別在變量的作用域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因為while的初始條件寫在外面，循環結束也能使用(全局變量與局部變量的區別)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;do-while&#34;&gt;do-while&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;do-while的結構&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;初始條件;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;{
    循環體;
    疊代;
}&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(循環條件);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上來就至少執行一次循環跟疊代，然後才進入判斷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;少用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-無限循環&#34;&gt;練習題-無限循環&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;輸入不限制數量的正負整數，直到輸入0為中止，顯示正負整數的數量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;        Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; pos = 0;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; neg = 0;
        	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; ; ) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入任意正負整數，0為中止...&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; input = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (input == 0) {
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;中止，正數個數為&amp;#34;&lt;/span&gt; + pos + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，負數個數為&amp;#34;&lt;/span&gt; + neg);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (input &amp;gt; 0) {
                pos++;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                neg++;
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;for (; ; )跟while(true)相等&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;JAVA的if與for用起來跟go的差不多，就switch會穿透要記得break&lt;/li&gt;
&lt;li&gt;JAVA中聲明變量必須要賦值否則編譯報錯&lt;/li&gt;
&lt;li&gt;用if多個條件嵌套時正常從涵蓋範圍小往大寫，不要不加{}&lt;/li&gt;
&lt;li&gt;從go的角度看while沒啥必要性，do-while簡直邪道，盡量少用&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211119-agg-ja-04/ - yoziming</description>
        </item>
    
    
  </channel>
</rss> 