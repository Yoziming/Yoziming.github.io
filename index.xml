<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>柚子茶室</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Yoziming</copyright>
    <lastBuildDate>Sat, 26 Feb 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Windows 11與WSL</title>
        <link>https://yoziming.github.io/post/220226-win11-wsl2/</link>
        <pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220226-win11-wsl2/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220226-win11-wsl2/ -&lt;h1 id=&#34;win-11&#34;&gt;Win 11&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;其實單純就是手癢，順便記錄一下重灌後的事項&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chocolatey&#34;&gt;chocolatey&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows 上的套件管理工具，類似&lt;code&gt;apt&lt;/code&gt;跟&lt;code&gt;brew&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安裝使用powershell執行:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;(非必要) 修改安裝路徑，預設是在&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\ProgramData\chocolatey
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;他其實是一個系統環境變數，所以也可以手動修改，例如&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;setx.exe ChocolateyInstall D:\Chocolatey /M
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安裝常用的工具，可以自己做批次腳本執行
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-y&lt;/code&gt;的意思是自動確認，可以全自動安裝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;choco install chocolateygui -y
choco install -y notepadplusplus
choco install qdir -y
choco install -y git
choco install -y hugo
choco install typora --version=0.11.18.20211125 -y
choco pin add --name=&amp;quot;&#39;typora&#39;&amp;quot; --version=&amp;quot;&#39;0.11.18.20211125&#39;&amp;quot;
choco install brave -y
choco install paint.net -y
choco install locale-emulator -y
choco install screentogif.install -y
choco install foobar2000 -y
choco install vscode -y
choco install nodejs-lts --version=14.19.0 -y
choco pin add --name=&amp;quot;&#39;nodejs-lts&#39;&amp;quot; --version=&amp;quot;&#39;14.19.0&#39;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;也有GUI可以使用，能夠快速查看本地安裝的跟瀏覽市集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220226201152272.png&#34; alt=&#34;image-20220226201152272&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;wsl&#34;&gt;WSL&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows Subsystem for Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;微軟官方的虛擬機，到win11變很好用了(win11的兩個重點其實就是WSL跟WSA)&lt;/li&gt;
&lt;li&gt;開啟一個終端，用&lt;code&gt;wsl --list --online&lt;/code&gt;查看有哪些版本可以裝&lt;/li&gt;
&lt;li&gt;比如我選擇安裝Ubuntu 20.04 LTS&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wsl --install -d Ubuntu-20.04
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安裝成功它會需要設定帳戶名稱跟密碼，然後就可以進入linux了&lt;/li&gt;
&lt;li&gt;接著安裝gedit，它會一併把WSL GUI要用到的東西都裝了，所以會比較久&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt install gedit -y
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;安裝完後能直接在windows的開始選單內找到，可以像windows的程式一樣直接開啟linux的程式，非常快速、順滑&lt;/li&gt;
&lt;li&gt;用來調測、修改文件整個超方便，媽媽再也不擔心我被vi困住出不來了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220226201343123.png&#34; alt=&#34;image-20220226201343123&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;題外話，裝完WSL記得去把docker desktop的橋接打開&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220226200733700.png&#34; alt=&#34;image-20220226200733700&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他windows工具&#34;&gt;其他Windows工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WPD，禁止微軟的各種隱私追蹤、低能的自動更新&amp;hellip;等等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wpd.app/&#34;&gt;https://wpd.app/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dism++，不用多說，也是專治微軟的各種低能設定，用來重灌、備份也很方便&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Chuyu-Team/Dism-Multi-language/releases/tag/v10.1.1002.1&#34;&gt;https://github.com/Chuyu-Team/Dism-Multi-language/releases/tag/v10.1.1002.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potplayer，用俄國geek封裝好的版本，去掉很多不必要的麻煩&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://potplayer.club/download.html&#34;&gt;https://potplayer.club/download.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;還原舊版工具列、開始、右鍵選單請用&lt;em&gt;StartAllBack&lt;/em&gt;(收費軟體)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.startallback.com/&#34;&gt;https://www.startallback.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;經典音量混音程式，由於win11把右下的音量改的很低能，而且dism++的修正失效，只好用此替代方案，簡單說就是把系統預設的隱藏掉，然後把這個放到啟動&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/popeen/Classic-Volume-Mixer/releases&#34;&gt;https://github.com/popeen/Classic-Volume-Mixer/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jpegview，最快最小最好用的看圖程式，原作者棄坑，最近才得知有人接手&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sylikc/jpegview&#34;&gt;https://github.com/sylikc/jpegview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;snipaste，最好用的截圖軟體，也可以安裝微軟商店版&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.snipaste.com/&#34;&gt;https://zh.snipaste.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字體必用更紗黑體&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/be5invis/Sarasa-Gothic&#34;&gt;https://github.com/be5invis/Sarasa-Gothic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;抓sarasa-gothic-ttf，不用全部解壓縮，可以挑TC(台灣繁體)的兩個即可，例如:
&lt;ul&gt;
&lt;li&gt;sarasa-fixed-tc-regular 常規&lt;/li&gt;
&lt;li&gt;sarasa-mono-tc-regular 等距&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Brave瀏覽器個人常用的一些插件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220226201908793.png&#34; alt=&#34;image-20220226201908793&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;油猴腳本主要是瀏覽大陸的網站時好用，可以避免強迫登入或是逼你開APP、各種廣告堵臉的情況，例如:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSDN广告完全过滤&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;知乎增强&lt;/li&gt;
&lt;li&gt;贴吧全能助手&lt;/li&gt;
&lt;li&gt;Login reminder popup remover&lt;/li&gt;
&lt;li&gt;反正只要不是特別小的站，遇到各種噁心人的關卡的，很多時候都有油猴腳本可以解決問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220226-win11-wsl2/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>從IDEA換成Eclipse</title>
        <link>https://yoziming.github.io/post/220224-idea-to-eclipse/</link>
        <pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220224-idea-to-eclipse/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220224-idea-to-eclipse/ -&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;進了公司才發現沒有買IDEA，既然下定決心要做長期的，只能一切重來了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下載&#34;&gt;下載&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;直接下載Spring Tools 4 for Eclipse: &lt;a href=&#34;https://spring.io/tools&#34;&gt;https://spring.io/tools&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;這玩意就是包好的Eclipse，然後針對spring有優化&lt;/li&gt;
&lt;li&gt;下載回來會是一個.jar，執行它就會解壓縮成資料夾，點進去裡面&lt;code&gt;SpringToolSuite4.exe&lt;/code&gt;就是開啟了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基礎設定&#34;&gt;基礎設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;版本問題，這個.ini裡面的vm是for Eclipse本身的，就用它自帶的就好，否則太低版本會啟動不了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220224233827163.png&#34; alt=&#34;image-20220224233827163&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;專案裡面用的jdk版本那是另一回事，可以按&lt;code&gt;alt+enter&lt;/code&gt;查看專案設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220224234022472.png&#34; alt=&#34;image-20220224234022472&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他設定從這邊進去&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220224232427532.png&#34; alt=&#34;image-20220224232427532&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;插件&#34;&gt;插件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這邊安裝插件，有些插件還要選安裝範圍、還要按同意、總之挺麻煩的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220224231548541.png&#34; alt=&#34;image-20220224231548541&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必裝清單&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;DevStyle

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;對應操作&#34;&gt;對應操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自動補完的&lt;code&gt;Tab&lt;/code&gt;變成&lt;code&gt;alt+/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根據返回值建立本地變數&lt;code&gt;.var&lt;/code&gt;變成&lt;code&gt;Ctrl+2&lt;/code&gt;然後 &lt;code&gt;L&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220224-idea-to-eclipse/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>職場新人要點</title>
        <link>https://yoziming.github.io/post/220222-java-interview-04/</link>
        <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220222-java-interview-04/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220222-java-interview-04/ -&lt;h1 id=&#34;新人該學的&#34;&gt;新人該學的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;把自己當作海綿，先努力吸收&lt;/li&gt;
&lt;li&gt;觀察、記錄團隊文化，包括檔案分類/命名/類別分類/資料庫慣例&lt;/li&gt;
&lt;li&gt;提前問，好過事後出包補救&lt;/li&gt;
&lt;li&gt;知道怎麼&amp;quot;問問題&amp;quot;
&lt;ul&gt;
&lt;li&gt;最好先理解關鍵字，試著猜答案，先google看看&lt;/li&gt;
&lt;li&gt;實際操作發現不行了，將問題具體化，例如: 我想達成怎樣的效果，嘗試使用了何種方法，但遇到怎樣的問題，請教需要如何解決&lt;/li&gt;
&lt;li&gt;切勿成為伸手黨，切勿還沒試過就說不會或不行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定期要求他人評價，審視自己是否能跟上、融入團隊&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;該做的&#34;&gt;該做的&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;閱讀使用者文件(給客戶看的)，先別管程式是怎麼寫的，第一件事情要先搞懂你的產品，以使用者的角度&lt;/li&gt;
&lt;li&gt;嘗試理解公司的程式架構，大處著眼小處著手，試著畫出程式之間的依賴關係&lt;/li&gt;
&lt;li&gt;做每個功能前先確認這個功能的目的是什麼，你的工作不是完成某個 for loop，而是確保你的 code 有幫助到你們公司/組織&lt;/li&gt;
&lt;li&gt;coding前先用文字把想像中的實作大概描述一下，看一下是否合理(容易理解、擴充)&lt;/li&gt;
&lt;li&gt;注意影響的範圍與權限，改動前確保有做好備份，可別出包搞到全公司無法運作&lt;/li&gt;
&lt;li&gt;請同事 review 你的 code 看有沒有改進的地方(跟你的寫法有什麼差異、看不看得懂、有沒有辦法修改)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關於code品質&#34;&gt;關於Code品質&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;有意義的、完整的命名，不要擅自簡寫還以為別人也都能看懂&lt;/li&gt;
&lt;li&gt;限制傳入參數數量，不要大於3個，超過就考慮傳map或DTO&lt;/li&gt;
&lt;li&gt;變數考慮使用的範圍，適當封裝、避免耦合&lt;/li&gt;
&lt;li&gt;一次只做一件事，function命名要跟實際做的事情相符，沒有明確告知就不要擅自夾帶各種的功能，否則可能造成後續test困擾&lt;/li&gt;
&lt;li&gt;避免使用多層if嵌套、可以Early return&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;給自己設立目標&#34;&gt;給自己設立目標&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;短期: 一個月內掌握情況，開始有產出&lt;/li&gt;
&lt;li&gt;中期: 半年內能獨立完成交辦任務&lt;/li&gt;
&lt;li&gt;長期: 嘗試學習做手機app，看學Flutter或是專攻kotlin與jetpack compose&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220222-java-interview-04/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Java面試，機考題整理</title>
        <link>https://yoziming.github.io/post/220217-java-interview-02/</link>
        <pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220217-java-interview-02/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220217-java-interview-02/ -&lt;blockquote&gt;
&lt;p&gt;其實就是leetcode easy題，把常見的盡量做一做吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;反轉字串&#34;&gt;反轉字串&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
* 輸入 &#39;abcde&#39; 輸出 &#39;edcba&#39;
*/
private static String reverseStr(String str) {
String result = &amp;quot;&amp;quot;;
for (int i = str.length(); i &amp;gt;= 1; i--) {
result = result + str.charAt(i - 1);
}
return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;是否迴文&#34;&gt;是否迴文&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;private boolean isPal(String str) {
    String newStr = new StringBuilder(str).reverse().toString();
    return str.equals(newStr);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fizzbuzz&#34;&gt;FizzBuzz&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * FizzBuzz
 * 給一個整數 n 請列印出 1~n 的每一個整數， 但是
 * 當整數可以被 3 整除的時候印出 Fizz 來代替原本要印出的數，
 * 當整數可以被 5 整除的時候印出 Buzz 來代替原本要印出的數，
 * 當整數可以被 3 跟 5 整除的時候印出 FizzBuzz 來代替原本原本要印出的數。
 */
private static void printFizzBuzz(int n) {
    for (int i = 1; i &amp;lt;= n; i++) {
        if (i % 3 == 0 &amp;amp;&amp;amp; i % 5 == 0) {
            System.out.println(&amp;quot;FizzBuzz&amp;quot;);
        }
        if (i % 3 == 0) {
            System.out.println(&amp;quot;Fizz&amp;quot;);
        }
        if (i % 5 == 0) {
            System.out.println(&amp;quot;Buzz&amp;quot;);
        }
        System.out.println(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;首字大寫&#34;&gt;首字大寫&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 把一串小寫英文，每個英文單字第一個字母大寫
 */
private static String toUpperCase(String str) {
    String res = &amp;quot;&amp;quot;;
    // 第一個總要變大
    res += Character.toString(str.charAt(0)).toUpperCase();
    // 遍歷
    for (int i = 1; i &amp;lt; str.length(); i++) {
        // 遇到空格下個字就變大
        if (Character.toString(str.charAt(i - 1)).equals(&amp;quot; &amp;quot;)) {
            res += Character.toString(str.charAt(i)).toUpperCase();
        } else {
            // 沒事的維持小寫
            res += Character.toString(str.charAt(i));
        }
    }
    return res;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;費氏數列&#34;&gt;費氏數列&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * 費波納數列
 */
private static int fibona(int n) {
    if (n &amp;lt;= 1) {
        return n;
    }
    return fibona(n - 1) + fibona(n - 2);
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/220217-java-interview-02/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Java初階面試題整理-01</title>
        <link>https://yoziming.github.io/post/220216-java-interview-01/</link>
        <pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220216-java-interview-01/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220216-java-interview-01/ -&lt;h2 id=&#34;java特性&#34;&gt;Java特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;純物件導向(Object-oriented programming，OOP)，任何行為是來自某個資料(物件)，目的是方便維護跟擴展性&lt;/li&gt;
&lt;li&gt;跨平台(只要能跑JVM)、有GC&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java中的基本資料類型&#34;&gt;Java中的基本資料類型&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;基本類型&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;位元&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;位元組&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;預設值&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&amp;lsquo;u0000&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;0d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;false&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;這八種基本類型都有對應的包裝類分別為:&lt;code&gt;Byte&lt;/code&gt;、&lt;code&gt;Short&lt;/code&gt;、&lt;code&gt;Integer&lt;/code&gt;、&lt;code&gt;Long&lt;/code&gt;、&lt;code&gt;Float&lt;/code&gt;、&lt;code&gt;Double&lt;/code&gt;、&lt;code&gt;Character&lt;/code&gt;、&lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;包裝類型不賦值就是 &lt;code&gt;Null&lt;/code&gt; ，而基本類型有預設值且不是 &lt;code&gt;Null&lt;/code&gt;，所以通常在專案中設計&lt;code&gt;entity&lt;/code&gt;都用包裝類，這樣從資料庫抓過來如果是空的不會自動變成0之類的引起麻煩&lt;/li&gt;
&lt;li&gt;基本資料類型是存放在JVM棧中的區域變數表中(那些常用的早就準備好了)，而包裝類型屬於物件類型，我們知道物件實例都存在於堆中。相比於物件類型， 基本資料類型佔用的空間非常小&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;包裝類型的常量池技術&#34;&gt;包裝類型的常量池技術？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java 基本類型的包裝類的大部分都實現了常量池技術&lt;/li&gt;
&lt;li&gt;Byte,Short,Integer,Long 這 4 種包裝類默認創建了數值 [-128，127] 的相應類型的緩存資料，Character 創建了數值在 [0,127] 範圍的緩存資料&lt;/li&gt;
&lt;li&gt;就是因為有裝箱與常量池，所有整型包裝類物件之間值的比較，全部使用 equals 方法比較才不會踩坑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本雜問&#34;&gt;基本雜問&lt;/h2&gt;
&lt;h3 id=&#34;java中只有值傳遞&#34;&gt;Java中只有值傳遞&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java是&lt;code&gt;Pass by Value&lt;/code&gt;傳值，將參數值複製後傳遞&lt;/li&gt;
&lt;li&gt;如果參數是基本類型的話，很簡單，傳遞的就是基本類型的字面量值的拷貝，會創建副本&lt;/li&gt;
&lt;li&gt;如果參數是參考類型，傳遞的就是實參所引用的物件在堆中位址值的拷貝，同樣也會創建副本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;throw與throws的區別&#34;&gt;throw與throws的區別?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;throws通常被應用在聲明方法時，表示我這個方法會拋啥異常，誰要調用方法時必須要拋出異常或者使用try-catch語句處理異常&lt;/li&gt;
&lt;li&gt;throw是在執行語句中，真的在這拋出一個異常&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;結束循環的區別&#34;&gt;結束循環的區別&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;continue: 指跳出當前的這一次迴圈，繼續下一次迴圈&lt;/li&gt;
&lt;li&gt;break: 指跳出整個循環體，繼續執行迴圈下的語句&lt;/li&gt;
&lt;li&gt;return: 用於跳出所在方法，結束該方法的運行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;靜態方法為什麼不能調用非靜態成員&#34;&gt;靜態方法為什麼不能調用非靜態成員?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;靜態方法是屬於類的，在編譯完就被JVM的CLASSLOADER載入到記憶體的靜態方法區，是唯一且只有一個，不像非static是new的時候才被載入到heap&lt;/li&gt;
&lt;li&gt;就程式底層來說，非靜態方法調用時是有傳入this指針；而調用靜態方法時，是沒有傳入this指針(因為只有那一個)，所以從根本上來說無法混用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;overload與override&#34;&gt;Overload與Override&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Overload: 一個類中，同樣方法名但傳入的參數與返回值不同，發生在編譯期&lt;/li&gt;
&lt;li&gt;Override: 子類改寫父類的方法，方法名與傳入的參數必須相同，但返回值、拋異常、權限修飾可變且不能大於父類，發生在執行期&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-和-equals-的區別&#34;&gt;== 和 equals() 的區別&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt; 對於基本類型和參考類型的作用效果是不同的
&lt;ul&gt;
&lt;li&gt;對於基本資料型別來說，&lt;code&gt;==&lt;/code&gt; 比較的是值&lt;/li&gt;
&lt;li&gt;對於引用資料類型來說，&lt;code&gt;==&lt;/code&gt; 比較的是物件的記憶體位址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因為 Java 只有值傳遞，所以對於 &lt;code&gt;==&lt;/code&gt; 來說，不管是比較基本資料型別，還是引用資料類型的變數，其本質比較的都是值，只是參考類型變數存的值是物件的位址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt; 的 &lt;code&gt;equals&lt;/code&gt; 方法被重寫過，比較的是物件的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;為什麼重寫-equals-時必須重寫-hashcode-方法&#34;&gt;為什麼重寫 equals() 時必須重寫 hashCode() 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hashCode()&lt;/code&gt;就像建立一個人的速寫，編成碼&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因為兩個相等的物件的 &lt;code&gt;hashCode&lt;/code&gt; 值必須是相等。也就是說如果 &lt;code&gt;equals&lt;/code&gt; 方法判斷兩個物件是相等的，那這兩個對象的 &lt;code&gt;hashCode&lt;/code&gt; 值也要相等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果重寫 &lt;code&gt;equals()&lt;/code&gt; 時沒有重寫 &lt;code&gt;hashCode()&lt;/code&gt; 方法的話就可能會導致 &lt;code&gt;equals&lt;/code&gt; 方法判斷是相等的兩個物件，&lt;code&gt;hashCode&lt;/code&gt; 值卻不相等，使用 &lt;code&gt;HashMap&lt;/code&gt; 可能會出現兩個一樣的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兩個物件有相同的 &lt;code&gt;hashCode&lt;/code&gt; 值，他們也不一定是相等的（HASH碰撞）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建構子&#34;&gt;建構子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;建構子用來創建物件的實例，當沒有手動指定時，預設繼承他父類的建構子(但已經自動重寫了，會new出自己而非他的父類)，所以不寫也沒事&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其實我們一直都在使用這個隱藏的特性，比如想創建某實例，使用&lt;code&gt;new()&lt;/code&gt;，就是在調用它隱形的、空參的建構子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以如果重載了有參的構造方法，記得都要把無參的構造方法也寫出來（無論是否用到，比如有lombok可以加&lt;code&gt;@NoArgsConstructor&lt;/code&gt;），避免踩坑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;物件導向三大特性&#34;&gt;物件導向三大特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;封裝&lt;strong&gt;Encapsulation&lt;/strong&gt; : 不想被看到的就隱藏起來，只對外露出必要的部分(比如遙控器可以開電視，只會露出按鈕，不會露出電路板)，目的是為了安全性、減少耦合(Coupling)，封裝的修飾範圍有4種:
&lt;ul&gt;
&lt;li&gt;private 該類別內部&lt;/li&gt;
&lt;li&gt;default(預設) 同package下類別&lt;/li&gt;
&lt;li&gt;protected 同package下及其子類別&lt;/li&gt;
&lt;li&gt;public 公開&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;繼承&lt;strong&gt;Inhertitance&lt;/strong&gt; : 子類有來自父類的屬性與行為，為了方便復用、減少重複的程式碼&lt;/li&gt;
&lt;li&gt;多型&lt;strong&gt;polymorphism&lt;/strong&gt; : 同一個物件在不同狀況下有不同的行為表現，多型來自於繼承與方法的重寫(override)。即父類別提供的方法呼叫，子類別可以有自己特有的行為。簡單說就是編譯期看左邊、執行期看右邊&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;介面與抽象類&#34;&gt;介面與抽象類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;抽象類: 被繼承，以資料為主體&lt;/li&gt;
&lt;li&gt;介面: 被實現，以方法為主體，實務上大多採用介面，因為介面可以實現多個，繼承只能一個&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;copy-深拷貝&#34;&gt;Copy 深拷貝&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20220216100843238.png&#34; alt=&#34;image-20220216100843238&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;string&#34;&gt;String&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String 為什麼是不可變的?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為保存字串的陣列被 final 修飾且為私有的，並且String 類沒有提供/暴露修改這個字串的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String、StringBuffer、StringBuilder 的區別？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;本身是final所以執行緒安全，&lt;code&gt;StringBuffer&lt;/code&gt;有同步鎖也安全&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringBuilder&lt;/code&gt; 並沒有對方法進行加同步鎖，所以是非執行緒安全的，提升10%效能不划算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;結論&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作少量的資料: 適用 String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;單執行緒操作字串緩衝區下操作大量資料: 適用 StringBuilder&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多執行緒操作字串緩衝區下操作大量資料: 適用 StringBuffer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物件引用和“+”的字串拼接方式，實際上是通過 StringBuilder 調用 append() 方法實現的，拼接完成之後調用 toString() 得到一個 String 物件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;泛型generics&#34;&gt;泛型（generics）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;泛型的本質是參數化類型，也就是說所操作的資料類型被指定為一個參數
&lt;ul&gt;
&lt;li&gt;將型態由原來具體的型態參數化，類似於方法中的變數參數，此時型態也定義成形式參數，然後在使用/調用時傳入具體的型態（實際型態參數）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java 的泛型是偽泛型，這是因為 Java 在運行期間，所有的泛型資訊都會被擦掉，這也就是通常所說類型擦除&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;反射&#34;&gt;反射&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;框架的靈魂，從.Class反推，使我們可以在runtime分析類別、獲取類別中的方法或屬性&lt;/li&gt;
&lt;li&gt;反射破壞封裝性? 嚴格來說是，但更大意義是了為了提供方便，就好像你沒帶鑰匙朝家裡吼一聲，家人聽到你的聲音也會來開門，既然是自家人也不會在意不用鑰匙破壞封裝性之類的問題(但是可能會被老媽念多大人了還老是忘東忘西)&lt;/li&gt;
&lt;li&gt;實際使用還是要看如何寫的程式碼，比如spring的IOC，要為bean的私有成員注入值，spring容器要求你提供相應的getter、setter方法，而不是直接通過反射去操作你的私有成員&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;錯誤與異常&#34;&gt;錯誤與異常&lt;/h3&gt;
&lt;p&gt;在 Java 中，所有的異常都有一個共同的祖先， &lt;code&gt;java.lang&lt;/code&gt; 包中的 &lt;code&gt;Throwable&lt;/code&gt; 類&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Exception&lt;/strong&gt; :程式本身可以處理的異常，可以通過 catch 來進行捕獲
&lt;ul&gt;
&lt;li&gt;Exception 又可以分為 Checked Exception (受檢查異常，必須處理) 和 Unchecked Exception (不受檢查異常，可以不處理)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt; :Error 屬於程式無法處理的錯誤 ，我們沒辦法通過 catch 來進行捕獲 。例如Java 虛擬機器運行錯誤（Virtual MachineError）、虛擬機器記憶體不夠錯誤(OutOfMemoryError)、類定義錯誤（NoClassDefFoundError）等 。這些異常發生時，Java 虛擬機器（JVM）一般會選擇執行緒終止&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;io&#34;&gt;IO&lt;/h2&gt;
&lt;h3 id=&#34;什麼是序列化&#34;&gt;什麼是序列化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;將記憶體中的某個東西轉換成二進位檔案，用以持久化保存、或進行網路間檔案傳輸&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在Java中被序列化的都是一個具體的物件，如果物件中有不想被序列化的屬性可以用&lt;code&gt;transient&lt;/code&gt;修飾&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bit流與byte流&#34;&gt;bit流與byte流&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;實際上傳輸的東西最終都是bit流，但因為常遇到問題(比如傳很慢、被中斷、網路不穩遺失)，如果不知道編碼就會亂碼，所以有文字的部分用byte流&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;nio&#34;&gt;NIO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同步非阻塞，thread讀取IO(硬碟或網路資源)之前會發起select調用，core有準備好才會發起read調用，節省資源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/basis/io.md&#34;&gt;https://github.com/Snailclimb/JavaGuide/blob/main/docs/java/basis/io.md&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程首先發起 select 調用，詢問內核資料是否準備就緒，等內核把資料準備好了，使用者執行緒再發起 read 調用。read 調用的過程（資料從內核空間-&amp;gt;用戶空間）還是阻塞的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 中的 NIO ，有一個非常重要的&lt;strong&gt;選擇器&lt;/strong&gt; &lt;strong&gt;( Selector )&lt;/strong&gt; 的概念，也可以被稱為 &lt;strong&gt;多工器&lt;/strong&gt;。通過它，只需要一個執行緒便可以管理多個用戶端連接。當用戶端資料到了之後，才會為其服務&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集合&#34;&gt;集合&lt;/h2&gt;
&lt;h3 id=&#34;collection-與-collections-的差異&#34;&gt;Collection 與 collections 的差異&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Collection 是一個介面，繼承自iterable，下面包含List、Set、Queue三個子介面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Collections這種Xxxs通常是工具類，沒有實例，封裝了很多靜態方法，比如sort排序、reverse反轉、max找最大值等等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220216125727801.png&#34; alt=&#34;image-20220216125727801&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List(對付順序的好幫手): 存儲的元素是有序的、可重複的&lt;/li&gt;
&lt;li&gt;Set(注重獨一無二的性質): 存儲的元素是無序的、不可重複的&lt;/li&gt;
&lt;li&gt;Queue(先進先出的管道): 按特定的排隊規則來確定先後順序，存儲的元素是有序的、可重複的&lt;/li&gt;
&lt;li&gt;Map(用 key 來搜索的專家): 使用鍵值對（key-value）存儲，key是無序、不可重複的；value 是無序的、可重複的，每個鍵最多映射到一個值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;list家族&#34;&gt;List家族&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ArrayList 是 List 的主要實現類，底層使用 Object&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 存儲，適用於頻繁的查找工作，執行緒不安全 ，然而有Collections工具類中的synchronizedList就能返回一個安全的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vector 是 List 的古老實現類，底層使用Object&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 存儲，執行緒安全的，幾乎廢棄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LinkedList&lt;/code&gt;: 是雙向鏈表(每一節都包含前後兩個node的指向資訊)，適合頻繁插入刪除&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;set家族&#34;&gt;Set家族&lt;/h3&gt;
&lt;p&gt;其實就是map的key那一半，實際開發很少用，通常只會用來去除重複之類的&lt;/p&gt;
&lt;h3 id=&#34;map家族&#34;&gt;Map家族&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;:由&lt;code&gt;Set&lt;/code&gt;存成&lt;code&gt;key&lt;/code&gt;(無序不可重複)，由&lt;code&gt;Collection&lt;/code&gt;存成&lt;code&gt;value&lt;/code&gt;(無序可重複)，&lt;code&gt;key&lt;/code&gt;與&lt;code&gt;value&lt;/code&gt;組合成無序不可重複的&lt;code&gt;Entry&lt;/code&gt;或說&lt;code&gt;Node&lt;/code&gt;結構&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;/code&gt;的底層原理:16位長的數組，&lt;code&gt;put&lt;/code&gt;元素時拿&lt;code&gt;key&lt;/code&gt;跑&lt;code&gt;hashCode()&lt;/code&gt;再位移運算得出要放的位置，若已經有東西，再比&lt;code&gt;key&lt;/code&gt;的&lt;code&gt;euqals()&lt;/code&gt;方法，若false表示哈希值恰好相同，在此處分支成鏈表結構儲存；若&lt;code&gt;euqals()&lt;/code&gt;返回&lt;code&gt;true&lt;/code&gt;表示&lt;code&gt;key&lt;/code&gt;完全相等，則進行覆蓋的操作&lt;/li&gt;
&lt;li&gt;Hashtable是執行緒安全，底層是synchronized的全表鎖&lt;/li&gt;
&lt;li&gt;ConcurrentHashMap 是分段鎖，效率比 Hashtable 高&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;無序性和不可重複性的含義是什麼&#34;&gt;無序性和不可重複性的含義是什麼&lt;/h3&gt;
&lt;p&gt;1、什麼是無序性？無序性不等於隨機性 ，無序性是指存儲的資料在底層陣列中並非按照陣列索引的順序添加 ，而是根據資料的雜湊值決定的。&lt;/p&gt;
&lt;p&gt;2、什麼是不可重複性？不可重複性是指添加的元素按照 equals()判斷時 ，返回 false，需要同時重寫 equals()方法和 HashCode()方法。&lt;/p&gt;
&lt;h2 id=&#34;mvc架構的優點與缺點&#34;&gt;MVC架構的優點與缺點&lt;/h2&gt;
&lt;p&gt;好維護、方便擴充，但分層多開發時間較長&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;視圖（View） — 介面設計人員進行圖形介面設計。View 負責顯示資料&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制器（Controller）- 負責轉發請求，對請求進行處理。Controller 負責處理訊息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模型（Model） — 程式設計師編寫程式應有的功能（實現演算法等等）、資料庫專家進行資料管理和資料庫設計(可以實現具體的功能)。Model 負責資料存取。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http技術&#34;&gt;http技術&lt;/h2&gt;
&lt;h2 id=&#34;sendredirect跟forward&#34;&gt;sendRedirect跟forward&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;forward是同一個請求可以用setAttribute傳遞參數，url不會變&lt;/li&gt;
&lt;li&gt;sendRedirect()是兩個請求，效率較低因為client又request一次&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jvm-gc&#34;&gt;JVM GC&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220216131954708.png&#34; alt=&#34;image-20220216131954708&#34;&gt;&lt;/p&gt;
&lt;p&gt;Minor GC只蒐集新生代垃圾，並且讓年齡+1，年齡超過15趕去老年代&lt;/p&gt;
&lt;h3 id=&#34;誰是垃圾&#34;&gt;誰是垃圾?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;從GC Roots分析關聯性，沒人引用的就是垃圾&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;誰是gc-roots&#34;&gt;誰是GC Roots&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;虛擬機器棧(棧幀中的本地變數表)中引用的物件&lt;/li&gt;
&lt;li&gt;本地方法棧(Native 方法)中引用的物件&lt;/li&gt;
&lt;li&gt;方法區中類靜態屬性引用的物件&lt;/li&gt;
&lt;li&gt;方法區中常量引用的物件&lt;/li&gt;
&lt;li&gt;所有被同步鎖持有的物件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4種引用&#34;&gt;4種引用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;強: 最常見&lt;/li&gt;
&lt;li&gt;軟: 通常是cache，如果空間還夠就留下&lt;/li&gt;
&lt;li&gt;弱: 相當於要丟了，只是優先級比較低&lt;/li&gt;
&lt;li&gt;幽靈: 等於沒引用，只負責被GC時傳達一個訊號&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三種清理法&#34;&gt;三種清理法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;戳戳樂&lt;/li&gt;
&lt;li&gt;搬新家&lt;/li&gt;
&lt;li&gt;環境整理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;執行緒&#34;&gt;執行緒&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220216134341568.png&#34; alt=&#34;image-20220216134341568&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;新建狀態（New）:當執行緒物件對建立後，即進入了新建狀態，如:Thread t = new MyThread();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就緒狀態（Runnable）:當呼叫執行緒物件的start()方法（t.start();），執行緒即進入就緒狀態。處於就緒狀態的執行緒，只是說明此執行緒已經做好了準備，隨時等待CPU排程執行，並不是說執行了t.start()此執行緒立即就會執行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行狀態（Running）:當CPU開始排程處於就緒狀態的執行緒時，此時執行緒才得以真正執行，即進入到執行狀態。注:就   緒狀態是進入到執行狀態的唯一入口，也就是說，執行緒要想進入執行狀態執行，首先必須處於就緒狀態中；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阻塞狀態（Blocked）:處於執行狀態中的執行緒由於某種原因，暫時放棄對CPU的使用權，停止執行，此時進入阻塞狀態，直到其進入到就緒狀態，才 有機會再次被CPU呼叫以進入到執行狀態。根據阻塞產生的原因不同，阻塞狀態又可以分為三種:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（1）等待阻塞:執行狀態中的執行緒執行wait()方法，使本執行緒進入到等待阻塞狀態&lt;/li&gt;
&lt;li&gt;（2）同步阻塞:執行緒在獲取synchronized同步鎖失敗(因為鎖被其它執行緒所佔用)，它會進入同步阻塞狀態&lt;/li&gt;
&lt;li&gt;（3）其他阻塞:通過呼叫執行緒的sleep()或join()或發出了i/o請求時，執行緒會進入到阻塞狀態。當sleep()狀態超時、join()等待執行緒終止或者超時、或者i/o處理完畢時，執行緒重新轉入就緒狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;死亡狀態（Dead）:執行緒執行完了或者因異常退出了run()方法，該執行緒結束生命週期。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220216230652057.png&#34; alt=&#34;image-20220216230652057&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;sleep-與-wait-的差異&#34;&gt;sleep() 與 wait() 的差異&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sleep是Thread的靜態方法，誰調用sellp誰就去睡，目的是真的讓執行緒原地睡多久，不會釋放資源，而且notify叫不醒，只能interrupt()打醒&lt;/li&gt;
&lt;li&gt;wait是Object實例的方法，是下場坐冷板凳(會放出資源)直到被notify。用於多執行緒時的鎖，通常不會指定時間&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mysql&#34;&gt;MySQL&lt;/h2&gt;
&lt;h3 id=&#34;為何不用外鍵&#34;&gt;為何不用外鍵?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;連級更新是強阻塞，大幅拖累效能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;刪除的區別&#34;&gt;刪除的區別&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;drop(丟棄數據): drop table 表名 ，直接將表都刪除掉，在刪除表的時候使用。&lt;/li&gt;
&lt;li&gt;truncate (清空數據) : truncate table 表名 ，只刪除表中的資料，再插入資料的時候自增長 id 又從 1 開始，在清空表中資料的時候使用。&lt;/li&gt;
&lt;li&gt;delete（刪除資料） : delete from 表名 where 列名=值，刪除某一列的資料，如果不加 where 子句和truncate table 表名作用類似。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;索引: 建立B+樹，提高大範圍查找的效率&lt;/p&gt;
&lt;h3 id=&#34;引擎&#34;&gt;引擎&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB支援交易、外鍵等功能，有行鎖，一般都是用這個&lt;/li&gt;
&lt;li&gt;MyISAM效能高，只有表鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;資料庫的併發問題&#34;&gt;資料庫的併發問題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;髒讀(dirty read):A讀取了已經被B更新但未提交的資料，之後B回滾，導致A讀取了無效的&amp;quot;髒&amp;quot;資料&lt;/li&gt;
&lt;li&gt;不可重複讀(non-repeatable read):A與B讀取了資料，之後B更新了資料，導致A再讀取時前後資料不同&lt;/li&gt;
&lt;li&gt;幻讀(phantom read):A從一張表讀取了某些資料，B在該表插入了一些新的行，導致A再讀取表時前後資料量不同&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;隔離等級&#34;&gt;隔離等級&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;讀未提交(Read uncommitted):允許讀取其他事務未提交的變更，3種問題都會有&lt;/li&gt;
&lt;li&gt;讀已提交(Read committed):只允許讀取其他事務已提交的變更，可避免髒讀&lt;/li&gt;
&lt;li&gt;可重複讀(Repeatable read):確保一個事務多次讀取一個字段都是相同的值，在此事務持續時間內，禁止其他事務對這個字段進行更新，可避免髒讀與不可重複讀，mysql預設是這個&lt;/li&gt;
&lt;li&gt;序列化(Serializable):確保一個事務從一個表中讀取到相同的行，在此事務持續時間內，禁止其他事務對整張表進行插入、更新與刪除，可避免所有問題，但效率很低&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring&#34;&gt;Spring&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Inverse of Control:控制反轉，一種設計思想，把創建物件的控制權由人交給框架來管理，實際由依賴注入的方式完成
&lt;ul&gt;
&lt;li&gt;就像一個工廠，我只負責案按鈕，機器就會生出我要的東西，例如&lt;code&gt;@autowire&lt;/code&gt;一個service實例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AOP(Aspect-Oriented Programming:面向切面程式設計)，切出與業務主體無關，但是大家都會用到的東西，比如日誌管理、權限控制，把他們封裝&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220216-java-interview-01/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>微服務商城之高可用集群篇</title>
        <link>https://yoziming.github.io/post/220213-gulimall-25/</link>
        <pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220213-gulimall-25/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220213-gulimall-25/ -&lt;h1 id=&#34;高可用集群篇&#34;&gt;高可用集群篇&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;微服務做到現在，終於要開始部署了，首先要認識Kubernetes(K8S)&lt;/li&gt;
&lt;li&gt;之前也有稍微了解過K8S，見筆記 &lt;a href=&#34;https://yoziming.github.io/post/211006-k8s/&#34;&gt;https://yoziming.github.io/post/211006-k8s/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;簡單來說就是用來管理doker的總控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208204752958.png&#34; alt=&#34;image-20220208204752958&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;master&#34;&gt;Master&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208205030273.png&#34; alt=&#34;image-20220208205030273&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;API Server: API介面&lt;/li&gt;
&lt;li&gt;etcd: K-V形式的消息隊列&lt;/li&gt;
&lt;li&gt;Scheduler: 監視Pod、調度叢集&lt;/li&gt;
&lt;li&gt;kube-controller-manager: 操作進程的管理員
&lt;ul&gt;
&lt;li&gt;節點控制器（Node Controller）: 負責在節點出現故障時進行通知和回應&lt;/li&gt;
&lt;li&gt;任務控制器（Job controller）: 監測代表一次性任務的 Job 物件，然後創建 Pods 來運行這些任務直至完成&lt;/li&gt;
&lt;li&gt;端點控制器（Endpoints Controller）: 填充端點(Endpoints)對象(即加入 Service 與 Pod)&lt;/li&gt;
&lt;li&gt;服務帳戶和權杖控制器（Service Account &amp;amp; Token Controllers）: 為新的命名空間創建默認帳戶和 API 訪問權杖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;noede&#34;&gt;Noede&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208205515104.png&#34; alt=&#34;image-20220208205515104&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Container Runtime: 正常就是Docker，負責運行容器&lt;/li&gt;
&lt;li&gt;kubelet: 工頭，每個節點的負責人，管理Pod&lt;/li&gt;
&lt;li&gt;kube-proxy: 節點的網路接口，負責通訊&lt;/li&gt;
&lt;li&gt;Fluentd: 日誌&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pod&#34;&gt;Pod&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;K8s管理的最小單元&lt;/li&gt;
&lt;li&gt;裡面可以有多個容器，共用一個網路位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他名詞&#34;&gt;其他名詞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Controllers: Pod的高層抽象，用來實際執行部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208210208666.png&#34; alt=&#34;image-20220208210208666&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service: 也是抽象，Pod組成的一個服務&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208210254829.png&#34; alt=&#34;image-20220208210254829&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Namespace: 邏輯隔離資源&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;暫時停下&#34;&gt;暫時停下&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;要運行K8S對資源的要求(主要是ram)太狠了，我的小破電腦已經扛不住了&lt;/li&gt;
&lt;li&gt;課程只好暫時先停在這，整理一下手邊的資源，先去準備工作的事&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220213-gulimall-25/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>初識AWS與帳號驗證的趣事</title>
        <link>https://yoziming.github.io/post/220212-aws-phone/</link>
        <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220212-aws-phone/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220212-aws-phone/ -&lt;h1 id=&#34;申請aws帳號&#34;&gt;申請AWS帳號&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;是這樣的，我的手機門號是台灣之星，註冊後的驗證始終收不到簡訊驗證碼
&lt;ul&gt;
&lt;li&gt;題外話，國際電話手機格式 +886 912345678，&lt;code&gt;+886&lt;/code&gt;就是&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;估狗發現別人也有同樣問題，有說更換語言的，有說換APN的，但我試過都沒用&lt;/li&gt;
&lt;li&gt;只好找客服，AWS有線上客服(跳出一個小即時通那樣)，我就填說帳號啟用有問題，收不到驗證碼，我的電話號是多少之類(英文)&lt;/li&gt;
&lt;li&gt;結果隔一會顯示有專人來處理了，是直接打電話過來，嚇我一跳&lt;/li&gt;
&lt;li&gt;重點是她客服那邊的口音超重(好像是個印度小妹)，通話音質又差，我自己英文也是好幾年沒用，整個溝通真的是困難到爆炸&lt;/li&gt;
&lt;li&gt;雞同鴨講半天，最後只好說咱們用文字溝通吧&lt;/li&gt;
&lt;li&gt;後來終於弄懂她的意思是，你需要在電話中用語音說出你的用戶名稱、email帳號、電話，他們公司服務部門才能確認跟處理後續&lt;/li&gt;
&lt;li&gt;好久沒講英文突然真不習慣，像是塵封多年的老機器突然重新開機，搞定後說要5小時工作時間，看看後續如何&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;結論&#34;&gt;結論&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果找AWS客服，最好提前做下心理準備要用英語溝通&lt;/li&gt;
&lt;li&gt;效率還是不錯的，兩個小時後就收到回信了&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Hello again,

Great news! Our service team has manually bypassed the phone verification step for you, so all you need to do is refresh your console and Select a Support Plan.

1) Validate your credit/debit card ✓ DONE
2) Validate your phone number - ✓ DONE
3) Select your Support Plan - (Pending) You will be able to do this once step 4 is finished.

AWS Support has some great online documentation and video tutorials to help our customers starting on AWS with Free Tier that may be able to help a first-time user launch resources with confidence.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;客服手動幫我調整成驗證成功狀態&lt;/li&gt;
&lt;li&gt;登入後就可以開始免費試用一年，AWS還是挺佛心的&lt;/li&gt;
&lt;li&gt;但是注意超過試用會被收錢，提前把信用卡改了(改成錯誤的日期)、或新增假卡刪除原本的之類&amp;hellip;很多方法自己估狗，總之留個心眼&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;初識aws&#34;&gt;初識AWS&lt;/h1&gt;
&lt;h2 id=&#34;ec2&#34;&gt;EC2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;最常用的服務，即運行雲端虛擬機，免費試用一年的額度是每月720小時、30G容量&lt;/li&gt;
&lt;li&gt;要建立機器蠻簡單的，一路順著點就好，但要注意右上角選對所在的區域&lt;/li&gt;
&lt;li&gt;建立成功後會得到一個&lt;code&gt;xxx.pem&lt;/code&gt;，就是用來連線到主機的key&lt;/li&gt;
&lt;li&gt;使用ssh連線主機的私有ip，例如&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -i &amp;quot;javamall.pem&amp;quot; ubuntu@ec2-16-163-107-88.ap-east-1.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;之後就可以操作下載docker、運行服務等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但有一個問題是，免費仔的公有IP跟DNS是不固定的，每次啟動都會隨機分配一個&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也就是說免費仔只能啟動一台機器(多台運行額度時數會相加)，然後永遠不關機，這樣才能有一個相對穩定對外的IP來給別人訪問&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;iam&#34;&gt;IAM&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Identity and Access Management (IAM)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;顧名思義，管理權限的地方&lt;/li&gt;
&lt;li&gt;分成群組、使用者、角色、政策&lt;/li&gt;
&lt;li&gt;使用者(user)跟想像的差不多，可以看做是某個&amp;quot;人&amp;quot;的帳號，因為一個AWS帳號很可能是屬於整個公司，所以有Group跟User非常合理&lt;/li&gt;
&lt;li&gt;角色(role)乍看不太明白，其實就是具體去幹某件事的身分，例如操作某個S3(資料庫)的角色&lt;/li&gt;
&lt;li&gt;需要先建立政策(Policiy)給要操作的服務指定規則(例如可以新增檔案、不能刪除)，然後綁定到role上，該role就可以去執行操作了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;s3&#34;&gt;S3&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Amazon&lt;/em&gt; Simple Storage Service (&lt;em&gt;Amazon S3&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;存檔案的，但是用起來挺麻煩，一樣要先造&lt;strong&gt;Buckets&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;想上傳到S3目前學到兩種辦法，一是建立一個role，綁定的政策就是操作某個S3 Buckets，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2012-10-17&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Statement&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Sid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;VisualEditor0&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;s3:PutAccountPublicAccessBlock&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;s3:GetAccountPublicAccessBlock&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;s3:ListJobs&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;s3:CreateJob&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;s3:HeadBucket&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Resource&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;IpAddress&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;aws:SourceIp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;IP.IP.IP.0/24&amp;#34;&lt;/span&gt;
                }
            }
        },
        {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Sid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;VisualEditor1&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;s3:*&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Resource&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arn:aws:s3:::BUCKET_NAME&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arn:aws:s3:::*/*&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arn:aws:s3:*:*:job/*&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;IpAddress&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;aws:SourceIp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;IP.IP.IP.0/24&amp;#34;&lt;/span&gt;
                }
            }
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;之後就能取得&lt;code&gt;access_key&lt;/code&gt;、&lt;code&gt;secret_key&lt;/code&gt;，用起來就跟一般資料庫一樣，用SKD上傳&lt;/li&gt;
&lt;li&gt;另一個方法是透過API Gateway的方式，參考: &lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10277760?sc=iThelpR&#34;&gt;https://ithelp.ithome.com.tw/articles/10277760?sc=iThelpR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;簡單來說就是設定成&amp;quot;符合這個網址&amp;quot;就能上傳的樣式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;api-gateway&#34;&gt;API Gateway&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;網關中心，可以設定依照某規則的網址就有權限等等&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220212-aws-phone/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>用Heroku部署Tomcat網站</title>
        <link>https://yoziming.github.io/post/220211-javaweb-heroku/</link>
        <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220211-javaweb-heroku/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220211-javaweb-heroku/ -&lt;h2 id=&#34;heroku部署javaweb項目&#34;&gt;Heroku部署JavaWeb項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我自己的JavaWeb是運行在Tomcat的，所以要用heroku提供的Tomcat，叫做webapp-runner&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用法也很簡單，本地maven引用webapp-runner，打包成war，push到heroku倉庫，自動就能運行起來了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先在專案根目錄新增&lt;code&gt;Procfile&lt;/code&gt;，沒有副檔名&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;web: java $JAVA_OPTS -jar target/dependency/webapp-runner.jar --port $PORT target/*.war 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;加入&lt;code&gt;webapp-runner&lt;/code&gt;依賴，注意它版本是跟Tomcat的，我用8版Tomcat所以選8.5.68&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-dependency-plugin&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;package&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;copy&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactItems&amp;gt;&lt;/span&gt;
                                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactItem&amp;gt;&lt;/span&gt;
                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.heroku&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;webapp-runner&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;8.5.68.1&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;destFileName&amp;gt;&lt;/span&gt;webapp-runner.jar&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/destFileName&amp;gt;&lt;/span&gt;
                                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactItem&amp;gt;&lt;/span&gt;
                            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactItems&amp;gt;&lt;/span&gt;
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;打包完成專案長這樣&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210142439370.png&#34; alt=&#34;image-20220210142439370&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我是有安裝heroku cli，比較方便一點，可以直接在本地用heroku指令，也可以在網頁版上面做到一樣的步驟&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立heroku倉庫，可以自己取名，但不能跟別人重複(因為到時候網址就是heroku倉庫，它叫app的名稱)，不自訂就讓系統生成，反正之後都可以改&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;heroku create
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;初始化、推送&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;Ready to deploy&amp;quot;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分支master或main都能自動找到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;部署成功，使用指令&lt;code&gt;heroku open&lt;/code&gt;，或是在網頁點Open app就能打開專案的index&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210151157375.png&#34; alt=&#34;image-20220210151157375&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功看到網頁，DB也有連上，但是css跑掉了，排查原因是CORS跨域問題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210151141195.png&#34; alt=&#34;image-20220210151141195&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為我在本地開發都是用http，但部屬到heroku後預設是https，這樣也算跨域，可以看到一些靜態資源是OK的，但JS或ajax請求就全被擋&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210152404372.png&#34; alt=&#34;image-20220210152404372&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;在heroku使用mysql&#34;&gt;在heroku使用mySQL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;它的插件叫cleardb，免費，heroku有很多插件，自己去官網查，安裝也都很簡單就不多提&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝成功後輸入&lt;code&gt;heroku addons&lt;/code&gt;查看插件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210143654987.png&#34; alt=&#34;image-20220210143654987&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;輸入 &lt;code&gt;heroku config&lt;/code&gt;查看設定訊息，它會顯示所有變數，可以取得完整的DB存取資料
&lt;ul&gt;
&lt;li&gt;如果顯示太多遠端，需要手動指定&lt;/li&gt;
&lt;li&gt;或是用&lt;code&gt;git remote -v&lt;/code&gt;查看列表，用 &lt;code&gt;git remote rm 遠端名&lt;/code&gt;刪除多餘的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210144852239.png&#34; alt=&#34;image-20220210144852239&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;嘗試連線，資料庫名稱&lt;code&gt;heroku_fcc76bee56a43e4&lt;/code&gt;顯然不是我這種免費仔能控制的，只好修改自己專案的連線地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210144752386.png&#34; alt=&#34;image-20220210144752386&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;導入SQL資料，修改一下資料庫名稱，順利上傳&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210145515768.png&#34; alt=&#34;image-20220210145515768&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修改一下專案中的網址，測試一下是否能成功連上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210150410231.png&#34; alt=&#34;image-20220210150410231&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;javaweb改用https&#34;&gt;JavaWeb改用Https&lt;/h2&gt;
&lt;h3 id=&#34;tomcat部分&#34;&gt;Tomcat部分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先要有證書(證明你是可信的，通常需要跟大機構買憑證，也有一些免費的)&lt;/li&gt;
&lt;li&gt;我自用測試所以直接在本地先生成一個，用jdk自帶的keytool生成keystone&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;keytool -genkey -alias tomcat -keyalg RSA
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;過程需要輸入密碼，其他隨便enter就好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210160700735.png&#34; alt=&#34;image-20220210160700735&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生出來預設是在&lt;code&gt;我的文件&lt;/code&gt;之下，可以把它搬到順眼的位置&lt;/li&gt;
&lt;li&gt;接著修改tomcat設定，打開&lt;code&gt;\apache-tomcat-8.5.75\conf\server.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;需要指定&lt;code&gt;keystoreFile&lt;/code&gt;跟&lt;code&gt;keystorePass&lt;/code&gt;，其餘不用變
&lt;ul&gt;
&lt;li&gt;注意空格或換行的問題，參數前後連在一起會報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;	&amp;lt;Connector port=&amp;quot;8443&amp;quot; protocol=&amp;quot;HTTP/1.1&amp;quot; SSLEnabled=&amp;quot;true&amp;quot; 
	maxThreads=&amp;quot;150&amp;quot; scheme=&amp;quot;https&amp;quot; secure=&amp;quot;true&amp;quot; clientAuth=&amp;quot;false&amp;quot; 
	keystoreFile=&amp;quot;G:/Java/apache-tomcat-8.5.75/.keystore&amp;quot; 
	keystorePass=&amp;quot;123456&amp;quot; sslProtocol=&amp;quot;TLS&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;java部分&#34;&gt;Java部分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;回到&lt;code&gt;web.xml&lt;/code&gt;，啟用加密連線，可以自訂規則&lt;code&gt;&amp;lt;url-pattern&amp;gt;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/*&lt;/code&gt;就是全部都用加密&lt;/li&gt;
&lt;li&gt;我本來挺蠢的，還用了一個filter在那邊攔截請求修改頭部訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--改用https--&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;security-constraint&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;web-resource-collection&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;web-resource-name&amp;gt;&lt;/span&gt;SSL&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/web-resource-name&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/web-resource-collection&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;user-data-constraint&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;transport-guarantee&amp;gt;&lt;/span&gt;CONFIDENTIAL&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/transport-guarantee&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/user-data-constraint&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/security-constraint&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;修改部署設定，由於是自製的證書，打開瀏覽器會跳一個警告&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210162722900.png&#34; alt=&#34;image-20220210162722900&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210163051925.png&#34; alt=&#34;image-20220210163051925&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;解決cros與307問題&#34;&gt;解決CROS與307問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;然而這樣本地成功了，部署上雲端卻會顯示代碼307無限卡死&lt;/li&gt;
&lt;li&gt;嘗試用最老派的filter方法，還是不行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CorsFilter&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Filter {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;doFilter&lt;/span&gt;(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException, ServletException {
        HttpServletResponse response = (HttpServletResponse) servletResponse;
        response.&lt;span style=&#34;color:#658b00&#34;&gt;setHeader&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Access-Control-Allow-Origin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;);
        response.&lt;span style=&#34;color:#658b00&#34;&gt;setHeader&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Access-Control-Allow-Methods&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;POST, GET, OPTIONS, DELETE&amp;#34;&lt;/span&gt;);
        response.&lt;span style=&#34;color:#658b00&#34;&gt;setHeader&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Access-Control-Max-Age&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3600&amp;#34;&lt;/span&gt;);
        response.&lt;span style=&#34;color:#658b00&#34;&gt;setHeader&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Access-Control-Allow-Headers&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;content-type,Authorization&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// response.setHeader(&amp;#34;Access-Control-Allow-Credentials&amp;#34;, &amp;#34;true&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        filterChain.&lt;span style=&#34;color:#658b00&#34;&gt;doFilter&lt;/span&gt;(servletRequest, servletResponse);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;一樣會報錯Mixed Content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210200059090.png&#34; alt=&#34;image-20220210200059090&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最後找到解法是在每個JSP都加上一行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;meta http-equiv=&amp;quot;Content-Security-Policy&amp;quot; content=&amp;quot;upgrade-insecure-requests&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;image-20220210200155460.png&#34; alt=&#34;image-20220210200155460&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xml裡面的https設定就不要了&lt;/li&gt;
&lt;li&gt;後來發現但凡涉及轉址，部署到雲端後的行為都可能有坑要注意，例如這個:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 轉址回原先頁
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;response.&lt;span style=&#34;color:#658b00&#34;&gt;sendRedirect&lt;/span&gt;(request.&lt;span style=&#34;color:#658b00&#34;&gt;getHeader&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;本來是返回上一個請求，結果大概因為http-https會自動跳轉，這樣寫就變成無限跳轉又307了&lt;/li&gt;
&lt;li&gt;說實在還是沒弄得太懂部署https到底要怎做，但正常來說一般項目都是前後分離，且內部有網關或nginx做反向代理，外部靜態資源的請求在nginx就能直接打回去了，應該反而不會搞得這麼麻煩&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heroku連結github&#34;&gt;heroku連結github&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;發現有更簡單的方法，直接連到指定github的倉庫&lt;/li&gt;
&lt;li&gt;往下拉能設定自動部署，也可以手動&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210205300690.png&#34; alt=&#34;image-20220210205300690&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好處是要上傳的檔案會小很多(直接傳到heroku是含輸出打包後的那整坨)&lt;/li&gt;
&lt;li&gt;從github過去就省掉這一步，打包輸出交給heroku去幹，但是可能它包的會有些微差異(有些變成亂碼之類)，需要自己在確認一遍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-8與11的專案結構差異&#34;&gt;Java 8與11的專案結構差異&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java8的預設結構是這樣，東西都是放在\src\main&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210134553895.png&#34; alt=&#34;image-20220210134553895&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;java 11 預設結構卻是這樣&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要注意.properties與web資源的位置不同&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210140632716.png&#34; alt=&#34;image-20220210140632716&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;解決maven詭異報錯&#34;&gt;解決Maven詭異報錯&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;排錯半天明明沒問題卻報錯，很有可能是Cache問題，選這邊清空重開即可&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210142043033.png&#34; alt=&#34;image-20220210142043033&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;git指令&#34;&gt;git指令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本地連到遠端倉庫
&lt;ul&gt;
&lt;li&gt;給遠端倉庫取別名叫做&lt;code&gt;origin&lt;/code&gt;，因為如果是載下來的倉庫預設就叫&lt;code&gt;origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add origin https://倉庫網址.git
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;將檔案加入暫存&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;註記&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git commit -m &amp;quot;本次上傳的註解&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;把叫origin的推上它的遠端master分支上
&lt;ul&gt;
&lt;li&gt;以前主分支預設叫&lt;code&gt;master&lt;/code&gt;，後來說有歧視所以預設改叫&lt;code&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt; 設定 upstream ，在 Git 裡面每一個分支可以設定一個「上游」&lt;/li&gt;
&lt;li&gt;如果不用&lt;code&gt;-u&lt;/code&gt;就要輸入完整的遠端節點名稱&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/220211-javaweb-heroku/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>高併發方案、Sentinel限流、Sleuth鏈路追蹤</title>
        <link>https://yoziming.github.io/post/220210-gulimall-24-sentinel/</link>
        <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220210-gulimall-24-sentinel/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220210-gulimall-24-sentinel/ -&lt;h1 id=&#34;高併發關注重點&#34;&gt;高併發關注重點&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;image-20220206222827204.png&#34; alt=&#34;image-20220206222827204&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20220206223434557.png&#34; alt=&#34;image-20220206223434557&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;單一職責: 專門的服務模組，就只幹這件事，不論要擴容或是掛了都方便&lt;/li&gt;
&lt;li&gt;鏈結加密: 每場商品都有隨機產生的Token，防有心人提早準備(台鐵搶票系統學一下好嗎?)&lt;/li&gt;
&lt;li&gt;預熱、扣減: 既然知道會讀多寫少，提前把要被查的資料放Redis；用信號量做令牌，只放行這些數量&lt;/li&gt;
&lt;li&gt;動靜分離: 靜態資源從網關就打回去，確保來到伺服的都是動態請求&lt;/li&gt;
&lt;li&gt;攔截惡意請求: 在網關設定，判斷那些非人的操作(例如同IP超快超大量的)，直接擋回去&lt;/li&gt;
&lt;li&gt;流量錯峰: 用干擾手段使人的操作時間不同(就是噁心用戶)，爭取錯開請求進來的時間&lt;/li&gt;
&lt;li&gt;限流、熔斷、降級: 降級就是負載超過上限，Show一個&amp;quot;當前流量過高，請稍後重試&amp;quot;之類的惱人畫面給用戶看&lt;/li&gt;
&lt;li&gt;延遲隊列: 終極手段，管你多少請求只要通過驗證就放進隊列，之後慢慢處理，總會給你處理到，但不保證是現在&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sentinel&#34;&gt;Sentinel&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;官方: &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D&#34;&gt;https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用來限流、保護資源&lt;/li&gt;
&lt;li&gt;Sentinel分為核心庫 與 Dashboard可視化界面，核心庫不依賴Dashboard&lt;/li&gt;
&lt;li&gt;工作原理主要分為三個步驟:
&lt;ul&gt;
&lt;li&gt;定義資源: 叫做&amp;quot;埋點&amp;quot;，即聲明要保護的資源，可以是服務、方法、甚至單純一段程式碼
&lt;ul&gt;
&lt;li&gt;方法很多，最簡單就是用註解或try-catch&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8&#34;&gt;https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定義規則: 流量控制規則、熔斷降級規則、系統保護規則、來源訪問控制規則 和 熱點參數規則
&lt;ul&gt;
&lt;li&gt;最簡單就是開啟Dashboard用可視化界面建立規則(但這樣用的設定保存在記憶體，重開會消失)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;檢驗規則是否生效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引包&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-sentinel&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2021.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;設定application.properties
&lt;ul&gt;
&lt;li&gt;注意他有2端口，一個是訪問dashboard本身，預設是8080&lt;/li&gt;
&lt;li&gt;另一個是微服務傳給sentinel中心，預設是8719&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# sentinel控制台
spring.cloud.sentinel.transport.dashboard=localhost:8333
# 微服務與控制台傳輸數據的端口
spring.cloud.sentinel.transport.port=8719
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;載Dashboard: &lt;a href=&#34;https://github.com/alibaba/Sentinel/releases&#34;&gt;https://github.com/alibaba/Sentinel/releases&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;啟動Dashboard&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預設埠是8080可能衝突，所以自己指定一個&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -jar sentinel-dashboard-1.8.3.jar --server.port=8333
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;訪問 &lt;code&gt;localhost:8333&lt;/code&gt;，賬號密碼都是&lt;code&gt;sentinel&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;點進去看啥都沒有，因為有訪問的時候才會加載&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;測試&#34;&gt;測試&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;啟動監控後，調用一次API讓Dashboard發現資源&lt;/li&gt;
&lt;li&gt;隨便手動設定一個限流，然後嘗試快速連續訪問&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207155148467.png&#34; alt=&#34;image-20220207155148467&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;即時監控&#34;&gt;即時監控&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;pom.xml
&lt;ul&gt;
&lt;li&gt;注意actuator是依賴於springboot，小心循環依賴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!--springboot 收集健康狀況信息，提供給sentinel使用--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 暴露端點給sentinel監控產生圖表
management.endpoints.web.exposure.include=*
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;效果:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207162007592.png&#34; alt=&#34;image-20220207162007592&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定義阻塞返回&#34;&gt;自定義阻塞返回&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MyUrlBlockHandler.java
&lt;ul&gt;
&lt;li&gt;需要實現&lt;code&gt;BlockExceptionHandler&lt;/code&gt;並重寫&lt;code&gt;handle&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;注意編碼問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 流量過高阻塞時返回的資訊
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyUrlBlockHandler&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; BlockExceptionHandler {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;handle&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, BlockException ex) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt;
            IOException {
        &lt;span style=&#34;color:#228b22&#34;&gt;// TOO_MANY_REQUEST(10002, &amp;#34;請求流量過大，請稍後再試&amp;#34;),
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        R error = R.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;TOO_MANY_REQUEST&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;(), BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;TOO_MANY_REQUEST&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
        response.&lt;span style=&#34;color:#658b00&#34;&gt;setCharacterEncoding&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;);
        response.&lt;span style=&#34;color:#658b00&#34;&gt;setContentType&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;);
        response.&lt;span style=&#34;color:#658b00&#34;&gt;getWriter&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;write&lt;/span&gt;(JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(error));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;效果:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207161840046.png&#34; alt=&#34;image-20220207161840046&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;控制規則&#34;&gt;控制規則&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207163131552.png&#34; alt=&#34;image-20220207163131552&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;流控模式&#34;&gt;流控模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;直接: 就只關注資源本身&lt;/li&gt;
&lt;li&gt;關聯: A限流，A關聯B，如果B的流量大就對A限流，否則不限&lt;/li&gt;
&lt;li&gt;鏈路: 指定某個入口開始到這邊的請求(中間可能隔了很多層)，才會被限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流控效果&#34;&gt;流控效果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;快速失敗: 直接拒絕拋出異常&lt;/li&gt;
&lt;li&gt;Warm Up: 預熱啓動，例如給定10S，10S內才將請求增加到閾值500，不會一次性放行500個
&lt;ul&gt;
&lt;li&gt;剛開機沒有cache所以反應慢，不能一下子太高流量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;排隊等待: 如果限制閾值500，此時來了700個請求，500個直接放行，剩下200排隊
&lt;ul&gt;
&lt;li&gt;可以設置超時時間，3S內得不到處理也是失敗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;熔斷feign遠程調用&#34;&gt;熔斷feign遠程調用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;情景: A遠程調用B，當B掛掉的時候，希望A還能維持作用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sentinel預設支援openFeign，只要設定application.properties&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# feign開啓sentinel
feign.sentinel.enabled=true
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;在原本的Feign接口設定fallback&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207165856170.png&#34; alt=&#34;image-20220207165856170&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SeckillFeignServiceFallBack.java
&lt;ul&gt;
&lt;li&gt;實現FeignService接口，並且重寫方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 熔斷或降級的實現
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SeckillFeignServiceFallBack&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; SeckillFeignService {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;getSkuSeckilInfo&lt;/span&gt;(Long skuId) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 可以返回某些預設值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// TOO_MANY_REQUEST(10002, &amp;#34;請求流量過大，請稍後再試&amp;#34;),
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;TOO_MANY_REQUEST&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;(), BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;TOO_MANY_REQUEST&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;坑&#34;&gt;坑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;版本問題會導致啟動報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FactoryBean threw exception on object creation; nested exception...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;image-20220207212645872.png&#34; alt=&#34;image-20220207212645872&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解法: &lt;a href=&#34;https://www.sqms.xyz/archives/springcloud%E4%B8%ADopenfeign%E6%95%B4%E5%90%88sentinel%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99&#34;&gt;https://www.sqms.xyz/archives/springcloud%E4%B8%ADopenfeign%E6%95%B4%E5%90%88sentinel%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;調用方指定熔斷降級策略&#34;&gt;調用方指定熔斷降級策略&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;參考官方: &lt;a href=&#34;https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7&#34;&gt;https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;我是A調用方，我大概知道B提供方能負載多少(超過負載B就會爆炸)，為了不讓B爆炸導致我A也受牽連，所以我A遠程調用B的時候做監控，設定超過多少就節制，讓B緩緩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207170452522.png&#34; alt=&#34;image-20220207170452522&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RT: 響應時間，比如上圖設定意思是 1000ms內，如果進來有5個請求以上，且平均每個請求的響應時間大於1ms，那就熔斷10s&lt;/li&gt;
&lt;li&gt;進入熔斷後，不會報錯，但調用的是本地FallBack.java中的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;提供方主動降級策略&#34;&gt;提供方主動降級策略&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207171811932.png&#34; alt=&#34;image-20220207171811932&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我是B提供方，我知道自己只能幹多少活，超過就限流，可以直接甩手不幹或是讓請求排隊等等&lt;/li&gt;
&lt;li&gt;當然也可以返回降級頁面或預設值，做法就是前面說過的自定義阻塞返回&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自訂資源&#34;&gt;自訂資源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有controller請求的流控和降級，預設都是用&lt;code&gt;BlockExceptionHandler&lt;/code&gt;中統一的自定義阻塞返回&lt;/li&gt;
&lt;li&gt;service中的每一個資源(可以是一個方法或一個代碼塊)都可以自訂自己的返回&lt;/li&gt;
&lt;li&gt;一個方法可以被定義成多個資源(可以隨便套娃)，並且每個資源的限流規則不一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;try-catch法&#34;&gt;Try-catch法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;翻sentinel源碼，最底層的實現就是這樣&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; (Entry entry = SphU.&lt;span style=&#34;color:#658b00&#34;&gt;entry&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;資源名&amp;#34;&lt;/span&gt;)) {
&lt;span style=&#34;color:#228b22&#34;&gt;// 業務邏輯
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt;(BlockException e){
 log.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;資源被限流{}&amp;#34;&lt;/span&gt;, e.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;註解法&#34;&gt;註解法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在同類中創造降級後執行的&lt;code&gt;blockHandler&lt;/code&gt;方法，並且參數、返回類型跟原方法一樣&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;@SentinelResource&lt;/code&gt;註解資源&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;SeckillSkuRedisTo&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;blockHandler&lt;/span&gt;(BlockException e) {
        log.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;getCurrentSeckillSkusResource被限流了,{}&amp;#34;&lt;/span&gt;, e.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 獲取到當前可以參加秒殺商品的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@SentinelResource&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;getCurrentSeckillSkusResource&amp;#34;&lt;/span&gt;, blockHandler = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;blockHandler&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;SeckillSkuRedisTo&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCurrentSeckillSkus&lt;/span&gt;() {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;網關流控&#34;&gt;網關流控&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;已經整合好了，可以直接在gateway模組引包&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-sentinel-gateway&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;一樣到.properties註冊sentinel端口&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# sentinel控制台
spring.cloud.sentinel.transport.dashboard=localhost:8333
# 微服務與控制台傳輸數據的端口
spring.cloud.sentinel.transport.port=8719
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;到控制台可以發現針對網關有專門的規則可以調控&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207213813075.png&#34; alt=&#34;image-20220207213813075&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並且也可以設定統一的返回
&lt;ul&gt;
&lt;li&gt;什麼Mono.just關鍵字是&lt;code&gt;響應式編程&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;稍微了解一下是Spring5的新特性webflux，特色在於異步、非阻塞、天然應對高併發&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @Description: 自定義阻塞返回方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; **/&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SentinelGatewayConfig&lt;/span&gt; {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;SentinelGatewayConfig&lt;/span&gt;() {
        GatewayCallbackManager.&lt;span style=&#34;color:#658b00&#34;&gt;setBlockHandler&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; BlockRequestHandler() {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 網關限流了請求，就會調用此回調
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Mono&amp;lt;ServerResponse&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;handleRequest&lt;/span&gt;(ServerWebExchange serverWebExchange, Throwable throwable) {
                R error = R.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;TOO_MANY_REQUEST&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;(), BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;TOO_MANY_REQUEST&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
                String errJson = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(error);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ServerResponse.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;body&lt;/span&gt;(Mono.&lt;span style=&#34;color:#658b00&#34;&gt;just&lt;/span&gt;(errJson), String.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;一圖理解響應式編程:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207214935780.png&#34; alt=&#34;image-20220207214935780&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;規則持久化&#34;&gt;規則持久化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;預設存在記憶體重開就消失，可以把規則存到Nacos&lt;/li&gt;
&lt;li&gt;參考: &lt;a href=&#34;https://www.cnblogs.com/jian0110/p/14139044.html&#34;&gt;https://www.cnblogs.com/jian0110/p/14139044.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sleuth-鏈路追蹤&#34;&gt;Sleuth 鏈路追蹤&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;若有一個請求跨越了多個微服務，想知道各服務花費了多少時間，可以用Spring Sleuth追蹤&lt;/li&gt;
&lt;li&gt;當發現某個服務特別慢，針對改善或直接將其降級&lt;/li&gt;
&lt;li&gt;核心原理就是每到達一個節點都會記錄時間戳，計算差值就可以得到傳輸時間、某個節點處理請求的時間
&lt;ul&gt;
&lt;li&gt;每一個節點都是一個&lt;code&gt;Span&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多個&lt;code&gt;Span&lt;/code&gt;共同組成&lt;code&gt;Trace&lt;/code&gt;，就是一個完整從客戶端發起到返回的任務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;並且可以搭配Zipkin可視化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-1&#34;&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引包，sleuth需要spring-cloud&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- 鏈路追蹤sleuth --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-sleuth&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;Hoxton.SR9&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 開啓sleuth鏈路追蹤debug日誌
logging.level.org.springframework.cloud.openfeign=debug
logging.level.org.springframework.cloud.sleuth=debug
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;坑-啟動報錯&#34;&gt;坑-啟動報錯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;引入sleuth後啟動報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Error creating bean with name &#39;scopedTarget.defaultTraceSampler&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;參考: &lt;a href=&#34;https://blog.csdn.net/u011039332/article/details/107423951&#34;&gt;https://blog.csdn.net/u011039332/article/details/107423951&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_44743245/article/details/120813121&#34;&gt;https://blog.csdn.net/weixin_44743245/article/details/120813121&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原因: main 線程持有 singletonObjects 的鎖, 並且等待 lettuce-kqueueEventLoop-4-1 來 unpark, lettuce-kqueueEventLoop-4-1 線程需要 singletonObjects 的鎖, 所以 就造成了死鎖&lt;/li&gt;
&lt;li&gt;解法有以下幾種可選&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;解法1: 在配置文件application.properties
# 防止啟動死鎖衝突
spring.sleuth.redis.enabled=false
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;解法2: 啟動類排除TraceRedisAutoConfiguration.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@SpringBootApplication&lt;/span&gt;(exclude = {DataSourceAutoConfiguration.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;,TraceRedisAutoConfiguration.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;解法3: 自己聲明配置一個zipkin的採樣器&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;而不是使用 spring boot 自動配置的 代碼如下&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SleuthSamplerConfiguration&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Sampler &lt;span style=&#34;color:#008b45&#34;&gt;defaultSampler&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 这个值是采样率，设置为1就是100%采样，每一条请求都采，0.1就是10%采样率
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Float f = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Float(0.&lt;span style=&#34;color:#658b00&#34;&gt;1f&lt;/span&gt;);
        SamplerProperties samplerProperties = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SamplerProperties();
        samplerProperties.&lt;span style=&#34;color:#658b00&#34;&gt;setProbability&lt;/span&gt;(f);
        ProbabilityBasedSampler sampler = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ProbabilityBasedSampler(samplerProperties);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; sampler;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;zipkin&#34;&gt;zipkin&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;可視化顯示鏈路，官方: &lt;a href=&#34;https://zipkin.io&#34;&gt;https://zipkin.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;拉docker服務，也有jar執行版，但docker比較通用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d -p 9411:9411 openzipkin/zipkin
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;引包&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- 可視化zipkin已經包含鏈路追蹤sleuth --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-zipkin&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;application.properties
&lt;ul&gt;
&lt;li&gt;每個服務都要設定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 鏈路追蹤可視化zipkin伺服器
spring.zipkin.base-url=http://localhost:9411/
# 關閉服務發現，否則spring cloud會把zipkin的url當做服務名稱
spring.zipkin.discovery-client-enabled=false
# 使用http的方式傳輸數據
spring.zipkin.sender.type=web
# 設置抽樣採集率為100%，預設是0.1
spring.sleuth.sampler.probability=1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;瀏覽器訪問 http://localhost:9411/
&lt;ul&gt;
&lt;li&gt;發起請求，看到底在哪邊耗時最多、哪裡是瓶頸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207235808905.png&#34; alt=&#34;image-20220207235808905&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;發現只要有feign遠程調用就特別慢，盡量少用，真要用要盡量做異步
&lt;ul&gt;
&lt;li&gt;而發消息給MQ跟接收都超快，難怪喜歡用消息隊列，真的舒服&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208003057292.png&#34; alt=&#34;image-20220208003057292&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;還可以查看依賴&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208003438550.png&#34; alt=&#34;image-20220208003438550&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選取節點，能查看他的上下游&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208003722008.png&#34; alt=&#34;image-20220208003722008&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;持久化&#34;&gt;持久化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;預設是存在記憶體，一樣關機就GG&lt;/li&gt;
&lt;li&gt;可以存到MySQL或elasticsearch，由於追蹤要搜尋、篩選，用ES更好一點&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --env STORAGE_TYPE=elasticsearch --env ES_HOSTS=localhost:9200 openzipkin/zipkin-dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;高級篇小結&#34;&gt;高級篇小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;併發有三寶: 緩存、異步、隊排好&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220210-gulimall-24-sentinel/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>柚子書城</title>
        <link>https://yoziming.github.io/post/220209-javaweb-book-market/</link>
        <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220209-javaweb-book-market/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220209-javaweb-book-market/ -&lt;h1 id=&#34;柚子書城&#34;&gt;柚子書城&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;柚子書城是一個不依賴Spring框架，純粹的JavaWeb項目，主要練習HTTP基本功、Servlet、Session等原理，以及JDBC、資料庫連接池等基礎的SQL操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;專案背景background&#34;&gt;專案背景(Background)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本項目參考自 尚硅谷java web課程 &lt;a href=&#34;https://www.bilibili.com/video/BV1Y7411K7zz&#34;&gt;https://www.bilibili.com/video/BV1Y7411K7zz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;個人學習過程的詳細筆記(共14篇): &lt;a href=&#34;https://yoziming.github.io/post/220101-agg-javaweb-01/&#34;&gt;https://yoziming.github.io/post/220101-agg-javaweb-01/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我修復了一些邏輯並完善功能，並成功將網站部署到雲端，可以透過公開網址訪問&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;展示網站website&#34;&gt;展示網站(Website)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;已將專案部署到heroku，由於dyno長時間沒用會自動休眠，有時候訪問可能需要等待約30秒雲端server啟動時間&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://my-javaweb-book-market.herokuapp.com/&#34;&gt;https://my-javaweb-book-market.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;可自行註冊帳號，管理員權限帳號密碼為 &lt;code&gt;admin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;學習技術&#34;&gt;學習技術&lt;/h3&gt;
&lt;h4 id=&#34;前端&#34;&gt;前端&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;html、css、javascript的基礎認識&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如: 各種標籤&lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;input type&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jsp、jQuery、JSTL標籤庫、EL運算式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如: &lt;code&gt;&amp;lt;c:if test=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;、&lt;code&gt;${key1}&lt;/code&gt;、綁定點擊事件&amp;hellip;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ajax，非同步請求的基礎構成，例如: &lt;code&gt;$.getJSON()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;後端&#34;&gt;後端&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不依賴Spring框架的http請求與響應操作&lt;/li&gt;
&lt;li&gt;Servlet、Filter、Listener、Cookie、Session、JSON&lt;/li&gt;
&lt;li&gt;驗證資訊、權限隔離、防止重複提交&lt;/li&gt;
&lt;li&gt;JDBC、資料庫連接池、DAO操作SQL&lt;/li&gt;
&lt;li&gt;MVC與三層架構、搭建javaweb專案&lt;/li&gt;
&lt;li&gt;web容器的運作與部屬&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;實現功能service&#34;&gt;實現功能(Service)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;柚子書城是簡單的商城項目，依業務劃分可分為五個主要模組&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模組&lt;/th&gt;
&lt;th&gt;需求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;用戶&lt;/td&gt;
&lt;td&gt;能驗證資訊(ajax)即時提示的會員註冊、登入(透過cookie)功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;商品&lt;/td&gt;
&lt;td&gt;能夠分頁顯示商品(圖書)、可依照價格區間篩選&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;購物車&lt;/td&gt;
&lt;td&gt;以Session實現的購物車，用戶可以快速地瀏覽、增刪購物項目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;訂單&lt;/td&gt;
&lt;td&gt;提交訂單、查看訂單詳情、確認收貨等等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;管理後台&lt;/td&gt;
&lt;td&gt;能驗證管理員帳號，增刪改查商品訊息、訂單訊息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;演示demo&#34;&gt;演示(Demo)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下透過gif簡單展示相關功能，若顯示有問題，可以移至個人blog觀看&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yoziming.github.io/post/220209-javaweb-book-market/&#34;&gt;https://yoziming.github.io/post/220209-javaweb-book-market/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;登入與註冊&#34;&gt;登入與註冊&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以Ajax請求，即時驗證填入的資訊，並做出提醒(如用戶名重複等等)&lt;/li&gt;
&lt;li&gt;驗證碼防止機器人與重複註冊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;login.gif&#34; alt=&#34;login&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;價格篩選&#34;&gt;價格篩選&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;同樣有輸入驗證，即使使用者亂輸入也會在稍後自動校正&lt;/li&gt;
&lt;li&gt;可指定頁數直接跳轉的分頁導航&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;price.gif&#34; alt=&#34;price&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;購物車&#34;&gt;購物車&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提示剛剛加入購物車的商品&lt;/li&gt;
&lt;li&gt;可修改數量，並且也有輸入驗證與校正&lt;/li&gt;
&lt;li&gt;刪除項目、清空購物車&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;cart.gif&#34; alt=&#34;cart&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;訂單&#34;&gt;訂單&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下單成功後可察看訂單詳情&lt;/li&gt;
&lt;li&gt;並且會將購物車正確清空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;guest.gif&#34; alt=&#34;guest&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;用戶資訊保護&#34;&gt;用戶資訊保護&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;必須為正確的登入狀態才可以查看訂單相關模組&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;filter.gif&#34; alt=&#34;filter&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;管理後台&#34;&gt;管理後台&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;能驗證是否為具有管理員權限&lt;/li&gt;
&lt;li&gt;增刪改查商品訊息、訂單訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;manager.gif&#34; alt=&#34;manager&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;用戶收貨&#34;&gt;用戶收貨&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當商城出貨後，用戶可以執行確認收貨的動作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;receive.gif&#34; alt=&#34;receive&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;友善的錯誤提示頁面&#34;&gt;友善的錯誤提示頁面&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;error.gif&#34; alt=&#34;error&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;版本version&#34;&gt;版本(Version)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本專案使用的環境: JDK8、MySQL5.7、Tomcat8.5.75&lt;/li&gt;
&lt;li&gt;專案結構:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;├─src
│  ├─main
│  │  ├─java
│  │  │  └─yoziming
│  │  │      ├─dao  # 操作SQL用
│  │  │      ├─filter  # 權限過濾
│  │  │      ├─pojo  # entity
│  │  │      ├─service  # 主要業務邏輯
│  │  │      ├─test  # 主要業務邏輯
│  │  │      ├─utils  # 工具類(處理JDBC連線等等)
│  │  │      └─web  # servlet
│  │  ├─resources  # 設定檔
│  │  └─webapp
│  │      ├─pages  # JSP頁面
│  │      ├─static  # 靜態資源
│  │      └─WEB-INF
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;MySQL建表資料&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bookstore;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;use&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;bookstore;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NAMES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8mb4;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;FOREIGN_KEY_CHECKS&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- Table structure for t_book
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DROP&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;IF&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;EXISTS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CREATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;(&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`id`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NOT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;AUTO_INCREMENT,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`name`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`price`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;decimal&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`author`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`sales`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`stock`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`img_path`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;200&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(`id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USING&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;BTREE&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ENGINE&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;InnoDB&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;AUTO_INCREMENT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ROW_FORMAT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Dynamic&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- Records of t_book
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;高等數學&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;牛頓&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Java入門到放棄&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;55&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;James Gosling&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;99&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;易筋經：中國式瑜珈&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;360&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;譚浩強&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;126&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;184&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default2.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;三體&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;劉慈欣&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;27&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;6&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;論文寫作指導&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;49&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;劉慈欣&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;65&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;35&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default2.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;囚狐&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;133&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;05&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;雷豐陽&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;125&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;185&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;自動控制原理&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;89&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;王萬良&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;23&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;7&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default2.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;第七日&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;49&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;余華&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;66&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;34&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;人生&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;133&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;05&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;路遙&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;122&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;188&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default2.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;活著&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;89&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;余華&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_book`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;禿子跟著月亮走&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;999&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;韓國瑜&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;static/img/default.jpg&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- Table structure for t_order
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DROP&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;IF&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;EXISTS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order`;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CREATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order`&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;(&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`order_id`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NOT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`create_time`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;datetime(&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`price`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;decimal&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`status`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`user_id`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(`order_id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USING&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;BTREE,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INDEX&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`user_id`(`user_id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USING&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;BTREE,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CONSTRAINT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_ibfk_1`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FOREIGN&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(`user_id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;REFERENCES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_user`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(`user_id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DELETE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;RESTRICT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;UPDATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;RESTRICT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ENGINE&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;InnoDB&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ROW_FORMAT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Dynamic&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- Records of t_order
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444160853253&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2022-02-09 22:14:45&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;925&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444161578231&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2022-02-09 22:15:57&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;346&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444162162311&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2022-02-09 22:16:56&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;178&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444165692211&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;2022-02-09 22:22:49&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;187&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- Table structure for t_order_item
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DROP&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;IF&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;EXISTS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CREATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;(&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`id`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NOT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;AUTO_INCREMENT,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`name`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;count&lt;/span&gt;`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`price`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;decimal&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`total_price`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;decimal&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`order_id`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(`id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USING&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;BTREE,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INDEX&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`order_id`(`order_id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USING&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;BTREE,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CONSTRAINT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item_ibfk_1`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;FOREIGN&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(`order_id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;REFERENCES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(`order_id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DELETE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;RESTRICT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;ON&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;UPDATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;RESTRICT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ENGINE&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;InnoDB&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;AUTO_INCREMENT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ROW_FORMAT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Dynamic&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- Records of t_order_item
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;Java入門到放棄&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;55&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;55&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444160853253&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;9&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;易筋經：中國式瑜珈&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;360&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;720&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444160853253&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;三體&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;150&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444160853253&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;高等數學&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444161578231&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;12&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;三體&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444161578231&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;13&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;囚狐&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;133&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;05&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;266&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444161578231&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;14&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;自動控制原理&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;89&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;178&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;30&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444162162311&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;第七日&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;49&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;98&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;00&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444165692211&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_order_item`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;自動控制原理&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;89&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;89&lt;/span&gt;.&lt;span style=&#34;color:#b452cd&#34;&gt;15&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;16444165692211&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- Table structure for t_user
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DROP&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;IF&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;EXISTS&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_user`;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;CREATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;TABLE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_user`&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;(&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`user_id`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;int&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;11&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NOT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;AUTO_INCREMENT,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`username`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;20&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NOT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`password`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;32&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NOT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;`email`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;varchar&lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;PRIMARY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;KEY&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(`user_id`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USING&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;BTREE,&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;UNIQUE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INDEX&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`username`(`username`)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;USING&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;BTREE&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ENGINE&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;InnoDB&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;AUTO_INCREMENT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;CHARACTER&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;COLLATE&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;utf8_general_ci&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ROW_FORMAT&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;Dynamic&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- Records of t_user
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;-- ----------------------------
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_user`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;admin@example.com&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_user`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;aaa&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;aaa@a.com&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_user`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ccc&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;ccc@c.com&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INSERT&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;INTO&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;`t_user`&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;VALUES&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;guest&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;xxx@x.com&amp;#39;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;SET&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;FOREIGN_KEY_CHECKS&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;=&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;部署deploy&#34;&gt;部署(deploy)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用Tomcat Server運行，並確認Artifacts無誤即可啟動&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220210000251435.png&#34; alt=&#34;image-20220210000251435&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要確認 &lt;code&gt;jdbc.properties&lt;/code&gt;中MySQL的帳號與密碼&lt;/li&gt;
&lt;li&gt;將專案部署到heroku的踩坑紀錄，請參閱heroku部署篇&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220209-javaweb-book-market/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>秒殺優惠模組、Cron表達式</title>
        <link>https://yoziming.github.io/post/220209-gulimall-23-sec-kill/</link>
        <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220209-gulimall-23-sec-kill/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220209-gulimall-23-sec-kill/ -&lt;h1 id=&#34;秒殺優惠活動&#34;&gt;秒殺優惠活動&lt;/h1&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220206174238826.png&#34; alt=&#34;image-20220206174238826&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;秒殺分兩部分，一是營運人員後台系統新增秒殺場次到DB，然後關聯商品到場次中&lt;/li&gt;
&lt;li&gt;後台系統新增場次隸屬於Coupon優惠模組之下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220206140702854.png&#34; alt=&#34;image-20220206140702854&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;這邊把活動的訊息封裝到資料庫，大部分生成器都做好了，只有少數搜尋條件等等要調整，就不一一列出&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;網關&#34;&gt;網關&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注意，後台是網址帶有&lt;code&gt;/api/&lt;/code&gt;，請求來自&lt;code&gt;renren-fast-admin&lt;/code&gt;的(例如營運人員上架商品、促銷活動)，再重寫URL轉發給其他模組&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用戶訪問商城網站，是來自nginx轉發的，斷言是&lt;code&gt;Host=cart.mall.com&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application.yml&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;coupon_route&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uri&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;lb://coupon&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;predicates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- Path=/api/coupon/**&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;filters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- RewritePath=/api/(?&amp;lt;segment&amp;gt;.*),/$\{segment}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;mall_seckill_route&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uri&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;lb://seckill&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;predicates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- Host=seckill.mall.com&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;秒殺模組&#34;&gt;秒殺模組&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;這邊負責實際業務邏輯的執行，秒殺有瞬間高併發的特點，必須要做限流＋異步＋緩存 + 頁面靜態化+ 獨立部署，還需要處理定時任務等等&lt;/li&gt;
&lt;li&gt;定時任務將最近三天的場次 + 關聯商品上傳到redis中
&lt;ul&gt;
&lt;li&gt;高併發用redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cron表達式&#34;&gt;Cron表達式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用來定義定時任務的週期&lt;/li&gt;
&lt;li&gt;由6個空格分開7個域&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;域&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;是否必填&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;值以及範圍&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;通配符&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;秒&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0-59&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0-59&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;時&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0-23&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;日&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1-31&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;, - * ? / L W&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;月&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1-12 或 JAN-DEC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;周&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;是&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1-7 或 SUN-SAT&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;, - * ? / L #&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;年&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;否&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1970-2099&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;, - * /&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;最低單位是秒，第七位的年可以省略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;表示之間，在秒的域寫&lt;code&gt;1-3&lt;/code&gt;表示&lt;code&gt;1,2,3&lt;/code&gt;秒都要執行一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;表示間隔週期，在秒的域寫&lt;code&gt;5/10&lt;/code&gt;表示從第5秒開始，每10秒執行一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;表示每，&lt;code&gt;?&lt;/code&gt;表示不指定(例如要在每月的8號觸發一個操作，但不關心是周幾 &lt;code&gt;0 0 0 8 * ?&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;大致懂就好，其他不用太關心，很多線上工具可以生成
&lt;ul&gt;
&lt;li&gt;例如 &lt;a href=&#34;https://www.bejson.com/othertools/cron/&#34;&gt;https://www.bejson.com/othertools/cron/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring中的cron&#34;&gt;Spring中的cron&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在類上啟用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@EnableScheduling&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;HelloScheduled&lt;/span&gt; {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在方法使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Scheduled&lt;/span&gt;(cron = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*/5 * * ? * 4&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;hello&lt;/span&gt;() {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;設定在&lt;code&gt;spring.task.scheduling&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;坑&#34;&gt;坑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在Spring中表達式是6位組成，不允許第七位的年份&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在周幾的的位置，1-7代表周一到周日&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;預設會阻塞，解法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把業務提交到線程池，並且設定線程池大小，然而某些版本有bug&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {  },execute);

&lt;span style=&#34;color:#228b22&#34;&gt;// application.properties
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;spring.&lt;span style=&#34;color:#658b00&#34;&gt;task&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;scheduling&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;pool&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;: 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用Spring的異步任務&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring的異步任務&#34;&gt;Spring的異步任務&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在類上啟用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@EnableAsync&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;HelloScheduled&lt;/span&gt; {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在方法使用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Async&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Scheduled&lt;/span&gt;(cron = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*/5 * * ? * 4&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;hello&lt;/span&gt;() {
    log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello...&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(3);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;設定在&lt;code&gt;spring.task.execution&lt;/code&gt;，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# application.properties
spring.task.execution.pool.core-size=10
spring.task.execution.pool.max-size=50
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;上架秒殺商品&#34;&gt;上架秒殺商品&lt;/h3&gt;
&lt;h4 id=&#34;定時任務&#34;&gt;定時任務&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;於可用性考量，可能有多台機器被下了排程任務，所以需要用一個分布式鎖來防止重複上架&lt;/li&gt;
&lt;li&gt;測試環境下每5秒掃描一次&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Service&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SeckillScheduled&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; SeckillService seckillService;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; RedissonClient redissonClient;

    &lt;span style=&#34;color:#228b22&#34;&gt;// 秒殺商品上架功能的鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String upload_lock = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;seckill:upload:lock&amp;#34;&lt;/span&gt;;
    
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Scheduled&lt;/span&gt;(cron = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*/5 * * * * ? &amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#228b22&#34;&gt;// @Scheduled(cron = &amp;#34;0 0 3 * * ? &amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;uploadSeckillSkuLatest3Days&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 重複上架先不處理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;上架秒殺的商品...&amp;#34;&lt;/span&gt;);

        &lt;span style=&#34;color:#228b22&#34;&gt;// 分佈式鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        RLock lock = redissonClient.&lt;span style=&#34;color:#658b00&#34;&gt;getLock&lt;/span&gt;(upload_lock);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 加鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            lock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;(10, TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;);
            seckillService.&lt;span style=&#34;color:#658b00&#34;&gt;uploadSeckillSkuLatest3Days&lt;/span&gt;();
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
            lock.&lt;span style=&#34;color:#658b00&#34;&gt;unlock&lt;/span&gt;();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;上架服務&#34;&gt;上架服務&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;SeckillServiceImpl.java
&lt;ul&gt;
&lt;li&gt;遠程調用coupon模組查詢出最近三天的所有活動(查SQL，比對當前時間與活動設定的時間)，返回&lt;code&gt;List&amp;lt;SeckillSessionWithSkusVo&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;裡面包含了活動場次，以及關聯的商品sku訊息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;uploadSeckillSkuLatest3Days&lt;/span&gt;() {

    &lt;span style=&#34;color:#228b22&#34;&gt;// 掃描最近三天的商品需要參加秒殺的活動
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    R lates3DaySession = couponFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getLates3DaySession&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (lates3DaySession.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 上架商品
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;SeckillSessionWithSkusVo&amp;gt; sessionData = lates3DaySession.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;List&amp;lt;SeckillSessionWithSkusVo&amp;gt;&amp;gt;() {
                });
        &lt;span style=&#34;color:#228b22&#34;&gt;// 緩存到Redis
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 緩存活動信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        saveSessionInfos(sessionData);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 緩存活動的關聯商品信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        saveSessionSkuInfo(sessionData);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;緩存活動信息&#34;&gt;緩存活動信息&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;緩存活動信息至redis(redis中的List類型)
&lt;ul&gt;
&lt;li&gt;緩存活動場次信息，每一個場次存儲的類型都是List，多場次就是多條List類型
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;redisTemplate.opsForList().leftPushAll(key, skuIds);&lt;/code&gt;插入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;redis中每個場次的開始時間和結束時間不同，用&lt;code&gt;seckill:sessions:start_end&lt;/code&gt;作為key(start和end都轉換為Long時間戳易於比較，帶年月日)&lt;/li&gt;
&lt;li&gt;將場次&lt;code&gt;sessionId+skuId&lt;/code&gt;拼接成String，所有商品ID塞進&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;作為value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String SESSION__CACHE_PREFIX = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;seckill:sessions:&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String SECKILL_CHARE_PREFIX = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;seckill:skus&amp;#34;&lt;/span&gt;;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String SKU_STOCK_SEMAPHORE = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;seckill:stock:&amp;#34;&lt;/span&gt;;    &lt;span style=&#34;color:#228b22&#34;&gt;//+商品隨機碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 緩存秒殺活動信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param sessions
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;saveSessionInfos&lt;/span&gt;(List&amp;lt;SeckillSessionWithSkusVo&amp;gt; sessions) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!CollectionUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(sessions))
        sessions.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;forEach&lt;/span&gt;(session -&amp;gt; {

            &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前活動的開始和結束時間的時間戳
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; startTime = session.&lt;span style=&#34;color:#658b00&#34;&gt;getStartTime&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getTime&lt;/span&gt;();
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; endTime = session.&lt;span style=&#34;color:#658b00&#34;&gt;getEndTime&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getTime&lt;/span&gt;();

            &lt;span style=&#34;color:#228b22&#34;&gt;// 存入到Redis中的key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            String key = SESSION__CACHE_PREFIX + startTime + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt; + endTime;

            &lt;span style=&#34;color:#228b22&#34;&gt;// 判斷Redis中是否有該信息，如果沒有才進行添加
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            Boolean hasKey = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;hasKey&lt;/span&gt;(key);
            &lt;span style=&#34;color:#228b22&#34;&gt;// 緩存活動信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!hasKey) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取到活動中所有商品的skuId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                List&amp;lt;String&amp;gt; skuIds = session.&lt;span style=&#34;color:#658b00&#34;&gt;getRelationSkus&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;()
                        .&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(item -&amp;gt; item.&lt;span style=&#34;color:#658b00&#34;&gt;getPromotionSessionId&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + item.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;()).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
                redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForList&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;leftPushAll&lt;/span&gt;(key, skuIds);
            }
        });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;緩存商品信息&#34;&gt;緩存商品信息&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;緩存商品信息至redis中的hash類型&lt;/li&gt;
&lt;li&gt;redis的key為&lt;code&gt;seckill:skus&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;hash-key: &lt;code&gt;session_id&lt;/code&gt;(活動id)&lt;/li&gt;
&lt;li&gt;hash-value: SecKillSkuRelationTo包裝成的json串
&lt;ul&gt;
&lt;li&gt;SecKillSkuRelationTo的組成:&lt;/li&gt;
&lt;li&gt;sku的詳細信息(skuInfoEntity 名字、圖片)&lt;/li&gt;
&lt;li&gt;sku的秒殺信息(SeckillSkuRelation + 當前商品秒殺的開始、結束時間)&lt;/li&gt;
&lt;li&gt;隨機碼randomCode(防有心人作弊搶票，沒有隨機碼的請求被打回)&lt;/li&gt;
&lt;li&gt;分佈式信號量(使用信號量做限流，就是之前的數人關門者，只允許多少訪問請求能夠去到DB查庫存)
&lt;ul&gt;
&lt;li&gt;使用redisson實現，redis.getSemaphore(商品隨機碼);&lt;/li&gt;
&lt;li&gt;信號量其實就是秒殺活動設定的商品量，我就只要賣這麼多件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 緩存秒殺活動所關聯的商品信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;saveSessionSkuInfo&lt;/span&gt;(List&amp;lt;SeckillSessionWithSkusVo&amp;gt; sessions) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!CollectionUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(sessions))
        sessions.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;forEach&lt;/span&gt;(session -&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 準備hash操作，綁定hash
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            BoundHashOperations&amp;lt;String, Object, Object&amp;gt; operations =
                    redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;boundHashOps&lt;/span&gt;(SECKILL_CHARE_PREFIX);
            session.&lt;span style=&#34;color:#658b00&#34;&gt;getRelationSkus&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;forEach&lt;/span&gt;(seckillSkuVo -&amp;gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 生成隨機碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                String token = UUID.&lt;span style=&#34;color:#658b00&#34;&gt;randomUUID&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
                String redisKey =
                        seckillSkuVo.&lt;span style=&#34;color:#658b00&#34;&gt;getPromotionSessionId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + seckillSkuVo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!operations.&lt;span style=&#34;color:#658b00&#34;&gt;hasKey&lt;/span&gt;(redisKey)) {

                    &lt;span style=&#34;color:#228b22&#34;&gt;// 緩存商品信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    SeckillSkuRedisTo redisTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SeckillSkuRedisTo();
                    Long skuId = seckillSkuVo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;();
                    &lt;span style=&#34;color:#228b22&#34;&gt;// 先查詢sku的基本信息，調用遠程服務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    R info = productFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getInfo&lt;/span&gt;(skuId);
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (info.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
                        SkuInfoVo skuInfo = info.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuInfo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;SkuInfoVo&amp;gt;() {
                        });
                        redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuInfo&lt;/span&gt;(skuInfo);
                    }

                    &lt;span style=&#34;color:#228b22&#34;&gt;// sku的秒殺信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(seckillSkuVo, redisTo);

                    &lt;span style=&#34;color:#228b22&#34;&gt;// 設置當前商品的秒殺時間信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;setStartTime&lt;/span&gt;(session.&lt;span style=&#34;color:#658b00&#34;&gt;getStartTime&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getTime&lt;/span&gt;());
                    redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;setEndTime&lt;/span&gt;(session.&lt;span style=&#34;color:#658b00&#34;&gt;getEndTime&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getTime&lt;/span&gt;());

                    &lt;span style=&#34;color:#228b22&#34;&gt;// 設置商品的隨機碼（防止惡意攻擊）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;setRandomCode&lt;/span&gt;(token);

                    &lt;span style=&#34;color:#228b22&#34;&gt;// 序列化json格式存入Redis中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    String seckillValue = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(redisTo);
                    operations.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(seckillSkuVo.&lt;span style=&#34;color:#658b00&#34;&gt;getPromotionSessionId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + seckillSkuVo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(), seckillValue);

                    &lt;span style=&#34;color:#228b22&#34;&gt;// 如果當前這個場次的商品庫存信息已經上架就不需要上架
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#228b22&#34;&gt;// 使用庫存作為分佈式Redisson信號量（限流）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#228b22&#34;&gt;// 使用庫存作為分佈式信號量，信號量名字就是UUID隨機產生的token
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    RSemaphore semaphore = redissonClient.&lt;span style=&#34;color:#658b00&#34;&gt;getSemaphore&lt;/span&gt;(SKU_STOCK_SEMAPHORE + token);
                    &lt;span style=&#34;color:#228b22&#34;&gt;// 商品可以秒殺的數量作為信號量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    semaphore.&lt;span style=&#34;color:#658b00&#34;&gt;trySetPermits&lt;/span&gt;(seckillSkuVo.&lt;span style=&#34;color:#658b00&#34;&gt;getSeckillCount&lt;/span&gt;());
                }
            });
        });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;成功上架&#34;&gt;成功上架&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Redis中會有三條數據&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220206215906395.png&#34; alt=&#34;image-20220206215906395&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;於首頁展示&#34;&gt;於首頁展示&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;當初商品首頁下面那排&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220206221751622.png&#34; alt=&#34;image-20220206221751622&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SeckillController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 當前時間可以參與秒殺的商品信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/getCurrentSeckillSkus&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;getCurrentSeckillSkus&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取到當前可以參加秒殺商品的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SeckillSkuRedisTo&amp;gt; vos = seckillService.&lt;span style=&#34;color:#658b00&#34;&gt;getCurrentSeckillSkus&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;setData&lt;/span&gt;(vos);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SeckillServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;SeckillSkuRedisTo&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCurrentSeckillSkus&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 確定當前屬於哪個秒殺場次
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; currentTime = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 從Redis中查詢到所有key以seckill:sessions開頭的所有數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Set&amp;lt;String&amp;gt; keys = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;keys&lt;/span&gt;(SESSION__CACHE_PREFIX + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (String key : keys) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// seckill:sessions:1594396764000_1594453242000
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String replace = key.&lt;span style=&#34;color:#658b00&#34;&gt;replace&lt;/span&gt;(SESSION__CACHE_PREFIX, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
        String[] s = replace.&lt;span style=&#34;color:#658b00&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取存入Redis商品的開始時間
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; startTime = Long.&lt;span style=&#34;color:#658b00&#34;&gt;parseLong&lt;/span&gt;(s[0]);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取存入Redis商品的結束時間
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; endTime = Long.&lt;span style=&#34;color:#658b00&#34;&gt;parseLong&lt;/span&gt;(s[1]);

        &lt;span style=&#34;color:#228b22&#34;&gt;// 判斷是否是當前秒殺場次
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (currentTime &amp;gt;= startTime &amp;amp;&amp;amp; currentTime &amp;lt;= endTime) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取這個秒殺場次需要的所有商品信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            List&amp;lt;String&amp;gt; range = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForList&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;range&lt;/span&gt;(key, -100, 100);
            BoundHashOperations&amp;lt;String, String, String&amp;gt; hasOps =
                    redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;boundHashOps&lt;/span&gt;(SECKILL_CHARE_PREFIX);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;assert&lt;/span&gt; range != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
            List&amp;lt;String&amp;gt; listValue = hasOps.&lt;span style=&#34;color:#658b00&#34;&gt;multiGet&lt;/span&gt;(range);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (listValue != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; listValue.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt;= 0) {

                List&amp;lt;SeckillSkuRedisTo&amp;gt; collect = listValue.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(item -&amp;gt; {
                    String items = (String) item;
                    SeckillSkuRedisTo redisTo = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(items, SeckillSkuRedisTo.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);
                    &lt;span style=&#34;color:#228b22&#34;&gt;// redisTo.setRandomCode(null);若當前秒殺ㄏ開始，需要Ban掉隨機碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; redisTo;
                }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; collect;
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;判斷商品是否正在活動&#34;&gt;判斷商品是否正在活動&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;這是在商品詳情頁(Product下的item.html)展示的，參與秒殺活動的用戶其實就是點進商品詳情&lt;/li&gt;
&lt;li&gt;只要判斷時間正確，本來下訂單的按鈕就會變成&amp;quot;參與搶購&amp;quot;&lt;/li&gt;
&lt;li&gt;SeckillController.java
&lt;ul&gt;
&lt;li&gt;被Product模組feign遠程調用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 根據skuId查詢商品是否參加秒殺活動
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/sku/seckill/{skuId}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;getSkuSeckilInfo&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuId&amp;#34;&lt;/span&gt;) Long skuId) {
    SeckillSkuRedisTo to = seckillService.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuSeckilInfo&lt;/span&gt;(skuId);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;setData&lt;/span&gt;(to);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SeckillServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 根據skuId查詢商品是否參加秒殺活動
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; SeckillSkuRedisTo &lt;span style=&#34;color:#008b45&#34;&gt;getSkuSeckilInfo&lt;/span&gt;(Long skuId) {

    &lt;span style=&#34;color:#228b22&#34;&gt;// 找到所有需要秒殺的商品的key信息---seckill:skus
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BoundHashOperations&amp;lt;String, String, String&amp;gt; hashOps = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;boundHashOps&lt;/span&gt;(SECKILL_CHARE_PREFIX);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 拿到所有的key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Set&amp;lt;String&amp;gt; keys = hashOps.&lt;span style=&#34;color:#658b00&#34;&gt;keys&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (keys != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; keys.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 正則表達式進行匹配
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String reg = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\\d-&amp;#34;&lt;/span&gt; + skuId;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (String key : keys) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 如果匹配上了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Pattern.&lt;span style=&#34;color:#658b00&#34;&gt;matches&lt;/span&gt;(reg, key)) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 從Redis中取出商品數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                String redisValue = hashOps.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(key);
                &lt;span style=&#34;color:#228b22&#34;&gt;// 進行序列化
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                SeckillSkuRedisTo redisTo = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(redisValue, SeckillSkuRedisTo.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);

                Long currentTime = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
                Long startTime = redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getStartTime&lt;/span&gt;();
                Long endTime = redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getEndTime&lt;/span&gt;();
                &lt;span style=&#34;color:#228b22&#34;&gt;// 如果當前時間大於等於秒殺活動開始時間並且要小於活動結束時間
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (currentTime &amp;gt;= startTime &amp;amp;&amp;amp; currentTime &amp;lt;= endTime) {
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; redisTo;
                }
                redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;setRandomCode&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; redisTo;
            }
        }
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SkuInfoServiceImpl.java
&lt;ul&gt;
&lt;li&gt;修改當初Product模組的返回商品詳情方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 商品詳情
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; SkuItemVo &lt;span style=&#34;color:#008b45&#34;&gt;item&lt;/span&gt;(Long skuId) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {

&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;省略
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;//  查詢當前sku是否參與秒殺活動
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CompletableFuture&amp;lt;Void&amp;gt; seckillFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程調用查詢當前sku是否參與秒殺優惠活動
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        R skuSeckilInfo = seckillFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuSeckilInfo&lt;/span&gt;(skuId);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (skuSeckilInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 查詢成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            SeckillSkuVo seckilInfoData = skuSeckilInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;SeckillSkuVo&amp;gt;() {
            });
            skuItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;setSeckillSkuVo&lt;/span&gt;(seckilInfoData);

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (seckilInfoData != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
                &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; currentTime = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (currentTime &amp;gt; seckilInfoData.&lt;span style=&#34;color:#658b00&#34;&gt;getEndTime&lt;/span&gt;()) {
                    skuItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;setSeckillSkuVo&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
                }
            }
        }
    }, executor);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 等到所有任務都完成
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;allOf&lt;/span&gt;(saleAttrFuture, descFuture, baseAttrFuture, imageFuture).&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; skuItemVo;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;修改前端&#34;&gt;修改前端&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;item.html&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;                    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;box-btns-two&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;th:if&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${item.seckillSkuVo == null }&amp;#34;&lt;/span&gt;&amp;gt;
                        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;addToCart&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;href&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;th:attr&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuId=${item.info.skuId}&amp;#34;&lt;/span&gt;&amp;gt;
                            加入購物車
                        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
                    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
                    &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;box-btns-two&amp;#34;&lt;/span&gt;
                         &lt;span style=&#34;color:#658b00&#34;&gt;th:if&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;${item.seckillSkuVo != null &amp;amp;&amp;amp; (#dates.createNow().getTime() &amp;gt;= item.seckillSkuVo.startTime &amp;amp;&amp;amp; #dates.createNow().getTime() &amp;lt;= item.seckillSkuVo.endTime)}&amp;#34;&lt;/span&gt;&amp;gt;
                        &amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;seckill&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;href&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
                           &lt;span style=&#34;color:#658b00&#34;&gt;th:attr&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuId=${item.info.skuId},sessionId=${item.seckillSkuVo.promotionSessionId},code=${item.seckillSkuVo.randomCode}&amp;#34;&lt;/span&gt;&amp;gt;
                            立即搶購
                        &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;a&lt;/span&gt;&amp;gt;
                    &amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;發起搶購請求&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;    $(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;.seckill&amp;#34;&lt;/span&gt;).click(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;function&lt;/span&gt; () {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; isLogin = [[${session.loginUser != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;}]];     &lt;span style=&#34;color:#228b22&#34;&gt;//true
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (isLogin) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; killId = $(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;).attr(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sessionid&amp;#34;&lt;/span&gt;) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + $(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;).attr(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuid&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; code = $(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;).attr(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; num = $(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;#productNum&amp;#34;&lt;/span&gt;).val();
            location.href = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://seckill.mall.com/kill?killId=&amp;#34;&lt;/span&gt; + killId + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;amp;key=&amp;#34;&lt;/span&gt; + code + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;amp;num=&amp;#34;&lt;/span&gt; + num;
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            alert(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;秒殺請先登入&amp;#34;&lt;/span&gt;);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
    });
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;執行秒殺&#34;&gt;執行秒殺&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有兩種實現方法，第一是購物車法，秒殺其實只是優惠價格不同，其他都照舊沿用
&lt;ul&gt;
&lt;li&gt;優點是簡單、業務邏輯與數據模型統一&lt;/li&gt;
&lt;li&gt;缺點是可能導致各系統流量都很大(購物車服務、商品服務、訂單服務&amp;hellip;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207071508854.png&#34; alt=&#34;image-20220207071508854&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二種是消息隊列法(此處採用)
&lt;ul&gt;
&lt;li&gt;在定時任務上架活動時，提早將庫存鎖定。例如DB一次性鎖定400&lt;/li&gt;
&lt;li&gt;然後秒殺直接將用户、訂單號、商品發送給mq，直接給用戶返回秒殺成功，進入地址確認、支付確認頁&lt;/li&gt;
&lt;li&gt;創建訂單異步執行，由訂單服務監聽隊列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;優點是可以扛超高併發，用戶體驗較好(用戶不用管塞車，進到隊列就完事了非常快)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207071530443.png&#34; alt=&#34;image-20220207071530443&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SeckillController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 商品進行秒殺(秒殺開始)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/kill&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;seckill&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;killId&amp;#34;&lt;/span&gt;) String killId,
                      &lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;) String key,
                      &lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;) Integer num,
                      Model model) {

    String orderSn = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;//1、判斷是否登錄
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        orderSn = seckillService.&lt;span style=&#34;color:#658b00&#34;&gt;kill&lt;/span&gt;(killId, key, num);
        model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;orderSn&amp;#34;&lt;/span&gt;, orderSn);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SeckillServiceImpl.java
&lt;ul&gt;
&lt;li&gt;驗證請求、寫進隊列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 當前商品進行秒殺（秒殺開始）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;kill&lt;/span&gt;(String killId, String key, Integer num) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; InterruptedException {

    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; s1 = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前用戶的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MemberResponseTo user = LoginUserInterceptor.&lt;span style=&#34;color:#658b00&#34;&gt;loginUser&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();

    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前秒殺商品的詳細信息從Redis中獲取
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BoundHashOperations&amp;lt;String, String, String&amp;gt; hashOps = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;boundHashOps&lt;/span&gt;(SECKILL_CHARE_PREFIX);
    String skuInfoValue = hashOps.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(killId);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(skuInfoValue)) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 合法性效驗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SeckillSkuRedisTo redisTo = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(skuInfoValue, SeckillSkuRedisTo.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);
    Long startTime = redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getStartTime&lt;/span&gt;();
    Long endTime = redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getEndTime&lt;/span&gt;();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; currentTime = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 判斷當前這個秒殺請求是否在活動時間區間內(效驗時間的合法性)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (currentTime &amp;gt;= startTime &amp;amp;&amp;amp; currentTime &amp;lt;= endTime) {

        &lt;span style=&#34;color:#228b22&#34;&gt;// 效驗隨機碼和商品id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String randomCode = redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getRandomCode&lt;/span&gt;();
        String skuId = redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getPromotionSessionId&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (randomCode.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(key) &amp;amp;&amp;amp; killId.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(skuId)) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 驗證購物數量是否合理和庫存量是否充足
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            Integer seckillLimit = redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSeckillLimit&lt;/span&gt;();

            &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取信號量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            String seckillCount = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(SKU_STOCK_SEMAPHORE + randomCode);
            Integer count = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;valueOf&lt;/span&gt;(seckillCount);
            &lt;span style=&#34;color:#228b22&#34;&gt;// 判斷信號量是否大於0,並且買的數量不能超過庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (count &amp;gt; 0 &amp;amp;&amp;amp; num &amp;lt;= seckillLimit &amp;amp;&amp;amp; count &amp;gt; num) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 驗證這個人是否已經買過了，如果秒殺成功，就去redis佔位，靠setIfAbsent(userId-sessionId-skuId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#228b22&#34;&gt;// SETNX 原子性處理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                String redisKey = user.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + skuId;
                &lt;span style=&#34;color:#228b22&#34;&gt;// 設置自動過期(活動結束時間-當前時間)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                Long ttl = endTime - currentTime;
                Boolean aBoolean = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;setIfAbsent&lt;/span&gt;(redisKey, num.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(), ttl,
                        TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;MILLISECONDS&lt;/span&gt;);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (aBoolean) {
                    &lt;span style=&#34;color:#228b22&#34;&gt;// 佔位成功說明沒買過，要消費掉信號量，用try
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    RSemaphore semaphore = redissonClient.&lt;span style=&#34;color:#658b00&#34;&gt;getSemaphore&lt;/span&gt;(SKU_STOCK_SEMAPHORE + randomCode);
                    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; semaphoreCount = semaphore.&lt;span style=&#34;color:#658b00&#34;&gt;tryAcquire&lt;/span&gt;(num, 100, TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;MILLISECONDS&lt;/span&gt;);
                    &lt;span style=&#34;color:#228b22&#34;&gt;// 保證Redis中還有商品庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (semaphoreCount) {
                        &lt;span style=&#34;color:#228b22&#34;&gt;// 創建訂單號和訂單信息發送給MQ
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#228b22&#34;&gt;// 秒殺成功 快速下單 發送消息到 MQ 整個操作時間在 10ms 左右
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                        String timeId = IdWorker.&lt;span style=&#34;color:#658b00&#34;&gt;getTimeId&lt;/span&gt;();
                        SeckillOrderTo orderTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SeckillOrderTo();
                        orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;setOrderSn&lt;/span&gt;(timeId);
                        orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;setMemberId&lt;/span&gt;(user.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
                        orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;setNum&lt;/span&gt;(num);
                        orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;setPromotionSessionId&lt;/span&gt;(redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getPromotionSessionId&lt;/span&gt;());
                        orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;());
                        orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;setSeckillPrice&lt;/span&gt;(redisTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSeckillPrice&lt;/span&gt;());
                        rabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;convertAndSend&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.seckill.order&amp;#34;&lt;/span&gt;, orderTo);
                        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; s2 = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
                        log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;耗時...&amp;#34;&lt;/span&gt; + (s2 - s1));
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; timeId;
                    }
                }
            }
        }
    }
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; s3 = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
    log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;耗時...&amp;#34;&lt;/span&gt; + (s3 - s1));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;消費消息&#34;&gt;消費消息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在訂單模組，一樣三步驟: 綁定、監聽、消費&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207072215386.png&#34; alt=&#34;image-20220207072215386&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;綁定秒殺隊列&#34;&gt;綁定秒殺隊列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MyMQConfig.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 商品秒殺隊列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 作用：削峰，創建訂單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Queue &lt;span style=&#34;color:#008b45&#34;&gt;orderSecKillOrderQueue&lt;/span&gt;() {
    Queue queue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Queue(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.seckill.order.queue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; queue;
}

&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Binding &lt;span style=&#34;color:#008b45&#34;&gt;orderSecKillOrderQueueBinding&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;//String destination, DestinationType destinationType, String exchange, String routingKey,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 			Map&amp;lt;String, Object&amp;gt; arguments
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Binding binding = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Binding(
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.seckill.order.queue&amp;#34;&lt;/span&gt;,
            Binding.&lt;span style=&#34;color:#658b00&#34;&gt;DestinationType&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;QUEUE&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.seckill.order&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; binding;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;監聽秒殺隊列&#34;&gt;監聽秒殺隊列&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OrderSeckillListener.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitListener&lt;/span&gt;(queues = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.seckill.order.queue&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;OrderSeckillListener&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; OrderService orderService;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitHandler&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;listener&lt;/span&gt;(SeckillOrderTo orderTo, Channel channel, Message message) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
        log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;準備創建秒殺單的詳細信息...&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            orderService.&lt;span style=&#34;color:#658b00&#34;&gt;createSeckillOrder&lt;/span&gt;(orderTo);
            channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicAck&lt;/span&gt;(message.&lt;span style=&#34;color:#658b00&#34;&gt;getMessageProperties&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getDeliveryTag&lt;/span&gt;(), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
            channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicReject&lt;/span&gt;(message.&lt;span style=&#34;color:#658b00&#34;&gt;getMessageProperties&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getDeliveryTag&lt;/span&gt;(), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;創建秒殺訂單&#34;&gt;創建秒殺訂單&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OrderServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 創建秒殺單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param orderTo
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;createSeckillOrder&lt;/span&gt;(SeckillOrderTo orderTo) {

    &lt;span style=&#34;color:#228b22&#34;&gt;// 保存訂單信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    OrderEntity orderEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; OrderEntity();
    orderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setOrderSn&lt;/span&gt;(orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderSn&lt;/span&gt;());
    orderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setMemberId&lt;/span&gt;(orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;getMemberId&lt;/span&gt;());
    orderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setCreateTime&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Date());
    BigDecimal totalPrice = orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSeckillPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;multiply&lt;/span&gt;(BigDecimal.&lt;span style=&#34;color:#658b00&#34;&gt;valueOf&lt;/span&gt;(orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;getNum&lt;/span&gt;()));
    orderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setPayAmount&lt;/span&gt;(totalPrice);
    orderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(OrderStatusEnum.&lt;span style=&#34;color:#658b00&#34;&gt;CREATE_NEW&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 保存訂單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(orderEntity);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 保存訂單項信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    OrderItemEntity orderItem = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; OrderItemEntity();
    orderItem.&lt;span style=&#34;color:#658b00&#34;&gt;setOrderSn&lt;/span&gt;(orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderSn&lt;/span&gt;());
    orderItem.&lt;span style=&#34;color:#658b00&#34;&gt;setRealAmount&lt;/span&gt;(totalPrice);

    orderItem.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuQuantity&lt;/span&gt;(orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;getNum&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 保存商品的spu信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    R spuInfo = productFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getSpuInfoBySkuId&lt;/span&gt;(orderTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;());
    SpuInfoTo spuInfoData = spuInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;SpuInfoTo&amp;gt;() {
    });
    orderItem.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuId&lt;/span&gt;(spuInfoData.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
    orderItem.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuName&lt;/span&gt;(spuInfoData.&lt;span style=&#34;color:#658b00&#34;&gt;getSpuName&lt;/span&gt;());
    orderItem.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuBrand&lt;/span&gt;(spuInfoData.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandName&lt;/span&gt;());
    orderItem.&lt;span style=&#34;color:#658b00&#34;&gt;setCategoryId&lt;/span&gt;(spuInfoData.&lt;span style=&#34;color:#658b00&#34;&gt;getCatalogId&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 保存訂單項數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    orderItemService.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(orderItem);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;往Redis存List&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForList&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;leftPushAll&lt;/span&gt;(key, skuIds);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;往Redis存Hash
&lt;ul&gt;
&lt;li&gt;這玩意乍看還有點繞，第一個是key是在redis中去查它本身的，後面的key跟value才是Hash主體&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;BoundHashOperations&amp;lt;String, Object, Object&amp;gt; operations =
                    redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;boundHashOps&lt;/span&gt;(SECKILL_CHARE_PREFIX);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;給信號量命名、設定數量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 使用庫存作為分佈式信號量，信號量名字就是UUID隨機產生的token
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;RSemaphore semaphore = redissonClient.&lt;span style=&#34;color:#658b00&#34;&gt;getSemaphore&lt;/span&gt;(SKU_STOCK_SEMAPHORE + token);
&lt;span style=&#34;color:#228b22&#34;&gt;// 商品可以秒殺的數量作為信號量
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;semaphore.&lt;span style=&#34;color:#658b00&#34;&gt;trySetPermits&lt;/span&gt;(seckillSkuVo.&lt;span style=&#34;color:#658b00&#34;&gt;getSeckillCount&lt;/span&gt;());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;消費信號量&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;semaphore.tryAcquire
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;複習消息隊列用法&#34;&gt;複習消息隊列用法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引包&lt;code&gt;spring-boot-starter-amqp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;設定MQ地址、手動確認&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# MQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.virtual-host=/

# 使用手動確認模式，關閉自動確認，防止消息丟失
spring.rabbitmq.listener.simple.acknowledge-mode=manual
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;使用JSON格式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyRabbitConfig&lt;/span&gt; {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; MessageConverter &lt;span style=&#34;color:#008b45&#34;&gt;messageConverter&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Jackson2JsonMessageConverter();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;發訊息 &lt;code&gt;rabbitTemplate.convertAndSend()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建、綁定隊列&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Queue &lt;span style=&#34;color:#008b45&#34;&gt;orderSecKillOrderQueue&lt;/span&gt;() {
    Queue queue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Queue(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.seckill.order.queue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; queue;
}

&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Binding &lt;span style=&#34;color:#008b45&#34;&gt;orderSecKillOrderQueueBinding&lt;/span&gt;() {
&lt;span style=&#34;color:#228b22&#34;&gt;//...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;監聽，要先在啟動類註解&lt;code&gt;@EnableRabbit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitListener&lt;/span&gt;(queues = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.seckill.order.queue&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;OrderSeckillListener&lt;/span&gt; {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitHandler&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;listener&lt;/span&gt;(SeckillOrderTo orderTo, Channel channel, Message message) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 業務邏輯...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;手動消費訊息 &lt;code&gt;basicAck&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220209-gulimall-23-sec-kill/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>IntelliJ IDEA File scope</title>
        <link>https://yoziming.github.io/post/220208-idea-file-scpoe/</link>
        <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220208-idea-file-scpoe/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220208-idea-file-scpoe/ -&lt;h1 id=&#34;idea篩選檔案&#34;&gt;IDEA篩選檔案&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;IDEA預設的檔案瀏覽器真的很不優，我以前都很蠢的用搜尋然後一個一個翻。原來他還是能做到篩選的，就是步驟挺麻煩&lt;/li&gt;
&lt;li&gt;首先要去scope裡面自己設定規則，還可以設定顏色之類的，參考官方:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/phpstorm/configuring-scopes-and-file-colors.html#predefined-scopes-list&#34;&gt;https://www.jetbrains.com/help/phpstorm/configuring-scopes-and-file-colors.html#predefined-scopes-list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;一樣記得要設在&amp;quot;用於每個新專案&amp;quot;的設定，否則只會在當前專案生效&lt;/li&gt;
&lt;li&gt;例如只想顯示設定檔，可以設定規則:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;file:*.properties||file:*.yml||file:*.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;image-20220207231143435.png&#34; alt=&#34;image-20220207231143435&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回到檔案瀏覽區，最好勾上compact，省得太多層資料夾會把列表拉得很長&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207231718248.png&#34; alt=&#34;image-20220207231718248&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切換到自定的scope規則，然後全部展開，就可以快速切換許多子模組的設定了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220207231917926.png&#34; alt=&#34;image-20220207231917926&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他實用的篩選還有pom.xml、*config等等，可以自己發揮&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220208-idea-file-scpoe/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>LeetCode Easy: 66</title>
        <link>https://yoziming.github.io/post/220208-leetcode-easy-66/</link>
        <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220208-leetcode-easy-66/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220208-leetcode-easy-66/ -&lt;h3 id=&#34;66-plus-one&#34;&gt;\66. Plus One&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;沒頭緒時，可以先列出多種結果，拆解歸納相似之處&lt;/li&gt;
&lt;li&gt;像這題+1其實就只有兩種情況，9或其他&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Solution&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Input: digits = [4,3,2,1]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Output: [4,3,2,2]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Explanation: The array represents the integer 4321.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Incrementing by one gives 4321 + 1 = 4322.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Thus, the result should be [4,3,2,2].
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 從最後一位數開始遍歷(向前)，不為9時直接加一，為9時讓當前元素重置為0(進位了)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] &lt;span style=&#34;color:#008b45&#34;&gt;plusOne&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] digits) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = digits.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; i &amp;gt;= 0; i--) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 如果等於 9 ，重置為0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (digits[i] == 9){
                digits[i] = 0;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 不為9，直接加一返回
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                digits[i] ++;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; digits;
            }
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 循環出來如果沒返回(原數字剛好是999之類的情況)，
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 所有的位都已經重置為0了 ，只需要數組擴容，在第一位數加一即可
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        digits = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[digits.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; + 1];
        digits[0] = 1;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; digits;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;67-add-binary&#34;&gt;\67. Add Binary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;StringBuilder的reverse()方法結合逆序遍歷，是處理字符串問題的利器&lt;/li&gt;
&lt;li&gt;「加法」系列題目優先考慮 「列豎式」模擬法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Solution&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Input: a = &amp;#34;1010&amp;#34;, b = &amp;#34;1011&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Output: &amp;#34;10101&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;addBinary&lt;/span&gt;(String a, String b) {
        StringBuilder res = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StringBuilder(); &lt;span style=&#34;color:#228b22&#34;&gt;// 預計返回的結果
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = a.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;() - 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 標記遍歷到 a 的位置，準備從最後一位向前遍歷
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = b.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;() - 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 標記遍歷到 b 的位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; carry = 0; &lt;span style=&#34;color:#228b22&#34;&gt;// 進位
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (i &amp;gt;= 0 || j &amp;gt;= 0 || carry != 0) { &lt;span style=&#34;color:#228b22&#34;&gt;// a 沒遍歷完，或 b 沒遍歷完，或進位不為 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; digitA = (i &amp;gt;= 0 ? a.&lt;span style=&#34;color:#658b00&#34;&gt;charAt&lt;/span&gt;(i) - &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; : 0); &lt;span style=&#34;color:#228b22&#34;&gt;// 當前 a 的取值(如果是&amp;#39;1&amp;#39; - &amp;#39;0&amp;#39; 剛好就是1)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; digitB = (j &amp;gt;= 0 ? b.&lt;span style=&#34;color:#658b00&#34;&gt;charAt&lt;/span&gt;(j) - &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; : 0); &lt;span style=&#34;color:#228b22&#34;&gt;// 當前 b 的取值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = digitA + digitB + carry; &lt;span style=&#34;color:#228b22&#34;&gt;// 當前位置相加的結果
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            carry = (sum &amp;gt;= 2 ? 1 : 0); &lt;span style=&#34;color:#228b22&#34;&gt;// 是否有進位(相加=2就是要進位)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            sum = (sum &amp;gt;= 2 ? sum - 2 : sum); &lt;span style=&#34;color:#228b22&#34;&gt;// 去除進位后留下的数字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            res.&lt;span style=&#34;color:#658b00&#34;&gt;append&lt;/span&gt;(sum); &lt;span style=&#34;color:#228b22&#34;&gt;// 把去除進位后留下的数字拼接到結果中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 若最後一次有進位也是while的第三個條件，不會遺漏
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            i--;  &lt;span style=&#34;color:#228b22&#34;&gt;// 遍歷到 a 的位置向左移動
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            j--;  &lt;span style=&#34;color:#228b22&#34;&gt;// 遍歷到 b 的位置向左移動
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; res.&lt;span style=&#34;color:#658b00&#34;&gt;reverse&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 把結果反轉並返回
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;69-sqrtx&#34;&gt;\69. Sqrt(x)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;開方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;二分法重點在於區間的選擇&lt;/li&gt;
&lt;li&gt;每次疊代必須確保能縮小範圍&lt;/li&gt;
&lt;li&gt;考慮極端值是否會死循環&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * Input: x = 8
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * Output: 2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * Explanation: The square root of 8 is 2.82842...,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * and since the decimal part is truncated, 2 is returned.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Solution&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;mySqrt&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; x) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 特殊值判斷
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x == 0) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 0;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x == 1) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1;
        }

        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; left = 1;
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; right = x / 2;
        &lt;span style=&#34;color:#228b22&#34;&gt;// 在區間 [left..right] 查找目標元素
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (left &amp;lt; right) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// mid需要進位，否則最後區間剩2數時會卡死
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; mid = left + (right - left + 1) / 2;

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (mid &amp;gt; x / mid) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 下一輪搜索區間是 [left..mid - 1]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                right = mid - 1;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 下一輪搜索區間是 [mid..right]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                left = mid;
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; left;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/220208-leetcode-easy-66/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Maven微服務多模組管理</title>
        <link>https://yoziming.github.io/post/220209-maven-parent-module/</link>
        <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220209-maven-parent-module/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220209-maven-parent-module/ -&lt;h1 id=&#34;maven多模組管理&#34;&gt;Maven多模組管理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;groupId、artifactId、version稱為gav，三個必要項組成座標&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
...
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;實際項目&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
　　　　 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;模塊&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
　　　　 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;版本&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
　　　　 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;依賴類型&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
　　　　 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;依賴範圍&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
　　　　 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;optional&amp;gt;&lt;/span&gt;依賴是否可選&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/optional&amp;gt;&lt;/span&gt;
　　　　 &lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;!—主要用於排除傳遞性依賴--&amp;gt;&lt;/span&gt;
　　　　 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
　　　　     &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
　　　　　　　    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;…&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
　　　　　　　　　 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;…&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
　　　　　　　&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
　　　　 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
　　&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
...
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;xml.jpg&#34; alt=&#34;xml&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;compile，預設的依賴範圍，表示依賴需要參與當前項目的編譯，後續的測試、運行週期也參與其中，是比較強的依賴。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test，表示依賴僅僅參與測試相關的工作，包括測試代碼的編譯和運行。比較典型的如 junit。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;runntime，表示依賴無需參與到項目的編譯，不過後期的測試和運行需要其參與其中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provided，表示打包的時候可以不用包進去，別的容器會提供。和 compile 相當，但是在打包階段做了排除的動作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;system，從參與程度上來説，和 provided 類似，但不通過 Maven 倉庫解析，可能會造成構建的不可移植，要謹慎使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;部分引用自 沉默王二 鏈接：https://juejin.cn/post/7033652977973854244&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;父項目的作用&#34;&gt;父項目的作用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;父項目繼承spring框架
&lt;ul&gt;
&lt;li&gt;繼承spring-boot-starter-parent同時也會繼承properties例如java.version、UTF-8，就不用自己指定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208111808177.png&#34; alt=&#34;image-20220208111808177&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只在父項目定義版本號
&lt;ul&gt;
&lt;li&gt;在父項目dependencyManagement列出版本號但在父項目自己不用，子模組繼承後，顯式聲明某依賴(但不寫版本號)就可以獲取父項目的版本號&lt;/li&gt;
&lt;li&gt;好比你爸列了一個購物清單，沙發=黑色真皮、桌巾=紅色，但你爸沒有真的去買&lt;/li&gt;
&lt;li&gt;去購物的是你，如果有買到沙發，你自己沒特別想要的款式那就是預設黑色真皮沙發&lt;/li&gt;
&lt;li&gt;你爸的購物清單可以很長，沒有說全都要買，他只負責列出來，只出一張嘴&lt;/li&gt;
&lt;li&gt;你自己有特殊想法那也可以指定版本，不過最好不要這樣很容易亂。統一交給你爸管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;父項目讓子模塊之間可以相互引用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-boot-dependencies&#34;&gt;spring-boot-dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;spring-boot-starter-parent 又繼承自 spring-boot-dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而 spring-boot-dependencies 沒有 &lt;code&gt;parent&lt;/code&gt;， 它是頂級&lt;code&gt;pom&lt;/code&gt;，其中 &lt;code&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; 內定義了很多常見項目的版本號，舉例:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring-boot-test
spring-boot-starter-web
mysql-connector-java
各種jdbc
java web常用依賴
commons-lang3.version
org.apache.httpcomponents
javax.servlet
org.projectlombok
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;所以spring-boot很多時候都不用再寫版本號，因為常用的幾乎都可以往上找&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他dependencies&#34;&gt;其他dependencies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;只要引用或繼承了XXX-dependencies，就相當於把相關的版本號選擇都交給了它來處理，有這種BOM可以優先選用，能省下很多版本衝突的困擾，尤其是spring cloud這種要求配套的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220208141428388.png&#34; alt=&#34;image-20220208141428388&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spring-cloud-dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring-cloud-kubernetes.version
spring-cloud-security.version
spring-cloud-openfeign.version
spring-cloud-sleuth.version
spring-cloud-gateway.version
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;spring-cloud-alibaba-dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E&#34;&gt;https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Sentinel Version	
Nacos Version	
RocketMQ Version	
Dubbo Version	
Seata Version
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;pluginManagement也是用來聲明版本號，與dependencyManagement用法類似&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;import-scope的使用&#34;&gt;import scope的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;import scope只能用在 dependencyManagement 裏面，import 也因此是最危險的，因為 import 會把依賴直接展開，而不是用間接傳遞的方式在新應用中體現，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;它會覆蓋 parent 和 dependency（因為尋根路徑最短，鏈接器會最先被鏈接上），而且無法被 exclude 排除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比喻就是import scope相當於不管族譜，在半路上認一個野爹&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;parent與modules&#34;&gt;parent與modules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;聚合與繼承是獨立的兩件事，只是因為常一起使用所以容易混淆，實際上分開用也完全OK&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  &amp;lt;modules&amp;gt;
    &amp;lt;module&amp;gt;my-project&amp;lt;/module&amp;gt;
    &amp;lt;module&amp;gt;another-project&amp;lt;/module&amp;gt;
  &amp;lt;/modules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;modules: 我是班長，我管理旗下的這些班兵，建構(Maven指令)我也會一起建構我的班兵；但其實班兵不知道自己的班長是誰&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parent: 我爹是誰，我繼承我爹的特性跟依賴，我爹在dependencyManagement説過版本號是多少，如果我不指定那就用我爹説的版本&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他經驗&#34;&gt;其他經驗&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我在common模組依賴了spring-boot-starter-test，其他模組依賴common，啟動卻報錯，是因為&lt;code&gt;&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;/code&gt;，編譯時傳遞不過去&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;有些依賴它就是要properties，我猜他是依賴寫的有問題(裡面某部分有用${}獲取版本)，例如elasticsearch&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;elasticsearch.version&amp;gt;&lt;/span&gt;7.16.2&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/elasticsearch.version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;習慣mybatisplus的工具類(例如idworker、判斷空數組等等)，在common模組引用了&lt;code&gt;mybatis-plus-boot-starter&lt;/code&gt;，但是某個模組又沒有實際要連DataSource，可以在啟動類排除&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;完整範例&#34;&gt;完整範例&lt;/h1&gt;
&lt;h2 id=&#34;父項目&#34;&gt;父項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;繼承spring-boot-starter-parent&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;packaging&amp;gt;&lt;/code&gt;是&lt;code&gt;pom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt;管理依賴版本，主要重點是&lt;code&gt;spring-cloud-dependencies&lt;/code&gt;與&lt;code&gt;spring-cloud-alibaba-dependencies&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;關於&lt;code&gt;&amp;lt;properties&amp;gt;&lt;/code&gt;寫版本號，其實我覺得有點多餘，因為我所有版本號都只會寫在父項目，根本就在同一頁，那直接看dependencyManagement不就好了。但就有些坑(例如ES)一定要properties版本號，沒辦法&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#658b00&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.2.RELEASE&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;yoziming.mall&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mall-parent&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;mall父聚合模組，管理依賴版本&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;auth-server&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;cart&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;common&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;coupon&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;gateway&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;member&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;order&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;product&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;renren-fast&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;search&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;seckill&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;third-party&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;ware&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/modules&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--版本控制--&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;elasticsearch.version&amp;gt;&lt;/span&gt;7.16.2&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/elasticsearch.version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--依賴版本管理--&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;Hoxton.SR9&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-alibaba-dependencies&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.6.RELEASE&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.httpcomponents&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;httpclient&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${httpclient.version}&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.6.RELEASE&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.redisson&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;redisson&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.16.8&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.elasticsearch.client&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;elasticsearch-rest-high-level-client&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${elasticsearch.version}&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.minio&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;minio&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.0.10&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--工具類--&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;fastjson&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.2.79&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;cn.hutool&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hutool-all&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;5.7.20&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.baomidou&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mybatis-plus-boot-starter&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.5.0&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;common模組&#34;&gt;Common模組&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;繼承父項目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;groupId&amp;gt;&lt;/code&gt;會警告黃標籤說有繼承重複了，但我看一些源碼幾乎都有留著，所以還是留著吧，強迫症把IDEA這個項目警告關掉&lt;/li&gt;
&lt;li&gt;不要用&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;標籤，容易混淆&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;&amp;lt;dependencies&amp;gt;&lt;/code&gt;引用全項目都會用到的依賴，我主要分成4類
&lt;ul&gt;
&lt;li&gt;JavaWeb相關&lt;/li&gt;
&lt;li&gt;spring-cloud相關&lt;/li&gt;
&lt;li&gt;Database相關&lt;/li&gt;
&lt;li&gt;工具類: 例如lombok、糊塗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#658b00&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mall-parent&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;yoziming.mall&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;yoziming.mall&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;common&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;通用工具類模組&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--JavaWeb相關--&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.httpcomponents&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;httpcore&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.httpcomponents&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;httpclient&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.servlet&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javax.servlet-api&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.commons&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;commons-lang3&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--spring-cloud相關--&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- 可視化zipkin已經包含鏈路追蹤sleuth --&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-zipkin&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--spring-cloud-alibaba--&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-config&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-sentinel&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--Database相關--&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-validation&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;mysql&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mysql-connector-java&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.baomidou&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mybatis-plus-boot-starter&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--工具類--&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.projectlombok&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;lombok&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;cn.hutool&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hutool-all&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;fastjson&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;其他模組&#34;&gt;其他模組&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;繼承父項目&lt;/li&gt;
&lt;li&gt;依賴common&lt;/li&gt;
&lt;li&gt;並且有自己用的其他包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spring-boot-maven-plugin&lt;/code&gt;是為了讓maven打包spring boot執行用的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
         &lt;span style=&#34;color:#658b00&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;mall-parent&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;yoziming.mall&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;yoziming.mall&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;product&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;商品&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;yoziming.mall&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;common&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-amqp&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.session&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-session-data-redis&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.redisson&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;redisson&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/220209-maven-parent-module/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>串接第三方支付</title>
        <link>https://yoziming.github.io/post/220208-gulimall-22-pay/</link>
        <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220208-gulimall-22-pay/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220208-gulimall-22-pay/ -&lt;h1 id=&#34;商城支付&#34;&gt;商城支付&lt;/h1&gt;
&lt;h2 id=&#34;非對稱加密-rsa&#34;&gt;非對稱加密 RSA&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220131093614541.png&#34; alt=&#34;image-20220131093614541&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密跟解密是不同的鑰匙
&lt;ul&gt;
&lt;li&gt;我用私鑰加密，發給給你，你用公鑰解密，你不知道我的私鑰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;加簽: 根據明文(例如: &amp;ldquo;我給小明100元&amp;rdquo;)用MD5生成一個簽名，如果明文任意字符修改，簽名就會天差地別(MD5特性)&lt;/li&gt;
&lt;li&gt;驗簽: 確定 明文與簽名是否對應(明文是否被篡改)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nat穿透&#34;&gt;NAT穿透&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Network Address Translation Traversal&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;內部IP就是192.168.X.X開頭的那些，穿透技術就是讓外部可以透過公有IP訪問到你的內部IP&lt;/li&gt;
&lt;li&gt;原理就是透過各種網路服務供應商幫你搭橋&lt;/li&gt;
&lt;li&gt;使用場景:
&lt;ul&gt;
&lt;li&gt;開發測試，取得暫時的對外域名讓外部可以訪問本機&lt;/li&gt;
&lt;li&gt;智慧家電連網，例如出門在外用手機網路可以看家裡監控那種&lt;/li&gt;
&lt;li&gt;遠程控制，遠端桌面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以前玩Minecraft架server有用過類似的東西&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支付沙盒&#34;&gt;支付沙盒&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大部分的電子支付API都有提供一個sandbox做測試開發用
&lt;ul&gt;
&lt;li&gt;LinePay的 &lt;a href=&#34;https://pay.line.me/jp/developers/techsupport/sandbox/creation?locale=zh_TW&#34;&gt;https://pay.line.me/jp/developers/techsupport/sandbox/creation?locale=zh_TW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;但是這個申請都要有店家資格，不好弄
&lt;ul&gt;
&lt;li&gt;我研究了一下這個EcPAY的 &lt;a href=&#34;https://www.ecpay.com.tw/Service/API_Dwnld&#34;&gt;https://www.ecpay.com.tw/Service/API_Dwnld&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大致使用流程就是申請帳號，然後下載支付網站提供的API與SDK，包到自己的專案之下，填上各種授權key，串接付款與跳轉的頁面這樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支付串接流程&#34;&gt;支付串接流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PayWebController.java
&lt;ul&gt;
&lt;li&gt;這邊接收前端來的訂單號&lt;code&gt;@RequestParam(&amp;quot;orderSn&amp;quot;)&lt;/code&gt;，用訂單號去查詢訂單內容，然後帶著訂單內容往支付的API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/payOrder&amp;#34;&lt;/span&gt;, produces = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;payOrder&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;orderSn&amp;#34;&lt;/span&gt;) String orderSn) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; AlipayApiException {

	PayVo payVo = orderService.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderPay&lt;/span&gt;(orderSn);
	String pay = alipayTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;pay&lt;/span&gt;(payVo);
	System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(pay);
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; pay;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AlipayTemplate.java
&lt;ul&gt;
&lt;li&gt;這個是由第三方提供的，台灣的我查了一下接近的有綠界的站內付2.0，但是他屬於高級會員才有的服務，API也沒有對外公開。只能說台灣在支付這塊真的落後很多，大部分是要自己寫一個前端頁面給顧客填付款資訊，把資訊串進第三方金流提供的SDK，生成付款的訂單訊息，就沒那麼方便&lt;/li&gt;
&lt;li&gt;他這個Template都已經做好付款、退款、查詢等功能，只要填入自己支付的私鑰、公鑰、支付完要跳轉到的成功頁面，串上訂單號、金額、商品描述等等就能使用&lt;/li&gt;
&lt;li&gt;用戶點支付，就從訂單跳轉到專屬生成的支付頁面(SDK直接生成的一個html頁面)，付完就回到成功頁面，串接真的是超簡單&lt;/li&gt;
&lt;li&gt;並且只要支付成功，會發一個異步通知給商戶(一樣提前設定好&lt;code&gt;notify_url&lt;/code&gt;)，收到通知驗證一下簽名(用商戶的key)，就能從裡面取出支付的詳細內容，根據這個內容，在後台修改訂單狀態、保存交易的流水號等訊息，自此完成一個完整的支付&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;會員查詢訂單&#34;&gt;會員查詢訂單&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;他把會員的訂單歸到會員模組了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;整理新建模組要幹的事:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入thymeleaf、放頁面、放靜態檔案&lt;/li&gt;
&lt;li&gt;設定網域與網關轉發&lt;/li&gt;
&lt;li&gt;由於會員需要登入，設定登入攔截器、註冊WebMvcConfigurer&lt;/li&gt;
&lt;li&gt;登入狀態存在session，所以還要導入spring-session與data-redis&lt;/li&gt;
&lt;li&gt;其實應該用Spring Security的OA2做登入權限的統一管理會更好，否則這有些還要給feign調用放行特別寫規則還挺麻煩的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MemberWebController.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/memberOrder.html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;memberOrderPage&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pageNum&amp;#34;&lt;/span&gt;, required = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, defaultValue = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;) Integer pageNum,
                              Model model) {

    &lt;span style=&#34;color:#228b22&#34;&gt;//查出當前登錄用戶的所有訂單列表數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Map&amp;lt;String, Object&amp;gt; page = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
    page.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;, pageNum.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;//遠程查詢訂單服務訂單數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    R orderInfo = orderFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;listWithItem&lt;/span&gt;(page);
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(orderInfo));
    model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;orders&amp;#34;&lt;/span&gt;, orderInfo);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;orderList&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;因為請求是從member.mall.com發出去的，由於也需要帶著會員登入的cookie所以也用FeignConfig做了請求頭複製&lt;/li&gt;
&lt;li&gt;查詢返回裡面包的是OrderEntity，因為member的thymeleaf渲染也要能訪問到這個bean，所以又要從order模組複製一份到member模組&lt;/li&gt;
&lt;li&gt;老師這樣用其實很坑，一是貪方便要顯示訂單中的商品項，把OrderEntity魔改多了一個&lt;code&gt;List&amp;lt;OrderItemEntity&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// OrderEntity
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@TableField&lt;/span&gt;(exist = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;OrderItemEntity&amp;gt; orderItemEntityList;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;與其改Entity，反正都要跨模組傳，還不如抽出一個TO更規範
&lt;ul&gt;
&lt;li&gt;結果又會想把TO當成VO傳給前端，唉前後端不分離就是這樣討人厭，還不如都轉成JSON最統一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;記踩坑&#34;&gt;記踩坑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;當遠程調用傳入的參數不是單純的String或Int，而是有一個map或list，此時必然是帶有RequestBody請求體的&lt;code&gt;@PostMapping&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所以被遠程調用的也必須是&lt;code&gt;@PostMapping&lt;/code&gt;，也可以用&lt;code&gt;@RequestMapping&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;thymeleaf返回字串而不是頁面的時候，看一下方法是不是&lt;code&gt;@ResponseBody&lt;/code&gt;，當用了&lt;code&gt;@ResponseBody&lt;/code&gt;或&lt;code&gt;@RestController&lt;/code&gt;就不會解析成html&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220208-gulimall-22-pay/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Seata、消息隊列分佈式事務</title>
        <link>https://yoziming.github.io/post/220207-gulimall-21-delay-queue/</link>
        <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220207-gulimall-21-delay-queue/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220207-gulimall-21-delay-queue/ -&lt;h1 id=&#34;spring-cloud-alibaba-seata&#34;&gt;Spring cloud alibaba Seata&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;有很多模式，這邊只演示最簡單的AT模式&lt;/li&gt;
&lt;li&gt;簡單來說就是多包一層，額外開一個伺服器去監控多個分佈式模組，誰出問題就讓大家都回滾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130172819564.png&#34; alt=&#34;image-20220130172819564&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;@GlobalTransactional&lt;/code&gt;就可以達成分佈式事務&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用的機制是在DB增加一個undo_log表，這個表相當於存快照的地方，當要回滾就從這邊還原&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AT模式簡單，代價就是面對併發效率不高&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這玩意才幾個版本設定就變好多次，具體使用還是看官網吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html&#34;&gt;https://seata.io/zh-cn/docs/ops/deploy-guide-beginner.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;延遲隊列&#34;&gt;延遲隊列&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Delay Queue，使用 消息隊列 + 庫存工作單表 來控制分佈式事務&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;下訂單後，要鎖定庫存，這是個分佈式事務，需要保證鎖定的庫存能回滾，首先在DB使用兩張表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wms_ware_order_task&lt;/code&gt; 庫存工作單表，訂單、工作單id、倉庫id&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wms_ware_order_task_detail&lt;/code&gt; 庫存工作單詳情表，訂單、工作單id、倉庫id、skuId、鎖庫存數量&lt;/li&gt;
&lt;li&gt;鎖庫存的時候往工作單表、工作單詳情表插入數據&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130203619038.png&#34; alt=&#34;image-20220130203619038&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;創建隊列與交換機&#34;&gt;創建隊列與交換機&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在RabbitMQ&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;創建訂單時，遠程調用&lt;code&gt;orderLockStock&lt;/code&gt;創建了庫存工作單，並且鎖定庫存
&lt;ul&gt;
&lt;li&gt;那邊發了&lt;code&gt;&amp;quot;stock-event-exchange&amp;quot;, &amp;quot;stock.locked&amp;quot;, lockedTo&lt;/code&gt;，lockedTo裡面就是庫存工作單id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;當遠程調用創建庫存工作單成功，本地也發一個&lt;code&gt;&amp;quot;order-event-exchange&amp;quot;, &amp;quot;order.create.order&amp;quot;&lt;/code&gt;，裡面存的是訂單本體&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130195011045.png&#34; alt=&#34;image-20220130195011045&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改良，省下一個交換機，帶有&lt;code&gt;&amp;quot;order.create.order&amp;quot;&lt;/code&gt;路由鍵的訂單會進到&lt;code&gt;order.delay.queue&lt;/code&gt;這個延遲隊列，而這個隊列還是指向&lt;code&gt;order-event-exchange&lt;/code&gt;交換機&lt;/li&gt;
&lt;li&gt;但是他設有過期時間，當時間到了就把路由鍵換成&lt;code&gt;order.release.order&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也就是說，所有的訂單最終都會進到&lt;code&gt;order.release.order.queue&lt;/code&gt;，並且被&lt;code&gt;listener&lt;/code&gt;消費，這個&lt;code&gt;listener&lt;/code&gt;會調用&lt;code&gt;closeOrder&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;closeOrder&lt;/code&gt;方法查看訂單是否已經支付，若已支付就完事，訂單可以安心離開隊列。若沒支付就查詢訂單最新狀態，再發到&lt;code&gt;&amp;quot;order-event-exchange&amp;quot;, &amp;quot;order.release.other.unlock&amp;quot;, order&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;這個&lt;code&gt;&amp;quot;order.release.other.unlock&amp;quot;&lt;/code&gt;路由鍵就會把訂單送到&lt;code&gt;stock.release.stock.queue&lt;/code&gt;，嘗試進行庫存解鎖的動作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130195221065.png&#34; alt=&#34;image-20220130195221065&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;之前學了用AmqpAdmin創建交換機與隊列的方法，有更省事的可以直接用&lt;code&gt;@Bean&lt;/code&gt;讓spring自動創建
&lt;ul&gt;
&lt;li&gt;Broker中沒有該名字的隊列、交換機才會創建&lt;/li&gt;
&lt;li&gt;不會重複創建覆蓋(一旦創好，不能更新)，如果同名的隊列其中設定(例如過期時間)對不上會報錯&lt;/li&gt;
&lt;li&gt;第一次使用隊列的時候才會創建&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MyMQConfig.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyMQConfig&lt;/span&gt; {

&lt;span style=&#34;color:#228b22&#34;&gt;// 延遲隊列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Queue &lt;span style=&#34;color:#008b45&#34;&gt;orderDelayQueue&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        Queue(String name,  隊列名字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        boolean durable,  是否持久化
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        boolean exclusive,  是否排他
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        boolean autoDelete, 是否自動刪除
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;        Map&amp;lt;String, Object&amp;gt; arguments) 屬性【TTL、死信路由、死信路由鍵】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    HashMap&amp;lt;String, Object&amp;gt; arguments = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
    arguments.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;x-dead-letter-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;// 死信路由
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    arguments.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;x-dead-letter-routing-key&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.release.order&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#228b22&#34;&gt;// 死信路由鍵
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    arguments.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;x-message-ttl&amp;#34;&lt;/span&gt;, 60000); &lt;span style=&#34;color:#228b22&#34;&gt;// 消息過期時間 1分鐘
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Queue queue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Queue(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.delay.queue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, arguments);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; queue;
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 死信隊列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Queue &lt;span style=&#34;color:#008b45&#34;&gt;orderReleaseQueue&lt;/span&gt;() {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Queue(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.release.order.queue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 普通路由【死信路由】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Exchange &lt;span style=&#34;color:#008b45&#34;&gt;orderEventExchange&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *   String name,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *   boolean durable,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *   boolean autoDelete,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *   Map&amp;lt;String, Object&amp;gt; arguments
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TopicExchange(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);

}

&lt;span style=&#34;color:#228b22&#34;&gt;// 交換機與延遲隊列的綁定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Binding &lt;span style=&#34;color:#008b45&#34;&gt;orderCreateBinding&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * String destination, 目的地（隊列名或者交換機名字）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * DestinationType destinationType, 目的地類型（Queue、Exhcange）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * String exchange,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * String routingKey,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Map&amp;lt;String, Object&amp;gt; arguments
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Binding(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.delay.queue&amp;#34;&lt;/span&gt;,
            Binding.&lt;span style=&#34;color:#658b00&#34;&gt;DestinationType&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;QUEUE&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.create.order&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 死信路由與普通隊列的綁定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Binding &lt;span style=&#34;color:#008b45&#34;&gt;orderReleaseBinding&lt;/span&gt;() {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Binding(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.release.order.queue&amp;#34;&lt;/span&gt;,
            Binding.&lt;span style=&#34;color:#658b00&#34;&gt;DestinationType&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;QUEUE&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.release.order&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 訂單釋放直接和庫存釋放進行綁定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Binding &lt;span style=&#34;color:#008b45&#34;&gt;orderReleaseOtherBinding&lt;/span&gt;() {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Binding(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.release.stock.queue&amp;#34;&lt;/span&gt;,
            Binding.&lt;span style=&#34;color:#658b00&#34;&gt;DestinationType&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;QUEUE&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.release.other.#&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;庫存區的MQ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130201936776.png&#34; alt=&#34;image-20220130201936776&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 庫存服務預設的交換機
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Exchange &lt;span style=&#34;color:#008b45&#34;&gt;stockEventExchange&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;//String name, boolean durable, boolean autoDelete, Map&amp;lt;String, Object&amp;gt; arguments
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        TopicExchange topicExchange = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TopicExchange(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock-event-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; topicExchange;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 普通隊列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Queue &lt;span style=&#34;color:#008b45&#34;&gt;stockReleaseStockQueue&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;//String name, boolean durable, boolean exclusive, boolean autoDelete, Map&amp;lt;String, Object&amp;gt; arguments
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Queue queue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Queue(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.release.stock.queue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; queue;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 延遲隊列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Queue &lt;span style=&#34;color:#008b45&#34;&gt;stockDelay&lt;/span&gt;() {

        HashMap&amp;lt;String, Object&amp;gt; arguments = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
        arguments.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;x-dead-letter-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock-event-exchange&amp;#34;&lt;/span&gt;);
        arguments.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;x-dead-letter-routing-key&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.release&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 消息過期時間 2分鐘
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arguments.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;x-message-ttl&amp;#34;&lt;/span&gt;, 120000);

        Queue queue = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Queue(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.delay.queue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, arguments);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; queue;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 交換機與普通隊列綁定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Binding &lt;span style=&#34;color:#008b45&#34;&gt;stockLocked&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;//String destination, DestinationType destinationType, String exchange, String routingKey,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 			Map&amp;lt;String, Object&amp;gt; arguments
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Binding binding = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Binding(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.release.stock.queue&amp;#34;&lt;/span&gt;,
                Binding.&lt;span style=&#34;color:#658b00&#34;&gt;DestinationType&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;QUEUE&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock-event-exchange&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.release.#&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; binding;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 交換機與延遲隊列綁定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Binding &lt;span style=&#34;color:#008b45&#34;&gt;stockLockedBinding&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Binding(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.delay.queue&amp;#34;&lt;/span&gt;,
                Binding.&lt;span style=&#34;color:#658b00&#34;&gt;DestinationType&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;QUEUE&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock-event-exchange&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.locked&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;鎖定庫存&#34;&gt;鎖定庫存&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;鎖定成功給mq發送一條消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;庫存解鎖的幾種情況：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下訂單成功，庫存鎖定成功，訂單過期沒有支付被系統自動取消、被用户手動取消&lt;/li&gt;
&lt;li&gt;下訂單成功，庫存鎖定成功，接下來的業務調用失敗，導致訂單回滾。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解析&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一個訂單對應wms_ware_order_task工作單表一條數據，對應一條工作單task_id&lt;/li&gt;
&lt;li&gt;一條工作單task_id對應多條詳情sku_id，ware_id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;service方法流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存一條工作單到wms_ware_order_task&lt;/li&gt;
&lt;li&gt;如果庫存鎖定成功，倉庫庫存足夠，就為當前商品插入一條工作單詳情&lt;/li&gt;
&lt;li&gt;如果有任一商品庫存不足，就回滾&lt;/li&gt;
&lt;li&gt;如果有庫存，就發送消息到mq的延時隊列，一個商品一條信息StockLockedTo，數量信息必須帶上，因為如果回滾了db就查不到數據了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 為某個訂單鎖定庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;orderLockStock&lt;/span&gt;(WareSkuLockVo vo) {

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 保存庫存工作單詳情信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 追溯
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 如果沒有庫存，就不會發送消息給mq
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 【不會進入save(WareOrderTaskDetailEntity)邏輯，也不會發送消息給mq，也不會鎖定庫存，也不會監聽到解鎖服務】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    WareOrderTaskEntity wareOrderTaskEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; WareOrderTaskEntity();
    wareOrderTaskEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setOrderSn&lt;/span&gt;(vo.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderSn&lt;/span&gt;());
    wareOrderTaskEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setCreateTime&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Date());
    wareOrderTaskService.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(wareOrderTaskEntity);

    &lt;span style=&#34;color:#228b22&#34;&gt;//1、按照下單的收貨地址，找到一個就近倉庫，鎖定庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//2、找到每個商品在哪個倉庫都有庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;OrderItemVo&amp;gt; locks = vo.&lt;span style=&#34;color:#658b00&#34;&gt;getLocks&lt;/span&gt;();

    List&amp;lt;SkuWareHasStock&amp;gt; collect = locks.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;((item) -&amp;gt; {
        SkuWareHasStock stock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuWareHasStock();
        Long skuId = item.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;();
        stock.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuId);
        stock.&lt;span style=&#34;color:#658b00&#34;&gt;setNum&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getCount&lt;/span&gt;());
        &lt;span style=&#34;color:#228b22&#34;&gt;//查詢這個商品在哪個倉庫有庫存 stock-鎖定num &amp;gt; 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;Long&amp;gt; wareIdList = wareSkuDao.&lt;span style=&#34;color:#658b00&#34;&gt;listWareIdHasSkuStock&lt;/span&gt;(skuId);
        stock.&lt;span style=&#34;color:#658b00&#34;&gt;setWareId&lt;/span&gt;(wareIdList);

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; stock;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;//2、鎖定庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (SkuWareHasStock hasStock : collect) {
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; skuStocked = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
        Long skuId = hasStock.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;();
        List&amp;lt;Long&amp;gt; wareIds = hasStock.&lt;span style=&#34;color:#658b00&#34;&gt;getWareId&lt;/span&gt;();

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (CollectionUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(wareIds)) {
            &lt;span style=&#34;color:#228b22&#34;&gt;//沒有任何倉庫有這個商品的庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NoStockException(skuId);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;//1、如果每一個商品都鎖定成功,將當前商品鎖定了幾件的工作單記錄發給MQ
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//2、鎖定失敗。前面保存的工作單信息都回滾了。發送出去的消息，即使要解鎖庫存，由於在數據庫查不到指定的id，就不用解鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (Long wareId : wareIds) {
            &lt;span style=&#34;color:#228b22&#34;&gt;//鎖定成功就返回1，失敗就返回0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            Long count = wareSkuDao.&lt;span style=&#34;color:#658b00&#34;&gt;lockSkuStock&lt;/span&gt;(skuId, wareId, hasStock.&lt;span style=&#34;color:#658b00&#34;&gt;getNum&lt;/span&gt;());
            &lt;span style=&#34;color:#228b22&#34;&gt;// count==1表示鎖定成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (count == 1) {
                skuStocked = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
                WareOrderTaskDetailEntity taskDetailEntity = WareOrderTaskDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;builder&lt;/span&gt;()
                        .&lt;span style=&#34;color:#658b00&#34;&gt;skuId&lt;/span&gt;(skuId)
                        .&lt;span style=&#34;color:#658b00&#34;&gt;skuName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
                        .&lt;span style=&#34;color:#658b00&#34;&gt;skuNum&lt;/span&gt;(hasStock.&lt;span style=&#34;color:#658b00&#34;&gt;getNum&lt;/span&gt;())
                        .&lt;span style=&#34;color:#658b00&#34;&gt;taskId&lt;/span&gt;(wareOrderTaskEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;())
                        .&lt;span style=&#34;color:#658b00&#34;&gt;wareId&lt;/span&gt;(wareId)
                        .&lt;span style=&#34;color:#658b00&#34;&gt;lockStatus&lt;/span&gt;(1)
                        .&lt;span style=&#34;color:#658b00&#34;&gt;build&lt;/span&gt;();
                wareOrderTaskDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(taskDetailEntity);

                &lt;span style=&#34;color:#228b22&#34;&gt;// 告訴MQ庫存鎖定成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                StockLockedTo lockedTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StockLockedTo();
                lockedTo.&lt;span style=&#34;color:#658b00&#34;&gt;setId&lt;/span&gt;(wareOrderTaskEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
                StockDetailTo detailTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StockDetailTo();
                BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(taskDetailEntity, detailTo);&lt;span style=&#34;color:#228b22&#34;&gt;// 這裏直接存entity。但是應該存id更好，數據最好來自DB
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                lockedTo.&lt;span style=&#34;color:#658b00&#34;&gt;setDetailTo&lt;/span&gt;(detailTo);
                rabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;convertAndSend&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock-event-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.locked&amp;#34;&lt;/span&gt;, lockedTo);
                &lt;span style=&#34;color:#228b22&#34;&gt;// 鎖定成功返回
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;//當前倉庫鎖失敗，重試下一個倉庫
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (skuStocked == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;) {
            &lt;span style=&#34;color:#228b22&#34;&gt;//當前商品所有倉庫都沒有鎖住
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NoStockException(skuId);
        }
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;//3、肯定全部都是鎖定成功的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;解鎖庫存&#34;&gt;解鎖庫存&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;不使用分佈式事務，每一個sku 產生一條消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;庫存鎖定成功，但是訂單service回滾了，此時需要解鎖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if(db工作單詳情有數據)：庫存鎖定成功，按照訂單號查詢訂單&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;訂單不存在，那就是訂單service 回滾了【解鎖庫存】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;訂單存在:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;訂單狀態：已取消，【解鎖庫存】&lt;/li&gt;
&lt;li&gt;訂單狀態：未取消，【不解鎖】&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;else(db工作單詳情無數據)：已回滾，【不解鎖】工作單與庫存在一個本地事務中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解鎖邏輯：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;庫存加回來，鎖定庫存數量減掉&lt;/li&gt;
&lt;li&gt;將工作單詳情的狀態修改為已解鎖&lt;/li&gt;
&lt;li&gt;如果解鎖成功，簽收消息，如果未解鎖成功拒絕消息【手動模式】
&lt;ul&gt;
&lt;li&gt;requeue true重新入隊，讓其他節點嘗試解鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 解鎖庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;unlockStock&lt;/span&gt;(StockLockedTo to) {
    &lt;span style=&#34;color:#228b22&#34;&gt;//庫存工作單的id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    StockDetailTo detail = to.&lt;span style=&#34;color:#658b00&#34;&gt;getDetailTo&lt;/span&gt;();
    Long detailId = detail.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;();

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 解鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 1、查詢數據庫關於這個訂單鎖定庫存信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *   有：證明庫存鎖定成功了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *      解鎖：訂單狀況
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *          1、沒有這個訂單，必須解鎖庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *          2、有這個訂單，不一定解鎖庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *              訂單狀態：已取消：解鎖庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *                      已支付：不能解鎖庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    WareOrderTaskDetailEntity taskDetailInfo = wareOrderTaskDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(detailId);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (taskDetailInfo != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#228b22&#34;&gt;//查出wms_ware_order_task工作單的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Long id = to.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;();
        WareOrderTaskEntity orderTaskInfo = wareOrderTaskService.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(id);
        &lt;span style=&#34;color:#228b22&#34;&gt;//獲取訂單號查詢訂單狀態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String orderSn = orderTaskInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderSn&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;//遠程查詢訂單信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        R orderData = orderFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderStatus&lt;/span&gt;(orderSn);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (orderData.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
            &lt;span style=&#34;color:#228b22&#34;&gt;//訂單數據返回成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            OrderVo orderInfo = orderData.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;OrderVo&amp;gt;() {
            });
            &lt;span style=&#34;color:#228b22&#34;&gt;//判斷訂單狀態是否已取消或者支付或者訂單不存在
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 1、訂單不存在：解鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 2、訂單存在，且訂單狀態是取消狀態：解鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (orderInfo == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; || orderInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getStatus&lt;/span&gt;() == 4) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 工作單狀態必須是 已鎖定 才可以解鎖【因為解鎖方法沒有加事務】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (taskDetailInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getLockStatus&lt;/span&gt;() == 1) {
                    unLockStock(detail.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;(), detail.&lt;span style=&#34;color:#658b00&#34;&gt;getWareId&lt;/span&gt;(), detail.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuNum&lt;/span&gt;(), detailId);
                }
            }
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;//消息拒絕以後重新放在隊列裏面，讓別人繼續消費解鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//遠程調用服務失敗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RuntimeException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;遠程調用服務失敗&amp;#34;&lt;/span&gt;);
        }
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;//無需解鎖【回滾狀態】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}


    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 解鎖庫存的方法【設計DB，沒加事務】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;unLockStock&lt;/span&gt;(Long skuId, Long wareId, Integer num, Long taskDetailId) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 1、庫存解鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        wareSkuDao.&lt;span style=&#34;color:#658b00&#34;&gt;unLockStock&lt;/span&gt;(skuId, wareId, num);

        &lt;span style=&#34;color:#228b22&#34;&gt;// 2、更新工作單的狀態 為已解鎖 2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        WareOrderTaskDetailEntity taskDetailEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; WareOrderTaskDetailEntity();
        taskDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setId&lt;/span&gt;(taskDetailId);
        taskDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setLockStatus&lt;/span&gt;(2);
        wareOrderTaskDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;updateById&lt;/span&gt;(taskDetailEntity);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;抽出StockReleaseListener.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 監聽死信隊列，解鎖庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; **/&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Slf4j&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitListener&lt;/span&gt;(queues = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;stock.release.stock.queue&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Service&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;StockReleaseListener&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; WareSkuService wareSkuService;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 這個是監聽死信消息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 1、庫存自動解鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 下訂單成功，庫存鎖定成功，接下來的業務調用失敗，導致訂單回滾。之前鎖定的庫存就要自動解鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 2、訂單失敗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 庫存鎖定失敗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 只要解鎖庫存的消息失敗，一定要告訴服務解鎖失敗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitHandler&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;handleStockLockedRelease&lt;/span&gt;(StockLockedTo to, Message message, Channel channel) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;******收到解鎖庫存的延時信息******，準備解鎖&amp;#34;&lt;/span&gt; + to.&lt;span style=&#34;color:#658b00&#34;&gt;getDetailTo&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;//當前消息是否被第二次及以後（重新）派發過來了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// Boolean redelivered = message.getMessageProperties().getRedelivered();
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//解鎖庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            wareSkuService.&lt;span style=&#34;color:#658b00&#34;&gt;unlockStock&lt;/span&gt;(to);
            &lt;span style=&#34;color:#228b22&#34;&gt;// 手動刪除消息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicAck&lt;/span&gt;(message.&lt;span style=&#34;color:#658b00&#34;&gt;getMessageProperties&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getDeliveryTag&lt;/span&gt;(), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 解鎖失敗 將消息重新放回隊列，讓別人消費
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicReject&lt;/span&gt;(message.&lt;span style=&#34;color:#658b00&#34;&gt;getMessageProperties&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getDeliveryTag&lt;/span&gt;(), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;登入攔截放行&#34;&gt;登入攔截放行&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;遠程調用查訂單狀態時，又被之前的攔截器認為是沒登入，導致被跳轉到登入頁，使feign調用失敗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以用&lt;code&gt;AntPathMatcher&lt;/code&gt;匹配uri針對特定網址做放行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LoginUserInterceptor.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 登入攔截器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 從session中獲取了登入信息（redis中），封裝到了ThreadLocal中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;LoginUserInterceptor&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerInterceptor {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ThreadLocal&amp;lt;MemberResponseTo&amp;gt; loginUser = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;&amp;gt;();

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;preHandle&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {

        String uri = request.&lt;span style=&#34;color:#658b00&#34;&gt;getRequestURI&lt;/span&gt;();
        AntPathMatcher antPathMatcher = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; AntPathMatcher();
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; match = antPathMatcher.&lt;span style=&#34;color:#658b00&#34;&gt;match&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/order/order/status/**&amp;#34;&lt;/span&gt;, uri);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (match) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;關閉訂單&#34;&gt;關閉訂單&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;訂單創建成功&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;發送一條消息給mq的延時隊列
1&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;當 訂單數據是 0 待付款&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;修改DB 訂單狀態為 4 取消狀態
2&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;關單比解鎖早&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;所以解鎖的時候檢查訂單狀態為4的就可以解鎖掉了
&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 定時關閉訂單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitListener&lt;/span&gt;(queues = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.release.order.queue&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Service&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;OrderCloseListener&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; OrderService orderService;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitHandler&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;listener&lt;/span&gt;(OrderEntity orderEntity, Channel channel, Message message) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;收到過期的訂單信息，準備關閉訂單&amp;#34;&lt;/span&gt; + orderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderSn&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            orderService.&lt;span style=&#34;color:#658b00&#34;&gt;closeOrder&lt;/span&gt;(orderEntity);
            channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicAck&lt;/span&gt;(message.&lt;span style=&#34;color:#658b00&#34;&gt;getMessageProperties&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getDeliveryTag&lt;/span&gt;(),&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
            channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicReject&lt;/span&gt;(message.&lt;span style=&#34;color:#658b00&#34;&gt;getMessageProperties&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getDeliveryTag&lt;/span&gt;(),&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
        }
    }
}

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 關閉訂單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @param orderEntity
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;closeOrder&lt;/span&gt;(OrderEntity orderEntity) {

        &lt;span style=&#34;color:#228b22&#34;&gt;//關閉訂單之前先查詢一下數據庫，判斷此訂單狀態是否已支付
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        OrderEntity orderInfo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getOne&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;OrderEntity&amp;gt;().
                eq(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order_sn&amp;#34;&lt;/span&gt;,orderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderSn&lt;/span&gt;()));

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (orderInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getStatus&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(OrderStatusEnum.&lt;span style=&#34;color:#658b00&#34;&gt;CREATE_NEW&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;())) {
            &lt;span style=&#34;color:#228b22&#34;&gt;//代付款狀態進行關單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            OrderEntity orderUpdate = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; OrderEntity();
            orderUpdate.&lt;span style=&#34;color:#658b00&#34;&gt;setId&lt;/span&gt;(orderInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
            orderUpdate.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(OrderStatusEnum.&lt;span style=&#34;color:#658b00&#34;&gt;CANCLED&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;updateById&lt;/span&gt;(orderUpdate);

            &lt;span style=&#34;color:#228b22&#34;&gt;// 發送消息給MQ
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            OrderTo orderTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; OrderTo();
            BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(orderInfo, orderTo);

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;//TODO 確保每個消息發送成功，給每個消息做好日誌記錄，(給數據庫保存每一個詳細信息)保存每個消息的詳細信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                rabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;convertAndSend&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.release.other&amp;#34;&lt;/span&gt;, orderTo);
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
                &lt;span style=&#34;color:#228b22&#34;&gt;//TODO 定期掃描數據庫，重新發送失敗的消息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;修復bug&#34;&gt;修復BUG&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;訂單關閉延遲導致庫存未解鎖，並且消息也消費掉了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130221635906.png&#34; alt=&#34;image-20220130221635906&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;會導致該條庫存永遠無法解鎖了，訂單關閉的消息延遲，訂單狀態還沒修改為4，導致庫存不解鎖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解法: 創建一個綁定關係，訂單的交換機綁定庫存釋放的隊列，當訂單關閉成功給 stock.release.stock.queue庫存的釋放隊列也發送一條消息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130221557106.png&#34; alt=&#34;image-20220130221557106&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;可靠性&#34;&gt;可靠性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;由於把事務轉換成消息隊列的模式，所以必須保證消息本身是可靠的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;防止消息丟失&#34;&gt;防止消息丟失&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;做好容錯方法(try-catch，例如失敗後重試)，並且記錄日誌到DB，每個消息是否有傳到Broker都應該被記錄，定期掃描DB未成功的消息針對性重發&lt;/li&gt;
&lt;li&gt;消息抵達Broker後，要持久化(寫入硬碟)&lt;/li&gt;
&lt;li&gt;引入訊息確認，publisher confirmCallback(確定有到Broker)與returnCallback(從交換機去到隊列失敗，修改DB中日記狀態)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yoziming.github.io/post/220204-gulimall-18-rabbitmq/#%e8%a8%8a%e6%81%af%e7%a2%ba%e8%aa%8d&#34;&gt;https://yoziming.github.io/post/220204-gulimall-18-rabbitmq/#%e8%a8%8a%e6%81%af%e7%a2%ba%e8%aa%8d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;手動Ack，做完作業才將消息消費掉&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防止消息重複&#34;&gt;防止消息重複&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;例如確實做完作業了，結果ack時當機，導致消息又變回ready&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;消費消息的接口應該是覓等性的，多次調用結果一致，例如工作單的狀態標示可以在內部判斷是否被做過&lt;/li&gt;
&lt;li&gt;使用防重表(redis或mySQL)，發送的消息業務有唯一標示，做過就不用再做&lt;/li&gt;
&lt;li&gt;rabbitMQ的message本身有一個redelivered屬性，可以標示消息自己是否被二次以上投遞&lt;/li&gt;
&lt;li&gt;但要注意消息的reject或重試最好有一個間隔，之前我卡在瘋狂重試直接把CPU吃爆&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;防止消息積壓&#34;&gt;防止消息積壓&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;消費者端當機或太弱，或是發送者流量太大都會造成積壓&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;消息積壓會導致MQ性能下降，惡性循環&lt;/li&gt;
&lt;li&gt;彈性擴容，上線更多消費者&lt;/li&gt;
&lt;li&gt;消息入庫，上線一個臨時消費隊列的服務，批量將消息取出到DB，額外離線處理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;延遲隊列，把訂單跟鎖庫存這個行為轉換成消息發往MQ&lt;/li&gt;
&lt;li&gt;後續要做的事，用Listener從MQ隊列中取出。利用交換機與路由鍵匹配的規則，雖然可能有延遲，但確保有任何環節失敗，整體都能事務回滾&lt;/li&gt;
&lt;li&gt;感覺難度過高，有點聽天書的感覺了，大致能理解但是敲code部分都是囫圇吞棗了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;feign調用報錯400-bad-reques&#34;&gt;Feign調用報錯400 Bad Reques&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;紀錄一個DEBUG經驗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;feign.FeignException$BadRequest: [400] during ....
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Feign調用出現400一般都是client和controller的參數名不匹配&lt;/li&gt;
&lt;li&gt;確認下兩個介面的參數名是否一樣，再確認下入參是否為空
&lt;ul&gt;
&lt;li&gt;我就是有一個值之前測試時弄成NULL了，疑惑好久&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220207-gulimall-21-delay-queue/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>阿里巴巴Java開發手冊</title>
        <link>https://yoziming.github.io/post/220207-alibaba-java-guide/</link>
        <pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220207-alibaba-java-guide/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220207-alibaba-java-guide/ -&lt;h1 id=&#34;阿里巴巴java開發手冊&#34;&gt;阿里巴巴Java開發手冊&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;學sentinel時翻了一下alibaba的github，按照star排序第2名是個p3c，好奇點進去看原來是一份Java Coding Guidelines&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;官方: &lt;a href=&#34;https://github.com/alibaba/p3c&#34;&gt;https://github.com/alibaba/p3c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;線上電子書: &lt;a href=&#34;https://www.cntofu.com/book/78/index.html&#34;&gt;https://www.cntofu.com/book/78/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;他甚至有一個用來檢查的IDEA插件，厲害&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;個人知識重點&#34;&gt;個人知識重點&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;已經掌握的知識就不記了，以下都是我以前犯過的錯誤或是不懂原理的地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;【強制】類名使用UpperCamelCase風格，但以下情形例外：DO / BO / DTO / VO / AO / PO等。
正例：MarcoPolo / UserDO / XmlService / TcpUdpDeal / TaPromotion&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】杜絕完全不規範的縮寫，避免望文不知義。
反例：AbstractClass“縮寫”命名成AbsClass；condition“縮寫”命名成 condi，此類隨意縮寫嚴重降低了代碼的可閲讀性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】POJO類中布爾類型的變量，都不要加is前綴，否則部分框架解析會引起序列化錯誤。
反例：定義為基本數據類型Boolean isDeleted；的屬性，它的方法也是isDeleted()，RPC框架在反向解析的時候，“誤以為”對應的屬性名稱是deleted，導致屬性獲取不到，進而拋出異常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】long或者Long初始賦值時，使用大寫的L，不能是小寫的l，小寫容易跟數字1混淆，造成誤解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】不允許任何魔法值（即未經預先定義的常量）直接出現在代碼中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】避免通過一個類的對象引用訪問此類的靜態變量或靜態方法，無謂增加編譯器解析成本，直接用類名來訪問即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】Object的equals方法容易拋空指針異常，應使用常量或確定有值的對象來調用equals。
正例：&amp;ldquo;test&amp;rdquo;.equals(object);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】所有的相同類型的包裝類對象之間值的比較，全部使用equals方法比較。
説明：對於Integer var = ? 在-128至127範圍內的賦值，Integer對象是在IntegerCache.cache產生，會複用已有對象，這個區間內的Integer值可以直接使用==進行判斷，但是這個區間之外的所有數據，都會在堆上產生，並不會複用已有對象，這是一個大坑，推薦使用equals方法進行判斷。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;關於基本數據類型與包裝數據類型的使用標準如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;【強制】所有的POJO類屬性必須使用包裝數據類型。&lt;/li&gt;
&lt;li&gt;【強制】RPC方法的返回值和參數必須使用包裝數據類型。&lt;/li&gt;
&lt;li&gt;【推薦】所有的局部變量使用基本數據類型。
説明：POJO類屬性沒有初值是提醒使用者在需要使用時，必須自己顯式地進行賦值，任何NPE問題，或者入庫檢查，都由使用者來保證。
正例：數據庫的查詢結果可能是null，因為自動拆箱，用基本數據類型接收有NPE風險。
反例：比如顯示成交總額漲跌情況，即正負x%，x為基本數據類型，調用的RPC服務，調用不成功時，返回的是預設值，頁面顯示為0%，這是不合理的，應該顯示成中劃線。所以包裝數據類型的null值，能夠表示額外的信息，如：遠程調用失敗，異常退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】定義DO/DTO/VO等POJO類時，不要設定任何屬性預設值。
反例：POJO類的gmtCreate預設值為new Date();但是這個屬性在數據提取時並沒有置入具體值，在更新其它字段時又附帶更新了此字段，導致創建時間被修改成當前時間。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【推薦】避免採用取反邏輯運算符。
説明：取反邏輯不利於快速理解，並且取反邏輯寫法必然存在對應的正向邏輯寫法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【推薦】表達異常的分支時，少用if-else方式
説明：用if過濾即可，太多else會導致維護困難&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】在高併發場景中，避免使用”等於”判斷作為中斷或退出的條件。
説明：如果併發控制沒有處理好，容易產生等值判斷被“擊穿”的情況，使用大於或小於的區間判斷條件來代替。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反例：判斷剩餘獎品數量等於0時，終止發放獎品，但因為併發處理錯誤導致獎品數量瞬間變成了負數，GG&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】類、類屬性、類方法的註釋必須使用Javadoc規範，使用&lt;code&gt;/*內容/&lt;/code&gt;格式，不得使用&lt;code&gt;// xxx&lt;/code&gt;方式。
説明：在IDE編輯窗口中，Javadoc方式會提示相關注釋，生成Javadoc可以正確輸出相應註釋；在IDE中，工程調用方法時，不進入方法即可懸浮提示方法、參數、返回值的意義，提高閲讀效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】方法內部單行註釋&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】所有的枚舉類型字段必須要有註釋，説明每個數據項的用途。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【推薦】與其“半吊子”英文來註釋，不如用中文註釋把問題説清楚。專有名詞與關鍵字保持英文原文即可。
反例：“TCP連接超時”解釋成“傳輸控制協議連接超時”，理解反而費腦筋。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【參考】好的命名、代碼結構是自解釋的，註釋力求精簡準確、表達到位
put(elephant, fridge);
方法名put，加上兩個有意義的變量名elephant和fridge，已經説明了這是在幹什麼，語義清晰的代碼不需要額外的註釋。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】線程池不允許使用Executors去創建，而是通過ThreadPoolExecutor的方式，這樣的處理方式讓寫的同學更加明確線程池的運行規則，規避資源耗盡的風險。
説明：Executors返回的線程池對象的弊端如下： 1）FixedThreadPool和SingleThreadPool: 允許的請求隊列長度為Integer.MAX_VALUE，可能會堆積大量的請求，從而導致OOM。 2）CachedThreadPool和ScheduledThreadPool: 允許的創建線程數量為Integer.MAX_VALUE，可能會創建大量的線程，從而導致OOM。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】高併發時，同步調用應該去考量鎖的性能損耗。能用無鎖數據結構，就不要用鎖；能鎖區塊，就不要鎖整個方法體；能用對象鎖，就不要用類鎖。
説明：儘可能使加鎖的代碼塊工作量儘可能的小，避免在鎖代碼塊中調用RPC方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】異常不要用來做流程控制，條件控制。
説明：異常設計的初衷是解決程序運行中的各種意外情況，且異常的處理效率比條件判斷方式要低很多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】catch時請分清穩定代碼和非穩定代碼，穩定代碼指的是無論如何不會出錯的代碼。對於非穩定代碼的catch儘可能進行區分異常類型，再做對應的異常處理。
説明：對大段代碼進行try-catch，使程序無法根據不同的異常做出正確的應激反應，也不利於定位問題，這是一種不負責任的表現。
正例：用户註冊的場景中，如果用户輸入非法字符，或用户名稱已存在，或用户輸入密碼過於簡單，在程序上作出分門別類的判斷，並提示給用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】捕獲異常是為了處理它，不要捕獲了卻什麼都不處理而拋棄之，如果不想處理它，請將該異常拋給它的調用者。最外層的業務使用者，必須處理異常，將其轉化為用户可以理解的內容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】有try塊放到了事務代碼中，catch異常後，如果需要回滾事務，一定要注意手動回滾事務。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】finally塊必須對資源對象、流對象進行關閉，有異常也要做try-catch。
説明：如果JDK7及以上，可以使用try-with-resources方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】注意 Math.random() 這個方法返回是double類型，注意取值的範圍 0≤x&amp;lt;1（能夠取到零值，注意除零異常），如果想獲取整數類型的隨機數，不要將x放大10的若干倍然後取整，直接使用Random對象的nextInt或者nextLong方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【強制】獲取當前毫秒數用System.currentTimeMillis();&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220207-alibaba-java-guide/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>提交訂單: 冪等性、分散式交易的一致性</title>
        <link>https://yoziming.github.io/post/220206-gulimall-20-idempotent/</link>
        <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220206-gulimall-20-idempotent/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220206-gulimall-20-idempotent/ -&lt;h1 id=&#34;冪等性&#34;&gt;冪等性&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;idempotent&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;多次提交，結果不變，常見有這些辦法:&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;token&#34;&gt;Token&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;令牌或驗證碼&lt;/li&gt;
&lt;li&gt;伺服器存儲了一個令牌，然後頁面要帶上這個令牌比較，一樣才可以提交
&lt;ul&gt;
&lt;li&gt;提交後刪除掉token，再次點擊提交就會失敗&lt;/li&gt;
&lt;li&gt;但是F5刷新的話就不一樣了，會有新的token產生&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;注意: 獲取redis令牌 + 令牌匹配 + redis刪除，全程要保證原子性，使用lua腳本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;鎖&#34;&gt;鎖&lt;/h3&gt;
&lt;h4 id=&#34;數據庫悲觀鎖&#34;&gt;數據庫悲觀鎖&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Pessimistic Lock&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;就是排他鎖，所謂悲觀在於覺得總有刁民想亂搞我的data，所以自己拿到鎖就把data藏到大衣裡，完全不給其他人用，連看都不給看&lt;/li&gt;
&lt;li&gt;當一個SQL command獲得悲觀鎖後，其他的SQL command 無法讀取無法修改，直到悲觀鎖被釋放後才能執行，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select* from xxx where id = 1 for update;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;悲觀鎖使用時一般伴隨事務一起使用，數據鎖定時間可能會很長，需要根據實際情況選用&lt;/li&gt;
&lt;li&gt;另外要注意的是，id字段一定是主鍵或者唯一索引，不然可能造成鎖表的結果，處理起來會非常麻煩&lt;/li&gt;
&lt;li&gt;資料庫中的行鎖，表鎖，讀鎖，寫鎖，以及syncronized實現的鎖均為悲觀鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;數據庫樂觀鎖&#34;&gt;數據庫樂觀鎖&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Optimistic Lock&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;允許多個 SQL command 來操作 table，但是要帶上版本號&lt;/li&gt;
&lt;li&gt;當 SQL command 想要變更欄位 data 時會先把之前取出 version 跟 table 現在的 version 做對比，如果相同就代表這段期間沒人修改可以執行；如果不同就會禁止這次的操作&lt;/li&gt;
&lt;li&gt;這種方法適合在更新的場景中，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;update t_goods set count = count-1,version =version + 1 where good_id=2 and version = 1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;樂觀鎖主要使用於處理讀多寫少的場景&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分佈式鎖&#34;&gt;分佈式鎖&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不管多少服務，限制同時都只有一人能操作&lt;/li&gt;
&lt;li&gt;參考之前的筆記: &lt;a href=&#34;https://yoziming.github.io/post/220128-gulimall-11-synchronized-lock/&#34;&gt;https://yoziming.github.io/post/220128-gulimall-11-synchronized-lock/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;唯一約束&#34;&gt;唯一約束&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;利用資料庫&lt;code&gt;UNIQUE&lt;/code&gt;唯一約束訂單號，就無法生成同樣訂單&lt;/li&gt;
&lt;li&gt;或是建立一個防重表，要操作時就在防重表插入例如訂單號，插入成功才可以操作，插入失敗表示有別人正在操作這筆訂單
&lt;ul&gt;
&lt;li&gt;不採用，DB慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;redis set防重: 全局請求唯一id	調用接口時生成一個唯一ID，redis將數據保存到set集合中(特性是不可重複)，存在即處理過&lt;/li&gt;
&lt;li&gt;可以使用nginx設置每一個請求的唯一id&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;proxy_set_header X-Request-ld $request_id;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;提交訂單&#34;&gt;提交訂單&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;1598753060984.png&#34; alt=&#34;1598753060984&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1598753078504.png&#34; alt=&#34;1598753078504&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1598753128441.png&#34; alt=&#34;1598753128441&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1598757953664.png&#34; alt=&#34;1598757953664&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;流程&#34;&gt;流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前端POST提交: OrderSubmitVo&lt;/li&gt;
&lt;li&gt;API: /submitOrder&lt;/li&gt;
&lt;li&gt;下單成功轉發支付頁 pay.html&lt;/li&gt;
&lt;li&gt;下單失敗重定向跳轉 confirm.html 重新查一遍&lt;/li&gt;
&lt;li&gt;service下單流程：
&lt;ul&gt;
&lt;li&gt;驗令牌原子操作：查詢，比較，刪除（lua操作）&lt;/li&gt;
&lt;li&gt;創建訂單封裝Entity，然後入庫&lt;/li&gt;
&lt;li&gt;獲取金額，運費遠程調用ware服務&amp;hellip;&lt;/li&gt;
&lt;li&gt;驗價格，計算的應付價格-提交的應付價格&amp;lt;0.01通過，否則 return&lt;/li&gt;
&lt;li&gt;鎖庫存WareSkuLockVo，遠程調用ware&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程式碼&#34;&gt;程式碼&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;超級繁瑣就列個大概，重點在於分佈式事務&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OrderWebController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 下單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/submitOrder&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;submitOrder&lt;/span&gt;(OrderSubmitVo vo, Model model, RedirectAttributes attributes) {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        SubmitOrderResponseVo responseVo = orderService.&lt;span style=&#34;color:#658b00&#34;&gt;submitOrder&lt;/span&gt;(vo);
        &lt;span style=&#34;color:#228b22&#34;&gt;//下單成功來到支付選擇頁
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//下單失敗回到訂單確認頁重新確定訂單信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (responseVo.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
            &lt;span style=&#34;color:#228b22&#34;&gt;//成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;submitOrderResp&amp;#34;&lt;/span&gt;, responseVo);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;pay&amp;#34;&lt;/span&gt;;
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            String msg = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;下單失敗&amp;#34;&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (responseVo.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;()) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 1:
                    msg += &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;令牌訂單信息過期，請刷新再次提交&amp;#34;&lt;/span&gt;;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 2:
                    msg += &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;訂單商品價格發生變化，請確認后再次提交&amp;#34;&lt;/span&gt;;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 3:
                    msg += &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;庫存鎖定失敗，商品庫存不足&amp;#34;&lt;/span&gt;;
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
            }
            attributes.&lt;span style=&#34;color:#658b00&#34;&gt;addFlashAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;, msg);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://order.mall.com/toTrade&amp;#34;&lt;/span&gt;;
        }
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (e &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; NoStockException) {
            String message = ((NoStockException) e).&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;();
            attributes.&lt;span style=&#34;color:#658b00&#34;&gt;addFlashAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;, message);
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://order.mall.com/toTrade&amp;#34;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;OrderServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 提交訂單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param vo
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; SubmitOrderResponseVo &lt;span style=&#34;color:#008b45&#34;&gt;submitOrder&lt;/span&gt;(OrderSubmitVo vo) {

    confirmVoThreadLocal.&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(vo);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 下單後準備返回的結果
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SubmitOrderResponseVo responseVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SubmitOrderResponseVo();
    responseVo.&lt;span style=&#34;color:#658b00&#34;&gt;setCode&lt;/span&gt;(0); &lt;span style=&#34;color:#228b22&#34;&gt;// 預設返回0是成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前用戶登入的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MemberResponseTo memberResponseTo = LoginUserInterceptor.&lt;span style=&#34;color:#658b00&#34;&gt;loginUser&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 驗證令牌是否合法，令牌的對比和刪除必須保證原子性，LUA腳本
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    String script = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;if redis.call(&amp;#39;get&amp;#39;, KEYS[1]) == ARGV[1] then return redis.call(&amp;#39;del&amp;#39;, KEYS[1]) else return &amp;#34;&lt;/span&gt; +
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0 end&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 拿前端傳來的token
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    String orderToken = vo.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderToken&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 通過腳本原子驗證令牌和刪除令牌
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Long result = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; DefaultRedisScript&amp;lt;Long&amp;gt;(script, Long.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;),
            Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;asList&lt;/span&gt;(USER_ORDER_TOKEN_PREFIX + memberResponseTo.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;()),
            orderToken);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 若令牌驗證失敗，注意腳本0是失敗，跟前面SubmitOrderResponseVo 0=成功相反
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (result == 0L) {
        responseVo.&lt;span style=&#34;color:#658b00&#34;&gt;setCode&lt;/span&gt;(1);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; responseVo;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 令牌驗證成功，創建、下訂單、驗令牌、驗價格、鎖定庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 1、創建訂單、訂單項等信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        OrderCreateTo order = createOrder();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 2、驗證價格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        BigDecimal payAmount = order.&lt;span style=&#34;color:#658b00&#34;&gt;getOrder&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getPayAmount&lt;/span&gt;();
        BigDecimal payPrice = vo.&lt;span style=&#34;color:#658b00&#34;&gt;getPayPrice&lt;/span&gt;();

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Math.&lt;span style=&#34;color:#658b00&#34;&gt;abs&lt;/span&gt;(payAmount.&lt;span style=&#34;color:#658b00&#34;&gt;subtract&lt;/span&gt;(payPrice).&lt;span style=&#34;color:#658b00&#34;&gt;doubleValue&lt;/span&gt;()) &amp;lt; 0.&lt;span style=&#34;color:#658b00&#34;&gt;01&lt;/span&gt;) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 金額對比，保存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            saveOrder(order);

            &lt;span style=&#34;color:#228b22&#34;&gt;// 4、庫存鎖定,只要有異常，回滾訂單數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 訂單號、所有訂單項信息(skuId,skuNum,skuName)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            WareSkuLockTo lockVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; WareSkuLockTo();
            lockVo.&lt;span style=&#34;color:#658b00&#34;&gt;setOrderSn&lt;/span&gt;(order.&lt;span style=&#34;color:#658b00&#34;&gt;getOrder&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getOrderSn&lt;/span&gt;());

            &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取出要鎖定的商品數據信息【order裡面存儲的是Entity】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            List&amp;lt;OrderItemTo&amp;gt; orderItemTos = order.&lt;span style=&#34;color:#658b00&#34;&gt;getOrderItems&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;((item) -&amp;gt; {
                OrderItemTo orderItemTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; OrderItemTo();
                orderItemTo.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;());
                orderItemTo.&lt;span style=&#34;color:#658b00&#34;&gt;setCount&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuQuantity&lt;/span&gt;());
                orderItemTo.&lt;span style=&#34;color:#658b00&#34;&gt;setTitle&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuName&lt;/span&gt;());
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; orderItemTo;
            }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
            lockVo.&lt;span style=&#34;color:#658b00&#34;&gt;setLocks&lt;/span&gt;(orderItemTos);

            &lt;span style=&#34;color:#228b22&#34;&gt;// 出現的問題：扣減庫存成功了，但是由於網絡原因超時，出現異常，導致訂單事務回滾，庫存事務不回滾(解決方案：seata)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 為了保證高併發，不推薦使用seata，因為是加鎖，并行化，提升不了效率,可以發消息給庫存服務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            R r = wareFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;orderLockStock&lt;/span&gt;(lockVo);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 鎖定成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                responseVo.&lt;span style=&#34;color:#658b00&#34;&gt;setOrder&lt;/span&gt;(order.&lt;span style=&#34;color:#658b00&#34;&gt;getOrder&lt;/span&gt;());
                &lt;span style=&#34;color:#228b22&#34;&gt;//int i = 10/0;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#228b22&#34;&gt;// 訂單創建成功，發送消息給MQ
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                rabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;convertAndSend&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order-event-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;order.create.order&amp;#34;&lt;/span&gt;, order.&lt;span style=&#34;color:#658b00&#34;&gt;getOrder&lt;/span&gt;());
                &lt;span style=&#34;color:#228b22&#34;&gt;// 刪除購物車裡的數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;delete&lt;/span&gt;(CART_PREFIX + memberResponseTo.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; responseVo;
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;//鎖定失敗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                String msg = (String) r.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NoStockException(msg);
                &lt;span style=&#34;color:#228b22&#34;&gt;// responseVo.setCode(3);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#228b22&#34;&gt;// return responseVo;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            responseVo.&lt;span style=&#34;color:#658b00&#34;&gt;setCode&lt;/span&gt;(2);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; responseVo;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;複習本地事務&#34;&gt;複習本地事務&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;參考: &lt;a href=&#34;https://yoziming.github.io/post/211230-agg-jdbc-02/&#34;&gt;https://yoziming.github.io/post/211230-agg-jdbc-02/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原理: 連到SQL的是同一條連結，多個操作完成後用&lt;code&gt;commit()&lt;/code&gt;手動提交，否則抓到異常就&lt;code&gt;rollback()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;要嘛全部成功、要嘛全部失敗&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;隔離級別: 讀未提交、讀已提交、可重複讀、序列化，越嚴格越安全但效率也就越低
&lt;ul&gt;
&lt;li&gt;MySQL預設的事務隔離級別為: Repeatable read&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spring封裝成&lt;code&gt;@Transactional&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring事務參數&#34;&gt;spring事務參數&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 修改事務隔離級別
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(isolation = Isolation.&lt;span style=&#34;color:#658b00&#34;&gt;REPEATABLE&lt;/span&gt; READ)

&lt;span style=&#34;color:#228b22&#34;&gt;// 修改傳播級別
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(propagation = Propagation.&lt;span style=&#34;color:#658b00&#34;&gt;REQUIRED&lt;/span&gt;)

&lt;span style=&#34;color:#228b22&#34;&gt;// 設定超時
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(timeout = 30)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;事務傳播&#34;&gt;事務傳播&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;當事務的方法被嵌套時，例如一個事務方法被另一個事務方法調用時，這個事務方法應該如何進行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PROPAGATION_REQUIRED&lt;/code&gt;: 如果當前沒有事務，就創建一個新事務，如果當前存在事務，就加入該事務。是最常用的設置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROPAGATION_SUPPORTS&lt;/code&gt;: 支持當前事務，如果當前存在事務，就加入該事務，如果當前不存在事務，就以非事務執行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROPAGATION_MANDATORY&lt;/code&gt;: 支持當前事務，如果當前存在事務，就加入該事務，如果當前不存在事務，就拋出異常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROPAGATION_REQUIRES_NEW&lt;/code&gt;: 創建新事務，無論當前存不存在事務，都創建新事務&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROPAGATION_NOT_SUPPORTED&lt;/code&gt;: 以非事務方式執行操作，如果當前存在事務，就把當前事務掛起&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROPAGATION_NEVER&lt;/code&gt;: 以非事務方式執行，如果當前存在事務，則拋出異常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PROPAGATION_NESTED&lt;/code&gt;: 如果當前存在事務，則在嵌套事務內執行。如果當前沒有事務，則執行與 PROPAGATON_REQUIRED類似的操作&lt;/li&gt;
&lt;li&gt;重點: REQUIRED、REQUIRES_NEW&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;案例&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;：&lt;/span&gt;b&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;c與a方法是否共用一個事務
&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(timeout=30)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;a&lt;/span&gt;() {
	b();&lt;span style=&#34;color:#228b22&#34;&gt;// a事務傳播給了b事務，並且b事務的設置失效
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	c();&lt;span style=&#34;color:#228b22&#34;&gt;// c單獨創建一個新事務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(propagation = Propagation.&lt;span style=&#34;color:#658b00&#34;&gt;REQUIRED&lt;/span&gt;, timeout=2)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;b&lt;/span&gt;() {
}

&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(propagation = Propagation.&lt;span style=&#34;color:#658b00&#34;&gt;REQUIRES_NEW&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;c&lt;/span&gt;() {
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;坑&#34;&gt;坑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果方法a、b、c都在同一個service裏面，事務傳播行為不生效，共享a的事務&lt;/li&gt;
&lt;li&gt;原理: 事務是用代理對象來控制的，內部調用b()、c()就相當於直接調用沒有經過事務，繞過了代理對象&lt;/li&gt;
&lt;li&gt;解決: 使用aspectJ代理，或是注入自己(Spring已經解決了循環依賴問題，透過三級Map)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;分散式交易&#34;&gt;分散式交易&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed Transactions，中國稱為分佈式事務&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;分佈式事務不可用拋異常的方式回滾，因為異常可能是遠程調用產生的異常
&lt;ul&gt;
&lt;li&gt;例如遠程已經調用完了，但返回時出現網路故障，本地&lt;code&gt;@Transactional&lt;/code&gt;收到異常就算回滾也沒用，因為它可管不到遠程的那些&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cap定理&#34;&gt;CAP定理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;又稱CAP原則，指的是在分佈式系統中的資料，要嘛犧牲一致性，要嘛犧牲可用性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130155516174.png&#34; alt=&#34;image-20220130155516174&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Consistency 一致性: 在分佈式系統中的所有數據，在同一時刻是否同樣的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Availability 可用性: 集群內一部份機器網絡通信故障，是否還能繼續工作(數據的分布量是否夠多)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為了分區容錯性，一致性跟可用性只能二選一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partition tolerance 分區容錯性: 分佈式系統總會出現網絡故障，當節點之間不流通的時候就形成分區(Partition)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分區容錯的意思是，當你一個資料項目只在一個節點中保存，那麼分區出現後，和這個節點不連通的部分就訪問不到這個資料了。這時分區就是無法容忍的&lt;/li&gt;
&lt;li&gt;提高分區容忍性的辦法就是一個資料項目複製到多個節點上，這一資料項目就可能分佈到各個區裡。容忍性就提高了。&lt;/li&gt;
&lt;li&gt;然而，要把資料複製到多個節點，就會帶來一致性的問題，就是多個節點上面的資料可能是不一致的。要保證一致，每次寫操作就都要等待全部節點寫成功，而這等待又會帶來可用性的問題&lt;/li&gt;
&lt;li&gt;總的來說就是，資料存在的節點越多，分區容忍性越高，但要複製更新的資料就越多，一致性就越難保證。為了保證一致性，更新所有節點資料所需要的時間就越長，可用性就會降低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;為了在分布式系統實現一致性，Lesile Lamport提出了Paxos協議&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很難懂又難用，已過時。由raft算法接棒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;raft算法&#34;&gt;raft算法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;保證分布式系統中資料的一致性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;演示: &lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;http://thesecretlivesofdata.com/raft/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;核心觀念: 領導選舉、日誌複製&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;領導選舉&#34;&gt;領導選舉&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;節點啓動預設都是隨從狀態&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;節點如果沒有監聽到領導者命令自己(找不到大哥，形成分區了)，就轉變成候選者，經過多輪投票產生新領導&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選舉超時: election timeout 隨從變成候選者的時間，150ms and 300ms隨機的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;日誌複製&#34;&gt;日誌複製&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;客户端通知領導修改一個數據，領導先創建一個節點日誌&lt;/li&gt;
&lt;li&gt;領導將這條日誌 發送給所有所有隨從節點
&lt;ul&gt;
&lt;li&gt;隨從節點收到並返回確認消息給領導&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;領導等待大多數隨從節點的確認消息，領導提交數據，然後通知隨從節點可以提交了
&lt;ul&gt;
&lt;li&gt;隨從節點也提交數據。最後領導節點給請求返回提交成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;就像我要求開船，船長問孩子們準備好了嗎，孩子們回應船長，船長收到大多數回應就認為可以開船，自己開船並且叫孩子們也開船&lt;/p&gt;
&lt;p&gt;當大家都開船，回應給我說船開了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;當分區發生，大多數人的那區可以提交，少部分的那區雖然可能有領導，但由於一直收不到&lt;strong&gt;大多數確認&lt;/strong&gt;，所以無法提交&lt;/li&gt;
&lt;li&gt;直到分區重新合併(網路修好了)，舊領導退位，並且跟着舊領導未提交的數據需要回滾，並且同步新領導的日誌&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;base理論&#34;&gt;BASE理論&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;分布式系統下網路故障必定會發生，但仍要讓用戶可用，即保證P和A，捨棄C的強一致性，改為弱一致性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Basically Available 基本可用: 分佈式系統在出現故障的時候，允許損失部分可用性(例如響應時間、功能上的可用性)&lt;/li&gt;
&lt;li&gt;Soft State 軟狀態: 允許系統存在中間狀態，例如告訴用戶正在排隊中&lt;/li&gt;
&lt;li&gt;Eventual Consistency 最終一致性: 系統中的所有數據副本經過一定時間後，最終能夠達到一致的狀態，是一種弱一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分佈式事務幾種方案&#34;&gt;分佈式事務幾種方案&lt;/h2&gt;
&lt;h3 id=&#34;2pc&#34;&gt;2PC&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;2 phase commit二階提交&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;劃分出了事務參與者和協調者的角色，並將整個過程劃分成兩個階段
&lt;ul&gt;
&lt;li&gt;第一階段: 事務協調器要求每個涉及到事務的參與者預提交(precommit)此操作，並反映是否可以提交&lt;/li&gt;
&lt;li&gt;第二階段: 所有事務預提交了各自的結果後，由協調者決定最終事務是成功(commit)還是失敗(rollback)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果有任何一步驟失敗，那麼所有參與者都會被要求回滾&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;xa-transaction&#34;&gt;XA Transaction&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;由資料庫來完成二階提交&lt;/li&gt;
&lt;li&gt;XA被許多資料庫如Oracle、DB2、SQL Server、MySQL支援&lt;/li&gt;
&lt;li&gt;優勢在於簡單，缺點是面對併發時性能差，故很少用&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;at模式&#34;&gt;AT模式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Auto Transiaction 自動事務模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;優勢在於簡單無侵入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130165825007.png&#34; alt=&#34;image-20220130165825007&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;tcc模式&#34;&gt;TCC模式&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;需要手動編寫回滾的方法(例如在try+1，就要在cancel-1)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;優勢在於高性能，多被採用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130165847756.png&#34; alt=&#34;image-20220130165847756&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;最大努力通知&#34;&gt;最大努力通知&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Best-effort delivery 是一種柔性事務&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130171049026.png&#34; alt=&#34;image-20220130171049026&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;適用於最終一致性時間敏感度低的業務，且被動方處理結果不影響主動方的處理結果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最大努力通知型的實現方案，一般符合以下特點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可靠消息: 主動方在完成業務處理之後，向被動方發送消息，直到通知N次後不再通知，允許消息丟失(不可靠消息)&lt;/li&gt;
&lt;li&gt;定期校對: 被動方根據定時策略，向主動方查詢(主動方提供查詢介面)，恢復丟失的業務消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;典型的使用場景: 如銀行通知、商戶通知等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可靠消息最終一致性&#34;&gt;可靠消息最終一致性&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20220130171239629.png&#34; alt=&#34;image-20220130171239629&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基於MQ實現&lt;/li&gt;
&lt;li&gt;當事務發起方執行完成本地事務後並發出一條消息，事務參與方(消息消費者)一定能夠接收消息並處理事務成功&lt;/li&gt;
&lt;li&gt;此方案強調的是只要消息發給事務參與方&lt;strong&gt;最終事務要達到一致&lt;/strong&gt;(異步確保性)&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220206-gulimall-20-idempotent/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>生活雜記</title>
        <link>https://yoziming.github.io/post/220206-eu-name/</link>
        <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220206-eu-name/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220206-eu-name/ -&lt;h2 id=&#34;夢中的婚禮&#34;&gt;夢中的婚禮&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;事情是這樣，我國小音樂老師(我竟然還記得她的全名，姓許)很常在上下課間隙彈&amp;quot;夢中的婚禮&amp;quot;
&lt;ul&gt;
&lt;li&gt;Richard Clayderman - Mariage d&amp;rsquo;amour (夢中的婚禮)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QLHHfrL_eJk&#34;&gt;https://www.youtube.com/watch?v=QLHHfrL_eJk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;這首優美的鋼琴曲相信大家都有聽過，我本來以為它是類似卡農之類流傳很久的經典曲目，直到前陣子才了知道原來作者是現代人，並且還活著!&lt;/li&gt;
&lt;li&gt;作者理查 克萊德門被稱為&amp;quot;鋼琴王子&amp;quot;，還來過台灣錄節目(張菲的龍兄虎弟，也是年代久遠)、開音樂會&lt;/li&gt;
&lt;li&gt;那我就在想，該簡稱他為理查呢? 還是克萊德門? 總有先例可循吧，於是我搜尋巴哈、貝多芬、蕭邦、莫札特&amp;hellip;等等，才驚覺原來這些都是家族的姓，難道這是音樂家的傳統?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;歐洲人的姓與名&#34;&gt;歐洲人的姓與名&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;原來歐洲在中世紀的時候，名只能在教廷規定的&amp;quot;教名&amp;quot;中選(例如Peter)，而姓才是能自己決定的&lt;/li&gt;
&lt;li&gt;所以造成他們重複的是名，而姓卻是千變萬化(跟中國剛好相反)，例如目前德國人最多的姓是&lt;code&gt;Müller&lt;/code&gt;，也才佔不到1%。而那些少見的姓Mozart、Beethoven幾乎就只有他們那一家&lt;/li&gt;
&lt;li&gt;街上喊&lt;code&gt;Adolf&lt;/code&gt;可能有好幾人回頭看你，但是喊&lt;code&gt;Hitler&lt;/code&gt;大家就知道是在說誰，所以用姓來稱呼才是有效率的區分方法&lt;/li&gt;
&lt;li&gt;至於同姓就要用其他修飾詞來區分，例如地區；真的同家族的就會用XXX的兒子、小、老之類，想被記住就要成為家族中最厲害的那個，也難怪那些電影或小說動不動就為了家族的榮耀之類的&lt;/li&gt;
&lt;li&gt;在正式寫作中也是要稱呼姓才有禮貌，這點倒是跟華人一樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他當代音樂家&#34;&gt;其他當代音樂家&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我個人特別喜歡的，附上他們的經典曲&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;馬克西姆 - 克羅迪亞狂想曲&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maksim - Croatian Rhapsody&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/3aTEjyzWKFQ&#34;&gt;https://youtu.be/3aTEjyzWKFQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;久石讓 - 菊次郎的夏天&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Joe Hisaishi - Summer&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/l0GN40EL1VU&#34;&gt;https://youtu.be/l0GN40EL1VU&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220206-eu-name/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>LeetCode Easy: 35-58</title>
        <link>https://yoziming.github.io/post/220205-leetcode-easy-35/</link>
        <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220205-leetcode-easy-35/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220205-leetcode-easy-35/ -&lt;h3 id=&#34;35-search-insert-position&#34;&gt;\35. Search Insert Position&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二分查找
&lt;ul&gt;
&lt;li&gt;核心思路是&amp;quot;下一輪的搜索區間&amp;quot;&lt;/li&gt;
&lt;li&gt;然後逐步縮小區間&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;searchInsert&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] nums, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; target) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 右邊界最大的數有可能就是答案(最衰的情況下)，他的index就是長度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; len = nums.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;, left = 0, right = len;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 開始迫近
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (left &amp;lt; right) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 每輪都重新定義中間數，注意小數點會被捨去
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; mid = left + (right - left) / 2;
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果目標更大
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (nums[mid] &amp;lt; target) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 成為新的左標，下一輪搜尋[mid + 1...right]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            left = mid + 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 因為小數點會被捨去，所以這邊+1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 成為新的右標，下一輪搜尋[left...mid]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            right = mid;
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 直到nums[mid] = target
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; left;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;53-maximum-subarray&#34;&gt;\53. Maximum Subarray&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;動態規劃 Dynamic programming，核心思想是&amp;quot;大事化小，小事化了&amp;quot;&lt;/li&gt;
&lt;li&gt;拆分出局部的問題，從小的部分算出解並且儲存起來(記憶化)&lt;/li&gt;
&lt;li&gt;一個儲存的結果就是一個狀態，而狀態可能是很多種所以稱為動態，要做的事就是找出最佳解(規劃)，所以叫做動態規劃&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;maxSubArray&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] nums) {
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Output: 6
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Explanation: [4,-1,2,1] has the largest sum = 6.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 找出子數組(連續的)最大和
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = nums.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 動態用來儲存最大值的數組，長度等於原數組，因為到時候要一個一個比過去
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] dp = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[n];
    dp[0] = nums[0];
    &lt;span style=&#34;color:#228b22&#34;&gt;// 先假設第一個數自己就是最大值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; max = nums[0];
    &lt;span style=&#34;color:#228b22&#34;&gt;// 從第二個數開始比對
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt; n; i++) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 判斷&amp;#34;動態數組的前一個數&amp;#34;加&amp;#34;原數組當前數&amp;#34;，哪個更大，原數組更大就成為動態數組的新成員
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        dp[i] = Math.&lt;span style=&#34;color:#658b00&#34;&gt;max&lt;/span&gt;(dp[i - 1] + nums[i], nums[i]);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 動態數組每輪更新的結果是累加的和，直到下一個數是負的才停
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 更新最終要返回的max
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        max = Math.&lt;span style=&#34;color:#658b00&#34;&gt;max&lt;/span&gt;(max, dp[i]);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; max;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;58-length-of-last-word&#34;&gt;\58. Length of Last Word&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;沒甚麼特別的，就是遍歷字串&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;lengthOfLastWord&lt;/span&gt;(String s) {
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Input: s = &amp;#34;Hello World&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Output: 5
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * Explanation: The last word is &amp;#34;World&amp;#34; with length 5.
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 輸入sting可能包含空格，找出最後一個單字的長度
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 從尾遍歷
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; len = s.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;();
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; end = len - 1;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 如果找到空格就停
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; end &amp;gt;= 0 &amp;amp;&amp;amp; s.&lt;span style=&#34;color:#658b00&#34;&gt;charAt&lt;/span&gt;(end) == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;; end--) {
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 單字的長度，直到空格又停
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; wordLength = 0;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; end &amp;gt;= 0 &amp;amp;&amp;amp; s.&lt;span style=&#34;color:#658b00&#34;&gt;charAt&lt;/span&gt;(end) != &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;; end--) {
        wordLength++;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; wordLength;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/220205-leetcode-easy-35/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>整理常用的git操作</title>
        <link>https://yoziming.github.io/post/220205-git-common-use/</link>
        <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220205-git-common-use/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220205-git-common-use/ -&lt;h1 id=&#34;整理常用的git操作&#34;&gt;整理常用的git操作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;這東西沒在用的時候硬學也記不住，用到的時候又總是順序不太對，這樣那樣的報錯，乾脆寫一篇筆記統一整理一下&lt;/li&gt;
&lt;li&gt;首先git是以&amp;quot;資料夾&amp;quot;為單位進行版本控制(了解後感覺理所當然，但我一開始沒弄明白這點只會複製貼上教學的指令，就一直懵懵懂懂的)&lt;/li&gt;
&lt;li&gt;我們幹的事是把&amp;quot;本地這個資料夾&amp;quot;連結到github上的遠端倉庫，針對某個分支進行某些操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常用的git操作&#34;&gt;常用的git操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所謂&lt;code&gt;&amp;lt;倉庫網址&amp;gt;&lt;/code&gt;就是在github網站某倉庫，點右上角綠色的code顯示的那串，例如&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;https://github.com/yoziming/javamall.git&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下載遠端倉庫到本地，會得到一個資料夾&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/yoziming/javamall.git
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;本地連到遠端倉庫
&lt;ul&gt;
&lt;li&gt;用於本地已經建了一個資料夾的狀況&lt;/li&gt;
&lt;li&gt;&lt;code&gt;origin&lt;/code&gt;是用來操作的別名，因為如果是載下來的倉庫預設就叫&lt;code&gt;origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add origin &amp;lt;倉庫網址&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;查看當前資料夾控制的遠端&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;切換分支(需要該分支確實存在)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git checkout &amp;lt;分支&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;建立新的 branch 並切到新的 branch&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git checkout -b &amp;lt;新分支名稱&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;添加全部檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;加上註解
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;git commit -e&lt;/code&gt;添加多行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git commit -m &amp;quot;一行註解&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;推送到遠端
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;origin&lt;/code&gt;是別名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git push -u origin &amp;lt;分支名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;修改連線的倉庫網址&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote set-url origin https://github.com/yoziming/my-blog.git
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;刪除倉庫連線&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote remove origin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;參考: &lt;a href=&#34;https://ithelp.ithome.com.tw/articles/10238939?sc=pt&#34;&gt;https://ithelp.ithome.com.tw/articles/10238939?sc=pt&lt;/a&gt;&lt;/p&gt;
- https://yoziming.github.io/post/220205-git-common-use/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>確認訂單、feign請求頭問題</title>
        <link>https://yoziming.github.io/post/220205-gulimall-19/</link>
        <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220205-gulimall-19/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220205-gulimall-19/ -&lt;h1 id=&#34;商城訂單模組&#34;&gt;商城訂單模組&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;訂單通常是最複雜的模組之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;涉及三流:
&lt;ul&gt;
&lt;li&gt;信息流：商品信息、優惠信息&lt;/li&gt;
&lt;li&gt;資金流：退款、付款&lt;/li&gt;
&lt;li&gt;物流：發送、退貨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220128153241754.png&#34; alt=&#34;image-20220128153241754&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;訂單流程&#34;&gt;訂單流程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;訂單流程是指從訂單產生到完成的過程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不同的產品類型或業務類型在系統中的流程會千差萬別，比如線上實物訂單和虛擬訂單與o20訂單等，所以需要根據不同的類型進行構建訂單流程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不管類型如何訂單都包括正向流程和逆向流程，對應的場景就是購買商品和退換貨流程，正向流程就是一個正常的網購步驟&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;訂單生成-&amp;gt; 支付訂單-&amp;gt; 賣家發貨-&amp;gt; 確認收貨-&amp;gt; 交易成功&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而每個步驟的背後，訂單是如何在多系統之間交互流轉的，可概括如下圖&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;1598670706087.png&#34; alt=&#34;1598670706087&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;正向流程&#34;&gt;正向流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;訂單創建前需要預覽訂單，選擇收貨信息等&lt;/li&gt;
&lt;li&gt;訂單創建需要鎖定庫存，庫存有才可創建，否則不能創建&lt;/li&gt;
&lt;li&gt;訂單創建後超時未支付需要解鎖庫存&lt;/li&gt;
&lt;li&gt;支付成功後，需要進行拆單，根據商品打包方式，所在倉庫，物流等進行拆單&lt;/li&gt;
&lt;li&gt;支付的每筆流水都需要記錄，以待查賬&lt;/li&gt;
&lt;li&gt;訂單創建，支付成功等狀態都需要給MQ發送消息，方便其他系統感知訂閲&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;逆向流程&#34;&gt;逆向流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;修改訂單，用户沒有提交訂單，可以對訂單一些信息進行修改，比如配送信息，&lt;/li&gt;
&lt;li&gt;優惠信息，及其他一些訂單可修改範圍的內容，此時只需對數據進行變更即可。&lt;/li&gt;
&lt;li&gt;訂單取消，用户主動取消訂單和用户超時未支付，兩種情況下訂單都會取消訂單，而超時情況是系統自動關閉訂單，所以在訂單支付的響應機制上面要做支付的&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;訂單狀態&#34;&gt;訂單狀態&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;待付款: 用户提交訂單後，訂單進行預下單，目前主流電商網站都會便於用户快速完成支付，需要注意的是待付款狀態下可以對庫存進行鎖定，鎖定庫存需要配置支付超時時間，超時後將自動取消訂單，訂單變更為關閉狀態&lt;/li&gt;
&lt;li&gt;已付款/待發貨: 用户完成訂單支付，訂單系統需要記錄支付時間，支付流水單號便於對賬，訂單下放到WMS系統，倉庫進行調撥，配貨，分揀，出庫等操作&lt;/li&gt;
&lt;li&gt;待收貨/已發貨: 倉儲將商品出庫後，訂單進入物流環節，訂單系統需要同步物流信息，便於用户實時知悉物品物流狀態&lt;/li&gt;
&lt;li&gt;已完成: 用户確認收貨後，訂單交易完成。後續支付側進行結算，如果訂單存在問題進入售後狀態&lt;/li&gt;
&lt;li&gt;已取消: 付款之前取消訂單。包括超時未付款或用户商户取消訂單都會產生這種訂單狀態&lt;/li&gt;
&lt;li&gt;售後中: 用户在付款後申請退款，或商家發貨後用户申請退換貨。售後也同樣存在各種狀態，當發起售後申請後生成售後訂單，售後訂單狀態為待審核，等待商家審核，商家審核通過後訂單狀態變更為待退貨，等待用户將商品寄回，商家收貨後訂單狀態更新為待退款狀態，退款到用户原賬户後訂單狀態更新為售後成功&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;前端頁面&#34;&gt;前端頁面&lt;/h2&gt;
&lt;p&gt;等待付款，詳情頁：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1598667020590.png&#34; alt=&#34;1598667020590&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1598667039261.png&#34; alt=&#34;1598667039261&#34;&gt;&lt;/p&gt;
&lt;p&gt;訂單頁：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1598667069559.png&#34; alt=&#34;1598667069559&#34;&gt;&lt;/p&gt;
&lt;p&gt;收銀頁：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1598667165660.png&#34; alt=&#34;1598667165660&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;整理各種pojo與規範&#34;&gt;整理各種POJO與規範&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;feign包放在common模組下，用TO(Transfer Object)來跨模組接收、傳遞物件&lt;/li&gt;
&lt;li&gt;VO(View Object) 是專門返回給前端、給人看的東西&lt;/li&gt;
&lt;li&gt;Entity實體，也稱為PO(Persistant Object)，屬性基本和資料表欄位一一對應。一個實體即是真實存在的一筆資料，必須要有唯一標識(例如id)以區分其它實體&lt;/li&gt;
&lt;li&gt;DAO(Data Access Object)封裝了PO在資料庫的CRUD等操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;實作&#34;&gt;實作&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;image-20220129163611607.png&#34; alt=&#34;image-20220129163611607&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;登入攔截&#34;&gt;登入攔截&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;點結算時，沒登入就讓用戶先去登入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;LoginUserInterceptor.java
&lt;ul&gt;
&lt;li&gt;記得造一個config實現WebMvcConfigurer註冊攔截器&lt;/li&gt;
&lt;li&gt;攔截器記得用&lt;code&gt;@Component&lt;/code&gt;讓spring載入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 登入攔截器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 從session中獲取了登入信息（redis中），封裝到了ThreadLocal中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;LoginUserInterceptor&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerInterceptor {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ThreadLocal&amp;lt;MemberResponseTo&amp;gt; loginUser = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;&amp;gt;();

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;preHandle&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {

        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取登入的用戶信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        MemberResponseTo attribute = (MemberResponseTo) request.&lt;span style=&#34;color:#658b00&#34;&gt;getSession&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getAttribute&lt;/span&gt;(LOGIN_USER);

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (attribute != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 把登入後用戶的信息放在ThreadLocal裡面進行保存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            loginUser.&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(attribute);

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 未登入，返回登入頁面
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            response.&lt;span style=&#34;color:#658b00&#34;&gt;setContentType&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/html;charset=UTF-8&amp;#34;&lt;/span&gt;);
            PrintWriter out = response.&lt;span style=&#34;color:#658b00&#34;&gt;getWriter&lt;/span&gt;();
            out.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;請先進行登入，再進行後續操作！&amp;#39;);location.href=&amp;#39;http://auth.mall.com/login.html&amp;#39;&amp;lt;/script&amp;gt;&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#228b22&#34;&gt;// session.setAttribute(&amp;#34;msg&amp;#34;, &amp;#34;請先進行登入&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// response.sendRedirect(&amp;#34;http://auth.mall.com/login.html&amp;#34;);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;訂單確認頁&#34;&gt;訂單確認頁&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;從購物車點了去結算，就來到這&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;1598667130041.png&#34; alt=&#34;1598667130041&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OrderConfirmVo.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 訂單確認頁需要用的數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;OrderConfirmVo&lt;/span&gt; {

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 會員收貨地址列表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     **/&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Getter&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Setter&lt;/span&gt;
    List&amp;lt;MemberAddressTo&amp;gt; memberAddressTos;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 所有選中的購物項【購物車中的所有項】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     **/&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Getter&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Setter&lt;/span&gt;
    List&amp;lt;OrderItemTo&amp;gt; items;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 優惠券（會員積分）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     **/&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Getter&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Setter&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer integration;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 防止重複提交的令牌 冪等性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     **/&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Getter&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Setter&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String orderToken;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Getter&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Setter&lt;/span&gt;
    Map&amp;lt;Long, Boolean&amp;gt; stocks;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Integer &lt;span style=&#34;color:#008b45&#34;&gt;getCount&lt;/span&gt;() {
        Integer count = 0;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (items != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; items.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (OrderItemTo item : items) {
                count += item.&lt;span style=&#34;color:#658b00&#34;&gt;getCount&lt;/span&gt;();
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; count;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 總商品金額
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     **/&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;//BigDecimal total;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;//計算訂單總額
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; BigDecimal &lt;span style=&#34;color:#008b45&#34;&gt;getTotal&lt;/span&gt;() {
        BigDecimal totalNum = BigDecimal.&lt;span style=&#34;color:#658b00&#34;&gt;ZERO&lt;/span&gt;;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (items != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; items.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (OrderItemTo item : items) {
                &lt;span style=&#34;color:#228b22&#34;&gt;//計算當前商品的總價格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                BigDecimal itemPrice = item.&lt;span style=&#34;color:#658b00&#34;&gt;getPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;multiply&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; BigDecimal(item.&lt;span style=&#34;color:#658b00&#34;&gt;getCount&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;()));
                &lt;span style=&#34;color:#228b22&#34;&gt;//再計算全部商品的總價格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                totalNum = totalNum.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(itemPrice);
            }
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; totalNum;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;OrderWebController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 去結算確認頁
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/toTrade&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;toTrade&lt;/span&gt;(Model model, HttpServletRequest request) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
    OrderConfirmVo confirmVo = orderService.&lt;span style=&#34;color:#658b00&#34;&gt;confirmOrder&lt;/span&gt;();
    model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;confirmOrderData&amp;#34;&lt;/span&gt;, confirmVo);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 展示訂單確認的數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;confirm&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;service層&#34;&gt;Service層&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這邊有2個知識點: feign丟失請求頭、防重令牌，在下面分別展開&lt;/li&gt;
&lt;li&gt;OrderServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 訂單確認頁返回需要用的數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; OrderConfirmVo &lt;span style=&#34;color:#008b45&#34;&gt;confirmOrder&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 構建OrderConfirmVo
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    OrderConfirmVo confirmVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; OrderConfirmVo();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前用戶登入的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MemberResponseTo memberResponseTo = LoginUserInterceptor.&lt;span style=&#34;color:#658b00&#34;&gt;loginUser&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前線程請求頭信息(解決Feign異步調用丟失請求頭問題)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    RequestAttributes requestAttributes = RequestContextHolder.&lt;span style=&#34;color:#658b00&#34;&gt;getRequestAttributes&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 開啟第一個異步任務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CompletableFuture&amp;lt;Void&amp;gt; addressFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 每一個線程都來共享之前的請求數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        RequestContextHolder.&lt;span style=&#34;color:#658b00&#34;&gt;setRequestAttributes&lt;/span&gt;(requestAttributes);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程查詢所有的收貨地址列表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;MemberAddressTo&amp;gt; address = memberFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getAddress&lt;/span&gt;(memberResponseTo.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
        confirmVo.&lt;span style=&#34;color:#658b00&#34;&gt;setMemberAddressTos&lt;/span&gt;(address);
    }, threadPoolExecutor);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 開啟第二個異步任務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CompletableFuture&amp;lt;Void&amp;gt; cartInfoFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 每一個線程都來共享之前的請求數據【解決異步ThreadLocal 無法共享數據】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        RequestContextHolder.&lt;span style=&#34;color:#658b00&#34;&gt;setRequestAttributes&lt;/span&gt;(requestAttributes);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程查詢購物車所有選中的購物項
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;OrderItemTo&amp;gt; currentCartItems = cartFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getCurrentCartItems&lt;/span&gt;();
        confirmVo.&lt;span style=&#34;color:#658b00&#34;&gt;setItems&lt;/span&gt;(currentCartItems);
        &lt;span style=&#34;color:#228b22&#34;&gt;// feign在遠程調用之前要構造請求，會調用很多的攔截器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }, threadPoolExecutor).&lt;span style=&#34;color:#658b00&#34;&gt;thenRunAsync&lt;/span&gt;(() -&amp;gt; {
        List&amp;lt;OrderItemTo&amp;gt; items = confirmVo.&lt;span style=&#34;color:#658b00&#34;&gt;getItems&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取全部商品的id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;Long&amp;gt; skuIds = items.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;()
                .&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;((itemVo -&amp;gt; itemVo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;()))
                .&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());

        &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程查詢商品庫存信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        R skuHasStock = wareFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuHasStock&lt;/span&gt;(skuIds);
        List&amp;lt;SkuStockVo&amp;gt; skuStockVos = skuHasStock.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;List&amp;lt;SkuStockVo&amp;gt;&amp;gt;() {
        });

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (skuStockVos != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; skuStockVos.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 將skuStockVos集合轉換為map
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            Map&amp;lt;Long, Boolean&amp;gt; skuHasStockMap =
                    skuStockVos.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toMap&lt;/span&gt;(SkuStockVo::getSkuId, SkuStockVo::getHasStock));
            confirmVo.&lt;span style=&#34;color:#658b00&#34;&gt;setStocks&lt;/span&gt;(skuHasStockMap);
        }
    }, threadPoolExecutor);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 查詢用戶積分
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Integer integration = memberResponseTo.&lt;span style=&#34;color:#658b00&#34;&gt;getIntegration&lt;/span&gt;();
    confirmVo.&lt;span style=&#34;color:#658b00&#34;&gt;setIntegration&lt;/span&gt;(integration);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 價格數據計算寫在VO了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 防重令牌(防止表單重複提交)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 為用戶設置一個token，三十分鐘過期時間（存在redis）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    String token = UUID.&lt;span style=&#34;color:#658b00&#34;&gt;randomUUID&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
    redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(USER_ORDER_TOKEN_PREFIX + memberResponseTo.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;(), token, 30,
            TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;MINUTES&lt;/span&gt;);
    confirmVo.&lt;span style=&#34;color:#658b00&#34;&gt;setOrderToken&lt;/span&gt;(token);

    CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;allOf&lt;/span&gt;(addressFuture, cartInfoFuture).&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; confirmVo;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;feign丟失請求頭&#34;&gt;feign丟失請求頭&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20220128164501873.png&#34; alt=&#34;image-20220128164501873&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;feign的本質也是http request，它的底層代碼會造一個RequestTemplate模板，在這時候會丟失原有的請求頭訊息(cookie沒了)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跟nginx轉發丟失host有點像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在feign調用的時候就不要依賴cookie等請求頭訊息，額外傳送例如userId等訊息作為參數&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;保留頭解法&#34;&gt;保留頭解法&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;image-20220128165903146.png&#34; alt=&#34;image-20220128165903146&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;那個RequestTemplate構造的時候工廠會調用它自己的RequestInterceptor(預設是空)，我們手動重寫其中的apply方法，在這邊把頭加回去&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透過Spring給的RequestContextHolder來暫存頭資訊，這玩意就是封裝過的ThreadLocal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FeignConfig.java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;註解 &lt;code&gt;@Configuration&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在feign接口指定使用設定，例如:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@FeignClient&lt;/span&gt;(name = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cart&amp;#34;&lt;/span&gt;, configuration = FeignConfig.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CartFeignService&lt;/span&gt; {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * feign攔截器功能
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 解決feign 遠程請求頭丟失問題
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; **/&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;FeignConfig&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;requestInterceptor&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; RequestInterceptor &lt;span style=&#34;color:#008b45&#34;&gt;requestInterceptor&lt;/span&gt;() {

        RequestInterceptor requestInterceptor = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RequestInterceptor() {
            &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;apply&lt;/span&gt;(RequestTemplate template) {
                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;feign遠程調用，攔截包裝請求頭&amp;#34;&lt;/span&gt;);

                &lt;span style=&#34;color:#228b22&#34;&gt;// 使用RequestContextHolder拿到剛進來的請求數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.&lt;span style=&#34;color:#658b00&#34;&gt;getRequestAttributes&lt;/span&gt;();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (requestAttributes != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
                    HttpServletRequest request = requestAttributes.&lt;span style=&#34;color:#658b00&#34;&gt;getRequest&lt;/span&gt;();&lt;span style=&#34;color:#228b22&#34;&gt;//老請求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (request != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
                        &lt;span style=&#34;color:#228b22&#34;&gt;// 同步請求頭的數據（主要是cookie）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#228b22&#34;&gt;// 把老請求的cookie值放到新請求上來，進行一個同步
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                        String cookie = request.&lt;span style=&#34;color:#658b00&#34;&gt;getHeader&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Cookie&amp;#34;&lt;/span&gt;);
                        template.&lt;span style=&#34;color:#658b00&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Cookie&amp;#34;&lt;/span&gt;, cookie);
                    }
                }
            }
        };
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; requestInterceptor;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;我還是有點沒弄清它這個設定載入的細節，因為我feign包是放在common之下，當我把FeignConfig也放在common，就需要在註解指定configuration = FeignConfig.class才能生效&lt;/li&gt;
&lt;li&gt;關於Feign設定的細節參考 : &lt;a href=&#34;https://www.twblogs.net/a/5da0a13ebd9eee541c34e853&#34;&gt;https://www.twblogs.net/a/5da0a13ebd9eee541c34e853&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我當初是看了這篇 &lt;a href=&#34;https://www.cnblogs.com/mindzone/p/15315273.html&#34;&gt;https://www.cnblogs.com/mindzone/p/15315273.html&lt;/a&gt; 決定把feing放在common的，我感覺這樣確實比較整齊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220129150346004.png&#34; alt=&#34;image-20220129150346004&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;異步問題&#34;&gt;異步問題&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;然而又有問題，因為一個老請求進來，我們是開線程池去異步調用各個feign，相當於換線程了，所以調用之前要手動共享請求的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前線程請求頭信息(解決Feign異步調用丟失請求頭問題)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;RequestAttributes requestAttributes = RequestContextHolder.&lt;span style=&#34;color:#658b00&#34;&gt;getRequestAttributes&lt;/span&gt;();
&lt;span style=&#34;color:#228b22&#34;&gt;// 開啟第一個異步任務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;CompletableFuture&amp;lt;Void&amp;gt; addressFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 每一個線程都來共享之前的請求數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    RequestContextHolder.&lt;span style=&#34;color:#658b00&#34;&gt;setRequestAttributes&lt;/span&gt;(requestAttributes);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程查詢所有的收貨地址列表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;MemberAddressTo&amp;gt; address = memberFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getAddress&lt;/span&gt;(memberResponseTo.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
    confirmVo.&lt;span style=&#34;color:#658b00&#34;&gt;setMemberAddressTos&lt;/span&gt;(address);
}, threadPoolExecutor);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;返回問題&#34;&gt;返回問題&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;被遠程調用的controller，想要它返回To類，在方法上要記得註解&lt;code&gt;@ResponseBody&lt;/code&gt;，或是直接整個用&lt;code&gt;@RestController&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;防重令牌&#34;&gt;防重令牌&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;每次來到確認頁，生成一個隨機UUID的令牌，開頭以用戶ID命名，並且設有過期時間&lt;/li&gt;
&lt;li&gt;把這個令牌也返回給前端，當用戶提交訂單時，會帶上這個令牌&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220129172028442.png&#34; alt=&#34;image-20220129172028442&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果用戶在確認頁F5，會刷新令牌。後續驗證涉及覓等性問題，下章繼續&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;h2 id=&#34;項目模組的管理&#34;&gt;項目模組的管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本來學了一招是建一個空的父模組用&lt;code&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/code&gt;統一管理版本，然而在分布式微服務項目我感覺這又不太好
&lt;ul&gt;
&lt;li&gt;第一個缺點是每次新建子模組都要調整&lt;code&gt;&amp;lt;parent&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二是多了一層依賴到了分布式反而變得不直觀&lt;/li&gt;
&lt;li&gt;專案內必定有common模組，既然大家都要引用它，靠它就能實現版本管理，父模組功能重復了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我想的是既然大家都會引用common，那共通性的依賴就在common統一管理版本。而模組自己額外引用的依賴，就靠自己管理版本，這樣就比較直觀、獨立，不會想看個版本還要翻好幾層&lt;/li&gt;
&lt;li&gt;另外就是feign位置，我感覺還是統一抽出放在common更好，有跨模組間溝通的bean也都放在這邊的TO包下&lt;/li&gt;
&lt;li&gt;其他子模組的VO就專注於自己返回給前端的用途，這樣就不會搞得每個模組都有一堆VO跟TO很亂，也可以杜絕有時候想偷懶把VO與TO混用的可能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;記一個啟動服務的bug&#34;&gt;記一個啟動服務的BUG&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我也不確定到底動到哪邊，大概是批次取代錯字的時候改到&lt;/li&gt;
&lt;li&gt;呈現的BUG狀態就是啟動A服務的時候，A服務載入的竟然是B服務的application.properties，呈現一種混血狀態，然而怎麼復原明明就都跟以前一樣了，卻還是不行，匪夷所思&lt;/li&gt;
&lt;li&gt;解法: 把所有target資料夾全砍了，各個服務重新build一次就好了&lt;/li&gt;
&lt;li&gt;教訓: 多多傳git方便出事好還原、有時候BUG可能發生在建構出來的檔案，可以整個資料夾砍掉重新git clone一份乾淨的下來&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220205-gulimall-19/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>RabbitMQ與訊息確認</title>
        <link>https://yoziming.github.io/post/220204-gulimall-18-rabbitmq/</link>
        <pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220204-gulimall-18-rabbitmq/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220204-gulimall-18-rabbitmq/ -&lt;h1 id=&#34;message-queue&#34;&gt;Message Queue&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Message queue&lt;/em&gt; 訊息佇列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;佇列&lt;/em&gt;（queue），又稱為隊列，特性是先進先出(FIFO)&lt;/li&gt;
&lt;li&gt;訊息佇列是一個中間件，又是經典的&amp;quot;加一層&amp;quot;操作，抽出一個專門存放溝通訊息的地方，就是訊息佇列
&lt;ul&gt;
&lt;li&gt;可以理解成去銀行辦事，那個領號碼牌的機器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;市面上常見的MQ: ActiveMQ、RabbitMQ、RocketMQ、Kafka&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;目的&#34;&gt;目的&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;縮短調用時間: 透過序列分發後續的異步調用，不需要一步一步往下走等返回
&lt;ul&gt;
&lt;li&gt;就像去醫院，醫生開了檢查要你去抽血跟照X光，哪邊方便就先去做，總之檢查單開了醫生就不管了，你總會去做完檢查&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220127212728258.png&#34; alt=&#34;image-20220127212728258&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解耦: 模組間溝通用訂閱佇列的形式，只需要關注收發訊息，減少業務邏輯的侵入
&lt;ul&gt;
&lt;li&gt;比如到了抽血站，拿檢驗單去掃機器就能完成抽血報名，不需要醫生打電話告知抽血站誰要抽什麼血&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220127213129008.png&#34; alt=&#34;image-20220127213129008&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;削峰: 流量控制，錯開高併發，依順序處理
&lt;ul&gt;
&lt;li&gt;隊列是有序、可控制流量的，不會突然1000人擠爆抽血站&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220127213027170.png&#34; alt=&#34;image-20220127213027170&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;名詞&#34;&gt;名詞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;消息代理（message broker）: 安裝了消息中間件的伺服器，發送消息和接收消息都要連上它&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冒險者公會的任務看板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目的地（destination）: 目的地表示生產者發送消息給消息代理之後，是存儲到消息代理中哪一個具體的目的地（隊列或主題）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;隊列（queue）：點對點通信，1個發送者，n個接受者，但一個信息只會被一個接受者消費（消費後移出隊列）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解為拋繡球&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主題（topic）：發佈/訂閲，多個發送者+多個訂閲者。多個訂閲者會同時接收到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;廣播&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JMS (Java Message Service): 基於JAVA API定義的標準介面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;類似JDBC與資料庫廠商之間的關係&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ActiveMQ、HornetMQ是JMS實現&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;參考 &lt;a href=&#34;https://openhome.cc/Gossip/EJB3Gossip/JavaMessageService.html&#34;&gt;https://openhome.cc/Gossip/EJB3Gossip/JavaMessageService.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AMQP(Advanced Message Queuing Protocol)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高級消息隊列協議，也是一個消息代理的規範，兼容JMS&lt;/li&gt;
&lt;li&gt;RabbitMQ是AMQP的實現&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不管JMS或AMQP，Spring都有提供支持，只要實現ConnectionFactory來連接消息代理，Spring Boot也都有自動配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring真的是無敵，一統Java江湖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;rabbitmq&#34;&gt;RabbitMQ&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;這一Part講的超清晰，講的太好了 &lt;a href=&#34;https://www.bilibili.com/video/BV1np4y1C7Yf?p=250&amp;amp;spm_id_from=pageDriver&#34;&gt;https://www.bilibili.com/video/BV1np4y1C7Yf?p=250&amp;amp;spm_id_from=pageDriver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20220126230205048.png&#34; alt=&#34;image-20220126230205048&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;publisher發送message&lt;/li&gt;
&lt;li&gt;message由消息頭 + 消息體組成(類似HTTP)，發送到Message Broker消息代理伺服器上&lt;/li&gt;
&lt;li&gt;在Broker中，Exchange交換機綁定Queue，並識別route key(消息要去哪)&lt;/li&gt;
&lt;li&gt;消費者訂閱隊列，建立一條Connection長連接(連接上開闢有多條channel信道)
&lt;ul&gt;
&lt;li&gt;類似高速公路有6車道那樣&lt;/li&gt;
&lt;li&gt;長連接能監聽消費者是否斷開，如果斷開了就回收消息，不至於丟失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在Broker中，Exchange與Queue可以組成VHost虛擬主機，類似命名空間互相隔離，可以用來區分不同平台或是dev與pub&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;啟用&#34;&gt;啟用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;官方: &lt;a href=&#34;https://www.rabbitmq.com/networking.html&#34;&gt;https://www.rabbitmq.com/networking.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d --name rabbitmq --restart=always -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;這是章魚不是兔子吧，這麼多端口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4369,25672(Erlang發現&amp;amp;集群端口)&lt;/li&gt;
&lt;li&gt;5672,5671(AMQP端口)&lt;/li&gt;
&lt;li&gt;15672(web管理後台端口)&lt;/li&gt;
&lt;li&gt;61613,61614(STOMP協議端口)&lt;/li&gt;
&lt;li&gt;1883,8883(MQTT協議端口)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理頁面: http://localhost:15672&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預設帳號密碼都是 &lt;code&gt;guest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;exchange類型&#34;&gt;Exchange類型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;direct: 直接類型，按照路由鍵精確一對一匹配&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fanout: 廣播類型，有綁定就發，無論路由鍵，最快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;topic: 主題類型，用類似通配符的規則匹配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;: 必須有一個單詞&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;: 0個或多個單詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220126235029445.png&#34; alt=&#34;image-20220126235029445&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自訂exchange&#34;&gt;自訂Exchange&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;命名最好在尾部帶上類型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220126235605507.png&#34; alt=&#34;image-20220126235605507&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接著給交換機綁定隊列，綁定之前，要先有隊列，這邊創&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220126235816493.png&#34; alt=&#34;image-20220126235816493&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接著綁定
&lt;ul&gt;
&lt;li&gt;交換機也可以綁交換機，形成多層次關係&lt;/li&gt;
&lt;li&gt;記得指定route key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220127000338395.png&#34; alt=&#34;image-20220127000338395&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;整合spring&#34;&gt;整合Spring&lt;/h1&gt;
&lt;h2 id=&#34;前置&#34;&gt;前置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引包&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-amqp&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# MQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.virtual-host=/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;啟動類註解 &lt;code&gt;@EnableRabbit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@EnableRabbit註解使RabbitAutoConfiguration生效，自動配置了:
	RabbitTemplate
	AmqpAdmin
	CachingConnectionFactory
	RabbitMessagingTemplate
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;測試創建&#34;&gt;測試創建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;創建Exchanger、Queue、Binding這些參數與邏輯都跟在網頁上操作一樣&lt;/li&gt;
&lt;li&gt;先注入一個&lt;code&gt;AmqpAdmin&lt;/code&gt;，由它&lt;code&gt;declare&lt;/code&gt;完成創建&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Slf4j&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@SpringBootTest&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;OrderApplicationTests&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
    AmqpAdmin amqpAdmin;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;createExchange&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 名稱, 持久, 自動刪
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        DirectExchange directExchange = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; DirectExchange(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
        amqpAdmin.&lt;span style=&#34;color:#658b00&#34;&gt;declareExchange&lt;/span&gt;(directExchange);
        log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Exchange[{}]創建成功&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-exchange&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;createQueue&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;// import org.springframework.amqp.core.Queue;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 第三個參數 排他，若true表示隊列只能被聲明的連接綁定，其他人綁不上
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        amqpAdmin.&lt;span style=&#34;color:#658b00&#34;&gt;declareQueue&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Queue(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-queue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;));
        log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Queue創建[{}]成功&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-queue&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;createBinding&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;// String destination目的地，隊列name或 交換機name
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// Binding.DestinationType destinationType目的地類型 queue還是exchange
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// String exchange 交換機
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// String routingKey 路由鍵
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// @Nullable Map&amp;lt;String, Object&amp;gt; arguments 自定義參數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        amqpAdmin.&lt;span style=&#34;color:#658b00&#34;&gt;declareBinding&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Binding(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-queue&amp;#34;&lt;/span&gt;, Binding.&lt;span style=&#34;color:#658b00&#34;&gt;DestinationType&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;QUEUE&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-exchange&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello.java&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;));
        log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Binding創建[{}]成功&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-binding&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;發訊息&#34;&gt;發訊息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;注入&lt;code&gt;RabbitTemplate&lt;/code&gt;，使用&lt;code&gt;convertAndSend&lt;/code&gt;方法
&lt;ul&gt;
&lt;li&gt;能接收Object，直接轉成流發出去&lt;/li&gt;
&lt;li&gt;若想生發一個物件，該物件的類要實現序列化 &lt;code&gt;implments Serializable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
RabbitTemplate rabbitTemplate;

&lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;send&lt;/span&gt;() {
    String msg = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;一條訊息&amp;#34;&lt;/span&gt;;
    rabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;convertAndSend&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello.java&amp;#34;&lt;/span&gt;, msg);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;實務上還是轉JSON吧，需要一個配置類
&lt;ul&gt;
&lt;li&gt;注意引的包是&lt;code&gt;amqp.support.converter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;org.springframework.amqp.support.converter.MessageConverter&lt;/span&gt;;

&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyRabbitConfig&lt;/span&gt; {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; MessageConverter &lt;span style=&#34;color:#008b45&#34;&gt;messageConverter&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Jackson2JsonMessageConverter();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;發送一個自訂類RefundInfoEntity&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;send&lt;/span&gt;() {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 5; i++) {
        RefundInfoEntity refundInfoEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RefundInfoEntity();
        refundInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setRefundContent&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt; + i);
        rabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;convertAndSend&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-exchange&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello.java&amp;#34;&lt;/span&gt;, refundInfoEntity);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;接收訊息&#34;&gt;接收訊息&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;必須先在啟動類 &lt;code&gt;@EnableRabbit&lt;/code&gt;，接著在要收訊息的方法或類上註解&lt;code&gt;@RabbitListener(queues={&amp;quot;hello-queue&amp;quot;})&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意監聽的是一個queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當有註解了接收的方法或類，只要服務一啟動就會連上消息中心，開始嘗試接收&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最原始的接收，收到的是Message類&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.springframework.amqp.core.Message&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用getBosy方法拿出流化的物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitListener&lt;/span&gt;(queues = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-queue&amp;#34;&lt;/span&gt;})
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;receiveMsg&lt;/span&gt;(Message message) {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;[] body = message.&lt;span style=&#34;color:#658b00&#34;&gt;getBody&lt;/span&gt;();
    MessageProperties messageProperties = message.&lt;span style=&#34;color:#658b00&#34;&gt;getMessageProperties&lt;/span&gt;();
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(body);
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;訊息頭=&amp;#34;&lt;/span&gt; + messageProperties);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可以把body取出來，然後從頭的資訊中找&lt;code&gt;__TypeId__&lt;/code&gt;確定類，再自己JSON.parse回去成為一個物件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220127195128933.png&#34; alt=&#34;image-20220127195128933&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但其實在方法的入參聲明類就可以直接取到反射包好的物件了&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitListener&lt;/span&gt;(queues = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-queue&amp;#34;&lt;/span&gt;})
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;receiveMsg&lt;/span&gt;(RefundInfoEntity content,
                Channel channel) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(content);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RabbitListener&lt;/code&gt;可以用在類或方法，還有一個&lt;code&gt;@RabbitHandler&lt;/code&gt;只能用在方法上，可以細分處理不同的訊息&lt;/li&gt;
&lt;li&gt;例如一個queue中有多種訊息，A類去方法1，B類去方法2&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitHandler&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;方法1&lt;/span&gt;(A類 a){...}

&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitHandler&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;方法2&lt;/span&gt;(B類 b){...}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;訊息確認&#34;&gt;訊息確認&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;保證消息不丟失，可以使用事務包住整條傳遞序列，但性能下降250倍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;1598625968345.png&#34; alt=&#34;1598625968345&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用分段確認機制就不會那麼嚴重損失性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第一段pb&#34;&gt;第一段P&amp;gt;B&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;publisher confirmCallback: 告訴你訊息有送進訊息中心&lt;/li&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 開啓發送確認，確定有送到Broker
spring.rabbitmq.publisher-confirm-type=correlated
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;可以自訂RabbitTemplate中的confirm方法&lt;/li&gt;
&lt;li&gt;MyRabbitConfig.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
RabbitTemplate rabbitTemplate;

&lt;span style=&#34;color:#707a7c&#34;&gt;@PostConstruct&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// RabbitTemplate物件創建之後執行此方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;initRabbitTemplate&lt;/span&gt;() {
    rabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;setConfirmCallback&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;ConfirmCallback&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;         * 訊息有送到訊息中心就執行此方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;         * @param correlationData 消息的唯一關聯數據，可以視為消息id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;         * @param b 是否送達
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;         * @param s 失敗原因
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;         */&lt;/span&gt;
        &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;confirm&lt;/span&gt;(CorrelationData correlationData, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; b, String s) {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;訊息&amp;#34;&lt;/span&gt;+correlationData+&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;已送達中心&amp;#34;&lt;/span&gt;);

        }
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第二段eq&#34;&gt;第二段E&amp;gt;Q&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;publisher returnCallback: 告訴你訊息在交換機要去隊列時出事了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;application.properties&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 開啓發送確認，確定經過交換機抵達Queue
spring.rabbitmq.publisher-returns=true
# 只要抵達Queue，用異步模式優先回調return confirm
spring.rabbitmq.template.mandatory=true
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;MyRabbitConfig.java
&lt;ul&gt;
&lt;li&gt;注意這是如果沒進隊列時，調用的方法&lt;/li&gt;
&lt;li&gt;前面P&amp;gt;B是送進中心的已讀，這邊是E&amp;gt;Q出事的警報&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;rabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;setReturnCallback&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RabbitTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;ReturnCallback&lt;/span&gt;() {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;returnedMessage&lt;/span&gt;(Message message, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i, String s, String s1, String s2) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果沒有到queue，要返回這些訊息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第三段-消費端&#34;&gt;第三段 消費端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;消費端確認機制: 消費者收到消息，給伺服器發送確認，伺服器刪除該消息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;consumer ack: 讓Broker知道哪些消息被消費者正確消費了（如果沒有則重新投遞）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;預設是auto，客户端只要接收到消息就會自動確認，服務端就移除這個消息&lt;/li&gt;
&lt;li&gt;會造成問題，比如某模組一接到消息，還在處理就當機了，結果就造成丟失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開啟手動確認，設定application.properties&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 使用手動確認模式，關閉自動確認，防止消息丟失
spring.rabbitmq.listener.simple.acknowledge-mode=manual
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;處理一個完才確認一個，沒處理完保持在未簽收(Unacked)狀態，若當機則會使消息重新進入ready狀態，不會丟失&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220127205156239.png&#34; alt=&#34;image-20220127205156239&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;簽收&#34;&gt;簽收&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;channel.basicAck(deliveryTag, false)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@RabbitListener&lt;/span&gt;(queues = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello-queue&amp;#34;&lt;/span&gt;})
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;receiveMsg&lt;/span&gt;(Message message,
                RefundInfoEntity content,
                Channel channel) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(content);
    &lt;span style=&#34;color:#228b22&#34;&gt;// deliveryTag在channel內按順序自增
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; deliveryTag = message.&lt;span style=&#34;color:#658b00&#34;&gt;getMessageProperties&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getDeliveryTag&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 手動簽收，後面的false = 非批量模式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicAck&lt;/span&gt;(deliveryTag, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;簽收，單據流水號=&amp;#34;&lt;/span&gt; + deliveryTag);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (IOException e) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 簽收失敗，例如網路異常
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;拒收&#34;&gt;拒收&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 拒收，參數是: 流水號, 批次, 重新入隊列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicNack&lt;/span&gt;(deliveryTag, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 這樣會丟棄
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#228b22&#34;&gt;// 重新入隊列=true的話，訊息會重新回到隊列
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicNack&lt;/span&gt;(deliveryTag, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;span style=&#34;color:#228b22&#34;&gt;// 等同於
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;channel.&lt;span style=&#34;color:#658b00&#34;&gt;basicReject&lt;/span&gt;(deliveryTag, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;最終方案&#34;&gt;最終方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;確認機制 + 本地事務表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;發送消息的時候生成消息ID，然後在回調方法修改數據庫中消息的狀態&lt;/li&gt;
&lt;li&gt;定時掃描數據庫消息的狀態，沒有成功的重新投遞一次&lt;/li&gt;
&lt;li&gt;消費消息時使用手動簽收機制(不使用自動簽收)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220204-gulimall-18-rabbitmq/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>cookie&amp;redis實現訪客購物車</title>
        <link>https://yoziming.github.io/post/220203-gulimall-17-offline-cart/</link>
        <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220203-gulimall-17-offline-cart/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220203-gulimall-17-offline-cart/ -&lt;h1 id=&#34;購物車需求分析&#34;&gt;購物車需求分析&lt;/h1&gt;
&lt;h2 id=&#34;訪客購物車&#34;&gt;訪客購物車&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;沒登入也能放地購物車，是我才不搞那麼多，沒登入就讓用戶登一下不就好了，唉當練習吧&lt;/p&gt;
&lt;p&gt;意外的是這個項目是仿京東，結果京東現在也不提供這種功能了，一律先登入再說&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以把資料暫存在客戶端，例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;localstorage&lt;/li&gt;
&lt;li&gt;cookie&lt;/li&gt;
&lt;li&gt;WebSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但何種商品被放到購物車本身是一個有價值的資訊，所以選擇放到伺服端的redis&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用户購物車&#34;&gt;用户購物車&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一樣採用redis，優勢在於
&lt;ul&gt;
&lt;li&gt;極高的讀寫併發性能&lt;/li&gt;
&lt;li&gt;好組織數據結構&lt;/li&gt;
&lt;li&gt;redis也有持久化策略，AOF&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;登入後會將離線購物車合併&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;操作分析&#34;&gt;操作分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;增（添加商品到購物車）&lt;/li&gt;
&lt;li&gt;刪（刪除某個商品）&lt;/li&gt;
&lt;li&gt;改（修改商品數量）&lt;/li&gt;
&lt;li&gt;查（查詢購物車中的商品）
&lt;ul&gt;
&lt;li&gt;商品是否被選中，下次進來還是選中狀態&lt;/li&gt;
&lt;li&gt;用户可以使用購物車多件商品一起結算下單&lt;/li&gt;
&lt;li&gt;在購物車中展示商品優惠信息&lt;/li&gt;
&lt;li&gt;提示購物車商品價格變化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料庫設計&#34;&gt;資料庫設計&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Redis數據結構用Hash，造一個雙層Map來存&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Map&amp;lt;String, Map&amp;lt;String, String&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;第一個key是用户id，value是購物車信息&lt;/li&gt;
&lt;li&gt;第二個key是skuId，value是購物項數據&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vo設計&#34;&gt;Vo設計&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;類似之前做的書城項目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CartVo是完整的一台車，這邊有CartItemVo構成的List、總件數、總價&lt;/li&gt;
&lt;li&gt;CartItemVo略等同於Sku，就是車中的某項商品，加上件數與價格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220126011315913.png&#34; alt=&#34;image-20220126011315913&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在CartVo.java 將計算總價等等方法封裝起來&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; BigDecimal &lt;span style=&#34;color:#008b45&#34;&gt;getTotalAmount&lt;/span&gt;() {
    BigDecimal amount = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; BigDecimal(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 計算購物項總價
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!CollectionUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(items)) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (CartItemVo cartItem : items) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;getCheck&lt;/span&gt;()) {
                amount = amount.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;getTotalPrice&lt;/span&gt;());
            }
        }
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 計算優惠的價格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; amount.&lt;span style=&#34;color:#658b00&#34;&gt;subtract&lt;/span&gt;(getReduce());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;實作&#34;&gt;實作&lt;/h1&gt;
&lt;h2 id=&#34;攔截器&#34;&gt;攔截器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;當用戶想用購物車，必須判斷是否已登入，若無登入，創造一個臨時用戶cookie:user-key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;造一個WebMvcConfigurer配置類註冊攔截器，MallWebConfig.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MallWebConfig&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; WebMvcConfigurer {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addInterceptors&lt;/span&gt;(InterceptorRegistry registry) {
        registry.&lt;span style=&#34;color:#658b00&#34;&gt;addInterceptor&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; CartInterceptor())&lt;span style=&#34;color:#228b22&#34;&gt;// 註冊攔截器
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                .&lt;span style=&#34;color:#658b00&#34;&gt;addPathPatterns&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/**&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用ThreadLocal來儲存用戶的登入狀態UserInfoTo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220126143902191.png&#34; alt=&#34;image-20220126143902191&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ThreadLocal在同一個線程內都能存取，之前學過&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://yoziming.github.io/post/220110-agg-javaweb-10/#threadlocal&#34;&gt;https://yoziming.github.io/post/220110-agg-javaweb-10/#threadlocal&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CartInterceptor.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 在執行目標方法之前，判斷用戶的登入狀態.並封裝傳遞給controller目標請求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CartInterceptor&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerInterceptor {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ThreadLocal&amp;lt;UserInfoTo&amp;gt; toThreadLocal = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ThreadLocal&amp;lt;&amp;gt;();

    &lt;span style=&#34;color:#228b22&#34;&gt;/***
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 攔截所有請求給ThreadLocal封裝UserInfoTo物件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 1、從session中獲取MemberResponseVo != null，登入狀態，為UserInfoTo設置Id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 2、從request中獲取cookie，找到user-key的value，
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 目標方法執行之前：在ThreadLocal中存入用戶信息【同一個線程共享數據】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 從session中獲取數據【使用session需要cookie中的GULISESSION 值】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;preHandle&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
        UserInfoTo userInfoTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; UserInfoTo();
        HttpSession session = request.&lt;span style=&#34;color:#658b00&#34;&gt;getSession&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲得當前登入用戶的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        MemberResponseVo memberResponseVo = (MemberResponseVo) session.&lt;span style=&#34;color:#658b00&#34;&gt;getAttribute&lt;/span&gt;(AuthServerConstant.&lt;span style=&#34;color:#658b00&#34;&gt;LOGIN_USER&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (memberResponseVo != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 用戶登入了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;setUserId&lt;/span&gt;(memberResponseVo.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
        }
        Cookie[] cookies = request.&lt;span style=&#34;color:#658b00&#34;&gt;getCookies&lt;/span&gt;();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (cookies != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; cookies.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; &amp;gt; 0) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (Cookie cookie : cookies) {
                &lt;span style=&#34;color:#228b22&#34;&gt;// user-key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                String name = cookie.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;();
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (name.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;TEMP_USER_COOKIE_NAME&lt;/span&gt;)) {
                    userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;setUserKey&lt;/span&gt;(cookie.&lt;span style=&#34;color:#658b00&#34;&gt;getValue&lt;/span&gt;());
                    &lt;span style=&#34;color:#228b22&#34;&gt;// 標識客戶端已經存儲了 user-key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;setTempUser&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
                }
            }
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果沒有臨時用戶一定分配一個臨時用戶UUID
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserKey&lt;/span&gt;())) {
            String uuid = UUID.&lt;span style=&#34;color:#658b00&#34;&gt;randomUUID&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;();
            userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;setUserKey&lt;/span&gt;(uuid);
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 目標方法執行之前
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        toThreadLocal.&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(userInfoTo);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 業務執行之後，讓瀏覽器保存臨時用戶user-key的Cookie
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;postHandle&lt;/span&gt;(HttpServletRequest request, HttpServletResponse response, Object handler,
                           ModelAndView modelAndView) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前用戶的值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        UserInfoTo userInfoTo = toThreadLocal.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 1、判斷是否登入；2、判斷是否創建user-token的cookie
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (userInfoTo != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;isTempUser&lt;/span&gt;()) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 創建一個cookie
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            Cookie cookie = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Cookie(CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;TEMP_USER_COOKIE_NAME&lt;/span&gt;, userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserKey&lt;/span&gt;());
            cookie.&lt;span style=&#34;color:#658b00&#34;&gt;setDomain&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mall.com&amp;#34;&lt;/span&gt;);
            cookie.&lt;span style=&#34;color:#658b00&#34;&gt;setMaxAge&lt;/span&gt;(CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;TEMP_USER_COOKIE_TIMEOUT&lt;/span&gt;);
            response.&lt;span style=&#34;color:#658b00&#34;&gt;addCookie&lt;/span&gt;(cookie);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;攔截器與過濾器&#34;&gt;攔截器與過濾器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;參考 &lt;a href=&#34;https://iter01.com/527287.html&#34;&gt;https://iter01.com/527287.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;執行順序: 過濾前-攔截前-action執行-攔截後-過濾後&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220126144548868.png&#34; alt=&#34;image-20220126144548868&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;總的來說攔截器更好用一點&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看整車&#34;&gt;查看整車&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CartController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 去購物車頁面的請求【未登入狀態也可以查看】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 瀏覽器有一個cookie:user-key 標識用戶的身份，一個月過期
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 如果第一次使用jd的購物車功能，都會給一個臨時的用戶身份:
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 瀏覽器以後保存，每次訪問都會帶上這個cookie；
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 登入：session有用戶的身份
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 沒登入：按照cookie裏面帶來user-key來做
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 第一次，如果沒有臨時用戶，自動創建一個臨時用戶
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/cart.html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;cartListPage&lt;/span&gt;(Model model) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
    CartVo cartVo = cartService.&lt;span style=&#34;color:#658b00&#34;&gt;getCart&lt;/span&gt;();
    model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cart&amp;#34;&lt;/span&gt;, cartVo);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cartList&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;CartServiceImpl.java
&lt;ul&gt;
&lt;li&gt;如果登入了，要把臨時車上的合併過來並清空臨時車&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 跳轉cartList頁面
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 封裝購物車類【所有商品，所有商品的價格】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 【整合登入狀態與未登入狀態】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; CartVo &lt;span style=&#34;color:#008b45&#34;&gt;getCart&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
    CartVo cartVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; CartVo();
    UserInfoTo userInfoTo = CartInterceptor.&lt;span style=&#34;color:#658b00&#34;&gt;toThreadLocal&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(userInfoTo);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserId&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#228b22&#34;&gt;//  1）、登入後購物車的key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String cartKey = CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;CART_PREFIX&lt;/span&gt; + userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserId&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;//  2）、臨時購物車的key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String temptCartKey = CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;CART_PREFIX&lt;/span&gt; + userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserKey&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果臨時購物車的數據還未進行合併
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;CartItemVo&amp;gt; tempCartItems = getCartItems(temptCartKey);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (tempCartItems != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 臨時購物車有數據需要進行合併操作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (CartItemVo item : tempCartItems) {
                addToCart(item.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;(), item.&lt;span style=&#34;color:#658b00&#34;&gt;getCount&lt;/span&gt;());
            }
            &lt;span style=&#34;color:#228b22&#34;&gt;// 清除臨時購物車的數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            clearCartInfo(temptCartKey);
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取登入後的購物車數據【包含合併過來的臨時購物車的數據和登入後購物車的數據】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;CartItemVo&amp;gt; cartItems = getCartItems(cartKey);
        cartVo.&lt;span style=&#34;color:#658b00&#34;&gt;setItems&lt;/span&gt;(cartItems);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 沒登入
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String cartKey = CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;CART_PREFIX&lt;/span&gt; + userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserKey&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取臨時購物車裡面的所有購物項
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;CartItemVo&amp;gt; cartItems = getCartItems(cartKey);
        cartVo.&lt;span style=&#34;color:#658b00&#34;&gt;setItems&lt;/span&gt;(cartItems);
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cartVo;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 獲取購物車裡面的數據【根據key，包裝成List&amp;lt;CartItemVo&amp;gt;】，合併臨時車用
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * key=【mall:cart:2 或 mall:cart:lkajkashjghj2989dsj】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param cartKey
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;CartItemVo&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCartItems&lt;/span&gt;(String cartKey) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取購物車裡面的所有商品
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BoundHashOperations&amp;lt;String, Object, Object&amp;gt; operations = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;boundHashOps&lt;/span&gt;(cartKey);
    List&amp;lt;Object&amp;gt; values = operations.&lt;span style=&#34;color:#658b00&#34;&gt;values&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (values != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; values.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        List&amp;lt;CartItemVo&amp;gt; cartItemVoStream = values.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;((obj) -&amp;gt; {
            String str = (String) obj;
            CartItemVo cartItem = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(str, CartItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cartItem;
        }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cartItemVoStream;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;添加至車&#34;&gt;添加至車&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CartController.java
&lt;ul&gt;
&lt;li&gt;添加完用redirect跳轉，防止重複提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 添加商品到購物車
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * attributes.addFlashAttribute():將數據放在session中，可以在頁面中取出，但是只能取一次
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * attributes.addAttribute():將數據放在url後面
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/addCartItem&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;addCartItem&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuId&amp;#34;&lt;/span&gt;) Long skuId,
                          &lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;) Integer num,
                          RedirectAttributes attributes) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
    cartService.&lt;span style=&#34;color:#658b00&#34;&gt;addToCart&lt;/span&gt;(skuId, num);
    attributes.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuId&amp;#34;&lt;/span&gt;, skuId);&lt;span style=&#34;color:#228b22&#34;&gt;// 給重定向請求用的【參數會拼接在下面請求之後】【轉發會在請求域中】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://cart.mall.com/addToCartSuccessPage.html&amp;#34;&lt;/span&gt;;
}

&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 跳轉到添加購物車成功頁面【防止重複提交】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/addToCartSuccessPage.html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;addToCartSuccessPage&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuId&amp;#34;&lt;/span&gt;) Long skuId,
                                   Model model) {
    &lt;span style=&#34;color:#228b22&#34;&gt;//重定向到成功頁面。再次查詢購物車數據即可
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CartItemVo cartItemVo = cartService.&lt;span style=&#34;color:#658b00&#34;&gt;getCartItem&lt;/span&gt;(skuId);
    model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cartItem&amp;#34;&lt;/span&gt;, cartItemVo);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;CartServiceImpl.java
&lt;ul&gt;
&lt;li&gt;首先要在redis中開闢屬於某用戶的購物車物件，用&lt;code&gt;redisTemplate.boundHashOps()&lt;/code&gt;方法，Key就是UserID，為了在redis中整理方便加上前綴&lt;code&gt;mall:cart:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;前面在攔截器中把userInfo存到toThreadLocal了，如果未登入則會創造臨時的，所以從裡面必定能取出一個userId&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 獲取到我們要操作的購物車
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 簡化代碼：
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 1、判斷是否登入，拼接key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 2、數據是hash類型，所以每次要調用兩次key【直接綁定外層key】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 第一層key：mall:cart:2
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 第二層key：skuId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; BoundHashOperations&amp;lt;String, Object, Object&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCartOps&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 先得到當前用戶信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    UserInfoTo userInfoTo = CartInterceptor.&lt;span style=&#34;color:#658b00&#34;&gt;toThreadLocal&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
    String cartKey = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserId&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// mall:cart:UserID
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        cartKey = CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;CART_PREFIX&lt;/span&gt; + userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserId&lt;/span&gt;();
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        cartKey = CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;CART_PREFIX&lt;/span&gt; + userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserKey&lt;/span&gt;();
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 綁定指定的key操作Redis
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BoundHashOperations&amp;lt;String, Object, Object&amp;gt; operations = redisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;boundHashOps&lt;/span&gt;(cartKey);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; operations;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;接著實作添加，先判斷商品項是否已經在車中
&lt;ul&gt;
&lt;li&gt;若無，就新增，需要遠程調用獲取skuInfo與skuAttrValues，這邊複製一份使用之前設定好的線程池config來用，異步獲取資訊後一樣用allOf與get等待全部任務完成，轉JSON後存到redis&lt;/li&gt;
&lt;li&gt;若已經存在，只需要修改數量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 添加商品到購物車
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param skuId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param num
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; CartItemVo &lt;span style=&#34;color:#008b45&#34;&gt;addToCart&lt;/span&gt;(Long skuId, Integer num) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 拿到要操作的購物車信息【cartOps就相當於綁定了當前用戶購物車數據的hash】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BoundHashOperations&amp;lt;String, Object, Object&amp;gt; cartOps = getCartOps();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 判斷Redis是否有該商品的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    String productRedisValue = (String) cartOps.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(skuId.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// 如果沒有就添加數據【遠程查詢skuId】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(productRedisValue)) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 添加新的商品到購物車(redis)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        CartItemVo cartItem = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; CartItemVo();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 開啟第一個異步任務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        CompletableFuture&amp;lt;Void&amp;gt; getSkuInfoFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程查詢當前要添加商品的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            R productSkuInfo = productFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getInfo&lt;/span&gt;(skuId);
            SkuInfoVo skuInfo = productSkuInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuInfo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;SkuInfoVo&amp;gt;() {
            });
            &lt;span style=&#34;color:#228b22&#34;&gt;// 數據賦值操作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;());
            cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;setTitle&lt;/span&gt;(skuInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuTitle&lt;/span&gt;());
            cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;setImage&lt;/span&gt;(skuInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuDefaultImg&lt;/span&gt;());
            cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;setPrice&lt;/span&gt;(skuInfo.&lt;span style=&#34;color:#658b00&#34;&gt;getPrice&lt;/span&gt;());
            cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;setCount&lt;/span&gt;(num);
            cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;setCheck&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
        }, executor);

        &lt;span style=&#34;color:#228b22&#34;&gt;// 開啟第二個異步任務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        CompletableFuture&amp;lt;Void&amp;gt; getSkuAttrValuesFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程查詢skuAttrValues組合信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            List&amp;lt;String&amp;gt; skuSaleAttrValues = productFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuSaleAttrValues&lt;/span&gt;(skuId);
            cartItem.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuAttrValues&lt;/span&gt;(skuSaleAttrValues);
        }, executor);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 等待所有的異步任務全部完成
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;allOf&lt;/span&gt;(getSkuInfoFuture, getSkuAttrValuesFuture).&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 序列化並存到redis
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String cartItemJson = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(cartItem);
        cartOps.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(skuId.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(), cartItemJson);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cartItem;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 購物車中已有此商品，修改數量即可
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        CartItemVo cartItemVo = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(productRedisValue, CartItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);
        cartItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;setCount&lt;/span&gt;(cartItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;getCount&lt;/span&gt;() + num);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 修改redis的數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String cartItemJson = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(cartItemVo);
        cartOps.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(skuId.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(), cartItemJson);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cartItemVo;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sql-concat的用法&#34;&gt;SQL CONCAT的用法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在第二個遠程調用skuSaleAttrValues，想要返回 &lt;code&gt;機身：黑色&lt;/code&gt;這樣的資料格式，用&lt;code&gt;CONCAT(A, &amp;quot;：&amp;quot;, B)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;select id=&amp;quot;getSkuSaleAttrValuesAsStringList&amp;quot; resultType=&amp;quot;java.lang.String&amp;quot;&amp;gt;
    SELECT CONCAT(attr_name, &amp;quot;：&amp;quot;, attr_value)
    FROM pms_sku_sale_attr_value
    WHERE sku_id = #{skuId}
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;引導至添加成功頁面&#34;&gt;引導至添加成功頁面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;雖然我覺得這個功能怪怪的，誰添加成功還專門跑去看那一個品項，不應該是加了就顯示一個收過去車子的小動畫，讓用戶繼續逛同類項目嗎?&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 重定向頁面獲取當前購物車中sku商品信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param skuId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; CartItemVo &lt;span style=&#34;color:#008b45&#34;&gt;getCartItem&lt;/span&gt;(Long skuId) {
    &lt;span style=&#34;color:#228b22&#34;&gt;//拿到要操作的購物車信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BoundHashOperations&amp;lt;String, Object, Object&amp;gt; cartOps = getCartOps();
    String redisValue = (String) cartOps.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(skuId.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;());
    CartItemVo cartItemVo = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(redisValue, CartItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cartItemVo;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;刪改&#34;&gt;刪、改&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;沒什麼特殊的，就不多貼&lt;/li&gt;
&lt;li&gt;比較特別的是&amp;quot;選中&amp;quot;這個功能，也做成了一個欄位跟修改的方法去保存到redis，即使關掉重開上次選中那些都會保留&lt;/li&gt;
&lt;li&gt;可是他每次更改選/不選中都發一次請求給後端然後redirect，感覺好囧，應該用ajax，這個真的太扯了&lt;/li&gt;
&lt;li&gt;立意良好，但感覺有點多餘了，應該給前端做就好，也沒人care關掉下次再進到購物車選中的狀態是否跟上次一樣吧&lt;/li&gt;
&lt;li&gt;下單的時候也是要根據選中那些去計算價格與生成訂單&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下單前計算價格&#34;&gt;下單前計算價格&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;這個倒是能理解，下訂單之前，以前添加到車裡的項目，價格說不定有變動，不過只查價格是不是又不夠周全，如果商品下架了呢?
&lt;ul&gt;
&lt;li&gt;還是說他在訂單模組才會確認這點，不管了就先這樣吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CartServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 遠程調用：訂單服務調用【更新最新價格】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 獲取當前用戶購物車所有選中的商品項check=true【從redis中取】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;CartItemVo&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getUserCartItems&lt;/span&gt;() {
    List&amp;lt;CartItemVo&amp;gt; cartItemVoList = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;//獲取當前用戶登入的信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    UserInfoTo userInfoTo = CartInterceptor.&lt;span style=&#34;color:#658b00&#34;&gt;toThreadLocal&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;//如果用戶未登入直接返回null
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserId&lt;/span&gt;() == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;//獲取購物車項
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String cartKey = CartConstant.&lt;span style=&#34;color:#658b00&#34;&gt;CART_PREFIX&lt;/span&gt; + userInfoTo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserId&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;//獲取所有的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;CartItemVo&amp;gt; cartItems = getCartItems(cartKey);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (cartItems == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; CartExceptionHandler();
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;//篩選出選中的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        cartItemVoList = cartItems.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;()
                .&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(items -&amp;gt; items.&lt;span style=&#34;color:#658b00&#34;&gt;getCheck&lt;/span&gt;())
                .&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(item -&amp;gt; {
                    &lt;span style=&#34;color:#228b22&#34;&gt;//更新為最新的價格（查詢數據庫）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#228b22&#34;&gt;// redis中的價格不是最新的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    BigDecimal price = productFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getPrice&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;());
                    item.&lt;span style=&#34;color:#658b00&#34;&gt;setPrice&lt;/span&gt;(price);
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; item;
                })
                .&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cartItemVoList;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;h3 id=&#34;攔截器-1&#34;&gt;攔截器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以用來修飾request&lt;/li&gt;
&lt;li&gt;到WebMvcConfigurer註冊，重寫preHandle或postHandle方法&lt;/li&gt;
&lt;li&gt;用ThreadLocal作為同一線程的置物櫃
&lt;ul&gt;
&lt;li&gt;這玩意我記得用完要清，但是找不到好地方清，只能期待他的弱引用過自己清理吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在redis添加hash&#34;&gt;在redis添加hash&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;redisTemplate.boundHashOps(key)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;異步任務&#34;&gt;異步任務&lt;/h2&gt;
&lt;h3 id=&#34;先自訂線程池&#34;&gt;先自訂線程池&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 線程池相關
mall.thread.core-size=20
mall.thread.max-size=200
mall.thread.keep-alive-time=10
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;ThreadPoolConfigProperties.java
&lt;ul&gt;
&lt;li&gt;這是造了一個類，應該也可以用&lt;code&gt;@values&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;後來才懂原來那些框架底層就是這樣寫的封裝好了，所以在properties寫參數就能完成配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@ConfigurationProperties&lt;/span&gt;(prefix = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mall.thread&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ThreadPoolConfigProperties&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer coreSize;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer maxSize;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer keepAliveTime;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;CustomThreadConfig.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CustomThreadConfig&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ThreadPoolExecutor &lt;span style=&#34;color:#008b45&#34;&gt;threadPoolExecutor&lt;/span&gt;(ThreadPoolConfigProperties properties) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ThreadPoolExecutor(
                properties.&lt;span style=&#34;color:#658b00&#34;&gt;getCoreSize&lt;/span&gt;(),
                properties.&lt;span style=&#34;color:#658b00&#34;&gt;getMaxSize&lt;/span&gt;(),
                properties.&lt;span style=&#34;color:#658b00&#34;&gt;getKeepAliveTime&lt;/span&gt;(),
                TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;,
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; LinkedBlockingDeque&amp;lt;&amp;gt;(10000),
                Executors.&lt;span style=&#34;color:#658b00&#34;&gt;defaultThreadFactory&lt;/span&gt;(),
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ThreadPoolExecutor.&lt;span style=&#34;color:#658b00&#34;&gt;AbortPolicy&lt;/span&gt;()
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注入 ThreadPoolExecutor&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; ThreadPoolExecutor executor;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;編排CompletableFuture
&lt;ul&gt;
&lt;li&gt;記得傳入自定義的executor，否則會造預設的線程池
&lt;ul&gt;
&lt;li&gt;用同一個鍋煮菜，而非一直用新鍋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;CompletableFuture&amp;lt;Void&amp;gt; xxxFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {
&lt;span style=&#34;color:#228b22&#34;&gt;// 任務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}, executor);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;阻塞等待收集結果&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;allOf&lt;/span&gt;(xxxFuture, oooFuture...).&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/220203-gulimall-17-offline-cart/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>LeetCode Easy: 26-28</title>
        <link>https://yoziming.github.io/post/220203-leetcode-easy-26-28/</link>
        <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220203-leetcode-easy-26-28/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220203-leetcode-easy-26-28/ -&lt;h3 id=&#34;26-remove-duplicates-from-sorted-array&#34;&gt;\26. Remove Duplicates from Sorted Array&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;數組去重&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;想對數組做啥，都可以考慮雙指針&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;removeDuplicates&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] nums) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 起始第一個指針從頭開始
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; p = 0;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 第二個指針，從p+1開始
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; q = 1; q &amp;lt; nums.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; ) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果不一樣
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (nums[p] != nums[q]) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 就把q往前搬，讓不一樣的數緊貼著第一個指針
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            nums[p + 1] = nums[q];
            &lt;span style=&#34;color:#228b22&#34;&gt;// 並且讓第一個指針P移往下一步
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            p++;
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果數字一樣表示要被忽略，q往後移，直到找到不同的數字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        q++;
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; p + 1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;27-remove-element&#34;&gt;\27. Remove Element&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指針的妙用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;removeElement&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] nums, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; val) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 指針
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; idx = 0;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 遍歷數組
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num : nums) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果不是要移除的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (num != val) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 就保持原樣
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            nums[idx] = num;
            &lt;span style=&#34;color:#228b22&#34;&gt;// 並且指針往後移
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            idx++;
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 如果是要移除的，那就不會保留，且被之後的數據覆蓋
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; idx;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;28-implement-strstr&#34;&gt;\28. Implement strStr()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;匹配字符串，原諒我只會基礎暴力法&lt;/li&gt;
&lt;li&gt;KMP 解法更優，然而我看半天，當下以為懂了隔一會再看又矇了，實在看暈了&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;strStr&lt;/span&gt;(String haystack, String needle) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 先取出長度，m是長串，n是要匹配的針
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m = haystack.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;(), n = needle.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 轉換成Array
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] s = haystack.&lt;span style=&#34;color:#658b00&#34;&gt;toCharArray&lt;/span&gt;(), p = needle.&lt;span style=&#34;color:#658b00&#34;&gt;toCharArray&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 開始第一層遍歷，動的是haystack的索引，最終要返回的是索引i位於何處
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 因為假設haystack包含needle，所以i的長度不會大於m - n
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt;= m - n; i++) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 第二層遍歷，在haystack的i位置上，嘗試匹配是否後續的字=needle
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// a是i是haystack的索引，b是needle的頭
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a = i, b = 0;
        &lt;span style=&#34;color:#228b22&#34;&gt;// 從haystack的i位置上，與needle的頭開始一位一位比較，相同就往後再比
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (b &amp;lt; n &amp;amp;&amp;amp; s[a] == p[b]) {
            a++;
            b++;
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 當b的長度等於needle的長度n，表示完全匹配，haystack確實包含了needle
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 就返回索引i所在的位置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (b == n) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; i;
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 全部跑完發現沒包含，返回-1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; -1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/220203-leetcode-easy-26-28/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>個人對區塊鏈的白話理解</title>
        <link>https://yoziming.github.io/post/220203-bitcoin/</link>
        <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220203-bitcoin/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220203-bitcoin/ -&lt;h1 id=&#34;區塊鏈&#34;&gt;區塊鏈&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然沒投資，並且我也覺得區塊鏈、NFT等等基本都是炒作，但背後的原理還是非常有意思的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;區塊鏈就像有一本公有記帳本，比如今天一筆交易是&amp;quot;小明給小花5元&amp;quot;，既然是公有記帳本，這筆交易由誰來記帳?&lt;/li&gt;
&lt;li&gt;透過網路與程式，把&amp;quot;小明給小花5元&amp;quot;這個內容經密碼學轉換成數學題，這個數學題就是單純的猜數字，很簡單但是很耗時，解題只能靠窮舉&lt;/li&gt;
&lt;li&gt;誰窮舉猜到了答案就可以記帳，並且有手續費獎勵，這個過程稱為工作量證明 PoW&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;鏈&#34;&gt;鏈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;而區塊鏈叫做&amp;quot;鏈&amp;quot;就是因為一環套一環，帳本要基於上次的結果往下寫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如下一筆交易發生時，題目就是&amp;quot;小明給小花5元+小強給張三10元&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;再出數學題&amp;hellip;再窮舉&amp;hellip;再下一筆交易&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可靠性&#34;&gt;可靠性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;為何不用擔心公有記帳本被人竄改?
&lt;ul&gt;
&lt;li&gt;因為除非你能與世界為敵，瞬間算出一條更長的鏈(所謂的51%攻擊)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;比如現在已經來到第三筆交易&amp;quot;小明給小花5元+小強給張三10元+小華&amp;hellip;&amp;quot;&lt;/li&gt;
&lt;li&gt;你想竄改紀錄成&amp;quot;小明給小花500元+小強給張三..&amp;ldquo;得超越全世界的算力，瞬間算完三題難題並拼接成鍊，因為世界上隨時都有人在算題，所以基本上不可能。故一旦帳本紀錄確定，就沒人能更改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巧妙之處&#34;&gt;巧妙之處&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;區塊鏈巧妙在於人們為了自己利益(挖礦的手續費)就會天然保證帳簿的可靠性，形成一個自洽的循環&lt;/li&gt;
&lt;li&gt;當自利對整體最有利，有人想作惡還必須能敵過全世界的算力，一個成功去中心化記帳方式就誕生了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;浪費資源&#34;&gt;浪費資源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;挖礦本身的窮舉確實純粹是為算而算，但又不能說他無意義，因為正是計算很浪費資源才能保證帳簿不被竄改&lt;/li&gt;
&lt;li&gt;如果說開燈照明=浪費電，在現代可能沒人同意，但回到電燈剛被發明的年代，那時候的人可能覺得我燒蠟燭才多少錢，開電燈多浪費阿、又貴又不討好&lt;/li&gt;
&lt;li&gt;所以終究是環境決定一切，比特幣的發明者中本聰始終為謎，可能也有這顧忌吧，只能希望哪天核融合發電商用成功了，在我有生之年不知是否能見到&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;權益證明機制pos&#34;&gt;權益證明機制PoS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;工作量證明的缺點很明顯，交易慢(比特幣一秒只能紀錄7筆交易，ETH30筆)、浪費電&lt;/li&gt;
&lt;li&gt;所以就有人提出PoS，簡單說就是決定誰來寫帳本的時候，咱們不要算題目了，換成隨機指派，但是每個人可以決定要質押多少錢，當要驗證(提交鏈)的時候，質押多的人就越有機會被選中&lt;/li&gt;
&lt;li&gt;類似股權機制，持股越多分紅越多，並且系統中權益越多的人就是越在乎安全性的人(我在這邊投了錢，我當然要保證系統安全可靠)，以此達成自洽&lt;/li&gt;
&lt;li&gt;但是這玩意又跟去中心化的理念相違背，PoS鼓勵的是囤錢，並且如果產生了超級財閥，那他又可能為所欲為。所以目前主流都是POW與POS混用&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220203-bitcoin/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>註冊、登入與Spring Session</title>
        <link>https://yoziming.github.io/post/220202-gulimall-16-spring-session/</link>
        <pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220202-gulimall-16-spring-session/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220202-gulimall-16-spring-session/ -&lt;h2 id=&#34;webmvcconfigurer&#34;&gt;WebMvcConfigurer&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;參考 &lt;a href=&#34;https://blog.csdn.net/pan_junbiao/article/details/120039885&#34;&gt;https://blog.csdn.net/pan_junbiao/article/details/120039885&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;複習SpringMVC&lt;/li&gt;
&lt;li&gt;WebMvcConfigurer是一個接口，用JavaBean的方式代替web.xml，常用於:&lt;/li&gt;
&lt;li&gt;攔截器，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addInterceptors&lt;/span&gt;(InterceptorRegistry registry) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;addInterceptors&lt;/span&gt;(registry);
    registry.&lt;span style=&#34;color:#658b00&#34;&gt;addInterceptor&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TestInterceptor()).&lt;span style=&#34;color:#658b00&#34;&gt;addPathPatterns&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/**&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;excludePathPatterns&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/emp/toLogin&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/emp/login&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/js/**&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/css/**&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/images/**&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;跨域設定，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 跨域
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addCorsMappings&lt;/span&gt;(CorsRegistry registry) {
    registry.&lt;span style=&#34;color:#658b00&#34;&gt;addMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/**&amp;#34;&lt;/span&gt;)
            .&lt;span style=&#34;color:#658b00&#34;&gt;allowedOrigins&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#228b22&#34;&gt;//浏览器允许所有的域访问 / 注意 * 不能满足带有cookie的访问,Origin 必须是全匹配
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            .&lt;span style=&#34;color:#658b00&#34;&gt;allowCredentials&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;)   &lt;span style=&#34;color:#228b22&#34;&gt;// 允许带cookie访问
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            .&lt;span style=&#34;color:#658b00&#34;&gt;allowedMethods&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;POST&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;PUT&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;DELETE&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;OPTIONS&amp;#34;&lt;/span&gt;)
            .&lt;span style=&#34;color:#658b00&#34;&gt;allowedHeaders&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;token&amp;#34;&lt;/span&gt;)
            .&lt;span style=&#34;color:#658b00&#34;&gt;maxAge&lt;/span&gt;(3600);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;更多關於跨域，參考 &lt;a href=&#34;https://segmentfault.com/a/1190000019485883&#34;&gt;https://segmentfault.com/a/1190000019485883&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;映射html頁面
&lt;ul&gt;
&lt;li&gt;前後綴一樣由thymeleaf加上&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MallWebConfig&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; WebMvcConfigurer {

    &lt;span style=&#34;color:#228b22&#34;&gt;// View映射，省下造controller一個一個設定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addViewControllers&lt;/span&gt;(ViewControllerRegistry registry) {
        registry.&lt;span style=&#34;color:#658b00&#34;&gt;addViewController&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;setViewName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;);
        registry.&lt;span style=&#34;color:#658b00&#34;&gt;addViewController&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/login.html&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;setViewName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;);
        registry.&lt;span style=&#34;color:#658b00&#34;&gt;addViewController&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/reg.html&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;setViewName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;reg&amp;#34;&lt;/span&gt;);
    }
}
/* 相當於
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/login.html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;loginPage&lt;/span&gt;() {
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;註冊&#34;&gt;註冊&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LoginController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 註冊
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/register&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@Valid&lt;/span&gt; UserRegisterVo vos, BindingResult result, RedirectAttributes attributes) {

    &lt;span style=&#34;color:#228b22&#34;&gt;// 如果有錯誤回到註冊頁面
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (result.&lt;span style=&#34;color:#658b00&#34;&gt;hasErrors&lt;/span&gt;()) {
        Map&amp;lt;String, String&amp;gt; errors =
                result.&lt;span style=&#34;color:#658b00&#34;&gt;getFieldErrors&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toMap&lt;/span&gt;(FieldError::getField,
                        FieldError::getDefaultMessage));
        attributes.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;, errors);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://auth.mall.com/reg.html&amp;#34;&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 前端驗證被繞過，若傳空值讓他返回
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (vos.&lt;span style=&#34;color:#658b00&#34;&gt;getPassword&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;() || vos.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;() || vos.&lt;span style=&#34;color:#658b00&#34;&gt;getUserName&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;() || vos.&lt;span style=&#34;color:#658b00&#34;&gt;getPhone&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;()) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://auth.mall.com/reg.html&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取驗證碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    String code = vos.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;//驗證碼通過，真正註冊，調用遠程服務進行註冊會員
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (code.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1234&amp;#34;&lt;/span&gt;)) {
        R register = memberFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;register&lt;/span&gt;(vos);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (register.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
            &lt;span style=&#34;color:#228b22&#34;&gt;//成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://auth.mall.com/login.html&amp;#34;&lt;/span&gt;;
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;//失敗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            Map&amp;lt;String, String&amp;gt; errors = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
            errors.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;, register.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;String&amp;gt;() {
            }));
            attributes.&lt;span style=&#34;color:#658b00&#34;&gt;addFlashAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;, errors);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://auth.mall.com/reg.html&amp;#34;&lt;/span&gt;;
        }
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;//驗證碼錯誤
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Map&amp;lt;String, String&amp;gt; errors = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
        errors.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;驗證碼錯誤&amp;#34;&lt;/span&gt;);
        attributes.&lt;span style=&#34;color:#658b00&#34;&gt;addFlashAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;, errors);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://auth.mall.com/reg.html&amp;#34;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;知識點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用拋出異常的方式告知是否重複註冊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用MD5加鹽加密，好處:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快速、抗改(雪崩效應，只要有原始資料任何變化算出的MD5都會天差地別)、不可逆&lt;/li&gt;
&lt;li&gt;但是可以暴力破解，所以要加鹽&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MemberController.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/register&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; MemberUserRegisterVo vo) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        memberService.&lt;span style=&#34;color:#658b00&#34;&gt;register&lt;/span&gt;(vo);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (PhoneException e) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;PHONE_EXIST_EXCEPTION&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;(), BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;PHONE_EXIST_EXCEPTION&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (UsernameException e) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;USER_EXIST_EXCEPTION&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;(), BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;USER_EXIST_EXCEPTION&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;MemberServiceImpl.java
&lt;ul&gt;
&lt;li&gt;Spring的BCryptPasswordEncoder已經自動加鹽了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;register&lt;/span&gt;(MemberUserRegisterVo vo) {
    MemberEntity memberEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; MemberEntity();

    &lt;span style=&#34;color:#228b22&#34;&gt;// 設置等級為普通會員
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    MemberLevelEntity levelEntity = memberLevelDao.&lt;span style=&#34;color:#658b00&#34;&gt;getDefaultLevel&lt;/span&gt;();
    memberEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setLevelId&lt;/span&gt;(levelEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 檢查用戶名和手機號是否唯一，可能拋出異常
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    checkPhoneUnique(vo.&lt;span style=&#34;color:#658b00&#34;&gt;getPhone&lt;/span&gt;());
    checkUserNameUnique(vo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserName&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 設定帳號密碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    memberEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setNickname&lt;/span&gt;(vo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserName&lt;/span&gt;());
    memberEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setUsername&lt;/span&gt;(vo.&lt;span style=&#34;color:#658b00&#34;&gt;getUserName&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// 密碼進行MD5加密
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BCryptPasswordEncoder bCryptPasswordEncoder = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; BCryptPasswordEncoder();
    String encode = bCryptPasswordEncoder.&lt;span style=&#34;color:#658b00&#34;&gt;encode&lt;/span&gt;(vo.&lt;span style=&#34;color:#658b00&#34;&gt;getPassword&lt;/span&gt;());
    memberEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setPassword&lt;/span&gt;(encode);
    memberEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setMobile&lt;/span&gt;(vo.&lt;span style=&#34;color:#658b00&#34;&gt;getPhone&lt;/span&gt;());
    memberEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setGender&lt;/span&gt;(0);
    &lt;span style=&#34;color:#228b22&#34;&gt;// memberEntity.setCreateTime(new Date());
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 保存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    baseMapper.&lt;span style=&#34;color:#658b00&#34;&gt;insert&lt;/span&gt;(memberEntity);
}

&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;checkPhoneUnique&lt;/span&gt;(String phone) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; PhoneException {
    Long phoneCount = baseMapper.&lt;span style=&#34;color:#658b00&#34;&gt;selectCount&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;MemberEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mobile&amp;#34;&lt;/span&gt;, phone));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (phoneCount &amp;gt; 0) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PhoneException();
    }
}

&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;checkUserNameUnique&lt;/span&gt;(String userName) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; UsernameException {
    Long usernameCount = baseMapper.&lt;span style=&#34;color:#658b00&#34;&gt;selectCount&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;MemberEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;, userName));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (usernameCount &amp;gt; 0) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; UsernameException();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;知識點&#34;&gt;知識點&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;addAttribute與addFlashAttribute的區別&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;attr.addAttribute(“param”, value);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;這種方式就相當於重定向之後，在url後面拼接參數，這樣在重定向之後的頁面或者控制器再去獲取url後面的參數就可以了，但這個方式因為是在url後面添加參數的方式，所以暴露了參數，有風險&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;attr.addFlashAttribute(“param”, value);
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;這種方式也能達到重新向帶參，而且能隱藏參數，其原理就是放到session中，session在跳到頁面后馬上移除對象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;登入&#34;&gt;登入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LoginController.java
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AuthServerConstant.LOGIN_USER&lt;/code&gt;其實就是&lt;code&gt;&amp;quot;loginUser&amp;quot;&lt;/code&gt;，放成常數是為了避免使用魔法值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/login&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;login&lt;/span&gt;(UserLoginVo vo, RedirectAttributes attributes, HttpSession session) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程調用member的驗證帳號密碼服務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    R login = memberFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;login&lt;/span&gt;(vo);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (login.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
        MemberResponseVo data = login.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;MemberResponseVo&amp;gt;() {
        });
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用戶&amp;#34;&lt;/span&gt;+data.&lt;span style=&#34;color:#658b00&#34;&gt;getUsername&lt;/span&gt;()+&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;登入成功&amp;#34;&lt;/span&gt;);
        session.&lt;span style=&#34;color:#658b00&#34;&gt;setAttribute&lt;/span&gt;(AuthServerConstant.&lt;span style=&#34;color:#658b00&#34;&gt;LOGIN_USER&lt;/span&gt;, data);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://mall.com&amp;#34;&lt;/span&gt;;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        Map&amp;lt;String, String&amp;gt; errors = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&amp;lt;&amp;gt;();
        errors.&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;, login.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;String&amp;gt;() {
        }));
        attributes.&lt;span style=&#34;color:#658b00&#34;&gt;addFlashAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;errors&amp;#34;&lt;/span&gt;, errors);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://auth.mall.com/login.html&amp;#34;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;驗證帳號密碼很簡單就不貼了，接著主要處理Session的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第三方登入&#34;&gt;第三方登入&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第三方登入我自己用google試了都不成功，主要卡在不知道request網址到底該怎寫&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220125222347983.png&#34; alt=&#34;image-20220125222347983&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜教學比較多是用spring security，照教學能造一個新的Login頁面，結合起來搞半天都失敗，唉先跳過吧&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;session共享問題&#34;&gt;session共享問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;子網域、分散式服務用傳統session應付不來，有幾種可選方案&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;session複製，每一個session都複製到所有webserver中，Tomcat修改配置文件就能辦到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺點: 佔用多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端存儲，保存在cookie中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺點: 安全隱患(篡改)、網絡流量、cookie長度限制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hash一致性，例如拿客户端IP來計算，算出來一樣就負載均衡分到指定的伺服器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺點: 水平擴展會引發session失效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;統一存儲，例如把session存到redis&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺點: redis還是比記憶體慢，多增溝通消耗，但問題不大&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;spring-session&#34;&gt;Spring Session&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;官方 &lt;a href=&#34;https://docs.spring.io/spring-session/reference/samples.html&#34;&gt;https://docs.spring.io/spring-session/reference/samples.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Spring都幫你想好了，引包吧&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-session-data-redis&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.6.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;application.properties
&lt;ul&gt;
&lt;li&gt;還可以設定過期時間等等，預設是30m&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.session.store-type=redis
# 當然還要設定redis所在
spring.redis.host=localhost
spring.redis.port=6379
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;到啟動類註解&lt;code&gt;@EnableRedisHttpSession&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220125201947928.png&#34; alt=&#34;image-20220125201947928&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;將要存進session的bean序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220125204057093.png&#34; alt=&#34;image-20220125204057093&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;編碼問題&#34;&gt;編碼問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;這樣一來存是能存了，然而是編成二進制類型，顯然不好用，應該改成JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220125205905259.png&#34; alt=&#34;image-20220125205905259&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;作用域問題&#34;&gt;作用域問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;預設的session是根據當前域(在auth伺服器)存的，當回到主網域或轉到其他子網域就用不了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220125210029897.png&#34; alt=&#34;image-20220125210029897&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;一起解決&#34;&gt;一起解決&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MallSessionConfig.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MallSessionConfig&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; CookieSerializer &lt;span style=&#34;color:#008b45&#34;&gt;cookieSerializer&lt;/span&gt;() {
        DefaultCookieSerializer cookieSerializer = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; DefaultCookieSerializer();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 放大作用域
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        cookieSerializer.&lt;span style=&#34;color:#658b00&#34;&gt;setDomainName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mall.com&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 自訂名稱
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        cookieSerializer.&lt;span style=&#34;color:#658b00&#34;&gt;setCookieName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;MALLSESSION&amp;#34;&lt;/span&gt;);
        cookieSerializer.&lt;span style=&#34;color:#658b00&#34;&gt;setCookieMaxAge&lt;/span&gt;(60 * 60 * 24 * 7);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; cookieSerializer;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 整成JSON格式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; RedisSerializer&amp;lt;Object&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;springSessionDefaultRedisSerializer&lt;/span&gt;() {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; GenericJackson2JsonRedisSerializer();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;成功!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220125211255800.png&#34; alt=&#34;image-20220125211255800&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;核心原理&#34;&gt;核心原理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;裝飾者模式，就像鋼鐵人穿上&lt;em&gt;反浩克裝甲&lt;/em&gt;，有額外增強但仍然保留原始功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@EnablcRedisHttpSession&lt;/code&gt;導入RedisHttpSessionConfiguration配置類，在這個配置類中有&lt;code&gt;SessionRepositoryFilter&lt;/code&gt;過濾器&lt;/li&gt;
&lt;li&gt;原始的http請求request和響應response經過濾器放行後，變成了&lt;code&gt;SessionRepositoryRequestWrapper&lt;/code&gt;與&lt;code&gt;SessionRepositoryResponseWrapper&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;之後我們操作session其實就是操作這些Wrapper，而Wrapper把原始的session方法都重寫(加料)了，例如RedisHttpSession的&lt;code&gt;.getSession()&lt;/code&gt;方法就是去redis找東西&lt;/li&gt;
&lt;li&gt;Spring Session已經考慮過各種缺點，只要瀏覽器不關，會給redis中的session自動延期&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完善登入功能&#34;&gt;完善登入功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;添加Spring Session依賴、做好設定，現在Product模組、Search模組也都可以調用共享的session了&lt;/li&gt;
&lt;li&gt;修改前端頁面，依據session判斷是否已登入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220125222040181.png&#34; alt=&#34;image-20220125222040181&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LoginController.java
&lt;ul&gt;
&lt;li&gt;已經登入的人還想登入就讓它跳轉&lt;/li&gt;
&lt;li&gt;要把之前設定的View映射關掉&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 判斷session是否有loginUser，沒有就跳轉登錄頁面，有就跳轉首頁
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/login.html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;loginPage&lt;/span&gt;(HttpSession session) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 從session先取出來用戶的信息，判斷用戶是否已經登錄過了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Object attribute = session.&lt;span style=&#34;color:#658b00&#34;&gt;getAttribute&lt;/span&gt;(AuthServerConstant.&lt;span style=&#34;color:#658b00&#34;&gt;LOGIN_USER&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 如果用戶沒登錄那就跳轉到登錄頁面
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (attribute == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;;
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://mall.com&amp;#34;&lt;/span&gt;;
    }
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 登出
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/loguot.html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;logout&lt;/span&gt;(HttpServletRequest request) {
    request.&lt;span style=&#34;color:#658b00&#34;&gt;getSession&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;removeAttribute&lt;/span&gt;(AuthServerConstant.&lt;span style=&#34;color:#658b00&#34;&gt;LOGIN_USER&lt;/span&gt;);
    request.&lt;span style=&#34;color:#658b00&#34;&gt;getSession&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;invalidate&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redirect:http://mall.com&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;單點登入&#34;&gt;單點登入&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Single Sign On，簡稱SSO&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用在不同域名，原理是有一個中央認證系統專門處理登入&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220125224243309.png&#34; alt=&#34;image-20220125224243309&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有很多實現方式，比較常見是用&lt;strong&gt;Token&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;暫時應該是用不上，就只先了解一下，有需要再回來補&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1np4y1C7Yf?p=233&#34;&gt;https://www.bilibili.com/video/BV1np4y1C7Yf?p=233&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220202-gulimall-16-spring-session/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>商品詳情</title>
        <link>https://yoziming.github.io/post/220201-gulimall-15/</link>
        <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220201-gulimall-15/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220201-gulimall-15/ -&lt;h1 id=&#34;商品詳情&#34;&gt;商品詳情&lt;/h1&gt;
&lt;h2 id=&#34;view&#34;&gt;View&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;商品詳情也是子網域，設定網關:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124141440031.png&#34; alt=&#34;image-20220124141440031&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx就不用改了，因為之前設的規則是&lt;code&gt;*.mall.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;導入頁面&lt;code&gt;item.html&lt;/code&gt;與靜態資源&lt;/li&gt;
&lt;li&gt;前端頁面一樣用thymeleaf渲染&lt;/li&gt;
&lt;li&gt;thymeleaf中動態網址的寫法，用&lt;code&gt;|&lt;/code&gt;包住網址前後，中間&lt;code&gt;${參數}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;a th:href=&amp;quot;|http://item.mall.com/${product.skuId}.html|&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;格式化數字，前面3是整數位，2是小數位&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;span th:text=&amp;quot;${#numbers.formatDecimal(item.info.price,3,2)}&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;sku組合切換，太偏前端了，有用到再來學&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1np4y1C7Yf?p=208&amp;amp;spm_id_from=pageDriver&#34;&gt;https://www.bilibili.com/video/BV1np4y1C7Yf?p=208&amp;amp;spm_id_from=pageDriver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;另外我發現thymeleaf是不是有病，一般的HTML註解&lt;code&gt;&amp;lt;!--&lt;/code&gt;他竟然還是會解析，不顯示但是會解析&lt;/li&gt;
&lt;li&gt;可以參考 &lt;a href=&#34;https://blog.csdn.net/sun_jy2011/article/details/40299821&#34;&gt;https://blog.csdn.net/sun_jy2011/article/details/40299821&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;比如一塊代碼有問想先註解掉，整塊用快捷鍵選起來&lt;code&gt;ctrl+/&lt;/code&gt;先註解掉還不行，他就是硬要解析，如果有BUG就會一直讀出BUG，真的是有病耶，這樣設計是腦子被門夾到嗎。一定要用下面這樣的格式包起來的才不會解析&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!--/*--&amp;gt;
xxxx
OOOO
&amp;lt;!--*/--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;controller&#34;&gt;Controller&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ItemController.java
&lt;ul&gt;
&lt;li&gt;我才搞懂&lt;code&gt;return &amp;quot;item&amp;quot;&lt;/code&gt;是因為前面說的thymeleaf自動會加上前後綴，就相當於&lt;code&gt;templates/item.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/{skuId}.html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;skuItem&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuId&amp;#34;&lt;/span&gt;) Long skuId, Model model) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException,
        InterruptedException {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;準備查詢&amp;#34;&lt;/span&gt; + skuId + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;詳情&amp;#34;&lt;/span&gt;);


    SkuItemVo vos = skuInfoService.&lt;span style=&#34;color:#658b00&#34;&gt;item&lt;/span&gt;(skuId);
    model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;, vos);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;model&#34;&gt;Model&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vo設計&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124160531396.png&#34; alt=&#34;image-20220124160531396&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
* 1、sku基本信息【標題、副標題、價格】pms_sku_info
* 2、sku圖片信息【每個sku_id對應了多個圖片】pms_sku_images
* 3、spu下所有sku銷售屬性組合【不只是當前sku_id所指定的商品】
* 4、spu商品介紹【】
* 5、spu規格與包裝【參數信息】
*/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;SkuItemVo.java
&lt;ul&gt;
&lt;li&gt;其他太詳細的就不貼了，我感覺如果封裝的子類只有它用，那就乾脆造內部類可能會整齊一點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//1、sku基本信息的獲取  pms_sku_info
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; SkuInfoEntity info;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; hasStock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;

&lt;span style=&#34;color:#228b22&#34;&gt;//2、sku的圖片信息    pms_sku_images
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;SkuImagesEntity&amp;gt; images;

&lt;span style=&#34;color:#228b22&#34;&gt;//3、獲取spu的銷售屬性組合【一個vo是一個銷售屬性】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;SkuItemSaleAttrVo&amp;gt; saleAttr;

&lt;span style=&#34;color:#228b22&#34;&gt;//4、獲取spu的介紹
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; SpuInfoDescEntity desc;

&lt;span style=&#34;color:#228b22&#34;&gt;//5、獲取spu的規格參數信息【以組為單位】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;SpuItemAttrGroupVo&amp;gt; groupAttrs;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;異步獲取商品詳情&#34;&gt;異步獲取商品詳情&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用自訂的線程池，由於3 4 5要等1完成，所以最後順序調了下&lt;/li&gt;
&lt;li&gt;SkuInfoServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 商品詳情
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; SkuItemVo &lt;span style=&#34;color:#008b45&#34;&gt;item&lt;/span&gt;(Long skuId) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {

    SkuItemVo skuItemVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuItemVo();

    CompletableFuture&amp;lt;SkuInfoEntity&amp;gt; infoFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(() -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 1、sku基本信息的獲取  pms_sku_info
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        SkuInfoEntity info = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(skuId);
        skuItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;setInfo&lt;/span&gt;(info);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; info;
    }, executor);

    CompletableFuture&amp;lt;Void&amp;gt; saleAttrFuture = infoFuture.&lt;span style=&#34;color:#658b00&#34;&gt;thenAcceptAsync&lt;/span&gt;((res) -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 3、獲取spu的銷售屬性組合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;SkuItemSaleAttrVo&amp;gt; saleAttrVos = skuSaleAttrValueService.&lt;span style=&#34;color:#658b00&#34;&gt;getSaleAttrBySpuId&lt;/span&gt;(res.&lt;span style=&#34;color:#658b00&#34;&gt;getSpuId&lt;/span&gt;());
        skuItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;setSaleAttr&lt;/span&gt;(saleAttrVos);
    }, executor);

    CompletableFuture&amp;lt;Void&amp;gt; descFuture = infoFuture.&lt;span style=&#34;color:#658b00&#34;&gt;thenAcceptAsync&lt;/span&gt;((res) -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 4、獲取spu的介紹    pms_spu_info_desc
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        SpuInfoDescEntity spuInfoDescEntity = spuInfoDescService.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(res.&lt;span style=&#34;color:#658b00&#34;&gt;getSpuId&lt;/span&gt;());
        skuItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;setDesc&lt;/span&gt;(spuInfoDescEntity);
    }, executor);

    CompletableFuture&amp;lt;Void&amp;gt; baseAttrFuture = infoFuture.&lt;span style=&#34;color:#658b00&#34;&gt;thenAcceptAsync&lt;/span&gt;((res) -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 5、獲取spu的規格參數信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;SpuItemAttrGroupVo&amp;gt; attrGroupVos = attrGroupService.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrGroupWithAttrsBySpuId&lt;/span&gt;(res.&lt;span style=&#34;color:#658b00&#34;&gt;getSpuId&lt;/span&gt;(),
                res.&lt;span style=&#34;color:#658b00&#34;&gt;getCatalogId&lt;/span&gt;());
        skuItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;setGroupAttrs&lt;/span&gt;(attrGroupVos);
    }, executor);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 2、sku的圖片信息    pms_sku_images
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CompletableFuture&amp;lt;Void&amp;gt; imageFuture = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;runAsync&lt;/span&gt;(() -&amp;gt; {
        List&amp;lt;SkuImagesEntity&amp;gt; imagesEntities = skuImagesService.&lt;span style=&#34;color:#658b00&#34;&gt;getImagesBySkuId&lt;/span&gt;(skuId);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (ArrayUtil.&lt;span style=&#34;color:#658b00&#34;&gt;isNotEmpty&lt;/span&gt;(imagesEntities)) {
            skuItemVo.&lt;span style=&#34;color:#658b00&#34;&gt;setImages&lt;/span&gt;(imagesEntities);
        }
    }, executor);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 等到所有任務都完成
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;allOf&lt;/span&gt;(saleAttrFuture, descFuture, baseAttrFuture, imageFuture).&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; skuItemVo;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;獲取規格參數&#34;&gt;獲取規格參數&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這塊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124160151336.png&#34; alt=&#34;image-20220124160151336&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;獲取spu的規格參數信息，這邊用到JOIN多表&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JOIN複習 &lt;a href=&#34;https://yoziming.github.io/post/211218-agg-mysql-03/&#34;&gt;https://yoziming.github.io/post/211218-agg-mysql-03/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124152657076.png&#34; alt=&#34;image-20220124152657076&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因為要獲取商品規格，從已知的商品SpuID與CatalogId找出Attr
&lt;ul&gt;
&lt;li&gt;&lt;del&gt;其實我覺得這個表的設計真的很蛋疼，不能單純一點嗎，誰整天關注那些規格，不都是看圖片挑外觀中意的，有被燒到才點進詳情頁面看規格合不合用&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AttrGroupDao.xml
&lt;ul&gt;
&lt;li&gt;dao.xml想用內部類可以用$連接，&lt;code&gt;外部類$內部類&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--只要有嵌套屬性就要封裝自定義結果集--&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;resultMap&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;spuAttrGroup&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yozi.mall.product.vo.SpuItemAttrGroupVo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;result&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;groupName&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;column=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_group_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;collection&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;ofType=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yozi.mall.product.vo.Attr&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;result&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrId&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;column=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;result&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrName&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;column=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;result&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrValue&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;column=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/collection&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/resultMap&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;select&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;getAttrGroupWithAttrsBySpuId&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;resultMap=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;spuAttrGroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    SELECT pav.spu_id,
           pag.attr_group_id,
           pag.attr_group_name,
           pav.attr_id,
           pav.attr_name,
           pav.attr_value
    FROM pms_product_attr_value pav
             LEFT JOIN pms_attr_attrgroup_relation pagr ON pav.attr_id = pagr.attr_id
             LEFT JOIN pms_attr_group pag ON pagr.attr_group_id = pag.attr_group_id
    WHERE pav.spu_id = #{spuId}
      AND pag.catalog_id = #{catalogId}
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;獲取銷售屬性&#34;&gt;獲取銷售屬性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這塊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124155846160.png&#34; alt=&#34;image-20220124155846160&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;從spuId找到對應的skuId，把它們的銷售屬性跟可選值用group_concat連到一起(例如:機殼顏色=[黑,白])&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124155657676.png&#34; alt=&#34;image-20220124155657676&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SkuSaleAttrValueDao.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124155355539.png&#34; alt=&#34;image-20220124155355539&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;resultMap&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuItemSaleAttrVo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;type=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yozi.mall.product.vo.SkuItemSaleAttrVo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;result&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;column=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrId&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;result&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;column=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;collection&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrValues&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;ofType=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yozi.mall.product.vo.AttrValueWithSkuIdVo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;result&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;column=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_value&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrValue&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;result&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;column=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sku_ids&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;property=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuIds&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/result&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/collection&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/resultMap&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;select&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;getSaleAttrBySpuId&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;resultMap=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuItemSaleAttrVo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    SELECT ssav.attr_id                        attr_id,
           ssav.attr_name                      attr_name,
           ssav.attr_value,
           group_concat(DISTINCT info.sku_id ) sku_ids
    FROM pms_sku_info info
             LEFT JOIN pms_sku_sale_attr_value ssav ON ssav.sku_id = info.sku_id
    WHERE info.spu_id = #{spuId}
    GROUP BY ssav.attr_id,
             ssav.attr_name,
             ssav.attr_value
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;動態注入設定&#34;&gt;動態注入設定&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;以前都用@Value讀取application.properties，現在多學一招&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先造一個自訂的xxxProperties.java
&lt;ul&gt;
&lt;li&gt;這邊的屬性就是預定要在application.properties填的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124164731386.png&#34; alt=&#34;image-20220124164731386&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;@ConfigurationProperties&lt;/code&gt;註解，spring會要你導這個包:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt;
    &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;重啟一下服務，然後就可以到application.properties設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124165039019.png&#34; alt=&#34;image-20220124165039019&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讓自訂的config類載入設定
&lt;ul&gt;
&lt;li&gt;因為前面ThreadPoolConfigProperties用&lt;code&gt;@Component&lt;/code&gt;讓容器注入了，跟@EnableConfigurationProperties二選一即可&lt;/li&gt;
&lt;li&gt;別忘了讓ThreadPoolExecutor &lt;code&gt;@Bean&lt;/code&gt;才能在服務中引用並注入&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124165347738.png&#34; alt=&#34;image-20220124165347738&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CustomThreadConfig&lt;/span&gt; {
    
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; ThreadPoolExecutor &lt;span style=&#34;color:#008b45&#34;&gt;threadPoolExecutor&lt;/span&gt;(ThreadPoolConfigProperties properties) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ThreadPoolExecutor(
                properties.&lt;span style=&#34;color:#658b00&#34;&gt;getCoreSize&lt;/span&gt;(),
                properties.&lt;span style=&#34;color:#658b00&#34;&gt;getMaxSize&lt;/span&gt;(),
                properties.&lt;span style=&#34;color:#658b00&#34;&gt;getKeepAliveTime&lt;/span&gt;(),
                TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;,
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; LinkedBlockingDeque&amp;lt;&amp;gt;(10000),
                Executors.&lt;span style=&#34;color:#658b00&#34;&gt;defaultThreadFactory&lt;/span&gt;(),
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ThreadPoolExecutor.&lt;span style=&#34;color:#658b00&#34;&gt;AbortPolicy&lt;/span&gt;()
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/220201-gulimall-15/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>線程池與CompletableFuture異步編排</title>
        <link>https://yoziming.github.io/post/220131-gulimall-14-thread/</link>
        <pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220131-gulimall-14-thread/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220131-gulimall-14-thread/ -&lt;h1 id=&#34;多線程&#34;&gt;多線程&lt;/h1&gt;
&lt;h2 id=&#34;初始化線程的4種方式&#34;&gt;初始化線程的4種方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;繼承 Thread&lt;/li&gt;
&lt;li&gt;實現 Runnable接口&lt;/li&gt;
&lt;li&gt;實現 Callable接口 + FutureTask（可以拿到返回結果，可以處理異常）&lt;/li&gt;
&lt;li&gt;線程池&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;複習 &lt;a href=&#34;https://yoziming.github.io/post/211204-agg-ja-19/&#34;&gt;https://yoziming.github.io/post/211204-agg-ja-19/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;區別&#34;&gt;區別&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1、2不能得到返回值。3可以獲取返回值&lt;/li&gt;
&lt;li&gt;1、2、3都不能控制資源&lt;/li&gt;
&lt;li&gt;4可以控制資源，性能穩定，不會一下子所有線程一起運行&lt;/li&gt;
&lt;li&gt;實際開發中，只用線程池，因為高併發狀態開啓了n個線程，會直接耗盡資源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;線程池的優勢&#34;&gt;線程池的優勢&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;降低資源的消耗: 省得在那創了又刪，刪了又創&lt;/li&gt;
&lt;li&gt;提高響應速度: 已經在池子那等了，來活就幹&lt;/li&gt;
&lt;li&gt;提高線程的可管理性: 例如系統中可以創建兩個線程池，核心線程池、非核心線程池，有需要時可以關閉非核心線程池釋放記憶體資源
&lt;ul&gt;
&lt;li&gt;就像公司分兩部門，壓力大就把非核心的部門關了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;手動創建線程池&#34;&gt;手動創建線程池&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124093616789.png&#34; alt=&#34;image-20220124093616789&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以&lt;code&gt;new ThreadPoolExecutor(參數)&lt;/code&gt;手動創建線程池，七大參數:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// ThreadPoolExecutor.java 原始碼
corePoolSize – the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set
maximumPoolSize – the maximum number of threads to allow in the pool
keepAliveTime – when the number of threads is greater than the core, this is the maximum time that excess idle threads will wait for new tasks before terminating.
unit – the time unit for the keepAliveTime argument
workQueue – the queue to use for holding tasks before they are executed. This queue will hold only the Runnable tasks submitted by the execute method.
threadFactory – the factory to use when the executor creates a new thread
handler – the handler to use when execution is blocked because the thread bounds and queue capacities are reached
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;corePoolSize: 元老級員工，即使摸魚也不會被解雇&lt;/li&gt;
&lt;li&gt;maximumPoolSize: 最大招募數量，用於控制資源&lt;/li&gt;
&lt;li&gt;keepAliveTime: 臨時員工摸魚多久就把他們解雇&lt;/li&gt;
&lt;li&gt;unit: 計算摸魚時間的單位&lt;/li&gt;
&lt;li&gt;workQueue: 阻塞隊列，任務太多暫時沒員工可分配了，新來的任務排隊的地方&lt;/li&gt;
&lt;li&gt;threadFactory: 創建執行緒的工廠，給員工命名的人資&lt;/li&gt;
&lt;li&gt;handler: 如果隊列滿了，執行指定的拒絕策略
&lt;ul&gt;
&lt;li&gt;RejectedExecutionHandler 有以下幾種&lt;/li&gt;
&lt;li&gt;預設是AbortPolicy，跟客戶說公司幹不過來請他找別家&lt;/li&gt;
&lt;li&gt;CallerRunsPolicy類似開小灶，硬幫你執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124090358219.png&#34; alt=&#34;image-20220124090358219&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;順序&#34;&gt;順序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;創建線程池，懶加載核心線程(任務來了就招募核心員工)&lt;/li&gt;
&lt;li&gt;核心線程滿放入阻塞隊列(員工不夠用，請任務先排隊，馬上招臨時工)&lt;/li&gt;
&lt;li&gt;創建線程，直到達到maximumPoolSize&lt;/li&gt;
&lt;li&gt;如果傳入了拒絕策略會執行，否則拋出異常&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;範例&#34;&gt;範例&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一個線程池 core = 7, max = 20, queue = 50 當100個併發進來&lt;/li&gt;
&lt;li&gt;7個任務立即被核心執行，50個進隊列，然後創建13個線程執行13個任務。剩下30個執行拒絕策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;線程池execute和submit區別&#34;&gt;線程池execute和submit區別&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;execute: 參數只能是Runnable，沒有返回值&lt;/li&gt;
&lt;li&gt;submit: 參數可以是Runnable、Callable，返回值是FutureTask&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四種線程池模板&#34;&gt;四種線程池模板&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220124093548225.png&#34; alt=&#34;image-20220124093548225&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CachedThreadPool: 核心線程數是0，如果空閒會回收所有線程。全員派遣公司，沒事幹就裁員&lt;/li&gt;
&lt;li&gt;FixedThreadPool: 核心線程數 = 最大線程數。佛心公司，永不拋棄員工，但占用就多、不靈活&lt;/li&gt;
&lt;li&gt;ScheduledThreadPool: 定時任務線程池，多久之後執行，可設定核心線程數、最大線程數是Integer.Max。限定營業時間的公司&lt;/li&gt;
&lt;li&gt;SingleThreadPool: 核心與最大都只有一個，後台從隊列中獲取任務。個人接案公司，一件一件幹&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;completablefuture-異步編排&#34;&gt;CompletableFuture 異步編排&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;就像為了做咖哩飯，白米在電鍋蒸，紅蘿蔔難熟提前丟去煮，我還能一邊切馬鈴薯。類似vue的Promise也是為了異步任務&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;因為要實現Runnable，所以幾乎都是用lambda表達式來縮寫，省得寫好幾行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指派任務&#34;&gt;指派任務&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;把紅蘿蔔丟去鍋裡煮&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;CompletableFuture提供了四個靜態方法來創建一個異步操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Completab1eFuture&amp;lt;Void&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;runAsync&lt;/span&gt;(Runnable runnable)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; completableFuturecVoid&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;runAsync&lt;/span&gt;(Runnable runnable&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;Executor executor)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;supplyAsync&lt;/span&gt;(Supplier&amp;lt;U&amp;gt;supplier)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuturecU&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;supplyAsync&lt;/span&gt;(Supplier&amp;lt;U&amp;gt; supplier&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;Executor executor)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可以傳入自定義線程池，否則使用預設線程池&lt;/li&gt;
&lt;li&gt;runXXX沒有返回結果，supplyXxx有返回結果
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;future.get()&lt;/code&gt;獲取結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ThreadTest&lt;/span&gt; {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ExecutorService executor = Executors.&lt;span style=&#34;color:#658b00&#34;&gt;newFixedThreadPool&lt;/span&gt;(10);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main start ....&amp;#34;&lt;/span&gt;);
        CompletableFuture&amp;lt;Integer&amp;gt; future = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(ThreadTest::asyncFunction, executor);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main end.... result: &amp;#34;&lt;/span&gt; + future.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;());
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;asyncFunction&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;執行任務 1+1&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1 + 1;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;接收任務返回值&#34;&gt;接收任務返回值&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;煮了紅蘿蔔之後要幹嘛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; completableFuture&amp;lt;T&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;whencomplete&lt;/span&gt;(BiConsumer&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; T, ? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; Throwable&amp;gt; action);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; completableFuture&amp;lt;T&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;whenCompleteAsync&lt;/span&gt;(BiConsumer&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; T, ? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; Throwable&amp;gt; action&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;Executor executor);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; completableFuture&amp;lt;T&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;exceptionally&lt;/span&gt;(Function&amp;lt;Throwable, ? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; T&amp;gt; fn);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;whenComplete可以處理正常結果和感知異常，exceptionally特別用於處理異常情況&lt;/li&gt;
&lt;li&gt;whenComplete和whenCompleteAsync的區別:
&lt;ul&gt;
&lt;li&gt;whenComplete: 是執行當前任務的線程執行繼續執行whenComplete的任務&lt;/li&gt;
&lt;li&gt;whenCompleteAsync: 是執行把 whenCompleteAsync這個任務繼續提交給線程池來進行執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法不以Async結尾，意味着Action使用相同的線程執行，而Async可能會使用其他線程執行（如果是使用相同的線程池，也可能會被同一個線程選中執行)
&lt;ul&gt;
&lt;li&gt;就是這個鍋煮完這批紅蘿蔔要不要換個鍋&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ThreadTest&lt;/span&gt; {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ExecutorService executor = Executors.&lt;span style=&#34;color:#658b00&#34;&gt;newFixedThreadPool&lt;/span&gt;(10);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main start ...&amp;#34;&lt;/span&gt;);
        CompletableFuture&amp;lt;String&amp;gt; future = CompletableFuture
                .&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(ThreadTest::asyncFunction, executor)
                .&lt;span style=&#34;color:#658b00&#34;&gt;whenComplete&lt;/span&gt;(ThreadTest::accept)
                .&lt;span style=&#34;color:#658b00&#34;&gt;exceptionally&lt;/span&gt;(ThreadTest::apply);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main end... 返回值：&amp;#34;&lt;/span&gt; + future.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;());
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 指派任務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;asyncFunction&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;線程池執行任務 煮紅蘿蔔&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 10 / 0; &lt;span style=&#34;color:#228b22&#34;&gt;// 讓異常發生
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;煮好了&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 指派任務完成後要幹的事
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;accept&lt;/span&gt;(String result, Throwable exception) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;獲取任務1的結果：&amp;#34;&lt;/span&gt; + result);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;獲取任務1的異常：&amp;#34;&lt;/span&gt; + exception);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 異常時要返回的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;apply&lt;/span&gt;(Throwable exception) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;紅蘿蔔異常&amp;#34;&lt;/span&gt; + exception);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;紅蘿蔔沒熟需要重煮&amp;#34;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;handle方法&#34;&gt;handle方法&lt;/h3&gt;
&lt;p&gt;whenComplete只能感知異常，他只能跟你說結果沒熟，但是不能對沒熟的紅蘿蔔怎樣，太弱了所以通常不用。通常是用handle&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ThreadTest&lt;/span&gt; {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ExecutorService executor = Executors.&lt;span style=&#34;color:#658b00&#34;&gt;newFixedThreadPool&lt;/span&gt;(10);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main start ...&amp;#34;&lt;/span&gt;);
        CompletableFuture&amp;lt;String&amp;gt; future = CompletableFuture
                .&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(ThreadTest::asyncFunction, executor)
                .&lt;span style=&#34;color:#658b00&#34;&gt;whenComplete&lt;/span&gt;(ThreadTest::accept)
                .&lt;span style=&#34;color:#658b00&#34;&gt;exceptionally&lt;/span&gt;(ThreadTest::apply)
                .&lt;span style=&#34;color:#658b00&#34;&gt;handle&lt;/span&gt;(ThreadTest::handle);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main end... 返回值：&amp;#34;&lt;/span&gt; + future.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;());
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 指派任務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;asyncFunction&lt;/span&gt;() {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;線程池執行任務 煮紅蘿蔔&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 10 / 0; &lt;span style=&#34;color:#228b22&#34;&gt;// 讓異常發生
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;煮好了&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 指派任務完成後要幹的事
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;accept&lt;/span&gt;(String result, Throwable exception) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;獲取任務1的結果：&amp;#34;&lt;/span&gt; + result);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;獲取任務1的異常：&amp;#34;&lt;/span&gt; + exception);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 異常時要返回的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;apply&lt;/span&gt;(Throwable exception) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;紅蘿蔔異常&amp;#34;&lt;/span&gt; + exception);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;紅蘿蔔沒熟需要重煮&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;handle&lt;/span&gt;(String result, Throwable exception) {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;獲取任務1的結果：&amp;#34;&lt;/span&gt; + result);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;獲取任務1的異常：&amp;#34;&lt;/span&gt; + exception);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;異常不會傳播，前面調用exceptionally方法處理了異常&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; result + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，並且基於任務1的結果，把鍋裡的東西撈出來&amp;#34;&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;串行化&#34;&gt;串行化&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;handle是用於處理a方法的結果，接著執行b方法要用串行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Completionstage&amp;lt;Void&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;thenRun&lt;/span&gt;(Runnable action);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; completionstage&amp;lt;Void&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;thenAccept&lt;/span&gt;(Consumer&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; T&amp;gt; action);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuturecU&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;thenApply&lt;/span&gt;(Function&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; T,? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; U&amp;gt; fn)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;thenRun：繼續執行，不接受上一個任務的返回結果&lt;/li&gt;
&lt;li&gt;thenAccept：繼續執行，接受上一個任務的返回結果&lt;/li&gt;
&lt;li&gt;thenApply：繼續執行，接受上一任務的返回結果，並且自己有返回值&lt;/li&gt;
&lt;li&gt;他們也都有Async版本，跟前面一樣就不多說&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main start ...&amp;#34;&lt;/span&gt;);
    CompletableFuture&amp;lt;String&amp;gt; future = CompletableFuture
            .&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(ThreadTest::asyncFunction, executor)
            .&lt;span style=&#34;color:#658b00&#34;&gt;whenComplete&lt;/span&gt;(ThreadTest::accept)
            .&lt;span style=&#34;color:#658b00&#34;&gt;exceptionally&lt;/span&gt;(ThreadTest::apply)
            .&lt;span style=&#34;color:#658b00&#34;&gt;handle&lt;/span&gt;(ThreadTest::handle)
            .&lt;span style=&#34;color:#658b00&#34;&gt;thenApply&lt;/span&gt;(ThreadTest::thenApply);
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main end... 返回值：&amp;#34;&lt;/span&gt; + future.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;());
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;thenApply&lt;/span&gt;(String result) {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務2啓動&amp;#34;&lt;/span&gt;);
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務2可以獲取任務1的結果：&amp;#34;&lt;/span&gt; + result);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;現在換煮馬鈴薯&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;彙整任務&#34;&gt;彙整任務&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;現在米飯、咖哩、紅蘿蔔、馬鈴薯都煮了，要來擺盤&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;兩個任務必須都完成&#34;&gt;兩個任務必須都完成&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; CompletableFuture&amp;lt;V&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;thenCombine&lt;/span&gt;(CompletionStage&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; U&amp;gt; other, BiFunction&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; T,? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; U,? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; V&amp;gt; fn);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;thenAcceptBoth&lt;/span&gt;(CompletionStage&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; U&amp;gt; other, BiConsumer&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; T, ? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt; U&amp;gt; action);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;runAfterBoth&lt;/span&gt;(CompletionStage&amp;lt;?&amp;gt; other, Runnable action);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;thenCombine: 獲取兩個future的返回結果，並返回當前任務的返回值&lt;/li&gt;
&lt;li&gt;thenAcceptBoth: 獲取兩個future任務的返回結果，然後處理任務，沒有返回值&lt;/li&gt;
&lt;li&gt;runAfterBoth: 不需要獲取future的結果，只需兩個future處理完任務後，處理該任務&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main start ...&amp;#34;&lt;/span&gt;);
    CompletableFuture&amp;lt;String&amp;gt; future1 = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(() -&amp;gt; {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務1 煮紅蘿蔔start..&amp;#34;&lt;/span&gt;);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務1 end..&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;紅蘿蔔煮好了&amp;#34;&lt;/span&gt;;
    });

    CompletableFuture&amp;lt;String&amp;gt; future2 = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(() -&amp;gt; {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務2 煮馬鈴薯start..&amp;#34;&lt;/span&gt;);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務2 end..&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;馬鈴薯煮好了&amp;#34;&lt;/span&gt;;
    });

    CompletableFuture&amp;lt;String&amp;gt; future3 = future1.&lt;span style=&#34;color:#658b00&#34;&gt;thenCombineAsync&lt;/span&gt;(future2, (result1, result2) -&amp;gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務3 組合前兩個任務的返回值返回: &amp;#34;&lt;/span&gt; + result1 + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;且&amp;#34;&lt;/span&gt; + result2;
    }, executor);
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main end... 返回值：&amp;#34;&lt;/span&gt; + future3.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二者中有一個完成&#34;&gt;二者中有一個完成&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;應該很少用到，了解就好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;applyToEither: 帶參有返回值，能獲取前面任務的結果(成功的那個)，自己有返回結果&lt;/li&gt;
&lt;li&gt;acceptEither: 帶參無返回值，能獲取前面任務的結果&lt;/li&gt;
&lt;li&gt;runAfterEither: 無參無返回值，不能獲取前面任務的結果，自己也沒有返回結果(要你何用)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;全完成或至少一個&#34;&gt;全完成或至少一個&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;都是CompletableFuture的靜態方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;allOf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;anyOf&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配合&lt;code&gt;.get()&lt;/code&gt;可以讓線程阻塞&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ThreadTest&lt;/span&gt; {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; ExecutorService executor = Executors.&lt;span style=&#34;color:#658b00&#34;&gt;newFixedThreadPool&lt;/span&gt;(10);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException, InterruptedException {
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main start ...&amp;#34;&lt;/span&gt;);
        CompletableFuture&amp;lt;String&amp;gt; future1 = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(() -&amp;gt; {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務1 煮紅蘿蔔start..&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                Thread.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(3000);
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
            }
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務1 end..&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;紅蘿蔔煮好了&amp;#34;&lt;/span&gt;;
        });

        CompletableFuture&amp;lt;String&amp;gt; future2 = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;supplyAsync&lt;/span&gt;(() -&amp;gt; {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務2 煮馬鈴薯start..&amp;#34;&lt;/span&gt;);
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務2 end..&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;馬鈴薯煮好了&amp;#34;&lt;/span&gt;;
        });

        CompletableFuture&amp;lt;String&amp;gt; future3 = future1.&lt;span style=&#34;color:#658b00&#34;&gt;thenCombineAsync&lt;/span&gt;(future2, (result1, result2) -&amp;gt; {
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務3 組合配菜，需要配菜都煮熟&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
                Thread.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(3000);
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
            }
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;任務3 end..&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;配菜完成&amp;#34;&lt;/span&gt;;
        }, executor);

        CompletableFuture&amp;lt;Void&amp;gt; all = CompletableFuture.&lt;span style=&#34;color:#658b00&#34;&gt;allOf&lt;/span&gt;(future1, future2, future3);
        all.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 使方法阻塞，不阻塞若有人超時，主線程會提前關閉
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(future1.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;() + future2.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;() + future3.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;());
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;main end...&amp;#34;&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;實際都用線程池，省資源、反應快、好控制&lt;/li&gt;
&lt;li&gt;線程池七參數:
&lt;ul&gt;
&lt;li&gt;core: 核心員工，創了就不滅&lt;/li&gt;
&lt;li&gt;max: 最大員工數量(含臨時工)&lt;/li&gt;
&lt;li&gt;factory: 工廠，人資&lt;/li&gt;
&lt;li&gt;aliveTime: 臨時工過期時間&lt;/li&gt;
&lt;li&gt;unit: 過期時間單位&lt;/li&gt;
&lt;li&gt;queue: 任務排隊處&lt;/li&gt;
&lt;li&gt;handler: 拒絕策略&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;併發進來，核心接活、去排隊、擴大池子臨時工接活直到max，超出的依照拒絕策略辦事&lt;/li&gt;
&lt;li&gt;CompletableFuture:
&lt;ul&gt;
&lt;li&gt;Accept就是純接收結果&lt;/li&gt;
&lt;li&gt;Apply是接收結果，且自己也有結果&lt;/li&gt;
&lt;li&gt;Run就是不管上一個結果，現在做這件事&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt;方法可以讓線程阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220131-gulimall-14-thread/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>用ElasticSearch實現商品搜索</title>
        <link>https://yoziming.github.io/post/220130-gulimall-13/</link>
        <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220130-gulimall-13/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220130-gulimall-13/ -&lt;h1 id=&#34;搜索頁面&#34;&gt;搜索頁面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;搜尋頁面有自己的子網域，網址是 &lt;a href=&#34;http://search.mall.com/&#34;&gt;http://search.mall.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我觀察了一下，台灣的商城網站大多是用子目錄，例如:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://www.momoshop.com.tw/search/

https://www.etmall.com.tw/Search?

https://shopping.friday.tw/ec2/search?
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;而用子網域的通常是大陸的電商網站，經過查詢兩者其實沒太大差異&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常來說，屬於網站下的附屬小功能，用子目錄；而體量大到可以分割出去才用會用子網域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子網域複雜了一點，反正都學學吧&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;設定網段&#34;&gt;設定網段&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;改host模擬DNS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220122225938223.png&#34; alt=&#34;image-20220122225938223&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nginx
&lt;ul&gt;
&lt;li&gt;採了坑，改完忘記要重開服務&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220122230310851.png&#34; alt=&#34;image-20220122230310851&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;網關&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- id: mall_search_route
  uri: lb://search
  predicates:
    - Host=search.mall.com
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;靜態資源&#34;&gt;靜態資源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;這邊一樣用thymeleaf渲染，引包&lt;/li&gt;
&lt;li&gt;關閉 spring.thymeleaf.cache=false&lt;/li&gt;
&lt;li&gt;調整 &lt;code&gt;list.html&lt;/code&gt;，確認一下跟首頁的超連結是否正確&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;寫vo&#34;&gt;寫Vo&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;這可就複雜了，需要考慮各種搜尋條件、返回的結果&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;搜尋條件 SearchParam.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SearchParam&lt;/span&gt; {

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 頁面傳遞過來的全文匹配關鍵字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String keyword;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 品牌id,可以多選
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;Long&amp;gt; brandId;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 三級分類id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long catalog3Id;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 排序條件：sort=price/salecount/hotscore_desc/asc
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String sort;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 是否有貨
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer hasStock;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 價格區間查詢
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String skuPrice;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 按照屬性進行篩選
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; attrs;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 頁碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer pageNum = 1;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 原生的所有查詢條件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String _queryString;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;返回的結果 SearchResult.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SearchResult&lt;/span&gt; {

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 查詢到的所有商品信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;SkuEsModel&amp;gt; product;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 當前頁碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer pageNum;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 總記錄數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long total;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 總頁碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer totalPages;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;Integer&amp;gt; pageNavs;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 當前查詢到的結果，所有涉及到的品牌
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;BrandVo&amp;gt; brands;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 當前查詢到的結果，所有涉及到的所有屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;AttrVo&amp;gt; attrs;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 當前查詢到的結果，所有涉及到的所有分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;CatalogVo&amp;gt; catalogs;

    &lt;span style=&#34;color:#228b22&#34;&gt;//===========================以上是返回給頁面的所有信息============================//
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;/* 麵包屑導航數據 */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;NavVo&amp;gt; navs;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;NavVo&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String navName;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String navValue;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String link;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BrandVo&lt;/span&gt; {

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long brandId;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String brandName;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String brandImg;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AttrVo&lt;/span&gt; {

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long attrId;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String attrName;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;String&amp;gt; attrValue;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CatalogVo&lt;/span&gt; {

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long catalogId;

        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String catalogName;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;返回的結果中的屬性 AttrResponseVo.java
&lt;ul&gt;
&lt;li&gt;就是這些啦，根據結果從ES抽出的屬性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220122235040745.png&#34; alt=&#34;image-20220122235040745&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AttrResponseVo&lt;/span&gt; {

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 屬性id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long attrId;
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 屬性名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String attrName;
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 是否需要檢索[0-不需要，1-需要]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer searchType;
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 屬性圖標
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String icon;
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 可選值列表[用逗號分隔]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String valueSelect;
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 屬性類型[0-銷售屬性，1-基本屬性，2-既是銷售屬性又是基本屬性]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer attrType;
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 啟用狀態[0 - 禁用，1 - 啟用]
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long enable;
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 所屬分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long catalogId;
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 快速展示【是否展示在介紹上；0-否 1-是】，在sku中仍然可以調整
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer showDesc;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long attrGroupId;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String catalogName;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String groupName;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long[] catalogPath;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;查詢&#34;&gt;查詢&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;這一節真的太偏了，前後端不分的thymeleaf本身已經很少人用，ES查詢語句的編寫真的枯燥又無聊，暫時先複製貼上跳過&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;簡單整理一下流程:
&lt;ul&gt;
&lt;li&gt;造Vo封裝搜索條件與呈現的結果&lt;/li&gt;
&lt;li&gt;先在ES根據搜索條件寫出DSL&lt;/li&gt;
&lt;li&gt;將DSL編譯成Java語法&lt;/li&gt;
&lt;li&gt;處理聚合&lt;/li&gt;
&lt;li&gt;將結果封裝，推回給前端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SearchController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/list.html&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;listPage&lt;/span&gt;(SearchParam param, Model model, HttpServletRequest request) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// Spring自動將頁面提交過來的所有請求參數封裝成我們指定的SearchParam
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    param.&lt;span style=&#34;color:#658b00&#34;&gt;set_queryString&lt;/span&gt;(request.&lt;span style=&#34;color:#658b00&#34;&gt;getQueryString&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 根據傳遞來的頁面的查詢參數，去es中檢索商品
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SearchResult result = mallSearchService.&lt;span style=&#34;color:#658b00&#34;&gt;search&lt;/span&gt;(param);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 存到model
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;, result);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;MallSearchServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 在es檢索
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param param 檢索的所有參數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return 返回的結果
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; SearchResult &lt;span style=&#34;color:#008b45&#34;&gt;search&lt;/span&gt;(SearchParam param) {
    SearchResult result = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 1、動態構建檢索需要的DSL語句
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 1、準備檢索請求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SearchRequest searchRequest = buildSearchRequest(param);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 2、執行檢索請求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        SearchResponse searchResponse = client.&lt;span style=&#34;color:#658b00&#34;&gt;search&lt;/span&gt;(searchRequest, ElasticConfig.&lt;span style=&#34;color:#658b00&#34;&gt;COMMON_OPTIONS&lt;/span&gt;);

        &lt;span style=&#34;color:#228b22&#34;&gt;// 3、分析響應數據，封裝成需要的格式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        result = buildSearchResponse(param, searchResponse);

    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (IOException e) {
        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; result;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; SearchRequest &lt;span style=&#34;color:#008b45&#34;&gt;buildSearchRequest&lt;/span&gt;(SearchParam param) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 構建DSL語句對象
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SearchSourceBuilder sourceBuilder = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchSourceBuilder();
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 模糊匹配，過濾（按照屬性，分類，品牌，價格區間，庫存）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 1、構建bool - query
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BoolQueryBuilder boolQueryBuilder = QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;boolQuery&lt;/span&gt;();

    &lt;span style=&#34;color:#228b22&#34;&gt;// 1.1、must【得分】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 分詞匹配skuTitle
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyword&lt;/span&gt;())) {
        boolQueryBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;must&lt;/span&gt;(QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;matchQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuTitle&amp;#34;&lt;/span&gt;, param.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyword&lt;/span&gt;()));
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 1.2、filter【無得分】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 三級分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (param.&lt;span style=&#34;color:#658b00&#34;&gt;getCatalog3Id&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        boolQueryBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;termQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalogId&amp;#34;&lt;/span&gt;, param.&lt;span style=&#34;color:#658b00&#34;&gt;getCatalog3Id&lt;/span&gt;()));
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 1.3、品牌
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!CollectionUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;())) {
        boolQueryBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;termsQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brandId&amp;#34;&lt;/span&gt;, param.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;()));
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 1.4、屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!CollectionUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrs&lt;/span&gt;())) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (String attr : param.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrs&lt;/span&gt;()) {
            BoolQueryBuilder boolQuery = QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;boolQuery&lt;/span&gt;();
            String[] s = attr.&lt;span style=&#34;color:#658b00&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;);
            String attrId = s[0];
            String[] attrValues = s[1].&lt;span style=&#34;color:#658b00&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;);
            &lt;span style=&#34;color:#228b22&#34;&gt;// must中的必須是同時滿足的，如果boolQuery不是內層的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 那麼boolQuery會拼接多個must(attrs.attrId)，例如id = 6時，同時必須id = 7，沒有此attr
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            boolQuery.&lt;span style=&#34;color:#658b00&#34;&gt;must&lt;/span&gt;(QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;termQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs.attrId&amp;#34;&lt;/span&gt;, attrId));
            boolQuery.&lt;span style=&#34;color:#658b00&#34;&gt;must&lt;/span&gt;(QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;termsQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs.attrValue&amp;#34;&lt;/span&gt;, attrValues));
            &lt;span style=&#34;color:#228b22&#34;&gt;// 每一個屬性都要生成一個嵌入式查詢
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 商品必須包含每一個 傳入的屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            NestedQueryBuilder nestedQuery = QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;nestedQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs&amp;#34;&lt;/span&gt;, boolQuery, ScoreMode.&lt;span style=&#34;color:#658b00&#34;&gt;None&lt;/span&gt;);
            boolQueryBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(nestedQuery);
        }
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 1.5、庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (param.&lt;span style=&#34;color:#658b00&#34;&gt;getHasStock&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        boolQueryBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;termQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hasStock&amp;#34;&lt;/span&gt;, param.&lt;span style=&#34;color:#658b00&#34;&gt;getHasStock&lt;/span&gt;() == 1));
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 1.6、價格區間 0_500  _500  500_
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuPrice&lt;/span&gt;())) {
        RangeQueryBuilder rangeQuery = QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;rangeQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuPrice&amp;#34;&lt;/span&gt;);
        String[] s = param.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (s.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; == 2) {
            rangeQuery.&lt;span style=&#34;color:#658b00&#34;&gt;gte&lt;/span&gt;(s[0]).&lt;span style=&#34;color:#658b00&#34;&gt;lte&lt;/span&gt;(s[1]);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (s.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; == 1) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (param.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;startsWith&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;)) {
                rangeQuery.&lt;span style=&#34;color:#658b00&#34;&gt;lte&lt;/span&gt;(s[0]);
            }
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (param.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;endsWith&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;)) {
                rangeQuery.&lt;span style=&#34;color:#658b00&#34;&gt;gte&lt;/span&gt;(s[0]);
            }
        }
        boolQueryBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(rangeQuery);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 1、END 封裝查詢條件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;query&lt;/span&gt;(boolQueryBuilder);

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 排序，分頁，高亮
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 2.1、排序
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getSort&lt;/span&gt;())) {
        String[] s = param.&lt;span style=&#34;color:#658b00&#34;&gt;getSort&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;);
        SortOrder order = s[1].&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;asc&amp;#34;&lt;/span&gt;) ? SortOrder.&lt;span style=&#34;color:#658b00&#34;&gt;ASC&lt;/span&gt; : SortOrder.&lt;span style=&#34;color:#658b00&#34;&gt;DESC&lt;/span&gt;;
        sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;sort&lt;/span&gt;(s[0], order);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 2.2、分頁
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;from&lt;/span&gt;((param.&lt;span style=&#34;color:#658b00&#34;&gt;getPageNum&lt;/span&gt;() - 1) * EsConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_PAGESIZE&lt;/span&gt;);
    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(EsConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_PAGESIZE&lt;/span&gt;);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 2.3、高亮
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyword&lt;/span&gt;())) {
        HighlightBuilder highlightBuilder = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HighlightBuilder();
        highlightBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuTitle&amp;#34;&lt;/span&gt;);
        highlightBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;preTags&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;b style=&amp;#39;color:red&amp;#39;&amp;gt;&amp;#34;&lt;/span&gt;);
        highlightBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;postTags&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;);
        sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;highlighter&lt;/span&gt;(highlightBuilder);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 聚合分析【品牌、分類、分析所有可選的規格】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 3.1、品牌聚合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    TermsAggregationBuilder brand_agg = AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand_agg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brandId&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(10);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 子聚合，獲得品牌name和圖片
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    brand_agg.&lt;span style=&#34;color:#658b00&#34;&gt;subAggregation&lt;/span&gt;(AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand_name_agg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brandName&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(1));
    brand_agg.&lt;span style=&#34;color:#658b00&#34;&gt;subAggregation&lt;/span&gt;(AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand_img_agg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brandImg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(1));
    &lt;span style=&#34;color:#228b22&#34;&gt;// 構建DSL
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// TODO 聚合品牌
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;aggregation&lt;/span&gt;(brand_agg);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 3.2、分類聚合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    TermsAggregationBuilder catalog_agg = AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalog_agg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalogId&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(20);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 子聚合，獲得分類名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    catalog_agg.&lt;span style=&#34;color:#658b00&#34;&gt;subAggregation&lt;/span&gt;(AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalog_name_agg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalogName&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(1));
    &lt;span style=&#34;color:#228b22&#34;&gt;// 構建DSL
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// TODO 聚合分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;aggregation&lt;/span&gt;(catalog_agg);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 3.3、規格聚合【嵌入式】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    NestedAggregationBuilder attr_agg = AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;nested&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_agg&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 根據id分組
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    TermsAggregationBuilder attr_id_agg = AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_id_agg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs.attrId&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(10);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 子聚合=》在id分組內部，繼續按照 attr_name分組
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    attr_id_agg.&lt;span style=&#34;color:#658b00&#34;&gt;subAggregation&lt;/span&gt;(AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_name_agg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs.attrName&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(1));
    &lt;span style=&#34;color:#228b22&#34;&gt;// 子聚合=》在id分組內部，繼續按照 attr_value分組
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    attr_id_agg.&lt;span style=&#34;color:#658b00&#34;&gt;subAggregation&lt;/span&gt;(AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_value_agg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs.attrValue&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(50));
    &lt;span style=&#34;color:#228b22&#34;&gt;// 嵌入式聚合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    attr_agg.&lt;span style=&#34;color:#658b00&#34;&gt;subAggregation&lt;/span&gt;(attr_id_agg);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 構建DSL
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// TODO 聚合屬性規格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;aggregation&lt;/span&gt;(attr_agg);

    SearchRequest searchRequest = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchRequest(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String[]{EsConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_INDEX&lt;/span&gt;}, sourceBuilder);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 打印DSL
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;());
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; searchRequest;
}

&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 封裝檢索結果
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 1、返回所有查詢到的商品
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 2、當前所有商品涉及到的所有屬性信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 3、當前所有商品涉及到的所有品牌信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 4、當前所有商品涉及到的所有分類信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 5、分頁信息   pageNum:當前頁碼  total:總記錄數    totalPages: 總頁碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; SearchResult &lt;span style=&#34;color:#008b45&#34;&gt;buildSearchResponse&lt;/span&gt;(SearchParam param, SearchResponse searchResponse) {
    SearchResult result = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchResult();
    SearchHits hits = searchResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getHits&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 1、返回所有查詢到的商品
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SkuEsModel&amp;gt; products = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!ArrayUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(hits.&lt;span style=&#34;color:#658b00&#34;&gt;getHits&lt;/span&gt;())) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (SearchHit hit : hits.&lt;span style=&#34;color:#658b00&#34;&gt;getHits&lt;/span&gt;()) {
            String jsonStr = hit.&lt;span style=&#34;color:#658b00&#34;&gt;getSourceAsString&lt;/span&gt;();
            SkuEsModel model = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(jsonStr, SkuEsModel.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);
            &lt;span style=&#34;color:#228b22&#34;&gt;// 設置高亮信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyword&lt;/span&gt;())) {
                HighlightField skuTitle = hit.&lt;span style=&#34;color:#658b00&#34;&gt;getHighlightFields&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuTitle&amp;#34;&lt;/span&gt;);
                model.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuTitle&lt;/span&gt;(skuTitle.&lt;span style=&#34;color:#658b00&#34;&gt;getFragments&lt;/span&gt;()[0].&lt;span style=&#34;color:#658b00&#34;&gt;string&lt;/span&gt;());
            }
            products.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(model);
        }
    }
    result.&lt;span style=&#34;color:#658b00&#34;&gt;setProducts&lt;/span&gt;(products);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 2、當前所有商品涉及到的所有屬性信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;AttrVo&lt;/span&gt;&amp;gt; attrVos = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    ParsedNested attr_agg = searchResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_agg&amp;#34;&lt;/span&gt;);
    ParsedLongTerms attr_id_agg = attr_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_id_agg&amp;#34;&lt;/span&gt;);
    List&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Terms.&lt;span style=&#34;color:#658b00&#34;&gt;Bucket&lt;/span&gt;&amp;gt; attrBuckets = attr_id_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (Terms.&lt;span style=&#34;color:#658b00&#34;&gt;Bucket&lt;/span&gt; bucket : attrBuckets) {
        SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;AttrVo&lt;/span&gt; attrVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;AttrVo&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 提取屬性ID
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        attrVo.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrId&lt;/span&gt;(bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsNumber&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;longValue&lt;/span&gt;());
        &lt;span style=&#34;color:#228b22&#34;&gt;// 提取屬性名字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ParsedStringTerms attr_name_agg = bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_name_agg&amp;#34;&lt;/span&gt;);
        attrVo.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrName&lt;/span&gt;(attr_name_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsString&lt;/span&gt;());
        &lt;span style=&#34;color:#228b22&#34;&gt;// 提取品牌圖片
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ParsedStringTerms attr_value_agg = bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_value_agg&amp;#34;&lt;/span&gt;);
        List&amp;lt;String&amp;gt; attrValues = attr_value_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(item -&amp;gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; ((Terms.&lt;span style=&#34;color:#658b00&#34;&gt;Bucket&lt;/span&gt;) item).&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsString&lt;/span&gt;();
        }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
        attrVo.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrValue&lt;/span&gt;(attrValues);
        attrVos.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(attrVo);
    }
    result.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrs&lt;/span&gt;(attrVos);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 3、當前所有商品涉及到的所有品牌信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;BrandVo&lt;/span&gt;&amp;gt; brandVos = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    ParsedLongTerms brand_agg = searchResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand_agg&amp;#34;&lt;/span&gt;);
    List&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Terms.&lt;span style=&#34;color:#658b00&#34;&gt;Bucket&lt;/span&gt;&amp;gt; brandBuckets = brand_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (Terms.&lt;span style=&#34;color:#658b00&#34;&gt;Bucket&lt;/span&gt; bucket : brandBuckets) {
        SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;BrandVo&lt;/span&gt; brandVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;BrandVo&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 提取品牌ID
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        brandVo.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandId&lt;/span&gt;(bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsNumber&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;longValue&lt;/span&gt;());
        &lt;span style=&#34;color:#228b22&#34;&gt;// 提取品牌名字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ParsedStringTerms brand_name_agg = bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand_name_agg&amp;#34;&lt;/span&gt;);
        brandVo.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandName&lt;/span&gt;(brand_name_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsString&lt;/span&gt;());
        &lt;span style=&#34;color:#228b22&#34;&gt;// 提取品牌圖片
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ParsedStringTerms brand_img_agg = bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand_img_agg&amp;#34;&lt;/span&gt;);
        brandVo.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandImg&lt;/span&gt;(brand_img_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsString&lt;/span&gt;());
        brandVos.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(brandVo);
    }
    result.&lt;span style=&#34;color:#658b00&#34;&gt;setBrands&lt;/span&gt;(brandVos);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 4、當前所有商品涉及到的所有分類信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;CatalogVo&lt;/span&gt;&amp;gt; catalogVos = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    ParsedLongTerms catalog_agg = searchResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalog_agg&amp;#34;&lt;/span&gt;);
    List&amp;lt;? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Terms.&lt;span style=&#34;color:#658b00&#34;&gt;Bucket&lt;/span&gt;&amp;gt; catalogBuckets = catalog_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (Terms.&lt;span style=&#34;color:#658b00&#34;&gt;Bucket&lt;/span&gt; bucket : catalogBuckets) {
        SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;CatalogVo&lt;/span&gt; catalogVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;CatalogVo&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 提取分類Id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        catalogVo.&lt;span style=&#34;color:#658b00&#34;&gt;setCatalogId&lt;/span&gt;(Long.&lt;span style=&#34;color:#658b00&#34;&gt;parseLong&lt;/span&gt;(bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsString&lt;/span&gt;()));
        &lt;span style=&#34;color:#228b22&#34;&gt;// 提取分類名字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ParsedStringTerms catalog_name_agg = bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalog_name_agg&amp;#34;&lt;/span&gt;);
        catalogVo.&lt;span style=&#34;color:#658b00&#34;&gt;setCatalogName&lt;/span&gt;(catalog_name_agg.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsString&lt;/span&gt;());
        catalogVos.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(catalogVo);
    }
    result.&lt;span style=&#34;color:#658b00&#34;&gt;setCatalogs&lt;/span&gt;(catalogVos);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 5、分頁信息   pageNum:當前頁碼 、total:總記錄數 、totalPages: 總頁碼
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; total = hits.&lt;span style=&#34;color:#658b00&#34;&gt;getTotalHits&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;value&lt;/span&gt;;
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; totalPages = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) total % EsConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_PAGESIZE&lt;/span&gt; == 0 ? (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) total / EsConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_PAGESIZE&lt;/span&gt; :
            ((&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) total / EsConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_PAGESIZE&lt;/span&gt; + 1);
    result.&lt;span style=&#34;color:#658b00&#34;&gt;setPageNum&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getPageNum&lt;/span&gt;());
    result.&lt;span style=&#34;color:#658b00&#34;&gt;setTotal&lt;/span&gt;(total);
    result.&lt;span style=&#34;color:#658b00&#34;&gt;setTotalPages&lt;/span&gt;(totalPages);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 6、所有頁碼數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;Integer&amp;gt; pageNavs = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= totalPages; i++) {
        pageNavs.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(i);
    }
    result.&lt;span style=&#34;color:#658b00&#34;&gt;setPageNavs&lt;/span&gt;(pageNavs);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 7、構建麵包屑導航功能
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (param.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrs&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; param.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrs&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        List&amp;lt;SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;NavVo&lt;/span&gt;&amp;gt; collect = param.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrs&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(attr -&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;//1、分析每一個attrs傳過來的參數值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;NavVo&lt;/span&gt; navVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;NavVo&lt;/span&gt;();
            &lt;span style=&#34;color:#228b22&#34;&gt;// attrs=2_5寸:6寸
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            String[] s = attr.&lt;span style=&#34;color:#658b00&#34;&gt;split&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;);
            navVo.&lt;span style=&#34;color:#658b00&#34;&gt;setNavValue&lt;/span&gt;(s[1]);
            R r = productFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;attrInfo&lt;/span&gt;(Long.&lt;span style=&#34;color:#658b00&#34;&gt;parseLong&lt;/span&gt;(s[0]));
            &lt;span style=&#34;color:#228b22&#34;&gt;// 根據請求構造麵包屑 規格屬性Id集合，這個集合包含的屬性規格不显示【前端會遍歷每個參數显示】
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            result.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrIds&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(Long.&lt;span style=&#34;color:#658b00&#34;&gt;parseLong&lt;/span&gt;(s[0]));
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
                AttrResponseVo data = r.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;AttrResponseVo&amp;gt;() {
                });
                &lt;span style=&#34;color:#228b22&#34;&gt;// 設置屬性名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                navVo.&lt;span style=&#34;color:#658b00&#34;&gt;setNavName&lt;/span&gt;(data.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrName&lt;/span&gt;());
            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
                navVo.&lt;span style=&#34;color:#658b00&#34;&gt;setNavName&lt;/span&gt;(s[0]);
            }

            &lt;span style=&#34;color:#228b22&#34;&gt;//2、取消了這個麵包屑以後，我們要跳轉到哪個地方，將請求的地址url裏面的當前置空
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;//拿到所有的查詢條件，去掉當前
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            String replace = replaceQueryString(param, attr, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrs&amp;#34;&lt;/span&gt;);
            navVo.&lt;span style=&#34;color:#658b00&#34;&gt;setLink&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://search.mall.com/list.html?&amp;#34;&lt;/span&gt; + replace);

            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; navVo;
        }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());

        result.&lt;span style=&#34;color:#658b00&#34;&gt;setNavs&lt;/span&gt;(collect);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 品牌、分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (param.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; param.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        List&amp;lt;SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;NavVo&lt;/span&gt;&amp;gt; navs = result.&lt;span style=&#34;color:#658b00&#34;&gt;getNavs&lt;/span&gt;();
        SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;NavVo&lt;/span&gt; navVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchResult.&lt;span style=&#34;color:#658b00&#34;&gt;NavVo&lt;/span&gt;();
        navVo.&lt;span style=&#34;color:#658b00&#34;&gt;setNavName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;品牌&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// TODO 遠程查詢所有品牌
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        R r = productFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;brandsInfo&lt;/span&gt;(param.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
            List&amp;lt;BrandVo&amp;gt; brand = r.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;List&amp;lt;BrandVo&amp;gt;&amp;gt;() {
            });
            StringBuffer sb = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StringBuffer();
            String replace = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (BrandVo brandVo : brand) {
                sb.&lt;span style=&#34;color:#658b00&#34;&gt;append&lt;/span&gt;(brandVo.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;);
                replace = replaceQueryString(param, brandVo.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brandId&amp;#34;&lt;/span&gt;);
            }
            navVo.&lt;span style=&#34;color:#658b00&#34;&gt;setNavValue&lt;/span&gt;(sb.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;());
            navVo.&lt;span style=&#34;color:#658b00&#34;&gt;setLink&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;http://search.mall.com/list.html?&amp;#34;&lt;/span&gt; + replace);
        }
        navs.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(navVo);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// TODO 分類 麵包屑
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; result;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;replaceQueryString&lt;/span&gt;(SearchParam param, String value, String key) {
    String encode = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        encode = URLEncoder.&lt;span style=&#34;color:#658b00&#34;&gt;encode&lt;/span&gt;(value, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;);
        encode = encode.&lt;span style=&#34;color:#658b00&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;%20&amp;#34;&lt;/span&gt;);  &lt;span style=&#34;color:#228b22&#34;&gt;//瀏覽器對空格的編碼和Java不一樣，差異化處理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) {
        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 就是點了X之後，應該跳轉的地址
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 這裏要判斷一下，attrs是不是第一個參數，因為第一個參數 沒有&amp;amp;符號
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// TODO BUG，第一個參數不帶&amp;amp;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; param.&lt;span style=&#34;color:#658b00&#34;&gt;get_queryString&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt; + key + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; + encode, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;麵包屑導航&#34;&gt;麵包屑導航&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;學到新名詞 Breadcrumb，就是像這種東西啦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220123211432913.png&#34; alt=&#34;image-20220123211432913&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;確實就是源自於童話故事糖果屋，主角在前往森林的路上放置麵包屑找到回家的方向
&lt;ul&gt;
&lt;li&gt;但我記得不是被鳥吃掉了嗎?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;聚合問題&#34;&gt;聚合問題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;報錯 &lt;code&gt;fielddata is unsupported&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Can&#39;t load fielddata on [XXX] because fielddata is unsupported on fields of type [keyword]. Use doc values instead.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;因為當初mapping不想讓這些欄位被查到，做的設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220123003049183.png&#34; alt=&#34;image-20220123003049183&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;doc_values 預設是true，當手動設為 false 時，無法基於該欄位排序、聚合、在腳本中訪問欄位值，所以報錯&lt;/li&gt;
&lt;li&gt;解法: 重構建mapping，可以用&lt;code&gt;POST _reindex&lt;/code&gt;複製走舊的資料，重造mapping後再搬回去&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220130-gulimall-13/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Redisson與SpringCache</title>
        <link>https://yoziming.github.io/post/220129-gulimall-12-redisson/</link>
        <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220129-gulimall-12-redisson/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220129-gulimall-12-redisson/ -&lt;h1 id=&#34;redisson&#34;&gt;Redisson&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java操作Redis的框架，主要用他的分布式鎖的功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加鎖的方法與邏輯幾乎都跟&lt;code&gt;java.util.concurrent&lt;/code&gt;包下的一樣&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JUC包: &lt;code&gt;ReentrantLock&lt;/code&gt;那些，如果沒印象了看下面個種鎖的範例就會回想起來&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前置設定&#34;&gt;前置設定&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95&#34;&gt;https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;引包&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.redisson&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;redisson&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.16.8&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;造config類
&lt;ul&gt;
&lt;li&gt;注意&lt;code&gt;import org.redisson.config.Config&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;RedissonConfig&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 所有對Redisson的使用都是通過RedissonClient
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @throws IOException
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;(destroyMethod = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;shutdown&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; RedissonClient &lt;span style=&#34;color:#008b45&#34;&gt;redisson&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 創建配置
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Config config = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Config();
        config.&lt;span style=&#34;color:#658b00&#34;&gt;useSingleServer&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;setAddress&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;redis://localhost:6379&amp;#34;&lt;/span&gt;);

        &lt;span style=&#34;color:#228b22&#34;&gt;// 根據Config創建出RedissonClient實例
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// Redis url should start with redis:// or rediss://
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        RedissonClient redissonClient = Redisson.&lt;span style=&#34;color:#658b00&#34;&gt;create&lt;/span&gt;(config);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; redissonClient;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;注入RedissonClient，開始造鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
RedissonClient redisson;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lock-基本鎖&#34;&gt;Lock 基本鎖&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;只要鎖的名字(例如: &lt;code&gt;&amp;quot;myLock&amp;quot;&lt;/code&gt;)一樣，就是同一把鎖&lt;/li&gt;
&lt;li&gt;預設為阻塞式等待，過期時間沒指定是30s&lt;/li&gt;
&lt;li&gt;自動續期，如果業務超長，運行期間自動鎖上新的30s
&lt;ul&gt;
&lt;li&gt;如果手動指定了過期時間就不會自動續期，除非再使用看門狗&lt;/li&gt;
&lt;li&gt;但何必搞那麼多，讓他預設30秒自動續就挺好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;RLock lock = redisson.&lt;span style=&#34;color:#658b00&#34;&gt;getLock&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;myLock&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;// 設定10秒
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;lock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;(10, TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;readwritelock-讀寫鎖&#34;&gt;ReadWriteLock 讀寫鎖&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用來保證一定能讀到最新資料&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個讀寫鎖下包含一個讀鎖與一個寫鎖(好像廢話)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;讀讀: 無限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寫寫: 阻塞，排隊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寫讀: 修改期間(有人拿走了寫鎖)，讀也被鎖住，保證不會有人讀到髒資料&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讀寫: 有人拿走了讀鎖，寫也被鎖住&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;總之&lt;strong&gt;讀&lt;/strong&gt;無所謂，&lt;strong&gt;寫&lt;/strong&gt;是互斥鎖，只要涉及寫就阻塞&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/write&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;writeValue&lt;/span&gt;() {
    String s = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
    RReadWriteLock readWriteLock = redisson.&lt;span style=&#34;color:#658b00&#34;&gt;getReadWriteLock&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;rw-lock&amp;#34;&lt;/span&gt;);
    RLock rLock = readWriteLock.&lt;span style=&#34;color:#658b00&#34;&gt;writeLock&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 改資料加寫鎖，讀數據加讀鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        rLock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;();
        s = UUID.&lt;span style=&#34;color:#658b00&#34;&gt;randomUUID&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;();
        ValueOperations&amp;lt;String, String&amp;gt; ops = stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;();
        ops.&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;writeValue&amp;#34;&lt;/span&gt;,s);
        TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(10);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
        rLock.&lt;span style=&#34;color:#658b00&#34;&gt;unlock&lt;/span&gt;();
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; s;
}

&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/read&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;readValue&lt;/span&gt;() {
    String s = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
    RReadWriteLock readWriteLock = redisson.&lt;span style=&#34;color:#658b00&#34;&gt;getReadWriteLock&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;rw-lock&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 加讀鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    RLock rLock = readWriteLock.&lt;span style=&#34;color:#658b00&#34;&gt;readLock&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        rLock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;();
        ValueOperations&amp;lt;String, String&amp;gt; ops = stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;();
        s = ops.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;writeValue&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; { TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(10); } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) { e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;(); }
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
        rLock.&lt;span style=&#34;color:#658b00&#34;&gt;unlock&lt;/span&gt;();
    }

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; s;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;semaphore-信號量&#34;&gt;Semaphore 信號量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;同時只能有幾人來操作的鎖，類似管道，用來限流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;令牌桶算法，用&lt;code&gt;getSemaphore()&lt;/code&gt;方法獲取指定令牌實例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要先在redis指定令牌名稱與有幾個，例如: &lt;code&gt;(&amp;quot;park&amp;quot;,3)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用&lt;code&gt;acquire()&lt;/code&gt;獲取一個信號，這是阻塞的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也可以用&lt;code&gt;tryAcquire()&lt;/code&gt;，反正帶try開頭就是非阻塞的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用&lt;code&gt;release()&lt;/code&gt;釋放信號&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 車庫3車位，讓人停車
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 信號量也可以做分散式限流
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/park&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;park&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; InterruptedException {

        RSemaphore park = redisson.&lt;span style=&#34;color:#658b00&#34;&gt;getSemaphore&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;park&amp;#34;&lt;/span&gt;);
        park.&lt;span style=&#34;color:#658b00&#34;&gt;acquire&lt;/span&gt;();     &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取一個信號、獲取一個值,占一個車位
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = park.&lt;span style=&#34;color:#658b00&#34;&gt;tryAcquire&lt;/span&gt;();
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 執行業務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;;
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ok=&amp;gt;&amp;#34;&lt;/span&gt; + flag;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/go&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;go&lt;/span&gt;() {
        RSemaphore park = redisson.&lt;span style=&#34;color:#658b00&#34;&gt;getSemaphore&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;park&amp;#34;&lt;/span&gt;);
        park.&lt;span style=&#34;color:#658b00&#34;&gt;release&lt;/span&gt;();     &lt;span style=&#34;color:#228b22&#34;&gt;// 釋放一個車位
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ok&amp;#34;&lt;/span&gt;;
    }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;countdownlatch-閉鎖&#34;&gt;CountDownLatch 閉鎖&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;限制幹了幾次之後就不幹了&lt;/li&gt;
&lt;li&gt;先用&lt;code&gt;getCountDownLatch()&lt;/code&gt;獲取看門的實例&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;trySetCount()&lt;/code&gt;方法設定倒數的次數，&lt;code&gt;await()&lt;/code&gt;開始倒數&lt;/li&gt;
&lt;li&gt;執行業務邏輯後，用&lt;code&gt;countDown()&lt;/code&gt;方法使計數-1&lt;/li&gt;
&lt;li&gt;計數到0，就鎖死&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 放假、鎖門
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 5個人次走完，才可以鎖大門
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 分散式閉鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/lockDoor&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;lockDoor&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; InterruptedException {

        RCountDownLatch door = redisson.&lt;span style=&#34;color:#658b00&#34;&gt;getCountDownLatch&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;door&amp;#34;&lt;/span&gt;);
        door.&lt;span style=&#34;color:#658b00&#34;&gt;trySetCount&lt;/span&gt;(5);
        door.&lt;span style=&#34;color:#658b00&#34;&gt;await&lt;/span&gt;();       &lt;span style=&#34;color:#228b22&#34;&gt;// 等待閉鎖完成
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;放假了...&amp;#34;&lt;/span&gt;;
    }

    &lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/gogogo/{id}&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;gogogo&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;) Long id) {
        RCountDownLatch door = redisson.&lt;span style=&#34;color:#658b00&#34;&gt;getCountDownLatch&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;door&amp;#34;&lt;/span&gt;);
        door.&lt;span style=&#34;color:#658b00&#34;&gt;countDown&lt;/span&gt;();       &lt;span style=&#34;color:#228b22&#34;&gt;// 計數-1
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; id + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的人都走了...&amp;#34;&lt;/span&gt;;
    }

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;套用至項目&#34;&gt;套用至項目&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;回到之前的CategoryServiceImpl.java，透過redisson可以簡化非常多&lt;/li&gt;
&lt;li&gt;注意鎖的命名表示精細度，比如具體想鎖1號商品的鎖就該是&amp;quot;item-01-lock&amp;quot;，而非&amp;quot;item-lock&amp;quot;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;item-lock&amp;quot;就該是用於所有item的集合的鎖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// Redisson分布式鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCatalogJsonWithRedisson&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 搶鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    RLock lock = redisson.&lt;span style=&#34;color:#658b00&#34;&gt;getLock&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;CatalogJson-lock&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 搶到了，開始執行業務
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    lock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;();
    Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; result;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        result = getCatalogJsonFromDb();
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
        lock.&lt;span style=&#34;color:#658b00&#34;&gt;unlock&lt;/span&gt;();
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;緩存一致性問題&#34;&gt;緩存一致性問題&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;當我們想讓緩存與DB中的資料一樣，可以採用:
&lt;ul&gt;
&lt;li&gt;雙寫: 更新DB的操作同時也更新緩存&lt;/li&gt;
&lt;li&gt;失效: 更新DB的操作同時把緩存清空，等下去別人請求的時候更新緩存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然而高併發之下就可能有問題，比如下圖範例:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220122162940491.png&#34; alt=&#34;image-20220122162940491&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20220122163014851.png&#34; alt=&#34;image-20220122163014851&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;解決辦法&#34;&gt;解決辦法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;併發本身不多就不考慮這麼多，機率太低，只要都給緩存設定過期時間，最終總會更新的&lt;/li&gt;
&lt;li&gt;放到緩存的東西，本來就是讀多寫少才適合，要求即時、高一致性就乾脆去讀DB。頂多用個讀寫鎖，過度設計增加系統複雜性不可取&lt;/li&gt;
&lt;li&gt;高級可以用Cannl輔助，Canal類似一個MySQL的從庫，他會追蹤主庫，並偽裝自己成一個DB，所以可以透過它來更新緩存
&lt;ul&gt;
&lt;li&gt;熟悉的&amp;quot;加一層&amp;quot;操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220122163722148.png&#34; alt=&#34;image-20220122163722148&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顯然，自己給方法設定緩存、設定過期&amp;hellip;這些幹的事情都挺重複的，於是乎Spring又又又封裝好了，Spring Cache因應而生&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;spring-cache&#34;&gt;Spring Cache&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Cache發音同現金那個Cash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用註解就能完成緩存操作，之前在尚醫通項目有稍微學過
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yoziming.github.io/post/220116-agg-spring-06/#spring-cache&#34;&gt;https://yoziming.github.io/post/220116-agg-spring-06/#spring-cache&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;核心: Spring已經把幾種常用的緩存類跟他們的AutoConfiguration封裝好了，只要在想使用緩存的方法上註解就能自動調用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220122193127853.png&#34; alt=&#34;image-20220122193127853&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CacheManager接口，顧名思義就是用來管理Cache的&lt;/li&gt;
&lt;li&gt;例如: ConcurrentMapCacheManager就是管理ConcurrentMapCache
&lt;ul&gt;
&lt;li&gt;ConcurrentMapCache本身也是接口，封裝了操作底層ConcurrentMap做成的Cache的各種方法&lt;/li&gt;
&lt;li&gt;同理RedissonSpringCache底層就是存到Redis的Cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先引包&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-cache&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.6.3&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;application.properties 指定要使用的cache類型&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;spring.cache.type=redis

# 存活時間，毫秒為單位，預設是-1即永久
spring.cache.redis.time-to-live=60000
# 如果指定了前綴就用我們指定的前綴，也可以不要前綴
#spring.cache.redis.key-prefix=CACHE_
#spring.cache.redis.use-key-prefix=false
# 是否緩存空值，用來防止緩存穿透
spring.cache.redis.cache-null-values=true
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;造Config類(沒有就會用預設的)
&lt;ul&gt;
&lt;li&gt;通常會在類修改緩存的value編碼方式(預設是二進位但一般都改成JSON)與日期格式的支援等等&lt;/li&gt;
&lt;li&gt;Config類 &amp;gt; application.properties，如果在properties設定了全域存活時間，在Config類就需要判斷優先級
&lt;ul&gt;
&lt;li&gt;就是下面那堆&lt;code&gt;if XXX !=null&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@EnableCaching&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CustomCacheConfig&lt;/span&gt; {
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; RedisCacheConfiguration &lt;span style=&#34;color:#008b45&#34;&gt;redisCacheConfiguration&lt;/span&gt;(CacheProperties cacheProperties) {
        RedisCacheConfiguration config = RedisCacheConfiguration.&lt;span style=&#34;color:#658b00&#34;&gt;defaultCacheConfig&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// config = config.entryTtl();
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        config =
                config.&lt;span style=&#34;color:#658b00&#34;&gt;serializeKeysWith&lt;/span&gt;(RedisSerializationContext.&lt;span style=&#34;color:#658b00&#34;&gt;SerializationPair&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;fromSerializer&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StringRedisSerializer()));
        config =
                config.&lt;span style=&#34;color:#658b00&#34;&gt;serializeValuesWith&lt;/span&gt;(RedisSerializationContext.&lt;span style=&#34;color:#658b00&#34;&gt;SerializationPair&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;fromSerializer&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; GenericJackson2JsonRedisSerializer()));

        CacheProperties.&lt;span style=&#34;color:#658b00&#34;&gt;Redis&lt;/span&gt; redisProperties = cacheProperties.&lt;span style=&#34;color:#658b00&#34;&gt;getRedis&lt;/span&gt;();
        
        &lt;span style=&#34;color:#228b22&#34;&gt;// 讓application.properties文件中的配置生效
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (redisProperties.&lt;span style=&#34;color:#658b00&#34;&gt;getTimeToLive&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            config = config.&lt;span style=&#34;color:#658b00&#34;&gt;entryTtl&lt;/span&gt;(redisProperties.&lt;span style=&#34;color:#658b00&#34;&gt;getTimeToLive&lt;/span&gt;());
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (redisProperties.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyPrefix&lt;/span&gt;() != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            config = config.&lt;span style=&#34;color:#658b00&#34;&gt;prefixKeysWith&lt;/span&gt;(redisProperties.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyPrefix&lt;/span&gt;());
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!redisProperties.&lt;span style=&#34;color:#658b00&#34;&gt;isCacheNullValues&lt;/span&gt;()) {
            config = config.&lt;span style=&#34;color:#658b00&#34;&gt;disableCachingNullValues&lt;/span&gt;();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!redisProperties.&lt;span style=&#34;color:#658b00&#34;&gt;isUseKeyPrefix&lt;/span&gt;()) {
            config = config.&lt;span style=&#34;color:#658b00&#34;&gt;disableKeyPrefix&lt;/span&gt;();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; config;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;註解&#34;&gt;註解&lt;/h3&gt;
&lt;h4 id=&#34;cacheable&#34;&gt;&lt;code&gt;@Cacheable&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;將方法的結果緩存起來，如果請求時已經有快取，就略過方法直接調用快取給結果，有以下參數:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;value&lt;/code&gt;: 緩存的別名(不是存在redis的名而是在java這邊標示的)，通常把別名當成&amp;quot;分類&amp;quot;來用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cacheNames&lt;/code&gt;: 同上，二選一即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sync&lt;/code&gt;: 開啟本地鎖，預設為false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;key&lt;/code&gt;: 可選，預設生成的是&lt;code&gt;緩存的別名::SimpleKey[]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最好設定成方法名&lt;code&gt;key = &amp;quot;#root.method.name&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;前綴::&lt;/code&gt;是在redis中會歸類成資料夾方便整理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220122222206658.png&#34; alt=&#34;image-20220122222206658&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;緩存的value值，為了好看好通用，一般會轉成JSON來存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Cacheable&lt;/span&gt;(cacheNames = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;category&amp;#34;&lt;/span&gt;, key = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;#root.method.name&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;CategoryEntity&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getLevel1Catalog&lt;/span&gt;() {
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;CategoryEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;parent_cid&amp;#34;&lt;/span&gt;, 0));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;cacheevict&#34;&gt;&lt;code&gt;@CacheEvict&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;清空指定快取，通常用於更新或刪除例如前面提過的失效模式，有以下參數:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;allEntries&lt;/code&gt;: 清空該別名的所有快取，預設為false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;beforeInvocation&lt;/code&gt;: 在方法執行前就清空，預設為false&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以指定刪除某key例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意&lt;code&gt;key = &amp;quot;&#39;getLevel1Catalog&#39;&amp;quot;&lt;/code&gt;，字符串還要用單引號包住&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/** 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 級聯更新所有關聯的資料，更新了表，所以刪除快取
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param category
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@CacheEvict&lt;/span&gt;(cacheNames = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;category&amp;#34;&lt;/span&gt;, key = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#39;getLevel1Catalog&amp;#39;&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;updateCascade&lt;/span&gt;(CategoryEntity category) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;updateById&lt;/span&gt;(category);
    categoryBrandRelationService.&lt;span style=&#34;color:#658b00&#34;&gt;updateCategory&lt;/span&gt;(category.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;(), category.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;cacheput&#34;&gt;&lt;code&gt;@CachePut&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;無論如何都會執行方法並更新到快取中，可以用於雙寫模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;區別在於&lt;code&gt;@Cacheable&lt;/code&gt;是如果緩存中有資料，方法就不會被執行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;caching&#34;&gt;&lt;code&gt;@Caching&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;若一行寫不下，可以這個聚合多行@Cachxxx註解&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Cache很方便，但對於之前提過的問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;緩存穿透: 有人狂查null。可以設定開啟存null，解決&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;緩存雪崩: 大量key同時過期。只能靠過期時間，不太行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;緩存擊穿: 一個熱點key被大併發訪問。本地鎖也算能應付&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常規資料: 讀多寫少、一致性要求不高、併發量不大的離譜，Spring Cache完全可以勝任&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特殊情況那就特殊設計&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220129-gulimall-12-redisson/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Redis緩存與分佈式鎖</title>
        <link>https://yoziming.github.io/post/220128-gulimall-11-synchronized-lock/</link>
        <pubDate>Fri, 28 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220128-gulimall-11-synchronized-lock/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220128-gulimall-11-synchronized-lock/ -&lt;h1 id=&#34;緩存&#34;&gt;緩存&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;誰適合進緩存?
&lt;ul&gt;
&lt;li&gt;讀多寫少&lt;/li&gt;
&lt;li&gt;即時性、一致性要求不高的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例如: 物流資訊、排行榜&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;實現&#34;&gt;實現&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;請求來了，緩存中是否已有資料?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;無，去DB拿一份給他，並且存到緩存中&lt;/li&gt;
&lt;li&gt;有，直接從緩存拿給他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地緩存: 最簡單實現就是寫一個Map，把東西存裡面。然而在分布式會有問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;負載均衡: 每次輪到可能每個分散的機站都要去DB取一份資料&lt;/li&gt;
&lt;li&gt;資料一致性: 某處更新了，其他處已經緩存中的不會更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;於是就會用到Redis這種noSQL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spring-redis&#34;&gt;Spring Redis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引包: &lt;code&gt;spring-boot-starter-data-redis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application.properties&lt;/code&gt;設定端口與密碼(如果有)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.redis.host=localhost
spring.redis.port=6379
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;造一個&lt;code&gt;StringRedisTemplate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;.opsForXXX()&lt;/code&gt;方法造出操作子，XXX是要存的value類型&lt;/li&gt;
&lt;li&gt;拿造出的操作子開始set、get&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
StringRedisTemplate stringRedisTemplate;

&lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;test1&lt;/span&gt;() {
    ValueOperations&amp;lt;String, String&amp;gt; ops = stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;();
    ops.&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;world_&amp;#34;&lt;/span&gt; + UUID.&lt;span style=&#34;color:#658b00&#34;&gt;randomUUID&lt;/span&gt;());
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ops.get(\&amp;#34;hello\&amp;#34;) = &amp;#34;&lt;/span&gt; + ops.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;推薦使用這個小軟體來查看管理Redis&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/qishibo/AnotherRedisDesktopManager/releases&#34;&gt;https://github.com/qishibo/AnotherRedisDesktopManager/releases&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;優化實作&#34;&gt;優化實作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;回到之前的CategoryServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 從redis獲取所有分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCatalogJson&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 先去緩存拿
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    ValueOperations&amp;lt;String, String&amp;gt; ops = stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;();
    String catalogJson = ops.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalogJson&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isBlank&lt;/span&gt;(catalogJson)) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 緩存沒資料，去DB拿，且存到緩存中
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; catalogJsonFromDb = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCatalogJsonFromDb&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 為了方便統一交流，redis放的都是JSON序列化後的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String s = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(catalogJsonFromDb);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 設定過期時間
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ops.&lt;span style=&#34;color:#658b00&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalogJson&amp;#34;&lt;/span&gt;, s, 10, TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;MINUTES&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; catalogJsonFromDb;
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 把取出的JSONstring反序列化，使用TypeReference指名泛型
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; stringListMap = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(catalogJson, &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;Map&amp;lt;String,
            List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt;&amp;gt;() {
    });
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; stringListMap;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;lettuce舊版bug&#34;&gt;lettuce舊版BUG&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;我是沒遇到，不過還是記一下，說不定哪時真遇到了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;報錯: OutOfDirectMemoryError 堆外記憶體溢出&lt;/li&gt;
&lt;li&gt;因為springboot2.0後使用lettuce操作redis的用戶端
&lt;ul&gt;
&lt;li&gt;lettuce使用netty通信(netty扮演類似tomcat的角色)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lettuce的bug導致netty堆外記憶體溢出(他有一個計數器只計吃不計清，所以很快就會假象的顯示用完記憶體)&lt;/li&gt;
&lt;li&gt;解法:
&lt;ul&gt;
&lt;li&gt;升級lettuce&lt;/li&gt;
&lt;li&gt;切換使用jedis
&lt;ul&gt;
&lt;li&gt;到pom文件依賴用&lt;code&gt;&amp;lt;exclusion&amp;gt;&lt;/code&gt;排除lettuce並引入jedis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lettuce跟jedis都是java底層操作redis的封裝，而spring的RedisTemplate又是他們兩者的再封裝，所以切換的時候底層的連接工廠都可以認得&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;緩存風險&#34;&gt;緩存風險&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大併發之下緩存會有這些風險&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;緩存穿透&#34;&gt;緩存穿透&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有人查不存在的數據，套用基本規則先在緩存中看看，沒東西&lt;/li&gt;
&lt;li&gt;於是就去DB查，然後DB查了結果也是Null(因為是不存在的數據)，由於沒有結果所以回傳時也沒東西放到緩存&lt;/li&gt;
&lt;li&gt;下次再看緩存還是沒東西，於是又去DB查&amp;hellip;loop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121211737584.png&#34; alt=&#34;image-20220121211737584&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;相當於緩存失去意義，被穿透了，查的就是DB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解法: 把null結果也存在緩存中，但設定短暫過期時間&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但如果他是隨機產生key那就可能要使用布隆過濾器&lt;/li&gt;
&lt;li&gt;布隆過濾器就是判斷key是否有效的工具，有一定誤判&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;緩存雪崩&#34;&gt;緩存雪崩&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有緩存的key設定了相同的過期時間，當緩存全部一起過期就會全部去DB查，DB又被玩壞了&lt;/li&gt;
&lt;li&gt;解法: 設定隨機過期時間，分散壓力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;緩存擊穿&#34;&gt;緩存擊穿&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;擊穿，顧名思義發生在一個點被捅破，例如某個熱點key被高頻訪問，當這個key失效且又剛好處於高峰期，請求全部被放去查DB，DB又被玩壞了&lt;/li&gt;
&lt;li&gt;解法: 給DB加鎖，大併發只給有鎖的一人查，他查完資料就同步放到緩存了，其他人也不用排隊，直接去緩存拿吧&lt;/li&gt;
&lt;li&gt;很像小時候考完試大家衝去辦公室找老師對答案，但老師只把答案卷給小老師一個人，小老師拿到答案卷再去教室黑板公布給同學。就不會一群人把老師辦公室擠爆&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本地鎖&#34;&gt;本地鎖&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;spring預設是單例所以可以用this當鎖&lt;/li&gt;
&lt;li&gt;注意查庫後&lt;strong&gt;放到緩存&lt;/strong&gt;的動作也要鎖到
&lt;ul&gt;
&lt;li&gt;否則查完才正要放進緩存，下一個拿到鎖的已經進來了，二號的哥們做雙重判斷看緩存肯定還是空的，他又會多查一次DB&lt;/li&gt;
&lt;li&gt;因為I/O寫入緩存的延遲時間必定大於加鎖解鎖的延遲&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 從DB獲取所有分類，且二、三級分類以封裝好
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCatalogJsonFromDb&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;// spring預設是單例所以可以用this
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 雙重檢驗，拿到鎖也不急著查DB，先看看緩存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ValueOperations&amp;lt;String, String&amp;gt; ops = stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;();
        String catalogJson = ops.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalogJson&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isBlank&lt;/span&gt;(catalogJson)) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 緩存有了，拿緩存的就滾吧
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(catalogJson,
                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;Map&amp;lt;String,
                            List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt;&amp;gt;() {
                    });
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 查庫，放緩存的動作省略
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;分布式鎖&#34;&gt;分布式鎖&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本地鎖的問題在於有幾個服務就有幾個容器，就有幾個單例，就有幾把鎖&lt;/li&gt;
&lt;li&gt;模擬啟動多個服務，複製然後指定不同的連接埠
&lt;ul&gt;
&lt;li&gt;注意是兩個&lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121221204267.png&#34; alt=&#34;image-20220121221204267&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地鎖只能鎖住自己，鎖不住其他服務去DB拿東西(乍看問題不大，除非服務啟動超多個那才又會造成問題)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121220644627.png&#34; alt=&#34;image-20220121220644627&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;手動實現&#34;&gt;手動實現&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用redis的setNX (SET if Not eXists)可以讓坑只被一人佔&lt;/li&gt;
&lt;li&gt;在spring中是&lt;code&gt;setIfAbsent()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;佔完辦好事出去記得要把鎖給刪了，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 分布式鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCatalogJsonFromRedisLock&lt;/span&gt;() {
    Boolean lock = stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;setIfAbsent&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;lock&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;, 30, TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (lock) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 能放到值，相當於搶到鎖了，執行業務，並且走之前要刪掉值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// stringRedisTemplate.expire(&amp;#34;lock&amp;#34;,30,TimeUnit.SECONDS); 不保險，沒原子性，如果在這之前斷電就GG
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;lock&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; getCatalogJsonFromDb();
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 沒搶到，等會重試
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; getCatalogJsonFromRedisLock(); &lt;span style=&#34;color:#228b22&#34;&gt;// 自旋
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 等待一段時間之類的操作
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.expire()&lt;/code&gt;方法可以給指定的key設定過期時間，但不保險，最好還是在放值的同時就設定過期時間&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然而又有問題，比如A業務執行了40秒，結果30秒一到鎖開了，下一個人B也跑進來佔坑，B才剛放了key，A才終於執行到delete，結果把B的key刪了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以此類推，會刪到別人的key，導致鎖實質無效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解法可以嘗試給key的內容做驗證，例如A放的key內容是A產生的uuid，要比對一下是A的才能刪，然而比對要寫兩行以上又會有原子性問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就要使用LUA腳本保證刪除也是原子性操作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 分布式鎖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCatalogJsonFromRedisLock&lt;/span&gt;() {
    String uuid = UUID.&lt;span style=&#34;color:#658b00&#34;&gt;randomUUID&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;();
    Boolean lock = stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;opsForValue&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;setIfAbsent&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;lock&amp;#34;&lt;/span&gt;, uuid, 30, TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;SECONDS&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (lock) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 能放到值，相當於搶到鎖了，執行業務，並且走之前要刪掉值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; getCatalogJsonFromDb();
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 刪除鎖的lua腳本，不用太在意複製貼上就好
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            String script = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;if redis.call(&amp;#39;get&amp;#39;, KEYS[1]) == ARGV[1] then return redis.call(&amp;#39;del&amp;#39;, KEYS[1]) else&amp;#34;&lt;/span&gt; +
                    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; +
                    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;return 0 end&amp;#34;&lt;/span&gt;;
            stringRedisTemplate.&lt;span style=&#34;color:#658b00&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; DefaultRedisScript&amp;lt;Long&amp;gt;(script, Long.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;), Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;asList&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;lock&amp;#34;&lt;/span&gt;),
                    uuid);
        }
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 沒搶到，等會重試
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 等待一段時間
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
            Thread.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(2000);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
        }
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; getCatalogJsonFromRedisLock(); &lt;span style=&#34;color:#228b22&#34;&gt;// 自旋
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;小結&#34;&gt;小結&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;設置鎖沒同步指定過期時間: 可能造成死鎖&lt;/li&gt;
&lt;li&gt;不用UUID做Token: 鎖可能被別人誤刪&lt;/li&gt;
&lt;li&gt;刪除鎖前花兩行比對UUID: 可能自己出意外導致沒人能刪，造成死鎖&lt;/li&gt;
&lt;li&gt;重點就是設置鎖、刪除鎖的時候都必須保證原子性，才能確實達成分布式鎖的功能&lt;/li&gt;
&lt;li&gt;然而這樣用太麻煩了，所以肯定有人封裝好了框架，就是redisson&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;下節繼續&lt;/p&gt;
- https://yoziming.github.io/post/220128-gulimall-11-synchronized-lock/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Nginx&amp;網關、壓測與性能優化</title>
        <link>https://yoziming.github.io/post/220127-gulimall-10-stress-testing/</link>
        <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220127-gulimall-10-stress-testing/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220127-gulimall-10-stress-testing/ -&lt;h1 id=&#34;nginx反向代理&#34;&gt;Nginx反向代理&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正向代理，例如Proxy、VPN，我透過它去訪問別人。例如我暗戀班上正妹但不敢講，拜託正妹的閨密轉交情書，正妹只知道情書來自閨密轉交但不知道是誰送的(除非閨密把我賣了)
&lt;ul&gt;
&lt;li&gt;閨密對我而言就是正向代理(前向代理)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反向代理，例如某殺手組織內有多個專業殺手，跟一個對外的業務窗口。當委託人想下任務只能找到窗口，而組織內的任務實際由哪位殺手完成外人無從得知。委託人最終只知道任務的結果
&lt;ul&gt;
&lt;li&gt;窗口對於殺手組織而言就是反向代理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目的: 負載均衡、安全(對外只暴露一個IP，內部伺服器真實網址別人不知道)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模擬部署&#34;&gt;模擬部署&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先docker拉一個nginx，並且把設定檔文件夾掛載出來，方便修改
&lt;ul&gt;
&lt;li&gt;乍看有點混亂，&lt;code&gt;nginx.conf&lt;/code&gt;是主配置檔&lt;/li&gt;
&lt;li&gt;而&lt;code&gt;conf.d&lt;/code&gt;是子資料夾，裡面可以放多個&lt;code&gt;xxx.conf&lt;/code&gt;，為從配置&lt;/li&gt;
&lt;li&gt;第三個掛載是為了放html靜態資源&lt;/li&gt;
&lt;li&gt;最後一個是log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -p 80:80 --name nginx -v /mydata/nginx/nginx.conf:/etc/nginx/nginx.conf -v /mydata/nginx/conf.d:/etc/nginx/conf.d -v /mydata/nginx/html:/usr/share/nginx/html -v /mydata/nginx/logs:/var/log/nginx -d nginx
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;為了模擬DNS的效果，用SwitchHosts修改本機
&lt;ul&gt;
&lt;li&gt;SwitchHosts: &lt;a href=&#34;https://github.com/oldj/SwitchHosts/releases&#34;&gt;https://github.com/oldj/SwitchHosts/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120225048244.png&#34; alt=&#34;image-20220120225048244&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;進到虛擬機，修改nginx轉發的規則，讓它指向本機IP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120225749597.png&#34; alt=&#34;image-20220120225749597&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把服務都開起來，有點樣子了
&lt;ul&gt;
&lt;li&gt;其實目前只是繞一圈回來，接著再來設定網關&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120230122570.png&#34; alt=&#34;image-20220120230122570&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;結合網關&#34;&gt;結合網關&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;大的HTTP
&lt;ul&gt;
&lt;li&gt;使用nginx注意&lt;code&gt;{}&lt;/code&gt;閉合與結尾的&lt;code&gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120232922003.png&#34; alt=&#34;image-20220120232922003&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小的Server
&lt;ul&gt;
&lt;li&gt;通過nginx的時候，會把請求頭裡面很多訊息都削掉&lt;/li&gt;
&lt;li&gt;所以這邊要手動把頭加回去，否則下面的網關沒辦法靠&lt;code&gt;Host=XX&lt;/code&gt;來辨識斷言&lt;/li&gt;
&lt;li&gt;把檔案名稱保存為&lt;code&gt;mall.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120232823145.png&#34; alt=&#34;image-20220120232823145&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;網關&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        - id: mall_host_route
          uri: lb://product
          predicates:
            - Host=**.mall.com,mall.com
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;域名映射最終效果&#34;&gt;域名映射最終效果&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;訪問&lt;code&gt;mall.com&lt;/code&gt;透過DNS(假的，現在通過改HOST充當)轉到server對外唯一地址(虛擬機的IP)&lt;/li&gt;
&lt;li&gt;nginx作為看門保全，把人帶給服務台(網關)，並且這個保全預設會把客人的頭砍了，要設定讓它把頭還回來&lt;/li&gt;
&lt;li&gt;到了網關識別客人的host來自&lt;code&gt;mall.com&lt;/code&gt;，預設轉發到商品首頁&lt;/li&gt;
&lt;li&gt;內部的API請求也一樣，只要域名滿足條件，都可以透過nginx反向代理給網關，網關再負載均衡給各個微服務子模組&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;壓力測試&#34;&gt;壓力測試&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;找出系統負荷的瓶頸&lt;/li&gt;
&lt;li&gt;不測不知道:
&lt;ul&gt;
&lt;li&gt;記憶體流失(memory leak): 小問題透過大累積才出現&lt;/li&gt;
&lt;li&gt;併發: 單機OK，多人play就出事&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指標&#34;&gt;指標&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TPS&lt;/code&gt;: Transactions Per Second，每秒處理的事務數目，注意不是指資料庫的那個交易，而是指用戶幹了一件&amp;quot;事&amp;quot;，用來衡量整個業務流程，單位是&lt;code&gt;筆/秒&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QPS&lt;/code&gt;: Queries Per Second，每秒能處理查詢數目，通常用來衡量接口API的訪問量，單位是&lt;code&gt;次/秒&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RT&lt;/code&gt;: Response Time，響應時間，用戶發出請求到系統做出反應的間隔，通常會關注&lt;code&gt;90%響應時間&lt;/code&gt;，避免考慮極端情況&lt;/li&gt;
&lt;li&gt;&lt;code&gt;吞吐量&lt;/code&gt;: 處理量，系統每秒能處裡的請求數、任務數&lt;/li&gt;
&lt;li&gt;&lt;code&gt;錯誤率&lt;/code&gt;: 顧名思義，一批請求中的錯誤比例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;壓測工具jmeter&#34;&gt;壓測工具JMeter&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;官方下載: &lt;a href=&#34;https://jmeter.apache.org/download_jmeter.cgi&#34;&gt;https://jmeter.apache.org/download_jmeter.cgi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解壓即用，有親切的中文可選&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121003028527.png&#34; alt=&#34;image-20220121003028527&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加測試&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121003157103.png&#34; alt=&#34;image-20220121003157103&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定執行緒跟次數，例如200*100就總共會是2W次請求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121003249825.png&#34; alt=&#34;image-20220121003249825&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加請求，例如最基本的HTTP請求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121003354536.png&#34; alt=&#34;image-20220121003354536&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加接聽(結果報表)，有各種圖表可以看&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121003557013.png&#34; alt=&#34;image-20220121003557013&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就可以開測了，它會要你先保存，測完看完可以按掃把清空&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121003900035.png&#34; alt=&#34;image-20220121003900035&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;測了一下自己的，不意外的超爛XD&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;address-already-in-use問題解決&#34;&gt;Address already in use問題解決&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;我是沒遇到，但還是紀錄一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;簡單說就是舊版windows提供的TCP/IP連接埠太少，改多就好了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;參考: &lt;a href=&#34;https://www.bilibili.com/video/BV1np4y1C7Yf?p=143&amp;amp;spm_id_from=pageDriver&#34;&gt;https://www.bilibili.com/video/BV1np4y1C7Yf?p=143&amp;amp;spm_id_from=pageDriver&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;優化&#34;&gt;優化&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;想要讓程式性能優化有幾個大方向:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;資料庫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程式本體、業務邏輯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中間件(例如tomcat、Nginx)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IO(例如硬碟讀取、網路頻寬)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系統&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要先認清程式屬於CPU密集還是IO密集，才能對症下藥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;就程式本體來說，想優化需要先了解JVM的記憶體模型，筆記連結:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yoziming.github.io/post/220126-jvm-gc/&#34;&gt;https://yoziming.github.io/post/220126-jvm-gc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;了解JVM與GC，最直接的優化目標就是減少FullGC次數&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jvm監控&#34;&gt;JVM監控&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;工具: jconsole與jvisualvm，後者是加強升級版
&lt;ul&gt;
&lt;li&gt;直接cmd，jvisualvm就能執行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安裝Visual GC插件，如果有問題要去設定插件中心版本與下載網址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121121111079.png&#34; alt=&#34;image-20220121121111079&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker開啟監控 &lt;code&gt;docker stats&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JMeter不要開太多執行緒，50~100先試試，我剛剛開500個直接把WSL虛擬機搞死了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;測試紀錄&#34;&gt;測試紀錄&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;做一個簡單的表格統計各環節的吞吐量(Throughput，TP)、90%響應時間與CPU使用率、壓力點&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;TP(/sec)&lt;/th&gt;
&lt;th&gt;90% Line(ms)&lt;/th&gt;
&lt;th&gt;CPU(%)&lt;/th&gt;
&lt;th&gt;瓶頸&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nginx&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gateway&lt;/td&gt;
&lt;td&gt;17000&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;100&lt;/td&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;簡單服務&lt;/td&gt;
&lt;td&gt;22000&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;簡單服務+Gateway&lt;/td&gt;
&lt;td&gt;7400&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;網路IO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全鏈路+首頁&lt;/td&gt;
&lt;td&gt;220&lt;/td&gt;
&lt;td&gt;242&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;DB、thymeleaf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;全鏈路+三級分類&lt;/td&gt;
&lt;td&gt;116&lt;/td&gt;
&lt;td&gt;466&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;DB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;首頁全量資源&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;471&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;靜態資源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;測nginx&#34;&gt;測nginx&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由於是開在WSL虛擬機的docker desktop，效率比正常還低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;發現nginx只占用CPU，因為它就負責轉發，幾乎不吃RAM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121125253295.png&#34; alt=&#34;image-20220121125253295&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;測gateway&#34;&gt;測Gateway&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;測http://localhost:88/&lt;/li&gt;
&lt;li&gt;TP大概17737.7，發現也是爆吃CPU&lt;/li&gt;
&lt;li&gt;RAM因為之前啟動-Xmx100m限制了，GC也清蠻多次的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121131028008.png&#34; alt=&#34;image-20220121131028008&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;測簡單服務&#34;&gt;測簡單服務&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121133400546.png&#34; alt=&#34;image-20220121133400546&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;結果: 很勇嘛，比網關還結實&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121133549355.png&#34; alt=&#34;image-20220121133549355&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;簡單服務+網關
&lt;ul&gt;
&lt;li&gt;接著搭配網關，增加一個轉發的規則即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121134205517.png&#34; alt=&#34;image-20220121134205517&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;結果:
&lt;ul&gt;
&lt;li&gt;顯然中間件越多，響應時間就拉長&lt;/li&gt;
&lt;li&gt;但是吞吐量低了，CPU占用也小了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121134511732.png&#34; alt=&#34;image-20220121134511732&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;全鏈路&#34;&gt;全鏈路&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;即完整的訪問mall.com，透過nginx到網關再到商品首頁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括頁面渲染與SQL查資料庫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;結果: 直接悲劇，目前我的瓶頸可能是在DB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121135158718.png&#34; alt=&#34;image-20220121135158718&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;還可以到進階設定，把包含資源打勾，旁邊限制並行下載最好也勾，不然容易卡死
&lt;ul&gt;
&lt;li&gt;這個勾上TP剩4，顯然還要傳圖片那些靜態資源會對web容器(tomcat)壓力大增&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121141026275.png&#34; alt=&#34;image-20220121141026275&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全鏈路+三級分類&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121140122098.png&#34; alt=&#34;image-20220121140122098&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;結果:
&lt;ul&gt;
&lt;li&gt;本身三級分類是個重複查SQL的動作，從資料庫拿太多東西了，可以看到每秒接收8MB的資料，在那邊卡很久&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121140219549.png&#34; alt=&#34;image-20220121140219549&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;老師示範的TP只有2，肯定是為了示範循環查庫的次數太多，我自己寫當初就有些優化，盡量減少循環查表的動作，能批次的就批次，所以還好一點，看來接下來就是要改這個&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;小結&#34;&gt;小結&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;網路方面，中間件越多損失越大，但網路IO交互一般來說1萬吞吐沒問題，暫時不會接觸到這些&lt;/li&gt;
&lt;li&gt;業務方面主要是卡在DB與資源，以下開始檢討&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;改進措施&#34;&gt;改進措施&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;改一項可以試一項看看提升幅度，我就不一一記錄了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;模板的渲染速度: 之前為了發開測試，把thymeleaf快取給關了&lt;code&gt;spring.thymeleaf.cache=false&lt;/code&gt;，打開大概還能有10%提升&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日記記錄的級別，以前用info全記，也會稍微影響&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121142941057.png&#34; alt=&#34;image-20220121142941057&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;db&#34;&gt;DB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一樣可以關掉沒用的日記記錄級別&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL優化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把常查的欄位(涉及where 及 order by)加上索引，可以有效提升查詢速度
&lt;ul&gt;
&lt;li&gt;但也不是越多越好，索引多會使insert跟update變慢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;避免用Null判斷，用null會導致放棄索引而進行全表掃描，寧可用1或0這種&lt;/li&gt;
&lt;li&gt;避免使用&lt;code&gt;!=&lt;/code&gt;查表，理由同上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt; 和&lt;code&gt;not in&lt;/code&gt;也要慎用，能用between或exists代替&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121142824660.png&#34; alt=&#34;image-20220121142824660&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查DB的業務邏輯是重點
&lt;ul&gt;
&lt;li&gt;DB能一次查盡量一次查完，避免循環查表，麻煩的封裝交給java來處理&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資源動靜分離&#34;&gt;資源動靜分離&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;把靜態資源丟給nginx讓他負責直接返回給用戶，而不是在tomcat這邊又要動又要靜、疲於奔命。分開後可以有效提升資源訪問效率，並且解放湯姆貓&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120154602582.png&#34; alt=&#34;image-20220120154602582&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把&lt;code&gt;static&lt;/code&gt;資料夾丟到linux的&lt;code&gt;/mydata/nginx/html/&lt;/code&gt;之下
&lt;ul&gt;
&lt;li&gt;用WSL的話打開終端預設就在C槽我的文件，可以直接拷貝走&lt;/li&gt;
&lt;li&gt;但要注意有些文件如果在windows打開過，空格或其他編碼問題在linux容易報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改nginx server規則，注意Location規則嚴格的放在上面
&lt;ul&gt;
&lt;li&gt;注意&lt;code&gt;default.conf&lt;/code&gt;有沒有location也是&lt;code&gt;/&lt;/code&gt; 開頭攔截規則的，我在這邊除錯好久才想到是之前做測試設定的蓋到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121150915876.png&#34; alt=&#34;image-20220121150915876&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker啟動nginx的時候掛載是這樣&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-v /mydata/nginx/html:/usr/share/nginx/html
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;所以容器內/usr/share/nginx/html下也會看到&lt;code&gt;static&lt;/code&gt;資料夾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把模板下&lt;code&gt;index.html&lt;/code&gt;那些的URL都加上&lt;code&gt;/static/&lt;/code&gt;打頭就能正常訪問了&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121160836754.png&#34; alt=&#34;image-20220121160836754&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;整理資源訪問流程&#34;&gt;整理資源訪問流程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;繞得有點多圈，理一下思緒&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;現在nginx發揮的功用: 誰從&lt;code&gt;server_name=mall.com&lt;/code&gt;來訪問，我就把你丟給網關(&lt;code&gt;windows主機IP:88&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;網關一看是&lt;code&gt;mall.com&lt;/code&gt;就轉發給&lt;code&gt;product&lt;/code&gt;服務&lt;/li&gt;
&lt;li&gt;&lt;code&gt;product&lt;/code&gt;服務的&lt;code&gt;IndexController&lt;/code&gt;抓&lt;code&gt;{&amp;quot;/&amp;quot;, &amp;quot;index.html&amp;quot;}&lt;/code&gt;的URL，把你導到thymeleaf渲染的首頁模板index.html&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;裡面請求訪問&lt;code&gt;http://mall.com/static/xxxx&lt;/code&gt;的靜態資源，又被nginx攔截，直接從nginx所在容器返回給使用者&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;heap大小管理&#34;&gt;Heap大小管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;之前為了多開服務，在每個服務VM設定那邊調過-Xmx100m&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Xmx&lt;/code&gt;最大堆可用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Xms&lt;/code&gt;初始堆，如果配最大=最小，那每次GC完JVM就不會重新分配記憶體，也有點提升&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Xmn&lt;/code&gt;年輕代，整個堆=年輕代 + 年老代 + 持久代，持久代一般固定大小為64m，所以年輕代增加就會擠壓年老代的空間&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-Xss&lt;/code&gt;每個執行緒的堆棧大小，預設是1M&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;記憶體崩潰: 堆全部佔滿，GC持續運行但無法完成，直到程式控制台開始報錯OOM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;適當加大記憶體，減少FULL GC次數，也可以有提升&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外可以看到同樣預設情況下JDK11的GC效率比JDK8還強一點，看來改版還是有長進的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip;下章繼續，緩存與分佈式鎖&lt;/p&gt;
- https://yoziming.github.io/post/220127-gulimall-10-stress-testing/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>JVM模型與GC策略</title>
        <link>https://yoziming.github.io/post/220126-jvm-gc/</link>
        <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220126-jvm-gc/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220126-jvm-gc/ -&lt;h2 id=&#34;jvm記憶體模型&#34;&gt;JVM記憶體模型&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;2206-1.jpg&#34; alt=&#34;2206-1&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;gc&#34;&gt;GC&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Garbage Collection&lt;/em&gt; 垃圾回收是影響程式效能的重中之重&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;誰是垃圾&#34;&gt;誰是垃圾?&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121115121814.png&#34; alt=&#34;image-20220121115121814&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reachability Analysis 可達性分析: 把所有引用的物件看成一棵樹，從樹的根結點 GC Roots 出發，持續遍歷找出所有連接的樹枝物件，能連到的就是&amp;quot;可達&amp;quot;的存活物件&lt;/li&gt;
&lt;li&gt;沒有任何引用相連的就是垃圾&lt;/li&gt;
&lt;li&gt;在Java中GC Roots包括:
&lt;ul&gt;
&lt;li&gt;虛擬機棧中引用的物件&lt;/li&gt;
&lt;li&gt;方法區中類靜態屬性實體引用的物件&lt;/li&gt;
&lt;li&gt;方法區中常量引用的物件&lt;/li&gt;
&lt;li&gt;本地方法棧中JNI引用的物件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;引用的擴充&#34;&gt;引用的擴充&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;自 JDK 1.2 以後，Java 對引用的概念進行了擴充&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;String Reference 強引用：類似 &amp;ldquo;&lt;code&gt;Object obj = new     Object()&lt;/code&gt;&amp;rdquo; 屬於強引用，只有引用還在，垃圾收集器永遠不會回收掉被引用對象&lt;/li&gt;
&lt;li&gt;Soft Reference 軟引用：用來描述一些還有用但不是必須的物件。對於軟引用相關的物件，在系統將要發生 OOM（記憶體溢出）時，將會把軟引用對象列進回收範圍並進行二次回收。如果這次回收後還是沒有足夠記憶體才會拋出 OOM 異常&lt;/li&gt;
&lt;li&gt;Weak Reference 弱引用：也是用來描述非必須物件，但它的強度比軟引用更弱，被弱引用的對象只會生存到下一次垃圾回收之前。當進行 GC 時，無論當前記憶體是否足夠，都會回收掉弱引用的物件&lt;/li&gt;
&lt;li&gt;Phantom Reference 虛引用：又稱幽靈引用或幻影引用，最弱的引用關係。無法通過虛引用獲取物件的實例，為物件設置虛引用唯一的目的就是能在該物件被垃圾收集器回收時收到一個系統通知&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;清理機制&#34;&gt;清理機制&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;GC發生在堆HEAP上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;0.jpg&#34; alt=&#34;0&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新物件創在Eden區，放不下就MinorGC小清理
&lt;ul&gt;
&lt;li&gt;MinorGC小清理把Eden區中能搬的搬到隔壁Survivor倖存者區&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eden區清了還是放不下，就對倖存者區也MinorGC，嘗試放到倖存者區
&lt;ul&gt;
&lt;li&gt;每次MinorGC倖存者區中的物件就變老，待在倖存者區太久超過域值，就趕去老年區養老&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;倖存者區還是放不下，表示是個大物件，嘗試放在老年區&lt;/li&gt;
&lt;li&gt;老年區還是放不下，執行大掃除FullGC，來個大風吹&lt;/li&gt;
&lt;li&gt;還是放不下，報OOM(OutOfMemory Error)錯誤&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121115048689.png&#34; alt=&#34;image-20220121115048689&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;算法&#34;&gt;算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GC的算法各有優劣，實際上是綜合使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我都是把記憶體想像成冰箱的製冰盒，每盤上有一格一格那樣&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;標記清除mark-sweep&#34;&gt;標記清除（Mark-Sweep）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;最簡單直觀，標誰清誰，缺點是會留下空間碎片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121115147960.png&#34; alt=&#34;image-20220121115147960&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;複製copying&#34;&gt;複製（Copying）&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;需要額外一個製冰盒，整理的時候把有用的搬到新家，剩的垃圾整盤丟掉，缺點是空間利用率低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121115237072.png&#34; alt=&#34;image-20220121115237072&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;標記整理mark-compact&#34;&gt;標記整理（Mark-Compact）&lt;/h5&gt;
&lt;p&gt;在同一盤上把垃圾清掉，有用的搬動，壓縮整理成緊實的一區，缺點是效率低，適合用在老年區&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20220121115248334.png&#34; alt=&#34;image-20220121115248334&#34;&gt;&lt;/p&gt;
- https://yoziming.github.io/post/220126-jvm-gc/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>抽取關鍵字至ES、Thymeleaf模板引擎</title>
        <link>https://yoziming.github.io/post/220126-gulimall-09-thymeleaf/</link>
        <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220126-gulimall-09-thymeleaf/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220126-gulimall-09-thymeleaf/ -&lt;h1 id=&#34;商品上架&#34;&gt;商品上架&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;上架，除了把狀態改成上架，為了商品能被快速搜索到，還要提取出關鍵訊息存到ES&lt;/li&gt;
&lt;li&gt;簡單來說就是把該商品的sku提取出來，存到ES的index中，當用戶搜索商品時，就可以依照分組動態產生篩選條件，依照得分呈現商品屬性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120002704220.png&#34; alt=&#34;image-20220120002704220&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很繁瑣，但是不難&lt;/li&gt;
&lt;li&gt;SpuInfoController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 上架
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/{spuId}/up&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;spuUp&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt; Long spuId) {
    spuInfoService.&lt;span style=&#34;color:#658b00&#34;&gt;up&lt;/span&gt;(spuId);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SpuInfoServiceImpl.java
&lt;ul&gt;
&lt;li&gt;知識點:用stream把list轉map&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 商品上架
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;up&lt;/span&gt;(Long spuId) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 先從spuID查出對應的所有sku
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SkuInfoEntity&amp;gt; skuInfoEntities = skuInfoService.&lt;span style=&#34;color:#658b00&#34;&gt;getSkusBySpuId&lt;/span&gt;(spuId);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 先查出當前sku的所有可以被用來檢索的規格屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;ProductAttrValueEntity&amp;gt; baseAttrs = productAttrValueService.&lt;span style=&#34;color:#658b00&#34;&gt;baseAttrListforspu&lt;/span&gt;(spuId);
    List&amp;lt;Long&amp;gt; attrIds = baseAttrs.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(ProductAttrValueEntity::getAttrId).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// sku當初填值時就有一欄是&amp;#34;是否能被檢索
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;Long&amp;gt; searchAttrIds = attrService.&lt;span style=&#34;color:#658b00&#34;&gt;selectSearchAttrs&lt;/span&gt;(attrIds);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 轉換為Set集合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Set&amp;lt;Long&amp;gt; idSet = searchAttrIds.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toSet&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// 過濾留下能被檢索的Attrs
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SkuEsModel.&lt;span style=&#34;color:#658b00&#34;&gt;Attrs&lt;/span&gt;&amp;gt; attrsList = baseAttrs.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(item -&amp;gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; idSet.&lt;span style=&#34;color:#658b00&#34;&gt;contains&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrId&lt;/span&gt;());
    }).&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(item -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 封裝進SkuEsModel.Attrs
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        SkuEsModel.&lt;span style=&#34;color:#658b00&#34;&gt;Attrs&lt;/span&gt; attrs = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuEsModel.&lt;span style=&#34;color:#658b00&#34;&gt;Attrs&lt;/span&gt;();
        BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(item, attrs);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; attrs;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 接著查是否有庫存，先把ID抽成list方便一次查完
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;Long&amp;gt; skuIdList = skuInfoEntities.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;()
            .&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(SkuInfoEntity::getSkuId)
            .&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// 發送遠程調用，庫存系統查詢是否有庫存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Map&amp;lt;Long, Boolean&amp;gt; stockMap = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        R skuHasStock = wareFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuHasStock&lt;/span&gt;(skuIdList);
        TypeReference&amp;lt;List&amp;lt;SkuHasStockTo&amp;gt;&amp;gt; typeReference = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;List&amp;lt;SkuHasStockTo&amp;gt;&amp;gt;() {
        };
        &lt;span style=&#34;color:#228b22&#34;&gt;// 把查詢結果拿出來，裝到Map&amp;lt;Long, Boolean&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        stockMap = skuHasStock.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(typeReference).&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toMap&lt;/span&gt;(SkuHasStockTo::getSkuId,
                SkuHasStockTo::getHasStock));
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
        log.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;庫存服務查詢異常：原因{}&amp;#34;&lt;/span&gt;, e);
    }
    Map&amp;lt;Long, Boolean&amp;gt; finalStockMap = stockMap;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 要傳去ES的商品訊息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SkuEsModel&amp;gt; collect = skuInfoEntities.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(sku -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 組裝需要的數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        SkuEsModel esModel = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuEsModel();
        BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(sku, esModel);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 其他對不上，需要手動添加的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuPrice&lt;/span&gt;(sku.&lt;span style=&#34;color:#658b00&#34;&gt;getPrice&lt;/span&gt;());
        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuImg&lt;/span&gt;(sku.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuDefaultImg&lt;/span&gt;());

        &lt;span style=&#34;color:#228b22&#34;&gt;// 設置庫存信息，如果遠程調用失敗就先當作有
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (finalStockMap == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
            esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setHasStock&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setHasStock&lt;/span&gt;(finalStockMap.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(sku.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;()));
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// TODO 2、熱度評分。0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setHotScore&lt;/span&gt;(0L);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 查詢品牌和分類的名字信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        BrandEntity brandEntity = brandService.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(sku.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;());
        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandName&lt;/span&gt;(brandEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;());
        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandId&lt;/span&gt;(brandEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;());
        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandImg&lt;/span&gt;(brandEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getLogo&lt;/span&gt;());

        CategoryEntity categoryEntity = categoryService.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(sku.&lt;span style=&#34;color:#658b00&#34;&gt;getCatalogId&lt;/span&gt;());
        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setCatalogId&lt;/span&gt;(categoryEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;());
        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setCatalogName&lt;/span&gt;(categoryEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;());

        &lt;span style=&#34;color:#228b22&#34;&gt;// 設置子屬性，來自前面查的列表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        esModel.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrs&lt;/span&gt;(attrsList);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; esModel;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 發到ES
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    R r = searchFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;productStatusUp&lt;/span&gt;(collect);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 遠程調用成功
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 修改當前spu的狀態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;baseMapper&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;updateSpuStatus&lt;/span&gt;(spuId, ProductConstant.&lt;span style=&#34;color:#658b00&#34;&gt;ProductStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;SPU_UP&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;//遠程調用失敗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//TODO 7、重複調用？接口冪等性:重試機制
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;用List查SQL的拼接寫法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;List&amp;lt;Long&amp;gt; selectSearchAttrs(@Param(&amp;quot;attrIds&amp;quot;) List&amp;lt;Long&amp;gt; attrIds)

    &amp;lt;select id=&amp;quot;selectSearchAttrs&amp;quot; resultType=&amp;quot;java.lang.Long&amp;quot;&amp;gt;
        SELECT attr_id FROM pms_attr WHERE attr_id IN
        &amp;lt;foreach collection=&amp;quot;attrIds&amp;quot; item=&amp;quot;id&amp;quot; separator=&amp;quot;,&amp;quot; open=&amp;quot;(&amp;quot; close=&amp;quot;)&amp;quot;&amp;gt;
            #{id}
        &amp;lt;/foreach&amp;gt;
        AND search_type = 1
    &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;查庫存，WareSkuServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;SkuHasStockTo&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getSkuHasStock&lt;/span&gt;(List&amp;lt;Long&amp;gt; ids) {
        List&amp;lt;SkuHasStockTo&amp;gt; collect = ids.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(e -&amp;gt; {
            Long count = baseMapper.&lt;span style=&#34;color:#658b00&#34;&gt;getStock&lt;/span&gt;(e);
            SkuHasStockTo to = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuHasStockTo();
            to.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(e);
            to.&lt;span style=&#34;color:#658b00&#34;&gt;setHasStock&lt;/span&gt;(count &amp;gt; 0);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; to;
        }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; collect;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;查庫存SQL，要減去鎖定的庫存
&lt;ul&gt;
&lt;li&gt;當參數只有一個就不用@Param&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Long getStock(Long e);

&amp;lt;select id=&amp;quot;getStock&amp;quot; resultType=&amp;quot;java.lang.Long&amp;quot;&amp;gt;
        SELECT SUM(stock - stock_locked)
        FROM wms_ware_sku
        WHERE sku_id = #{e}
    &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;es部分&#34;&gt;ES部分&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;為了傳遞資料給ES伺服，建立一個模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120010456964.png&#34; alt=&#34;image-20220120010456964&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;搭一個子模組search&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一樣，引依賴、造config 參考前篇&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ElasticSaveController.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/** 
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 上架商品 /search/save/product
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param skuEsModels
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/product&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;productStatusUp&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; List&amp;lt;SkuEsModel&amp;gt; skuEsModels) {
    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; status = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
        status = productSaveService.&lt;span style=&#34;color:#658b00&#34;&gt;productStatusUp&lt;/span&gt;(skuEsModels);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (IOException e) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// log.error(&amp;#34;商品上架錯誤{}&amp;#34;,e);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_UP_EXCEPTION&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;(), BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_UP_EXCEPTION&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (status) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_UP_EXCEPTION&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;(), BizCodeEnum.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_UP_EXCEPTION&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ProductSaveServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;productStatusUp&lt;/span&gt;(List&amp;lt;SkuEsModel&amp;gt; skuEsModels) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 1.在ES中建立索引，建立mapping（doc/json/product-mapping.json）
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 2.在ES中保存這些數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    BulkRequest bulkRequest = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; BulkRequest();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (SkuEsModel skuEsModel : skuEsModels) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 構造保存請求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        IndexRequest indexRequest = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; IndexRequest(EsConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PRODUCT_INDEX&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// ES中的ID就是SKUID
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        indexRequest.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;(skuEsModel.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;());
        String jsonString = JSONUtil.&lt;span style=&#34;color:#658b00&#34;&gt;toJsonStr&lt;/span&gt;(skuEsModel);
        indexRequest.&lt;span style=&#34;color:#658b00&#34;&gt;source&lt;/span&gt;(jsonString, XContentType.&lt;span style=&#34;color:#658b00&#34;&gt;JSON&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 批量保存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        bulkRequest.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(indexRequest);
    }
    BulkResponse bulk = esRestClient.&lt;span style=&#34;color:#658b00&#34;&gt;bulk&lt;/span&gt;(bulkRequest, ElasticConfig.&lt;span style=&#34;color:#658b00&#34;&gt;COMMON_OPTIONS&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;// TODO 如果批量錯誤
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; hasFailures = bulk.&lt;span style=&#34;color:#658b00&#34;&gt;hasFailures&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 收集結果印到log
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;String&amp;gt; collect = Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;asList&lt;/span&gt;(bulk.&lt;span style=&#34;color:#658b00&#34;&gt;getItems&lt;/span&gt;()).&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(item -&amp;gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; item.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;();
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    log.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;商品上架完成：{}&amp;#34;&lt;/span&gt;, collect);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; hasFailures;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;註冊到feign等待調用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;記一個5小時的坑&#34;&gt;記一個5小時的坑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;這邊用到feign遠程調用，由於查庫存想一次查一批，所以傳了一個List過去，沒想到竟然是個悲劇的開端&lt;/li&gt;
&lt;li&gt;因為傳遞時轉JSON會擦掉泛型，所以傳遞&lt;code&gt;List&amp;lt;XXX&amp;gt;&lt;/code&gt;的時候，轉回來反序列化不注意就會出事&lt;/li&gt;
&lt;li&gt;我天真的以為用castvar去接就好，接了也沒報錯，還能sout出東西，乍看沒啥不對勁&lt;/li&gt;
&lt;li&gt;結果下面死活報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;我就一直在找原因，原來強轉接到的List是假象，是**&lt;code&gt;LinkedHashMap&lt;/code&gt;**假扮的，因為SpringMVC將Object轉json會變成key-value形式，而轉回來它也這麼覺得，所以是一個Map，害我試到懷疑人生，熬夜到天明，氣氣氣氣氣&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;解法&#34;&gt;解法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;老師在這邊對R封裝了一個方法
&lt;ul&gt;
&lt;li&gt;用的是&lt;code&gt;com.alibaba.fastjson&lt;/code&gt;的包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;setData&lt;/span&gt;(Object data) {
    put(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, data);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;;
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 利用fastjson進行反序列化
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T &lt;span style=&#34;color:#008b45&#34;&gt;getData&lt;/span&gt;(TypeReference&amp;lt;T&amp;gt; typeReference) {
    Object data = get(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;);
    String jsonString = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(data);
    T t = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(jsonString, typeReference);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; t;
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 利用fastjson進行反序列化
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; T &lt;span style=&#34;color:#008b45&#34;&gt;getData&lt;/span&gt;(String key, TypeReference&amp;lt;T&amp;gt; typeReference) {
    Object data = get(key);
    String jsonString = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;toJSONString&lt;/span&gt;(data);
    T t = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(jsonString, typeReference);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; t;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;返回的時候把list裝進去了，WareSkuController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;List&amp;lt;SkuHasStockTo&amp;gt; list = wareSkuService.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuHasStock&lt;/span&gt;(ids);

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;setData&lt;/span&gt;(list);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;最後接收的時候，用&lt;code&gt;TypeReference&lt;/code&gt;去指定反序列化的List&amp;lt;&amp;gt;類型
&lt;ul&gt;
&lt;li&gt;後面的&lt;code&gt;() {}&lt;/code&gt;因為它是一個匿名內部類，別漏了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;R skuHasStock = wareFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuHasStock&lt;/span&gt;(skuIdList);
TypeReference&amp;lt;List&amp;lt;SkuHasStockTo&amp;gt;&amp;gt; typeReference = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeReference&amp;lt;List&amp;lt;SkuHasStockTo&amp;gt;&amp;gt;() {
};
&lt;span style=&#34;color:#228b22&#34;&gt;// 把查詢結果拿出來，裝到Map&amp;lt;Long, Boolean&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;stockMap = skuHasStock.&lt;span style=&#34;color:#658b00&#34;&gt;getData&lt;/span&gt;(typeReference).&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toMap&lt;/span&gt;(SkuHasStockTo::getSkuId,
SkuHasStockTo::getHasStock));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;參考 &lt;a href=&#34;https://www.1ju.org/article/jackson-linkedhashmap-cannot-be-cast&#34;&gt;https://www.1ju.org/article/jackson-linkedhashmap-cannot-be-cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;thymeleaf&#34;&gt;Thymeleaf&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;模板引擎 = 做模板填入資源內容，引擎幫我生成HTML頁面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Thymeleaf是一個XML/HTML5模板引擎，能夠應用轉換於模板檔案，以顯示應用程式產生的資料，簡單來說只要照它的規則寫好模板與靜態資源，就能快速做出能看的HTML頁面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有點回到Javaweb的感覺，thymeleaf就像JSP的強化版，它能做到動靜分離，但是不能前後分離
&lt;ul&gt;
&lt;li&gt;優勢在於簡單，直觀(html直接就能看，相較於JSP要有網路服務捧著)、渲染快&lt;/li&gt;
&lt;li&gt;不過現在幾乎都是前後端分離，這個技術比較少見了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;引依賴，版本號給父模組的spring-boot管&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;放入靜態資源，這個黃色圖標就是classpath
&lt;ul&gt;
&lt;li&gt;靜態檔案放 &lt;code&gt;/src/java/resources/static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模板檔案放 &lt;code&gt;/src/java/resources/templates&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120161915473.png&#34; alt=&#34;image-20220120161915473&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首頁預設會在這些地方找&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;classpath:/META-INF/resources/index.html 
classpath:/resources/index.html 
classpath:/static/index.html 
calsspath:/public/index.html 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;預設約定了Controller試圖跳轉中thymeleaf模板檔案的的字首&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.thymeleaf.prefix: /templates/ 
spring.thymeleaf.suffix: .html 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;application.properties先把cache關掉&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.thymeleaf.cache=false
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;若出現不明原因頁面顯示不出來，對模組右鍵添加依賴勾選thymeleaf&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;小結&#34;&gt;小結&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;最上面引入 &lt;code&gt;xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每個標籤都要有結束標籤不可省略&lt;/li&gt;
&lt;li&gt;在link標籤引用css標籤內要增加此屬性&lt;code&gt;th:href=&amp;quot;@{/vendor/bootstrap/css/bootstrap.min.css}&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在src標籤引用javascript內要增加此屬性
&lt;code&gt;th:src=&amp;quot;@{/vendor/bootstrap/js/bootstrap.min.js}&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;要告訴thymeleaf靜態資源在哪，可以在&lt;code&gt;application.properties&lt;/code&gt;內指定&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.resources.static-locations=classpath:/static/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;以下開始分頁面製作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;首頁&#34;&gt;首頁&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IndexController.java
&lt;ul&gt;
&lt;li&gt;前面說過Controller會自動給跳轉到模板的請求加上前後綴，所以想讓人訪問首頁只要簡單的送他一個getmapping就OK&lt;/li&gt;
&lt;li&gt;把模版頁面都放在templates之下方便統一管理，首頁也不例外&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt;})
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;indexPage&lt;/span&gt;(Model model) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 查出所有的一級分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;CategoryEntity&amp;gt; categoryEntities = categoryService.&lt;span style=&#34;color:#658b00&#34;&gt;getLevel1Catalog&lt;/span&gt;();
    model.&lt;span style=&#34;color:#658b00&#34;&gt;addAttribute&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;categories&amp;#34;&lt;/span&gt;, categoryEntities);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Model類，相當於這個頁面本身(感覺類似JSP的pagescope)
&lt;ul&gt;
&lt;li&gt;想要在訪問的同時獲取一些資源，並且用model.addAttribute存在裡面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在html裡面用&lt;code&gt;th:each&lt;/code&gt;把它遍歷取出&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;li th:each=&amp;quot;category : ${categories}&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;#&amp;quot; class=&amp;quot;header_main_left_a&amp;quot; th:attr=&amp;quot;ctg-data = ${category.catId}&amp;quot;&amp;gt;&amp;lt;b
th:text=&amp;quot;${category.name}&amp;quot;&amp;gt;家用電器&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;商品分類表&#34;&gt;商品分類表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;複雜的Vo，類中有類，沒辦法它前端API就這樣要求
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@AllArgsConstructor&lt;/code&gt; 請lombok造一個全參構造器&lt;/li&gt;
&lt;li&gt;然而重點是&lt;code&gt;@NoArgsConstructor&lt;/code&gt;一定要補上，否則沒有空參構造器很多地方會出錯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@AllArgsConstructor&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@NoArgsConstructor&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Catalogs2Vo&lt;/span&gt; {

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 一級父分類的id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String catalog1Id;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 三級子分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;Category3Vo&amp;gt; catalog3List;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String id;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String name;

    &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 三級分類vo
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@AllArgsConstructor&lt;/span&gt;
    &lt;span style=&#34;color:#707a7c&#34;&gt;@NoArgsConstructor&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Category3Vo&lt;/span&gt; {

        &lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;         * 父分類、二級分類id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;         */&lt;/span&gt;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String catalog2Id;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String id;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String name;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;IndexController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 獲取所有分類，且二、三級分類以封裝好
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(value = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/index/catalog.json&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@ResponseBody&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCatalogJson&lt;/span&gt;() {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; categoryService.&lt;span style=&#34;color:#658b00&#34;&gt;getCatalogJson&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;CategoryServiceImpl.java
&lt;ul&gt;
&lt;li&gt;這個真的超繞，我覺得應該跟之前後台獲取分類的寫的treelist整合一下，不過肚子太餓就先算了，想來技術債就這這樣累積的吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 獲取所有分類，且二、三級分類以封裝好
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getCatalogJson&lt;/span&gt;() {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 性能優化：將數據庫的多次查詢變為一次
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;CategoryEntity&amp;gt; selectList = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;baseMapper&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;selectList&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 查出所有一級分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;CategoryEntity&amp;gt; level1Categories = getLevel1Catalog();

    &lt;span style=&#34;color:#228b22&#34;&gt;// 封裝數據
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Map&amp;lt;String, List&amp;lt;Catalogs2Vo&amp;gt;&amp;gt; parentCid =
            level1Categories.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toMap&lt;/span&gt;(k -&amp;gt; k.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(), v -&amp;gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;// 1、每一個的一級分類,查到這個一級分類的二級分類
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                List&amp;lt;CategoryEntity&amp;gt; categoryEntities = getParentCid(selectList, v.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;());

                &lt;span style=&#34;color:#228b22&#34;&gt;// 2、封裝上面的結果
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                List&amp;lt;Catalogs2Vo&amp;gt; catalogs2Vos = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (categoryEntities != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
                    catalogs2Vos = categoryEntities.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(l2 -&amp;gt; {
                        Catalogs2Vo catalogs2Vo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Catalogs2Vo(v.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(), &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;,
                                l2.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;()
                                , l2.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;());

                        &lt;span style=&#34;color:#228b22&#34;&gt;// 1、找當前二級分類的三級分類封裝成vo
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                        List&amp;lt;CategoryEntity&amp;gt; level3Catelog = getParentCid(selectList, l2.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;());

                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (level3Catelog != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
                            List&amp;lt;Catalogs2Vo.&lt;span style=&#34;color:#658b00&#34;&gt;Category3Vo&lt;/span&gt;&amp;gt; category3Vos = level3Catelog.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(l3 -&amp;gt; {
                                &lt;span style=&#34;color:#228b22&#34;&gt;//2、封裝成指定格式
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                                Catalogs2Vo.&lt;span style=&#34;color:#658b00&#34;&gt;Category3Vo&lt;/span&gt; category3Vo =
                                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Catalogs2Vo.&lt;span style=&#34;color:#658b00&#34;&gt;Category3Vo&lt;/span&gt;(l2.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(),
                                                l3.&lt;span style=&#34;color:#658b00&#34;&gt;getCatId&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(),
                                                l3.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;());

                                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; category3Vo;
                            }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
                            catalogs2Vo.&lt;span style=&#34;color:#658b00&#34;&gt;setCatalog3List&lt;/span&gt;(category3Vos);
                        }
                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; catalogs2Vo;
                    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
                }
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; catalogs2Vos;
            }));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; parentCid;
}

&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;CategoryEntity&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getParentCid&lt;/span&gt;(List&amp;lt;CategoryEntity&amp;gt; selectList, Long parentCid) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; selectList.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(item -&amp;gt; item.&lt;span style=&#34;color:#658b00&#34;&gt;getParentCid&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(parentCid)).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;前端頁面是一個JS，長這樣&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120174709917.png&#34; alt=&#34;image-20220120174709917&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS不想多研究了，總之成功實現跟隨選滑鼠指向的一級分類，顯示對應的下級
&lt;ul&gt;
&lt;li&gt;這玩意之後還會加到redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220120173519630.png&#34; alt=&#34;image-20220120173519630&#34;&gt;&lt;/p&gt;
- https://yoziming.github.io/post/220126-gulimall-09-thymeleaf/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>DockerDekstop掛載相關設定</title>
        <link>https://yoziming.github.io/post/220125-wsl2-docker/</link>
        <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220125-wsl2-docker/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220125-wsl2-docker/ -&lt;h1 id=&#34;docker-dekstop&#34;&gt;Docker Dekstop&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker Dekstop本身可以在Windows 上執行(基於wsl)，簡單使用沒問題，然而需要匯出匯入、掛載檔案就比較麻煩，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wsl2可以透過加入一個中間橋(例如一個ubuntu)掛載雙方來達成操作檔案的目的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PS.一般教學會用到Windows市集安裝，但我個人特別不喜歡Windows內建的那些東西，啥更新、市集全都在安裝後就砍光光了，所以只能全手動&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;必要環境&#34;&gt;必要環境&lt;/h2&gt;
&lt;p&gt;Windows 10 64-bit：Home or Pro 2004 (build 19041) or higher, or Enterprise or Education 1909 (build 18363) or higher.&lt;/p&gt;
&lt;h3 id=&#34;啟動wsl與hyper-v&#34;&gt;啟動wsl與hyper-V&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart

dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安裝ubuntu&#34;&gt;安裝ubuntu&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;去微軟官方拿，我是選ubuntu-18.04版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手動下載網址: &lt;a href=&#34;https://aka.ms/wsl-ubuntu-1804&#34;&gt;https://aka.ms/wsl-ubuntu-1804&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下載完直接改副檔名成.zip之類的，解壓縮&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意好像必須在C槽且有管理員權限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118222409803.png&#34; alt=&#34;image-20220118222409803&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;執行這個一臉欠執行的.exe就會開始安裝，並且要求輸入建立用戶與密碼，記住帳號密碼&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118222539556.png&#34; alt=&#34;image-20220118222539556&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 查看剛剛點ubuntu1804.exe裝的是否成功
wsl -l -v

# 將 WSL 2 設定為預設版本
wsl --set-default-version 2

# 設定 WSL 預設 的Linux
wsl --set-default Ubuntu-18.04
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安裝windows-terminal&#34;&gt;安裝Windows Terminal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cmd的進階版是power shell，power shell又被Windows Terminal整合，同時更好看好用&lt;/li&gt;
&lt;li&gt;能夠原生支援Unicode、操作子系統的Linux，Win11版本還可以直接開linux GUI&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;choco install microsoft-windows-terminal
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;啟動&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118223820117.png&#34; alt=&#34;image-20220118223820117&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;開啟橋接&#34;&gt;開啟橋接&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118224851959.png&#34; alt=&#34;image-20220118224851959&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回Windows Terminal試試docker指令，非常OK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118225617972.png&#34; alt=&#34;image-20220118225617972&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;docker常用指令&#34;&gt;docker常用指令&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 拉映像
docker pull 映像名

// 進入容器
docker run -it &amp;lt;容器ID或標籤&amp;gt; /bin/bash

// 退出容器
exit

// 查看容器
docker ps

// 開關容器
docker stop &amp;lt;容器ID或標籤&amp;gt;
docker start &amp;lt;容器ID或標籤&amp;gt;
docker restart &amp;lt;容器ID或標籤&amp;gt;

// 刪除
docker rm -f &amp;lt;容器ID或標籤&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;掛載連接&#34;&gt;掛載連接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在windows系統中執行：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cp {WIN_DATA} \\wsl$\Ubuntu\home
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中\wsl$\Ubuntu\home是WSL檔案系統Ubuntu發行版本的\home目錄。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;進入到Ubuntu系統。執行&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wsl -d Ubuntu

# 然後執行
docker run -v /home:{DOCKER_PATH} -it {IMAGE}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;進入docker後，IO操作就飛快了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;個人經驗&#34;&gt;個人經驗&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;個人摸索出簡單適合新手的用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;開啟docker desktop&lt;/li&gt;
&lt;li&gt;開啟Windows Terminal，連線到WSL的ubuntu&lt;/li&gt;
&lt;li&gt;要讀取容器中的檔案，可以在docker desktop看volumes的data分頁，或直接找路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\\wsl$\docker-desktop-data\version-pack-data\community\docker\volumes\
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;要寫入容器中的檔案，直接開那個容器的CLI操作
&lt;ul&gt;
&lt;li&gt;想知道容器CLI打開後檔案的確切路徑，用&lt;code&gt;ls&lt;/code&gt;顯示當前下面有誰，用&lt;code&gt;pwd&lt;/code&gt;查看當下在哪&lt;/li&gt;
&lt;li&gt;一個docker容器 內部就是一個linux，容器服務用的到設定檔案常常是在&lt;code&gt;/usr/share/nginx&lt;/code&gt;之下&lt;/li&gt;
&lt;li&gt;也有一些比較特殊，通常是別人另外打包的就要自己找，例如&lt;code&gt;/home/elasticsearch/elasticsearch-7.16.2/config&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;cp&lt;/code&gt;指令拷貝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果要操作的量多，把WSL連圖形化介面，startxfce4為所欲為&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220125-wsl2-docker/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>ElasticSearch與Spring整合</title>
        <link>https://yoziming.github.io/post/220125-gulimall-08-elasticsearch/</link>
        <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220125-gulimall-08-elasticsearch/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220125-gulimall-08-elasticsearch/ -&lt;h1 id=&#34;elasticsearch&#34;&gt;ElasticSearch&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;用來執行站內搜索(如商品查詢)的引擎&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;開源的分散式搜尋引擎，基於Apache Lucene，但是封裝成REST API，方便操作&lt;/li&gt;
&lt;li&gt;核心觀念: Inverted Index (反向索引)&lt;/li&gt;
&lt;li&gt;是 NoSQL 資料庫的一種，所有的資料都是以 JSON 的方式進行存取&lt;/li&gt;
&lt;li&gt;名詞對應:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;RDBMS&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;概念&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Elasticsearch&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Table&lt;/td&gt;
&lt;td&gt;表&lt;/td&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Row&lt;/td&gt;
&lt;td&gt;一筆資料(例如:張三)&lt;/td&gt;
&lt;td&gt;Document&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Column&lt;/td&gt;
&lt;td&gt;屬性(例如:姓名)&lt;/td&gt;
&lt;td&gt;Field&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Schema&lt;/td&gt;
&lt;td&gt;架構(例如:資料類型、允許為空等等)&lt;/td&gt;
&lt;td&gt;Mapping&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SQL&lt;/td&gt;
&lt;td&gt;操作語句&lt;/td&gt;
&lt;td&gt;DSL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;以前可能有人會說Index對應database，type才是對應表，但在ES7版後Type已經幾乎被棄用&lt;/li&gt;
&lt;li&gt;個人直接把它看作表了，畢竟是概念，不用分太細&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安裝&#34;&gt;安裝&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;使用docker&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;教學的他設定掛載位置與插件路徑，並取得權限等等，方便後續操作&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir -p /mydata/elasticsearch/config
mkdir -p /mydata/elasticsearch/data
echo &amp;quot;http.host: 0.0.0.0&amp;quot; &amp;gt;/mydata/elasticsearch/config/elasticsearch.yml
chmod -R 777 /mydata/elasticsearch/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;二合一鏡像: &lt;a href=&#34;https://hub.docker.com/r/nshou/elasticsearch-kibana&#34;&gt;https://hub.docker.com/r/nshou/elasticsearch-kibana&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;目前2022年1月是7.16.2板&lt;/li&gt;
&lt;li&gt;我直接用docker desktop，就沒掛載那麼多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull nshou/elasticsearch-kibana

docker run --name elasticsearch -p 5601:5601 -p 9200:9200 -e  &amp;quot;discovery.type=single-node&amp;quot; -e ES_JAVA_OPTS=&amp;quot;-Xms64m -Xmx512m&amp;quot; -d nshou/elasticsearch-kibana
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt; 取名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e &amp;quot;discovery.type=single-node&amp;quot;&lt;/code&gt;  單節點模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e ES_JAVA_OPTS=&amp;quot;-Xms64m -Xmx512m&amp;quot;&lt;/code&gt; 限制記憶體，不限會占用超多&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; 連接阜
&lt;ul&gt;
&lt;li&gt;Elasticsearch @ localhost:9200&lt;/li&gt;
&lt;li&gt;Kibana @ localhost:5601&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; 後台運行並返回id&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;測試&#34;&gt;測試&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;嘗試看看Kibana介面，訪問: localhost:5601&lt;/li&gt;
&lt;li&gt;查看主服務健康: http://localhost:9200/_cat/health&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;查看索引: http://localhost:9200/_cat/indices
&lt;ul&gt;
&lt;li&gt;相當於show databases或tables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建立一個document&#34;&gt;建立一個Document&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用PUT請求 http://localhost:9200/customer/external/1
&lt;ul&gt;
&lt;li&gt;並且帶有body資訊&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118235447277.png&#34; alt=&#34;image-20220118235447277&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回的是metadata，後設資料，這些&lt;code&gt;_&lt;/code&gt;開頭的就是資料的資料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_index&lt;/code&gt;：document 所屬的 index 名稱，相當於&amp;quot;表&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_type&lt;/code&gt;：document 類型 ，通常為&lt;code&gt;_doc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_id&lt;/code&gt;：document ID，主鍵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_source&lt;/code&gt;：document 的原始 JSON 資料樣貌&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_version&lt;/code&gt;：版本訊息 (有這欄位就表示 ES 具有版本控管的能力)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_score&lt;/code&gt;：查詢時的算分結果 (每次的搜尋都會根據 document 對於搜尋內容的相關度進行算分)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;index&lt;/code&gt; 在 ES 中是個邏輯空間的概念，用來儲存 document 的容器，而這些 document 內容都是相似的 (跟其他領域的 index 用法不太一樣)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shard&lt;/code&gt; 在 ES 中則是個物理空間的的概念，index 中的資料會分散放在不同的 shard 中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;put與post更新&#34;&gt;PUT與POST更新&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PUT必須指定ID，如果存在則更新(覆蓋更新)
&lt;ul&gt;
&lt;li&gt;與REST規則相符，PUT是冪等，即多次操作結果返回相同(每次都會整個刷新的意思)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;POST不必指定ID，如果不存在就建立，已存在就更新
&lt;ul&gt;
&lt;li&gt;但是如果資料都沒變動，就不更新，且會返回&amp;quot;noop&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;查詢&#34;&gt;查詢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用GET請求 http://localhost:9200/customer/external/1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;並且不能有body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    &amp;quot;_version&amp;quot;: 1,
    &amp;quot;_seq_no&amp;quot;: 0,
    &amp;quot;_primary_term&amp;quot;: 1,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;_seq_no&lt;/code&gt; 每次更新都會+1，用來做樂觀鎖&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_primary_term&lt;/code&gt; 當主分片重新分配，如重啟就會變化&lt;/p&gt;
&lt;h3 id=&#34;刪&#34;&gt;刪&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;就DELETE，可以指定ID，或整個index全刪&lt;/li&gt;
&lt;li&gt;沒辦法刪除type&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bulk批次操作&#34;&gt;bulk批次操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每條語法獨立，其中有誰失敗不影響其他人&lt;/li&gt;
&lt;li&gt;範例:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST customer/external/_bulk
{&amp;quot;index&amp;quot;:{&amp;quot;_id&amp;quot;:&amp;quot;1&amp;quot;}}
{&amp;quot;name&amp;quot;:&amp;quot;John Doe&amp;quot;}
{&amp;quot;index&amp;quot;:{&amp;quot;_id&amp;quot;:&amp;quot;2&amp;quot;}}
{&amp;quot;name&amp;quot;:&amp;quot;John Doe&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;kibana&#34;&gt;kibana&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;舒服的可視化操作介面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;連線到: localhost:5601&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;導入測試數據:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/elasticsearch/blob/v7.4.2/docs/src/test/resources/accounts.json&#34;&gt;https://github.com/elastic/elasticsearch/blob/v7.4.2/docs/src/test/resources/accounts.json&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST bank/account/_bulk
(去github複製貼到這)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;image-20220119003426307.png&#34; alt=&#34;image-20220119003426307&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;search-api&#34;&gt;Search Api&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;兩種基本檢索方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通過REST request uri 發送搜索參數 （uri +檢索參數）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET bank/_search?q=*&amp;amp;sort=account_number:asc
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;通過REST request body 來發送它們（uri+請求體）
&lt;ul&gt;
&lt;li&gt;只能用在dev tool，一般HTTP不給你發GET帶body的&lt;/li&gt;
&lt;li&gt;在kibana dev_tools用ctrl + enter做為執行的快捷鍵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;/bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match_all&amp;#34;&lt;/span&gt;: {} },
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;sort&amp;#34;&lt;/span&gt;: [
    { &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;account_number&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;asc&amp;#34;&lt;/span&gt; },
    {&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;desc&amp;#34;&lt;/span&gt;}
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;返回的值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hits&lt;/code&gt; 結果數量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_score&lt;/code&gt; 得分(字串比對的得分)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;補充-sql方式查詢&#34;&gt;補充: SQL方式查詢&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我後來才知道ES 6.3以後原生支持用SQL方式來查，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /_sql?format=txt
{
  &amp;quot;query&amp;quot;: &amp;quot;SELECT account_number,address,age,balance FROM account LIMIT 10&amp;quot;
}

&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;對於一般使用來說完全足夠了，有需要深度使用再學DSL吧&lt;/li&gt;
&lt;li&gt;參考 : &lt;a href=&#34;http://www.macrozheng.com/#/reference/elasticsearch_sql_start&#34;&gt;http://www.macrozheng.com/#/reference/elasticsearch_sql_start&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;query-dsl&#34;&gt;Query DSL&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch提供了一個可以執行查詢的Json風格的DSL。這個被稱為Query DSL，該查詢語言非常全面。例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;QUERY_NAME:&lt;/span&gt;{
   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;ARGUMENT:VALUE,&lt;/span&gt;
   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;ARGUMENT:VALUE,...&lt;/span&gt;
}

{
  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;QUERY_NAME:{&lt;/span&gt;
     &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;FIELD_NAME:{&lt;/span&gt;
       &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;ARGUMENT:VALUE,&lt;/span&gt;
       &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;ARGUMENT:VALUE,...&lt;/span&gt;
      }
   &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match_all&amp;#34;&lt;/span&gt;: {}
  },
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;sort&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;account_number&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;desc&amp;#34;&lt;/span&gt;
      }
    }
  ]
}


&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match_all&amp;#34;&lt;/span&gt;: {}
  },
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;sort&amp;#34;&lt;/span&gt;: [
    {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;account_number&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;desc&amp;#34;&lt;/span&gt;
      }
    }
  ],
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;_source&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;firstname&amp;#34;&lt;/span&gt;]

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_all&lt;/code&gt; 代表查詢所有，es中可以在&lt;code&gt;query&lt;/code&gt;中組合非常多的查詢類型完成複雜查詢&lt;/li&gt;
&lt;li&gt;&lt;code&gt;from&lt;/code&gt; + &lt;code&gt;size&lt;/code&gt; 限定返回數量，完成分頁功能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sort&lt;/code&gt; 排序，可以多重排序(前一個順位相等時)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_source&lt;/code&gt; 只想返回某些屬性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;匹配查詢&#34;&gt;匹配查詢&lt;/h3&gt;
&lt;h4 id=&#34;match-匹配&#34;&gt;match 匹配&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;例如匹配某值等於多少&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;account_number&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;也可以模糊匹配，會進行分詞匹配並依照得分排序返回
&lt;ul&gt;
&lt;li&gt;會用Aviation查、用Road查，然後最接近Aviation Road的會排在前面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Aviation Road&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;match_phrase-短句匹配&#34;&gt;match_phrase 短句匹配&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不能拆分，一定要包含完整的&lt;code&gt;Aviation Road&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;但是可以更長，例如返回的結果是 &lt;code&gt;2123 Aviation Road xxx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match_phrase&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Aviation Road&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;multi_match-多字段匹配&#34;&gt;multi_match 多字段匹配&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;address或city中包含&amp;quot;mill&amp;quot;的
&lt;ul&gt;
&lt;li&gt;也能多查詢字，例如&amp;quot;mill road&amp;quot;就會跟前面模糊匹配一樣分詞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;multi_match&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mill &amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;fields&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;city&amp;#34;&lt;/span&gt;]
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;term-精確匹配&#34;&gt;term 精確匹配&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;類似match匹配某個屬性，但是term&lt;strong&gt;不分詞&lt;/strong&gt;且須完全符合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例如用term找&amp;quot;Aviation Road&amp;quot;，就只會找address完全一致的那個&amp;quot;Aviation Road&amp;quot;，太長太短有沒有空格通通out&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;總之文字檢索用match，其他非文字匹配用term&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;term&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Aviation Road&amp;#34;&lt;/span&gt;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;複合查詢&#34;&gt;複合查詢&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可以組合嵌套使用，讓查詢條件千變萬化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;bool-條件判斷&#34;&gt;bool 條件判斷&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;must&lt;/code&gt; 必須達到must所列舉的所有條件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就是and&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;must_not&lt;/code&gt; 必須不匹配&lt;code&gt;must_not&lt;/code&gt;所列舉的所有條件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就是not&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;should&lt;/code&gt; 應該滿足should所列舉的條件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;就是加分項，有更好，沒有也行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;:{
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;bool&amp;#34;&lt;/span&gt;:{
             &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;must&amp;#34;&lt;/span&gt;:[
              {&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;:{&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mill&amp;#34;&lt;/span&gt;}},
              {&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;:{&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;gender&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;}}
             ]
         }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在boolean查詢中，&lt;code&gt;must&lt;/code&gt;, &lt;code&gt;should&lt;/code&gt; 和&lt;code&gt;must_not&lt;/code&gt; 元素都被稱為查詢子句&lt;/li&gt;
&lt;li&gt;文檔是否符合每個子句中的標準，決定了文檔的&amp;quot;&lt;strong&gt;相關性得分&lt;/strong&gt;&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;filter-結果過濾&#34;&gt;filter 結果過濾&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;不會計算相關性得分，純過濾
&lt;ul&gt;
&lt;li&gt;用在不想對評分排序有影響的場合，類似between之類&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;bool&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;must&amp;#34;&lt;/span&gt;: [
        {
          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mill&amp;#34;&lt;/span&gt;
          }
        }
      ],
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;filter&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;range&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;gte&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;10000&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;lte&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;20000&amp;#34;&lt;/span&gt;
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;aggregation-執行聚合&#34;&gt;aggregation 執行聚合&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;類似GROUP BY的概念，可以將查詢的結果依照條件分組打包成&lt;code&gt;buckets&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;NAME&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;AGG_TYPE&amp;#34;&lt;/span&gt;: {}
  }
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NAME&lt;/code&gt; 這次聚合的名字，就像MySQL取別名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AGG_TYPE&lt;/code&gt; 聚合的類型
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;avg&lt;/code&gt; 平均&lt;/li&gt;
&lt;li&gt;&lt;code&gt;term&lt;/code&gt; 精確匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terms&lt;/code&gt; 多個精確匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220119152725760.png&#34; alt=&#34;image-20220119152725760&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;子聚合&#34;&gt;子聚合&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;基於某個聚合結果來聚合，寫在父聚合之內
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;size&amp;quot;: 0&lt;/code&gt; 不想關注每個人的詳情，只想要統計結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match_all&amp;#34;&lt;/span&gt;: {}
  },
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;年齡分組&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;
      },
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;平均薪資&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;avg&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;
          }
        }
      }
    }
  },
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;image-20220119154011303.png&#34; alt=&#34;image-20220119154011303&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;範例2: 查出所有年齡分佈，並且這些年齡段中M的平均薪資和F的平均薪資以及這個年齡段的總體平均薪資
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.keyword&lt;/code&gt; 精確匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;GET&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;bank/_search&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;query&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;match_all&amp;#34;&lt;/span&gt;: {}
  },
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;ageAgg&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;
      },
      &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;genderAgg&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;terms&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;gender.keyword&amp;#34;&lt;/span&gt;
          },
          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;aggs&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;balanceAvg&amp;#34;&lt;/span&gt;: {
              &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;avg&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;
              }
            }
          }
        },
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;ageBalanceAvg&amp;#34;&lt;/span&gt;: {
          &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;avg&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;field&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;
          }
        }
      }
    }
  },
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;image-20220119154724229.png&#34; alt=&#34;image-20220119154724229&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;mapping&#34;&gt;Mapping&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;就是建表時指定存在裡面的玩意的規則&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Maping是用來定義一個文檔（document），以及它所包含的屬性（field）是如何存儲和索引的。比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;數值格式: 都是json但也能分text、long&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哪些字符串屬性應該被看做全文本屬性（full text fields）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哪些屬性包含數字，日期或地理位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文檔中的所有屬性是否都被索引(就是決定是否會被搜，預設都是true)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;日期的格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自定義映射規則來執行動態添加屬性&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看mapping信息 &lt;code&gt;GET bank/_mapping&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指定mapping&#34;&gt;指定mapping&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;要在建立index的時候就指定，不然就是預設的
&lt;ul&gt;
&lt;li&gt;類似SQL建表的時候指定表的構成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PUT /my_index
{
  &amp;quot;mappings&amp;quot;: {
    &amp;quot;properties&amp;quot;: {
      &amp;quot;age&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
      },
      &amp;quot;email&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;keyword&amp;quot;
      },
      &amp;quot;name&amp;quot;: {
        &amp;quot;type&amp;quot;: &amp;quot;text&amp;quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Mapping建完就不能改，要改只能像給database改名，複製建新的那樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分詞&#34;&gt;分詞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;顧名思義將詞拆開成有意義的片段，預設就是用standard標準分詞器，例如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;_analyze&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;standard&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;The 2 QUICK Brown-Foxes jumped over the lazy dog&amp;#39;s bone.&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;tokenizer分詞器，將詞拆成一個一個的&lt;code&gt;token&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;預設的中文分不好(應該說只會全部拆成一個字)，需要火力支援&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安裝ik分詞器&#34;&gt;安裝ik分詞器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/medcl/elasticsearch-analysis-ik&#34;&gt;https://github.com/medcl/elasticsearch-analysis-ik&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要對應版本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用插件安裝，超簡單，進到容器內使用命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./bin/elasticsearch-plugin install xxx插件版本資源網址
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;直接從docker desktop打開該容器的CLI&lt;/li&gt;
&lt;li&gt;因為是2合一鏡像，進了容器還要&lt;code&gt;cd elasticsearch-7.16.2&lt;/code&gt;再進到elasticsearch資料夾下，執行:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.16.2/elasticsearch-analysis-ik-7.16.2.zip
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;image-20220119161207797.png&#34; alt=&#34;image-20220119161207797&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;另外附上教學的手動方法，在前面我們已經將elasticsearch容器的“/usr/share/elasticsearch/plugins”目錄，映射到宿主機的“ /mydata/elasticsearch/plugins”目錄下，所以比較方便的做法就是下載“/elasticsearch-analysis-ik-xxx.zip”文件，然後解壓到該文件夾下即可&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 進入es容器內部plugin目錄
docker exec -it elasticsearch /bin/bash

// 下載
# wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip

// 解壓縮
unzip elasticsearch-analysis-ik-7.6.2.zip -d ink

// 搬到插件資料夾
mv ik plugins/

// 刪除殘餘
rm -rf elasticsearch-analysis-ik-7.6.2.zip
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;改完都要重啟容器才能生效!&lt;/li&gt;
&lt;li&gt;測試:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;_analyze&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;analyzer&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ik_max_word&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;《白雪公主》是廣泛流行於歐洲的一篇德國童話，亦是該童話中的主角。其最著名的版本見於德國《格林童話》，講述了白雪公主受到繼母的虐待，逃到森林裡，遇到七個小矮人的故事&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;image-20220119161834409.png&#34; alt=&#34;image-20220119161834409&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定義詞庫&#34;&gt;自定義詞庫&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;修改&lt;code&gt;/usr/share/elasticsearch/plugins/ik/config&lt;/code&gt;中的&lt;code&gt;IKAnalyzer.cfg.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#1e889b&#34;&gt;&amp;lt;!DOCTYPE properties SYSTEM &amp;#34;http://java.sun.com/dtd/properties.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;comment&amp;gt;&lt;/span&gt;IK Analyzer 擴展配置&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/comment&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--用户可以在這裏配置自己的擴展字典 --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;entry&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;key=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ext_dict&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
	 &lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--用户可以在這裏配置自己的擴展停止詞字典--&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;entry&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;key=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ext_stopwords&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/entry&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--用户可以在這裏配置遠程擴展字典 --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- &amp;lt;entry key=&amp;#34;remote_ext_dict&amp;#34;&amp;gt;words_location&amp;lt;/entry&amp;gt; --&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!--用户可以在這裏配置遠程擴展停止詞字典--&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color:#228b22&#34;&gt;&amp;lt;!-- &amp;lt;entry key=&amp;#34;remote_ext_stopwords&amp;#34;&amp;gt;words_location&amp;lt;/entry&amp;gt; --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;更新完成後，es只會對於新增的數據用更新分詞。歷史數據是不會重新分詞的。如果想要歷史數據重新分詞，需要執行:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST my_index/_update_by_query?conflicts=proceed
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;我用的二合一鏡像是在&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/home/elasticsearch/elasticsearch-7.16.2/config/analysis-ik/IKAnalyzer.cfg.xml
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;將檔案抓出來放到linux宿主&lt;code&gt;/mydata/elasticsearch&lt;/code&gt;路徑下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker cp elasticsearch:/home/elasticsearch/elasticsearch-7.16.2/config/analysis-ik/IKAnalyzer.cfg.xml /mydata/elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;改一改，塞回去&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;整合spring&#34;&gt;整合Spring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;導依賴，注意版本要等同ELK的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.elasticsearch.client&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;elasticsearch-rest-high-level-client&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;7.16.2&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;並且要在項目中指定properties&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        ...
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;elasticsearch.version&amp;gt;&lt;/span&gt;7.16.2&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/elasticsearch.version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;測試連線&#34;&gt;測試連線&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;先造一個設定類&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ElasticConfig&lt;/span&gt; {

    &lt;span style=&#34;color:#228b22&#34;&gt;// 設定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; RequestOptions COMMON_OPTIONS;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; {
        RequestOptions.&lt;span style=&#34;color:#658b00&#34;&gt;Builder&lt;/span&gt; builder = RequestOptions.&lt;span style=&#34;color:#658b00&#34;&gt;DEFAULT&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;toBuilder&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// builder.addHeader(&amp;#34;Authorization&amp;#34;, &amp;#34;Bearer &amp;#34; + TOKEN);
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// builder.setHttpAsyncResponseConsumerFactory(
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//         new HttpAsyncResponseConsumerFactory
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//                 .HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024));
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        COMMON_OPTIONS = builder.&lt;span style=&#34;color:#658b00&#34;&gt;build&lt;/span&gt;();
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 已經被棄用的創造Client方法
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; RestHighLevelClient &lt;span style=&#34;color:#008b45&#34;&gt;restHighLevelClient&lt;/span&gt;() {
        &lt;span style=&#34;color:#228b22&#34;&gt;// Create the low-level client
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        RestClientBuilder httpClientBuilder = RestClient.&lt;span style=&#34;color:#658b00&#34;&gt;builder&lt;/span&gt;(
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; HttpHost(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;, 9200)
        );
        &lt;span style=&#34;color:#228b22&#34;&gt;// Create the HLRC
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        RestHighLevelClient hlrc = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; RestHighLevelClient(httpClientBuilder);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; hlrc;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;簡單測試，嘗試造一個index與物件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@SpringBootTest&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;EsTest&lt;/span&gt; {

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; RestHighLevelClient client;

    &lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;User&lt;/span&gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String name;
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;

    }
    &lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;test&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 建立一個測試的物件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        User user = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; User();
        user.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;);
        user.&lt;span style=&#34;color:#658b00&#34;&gt;setAge&lt;/span&gt;(30);
        String s = JSONUtil.&lt;span style=&#34;color:#658b00&#34;&gt;toJsonStr&lt;/span&gt;(user);

        &lt;span style=&#34;color:#228b22&#34;&gt;// 創立index
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        IndexRequest indexRequest = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; IndexRequest(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 指定id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        indexRequest.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 放進去的東西，如果是字串必須聲明是XContentType.JSON，否則要放map
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        indexRequest.&lt;span style=&#34;color:#658b00&#34;&gt;source&lt;/span&gt;(s, XContentType.&lt;span style=&#34;color:#658b00&#34;&gt;JSON&lt;/span&gt;);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 執行，第2個參數是使用一般設定
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        IndexResponse response = client.&lt;span style=&#34;color:#658b00&#34;&gt;index&lt;/span&gt;(indexRequest, ElasticConfig.&lt;span style=&#34;color:#658b00&#34;&gt;COMMON_OPTIONS&lt;/span&gt;);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;response = &amp;#34;&lt;/span&gt; + response);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;測試2&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;searchData&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
        GetRequest getRequest = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; GetRequest(
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;_-2vAHIB0nzmLJLkxKWk&amp;#34;&lt;/span&gt;);

        GetResponse getResponse = client.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(getRequest, RequestOptions.&lt;span style=&#34;color:#658b00&#34;&gt;DEFAULT&lt;/span&gt;);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(getResponse);
        String index = getResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getIndex&lt;/span&gt;();
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(index);
        String id = getResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;();
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(id);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (getResponse.&lt;span style=&#34;color:#658b00&#34;&gt;isExists&lt;/span&gt;()) {
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; version = getResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getVersion&lt;/span&gt;();
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(version);
            String sourceAsString = getResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getSourceAsString&lt;/span&gt;();
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(sourceAsString);
            Map&amp;lt;String, Object&amp;gt; sourceAsMap = getResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getSourceAsMap&lt;/span&gt;();
            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(sourceAsMap);
            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;[] sourceAsBytes = getResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getSourceAsBytes&lt;/span&gt;();
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {

        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;檢索範例&#34;&gt;檢索範例&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;DSL有的這邊都有，翻著官方文檔寫吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 複雜檢索:在bank中搜索address中包含mill的所有人的年齡分佈以及平均年齡，平均薪資
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * @throws IOException
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;searchData&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException {
    &lt;span style=&#34;color:#228b22&#34;&gt;//1. 創建檢索請求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SearchRequest searchRequest = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchRequest();

    &lt;span style=&#34;color:#228b22&#34;&gt;//1.1）指定索引
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    searchRequest.&lt;span style=&#34;color:#658b00&#34;&gt;indices&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;bank&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#228b22&#34;&gt;//1.2）構造檢索條件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SearchSourceBuilder sourceBuilder = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SearchSourceBuilder();
    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;query&lt;/span&gt;(QueryBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;matchQuery&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Mill&amp;#34;&lt;/span&gt;));

    &lt;span style=&#34;color:#228b22&#34;&gt;//1.2.1)按照年齡分佈進行聚合
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    TermsAggregationBuilder ageAgg=AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;terms&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ageAgg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(10);
    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;aggregation&lt;/span&gt;(ageAgg);

    &lt;span style=&#34;color:#228b22&#34;&gt;//1.2.2)計算平均年齡
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    AvgAggregationBuilder ageAvg = AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;avg&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ageAvg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;);
    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;aggregation&lt;/span&gt;(ageAvg);
    &lt;span style=&#34;color:#228b22&#34;&gt;//1.2.3)計算平均薪資
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    AvgAggregationBuilder balanceAvg = AggregationBuilders.&lt;span style=&#34;color:#658b00&#34;&gt;avg&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;balanceAvg&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;balance&amp;#34;&lt;/span&gt;);
    sourceBuilder.&lt;span style=&#34;color:#658b00&#34;&gt;aggregation&lt;/span&gt;(balanceAvg);

    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;檢索條件：&amp;#34;&lt;/span&gt;+sourceBuilder);
    searchRequest.&lt;span style=&#34;color:#658b00&#34;&gt;source&lt;/span&gt;(sourceBuilder);
    &lt;span style=&#34;color:#228b22&#34;&gt;//2. 執行檢索
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SearchResponse searchResponse = client.&lt;span style=&#34;color:#658b00&#34;&gt;search&lt;/span&gt;(searchRequest, RequestOptions.&lt;span style=&#34;color:#658b00&#34;&gt;DEFAULT&lt;/span&gt;);
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;檢索結果：&amp;#34;&lt;/span&gt;+searchResponse);

    &lt;span style=&#34;color:#228b22&#34;&gt;//3. 將檢索結果封裝為Bean
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SearchHits hits = searchResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getHits&lt;/span&gt;();
    SearchHit[] searchHits = hits.&lt;span style=&#34;color:#658b00&#34;&gt;getHits&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (SearchHit searchHit : searchHits) {
        String sourceAsString = searchHit.&lt;span style=&#34;color:#658b00&#34;&gt;getSourceAsString&lt;/span&gt;();
        Account account = JSON.&lt;span style=&#34;color:#658b00&#34;&gt;parseObject&lt;/span&gt;(sourceAsString, Account.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;);
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(account);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;//4. 獲取聚合信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Aggregations aggregations = searchResponse.&lt;span style=&#34;color:#658b00&#34;&gt;getAggregations&lt;/span&gt;();

    Terms ageAgg1 = aggregations.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ageAgg&amp;#34;&lt;/span&gt;);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (Terms.&lt;span style=&#34;color:#658b00&#34;&gt;Bucket&lt;/span&gt; bucket : ageAgg1.&lt;span style=&#34;color:#658b00&#34;&gt;getBuckets&lt;/span&gt;()) {
        String keyAsString = bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getKeyAsString&lt;/span&gt;();
        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;年齡：&amp;#34;&lt;/span&gt;+keyAsString+&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; ==&amp;gt; &amp;#34;&lt;/span&gt;+bucket.&lt;span style=&#34;color:#658b00&#34;&gt;getDocCount&lt;/span&gt;());
    }
    Avg ageAvg1 = aggregations.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ageAvg&amp;#34;&lt;/span&gt;);
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;平均年齡：&amp;#34;&lt;/span&gt;+ageAvg1.&lt;span style=&#34;color:#658b00&#34;&gt;getValue&lt;/span&gt;());

    Avg balanceAvg1 = aggregations.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;balanceAvg&amp;#34;&lt;/span&gt;);
    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;平均薪資：&amp;#34;&lt;/span&gt;+balanceAvg1.&lt;span style=&#34;color:#658b00&#34;&gt;getValue&lt;/span&gt;());
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;步驟整理:
&lt;ul&gt;
&lt;li&gt;指定index&lt;/li&gt;
&lt;li&gt;創建sourceBuilder，設定查詢條件&lt;/li&gt;
&lt;li&gt;將source封裝到SearchRequest&lt;/li&gt;
&lt;li&gt;用client對ES伺服端發起SearchRequest&lt;/li&gt;
&lt;li&gt;接收Hits並解析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220125-gulimall-08-elasticsearch/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>商品屬性維護、庫存模組、基礎篇總結</title>
        <link>https://yoziming.github.io/post/220124-gulimall-07/</link>
        <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220124-gulimall-07/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220124-gulimall-07/ -&lt;h1 id=&#34;商品屬性維護&#34;&gt;商品屬性維護&lt;/h1&gt;
&lt;h2 id=&#34;spu檢索&#34;&gt;spu檢索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一個快速找到API的方法
&lt;ul&gt;
&lt;li&gt;裝上插件&lt;code&gt;RestfulTool&lt;/code&gt;，直接貼上文檔給的URL瞬間就能定位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118092156668.png&#34; alt=&#34;image-20220118092156668&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SpuInfoServiceImpl.java
&lt;ul&gt;
&lt;li&gt;處理多條件模糊搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; PageUtils &lt;span style=&#34;color:#008b45&#34;&gt;queryPageByKeyword&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; params) {
&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;key: &amp;#39;華為&amp;#39;,//檢索關鍵字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;catelogId: 6,//三級分類id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;brandId: 1,//品牌id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;status: 0,//商品狀態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
    QueryWrapper&amp;lt;SpuInfoEntity&amp;gt; wrapper = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;&amp;gt;();
    String key = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(key) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(key)) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;and&lt;/span&gt;(w -&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 模糊搜索為了怕蓋掉下面的所以用and，其實也能放最後就好
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 優先 NOT&amp;gt;AND&amp;gt;OR
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            w.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;, key).&lt;span style=&#34;color:#658b00&#34;&gt;or&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;like&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;spu_name&amp;#34;&lt;/span&gt;, key);
        });
    }
    String status = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(status)) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;publish_status&amp;#34;&lt;/span&gt;, status);
    }
    String catelogId = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelogId&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(catelogId) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(catelogId)) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalog_id&amp;#34;&lt;/span&gt;, catelogId);
    }
    String brandId = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brandId&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(brandId) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(brandId)) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand_id&amp;#34;&lt;/span&gt;, brandId);
    }

    IPage&amp;lt;SpuInfoEntity&amp;gt; page = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;page&lt;/span&gt;(
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Query&amp;lt;SpuInfoEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getPage&lt;/span&gt;(params), wrapper
    );
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PageUtils(page);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;指定時間日期格式，application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;另外發現一個小BUG，保存時沒指定status狀態竟然不是0自己修正一下
&lt;ul&gt;
&lt;li&gt;不對後來發現是因為Vo用long用接，結果原來他在資料庫與entity中是int所以對不上，BeanUtils對拷失敗&lt;/li&gt;
&lt;li&gt;其實這就存在一個坑點，就是前端校驗做不好，傳來null就算了，如果傳來0或&amp;quot;0&amp;quot;就容易坑&lt;/li&gt;
&lt;li&gt;我感覺當初設計代號碼就該直接避開0，就像HTTP錯誤代碼也沒見用0的，反正int能用到127&lt;/li&gt;
&lt;li&gt;但是預設0有時候又挺方便的，還是看實際狀況吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;獲取spu規格與修改&#34;&gt;獲取spu規格與修改&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;AttrController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 獲取spu規格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/base/listforspu/{spuId}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;baseAttrlistforspu&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;spuId&amp;#34;&lt;/span&gt;) Long spuId) {
    List&amp;lt;ProductAttrValueEntity&amp;gt; entities = productAttrValueService.&lt;span style=&#34;color:#658b00&#34;&gt;baseAttrListforspu&lt;/span&gt;(spuId);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, entities);
}

&lt;span style=&#34;color:#228b22&#34;&gt;// 修改spu
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/update/{spuId}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;updateSpuAttr&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;spuId&amp;#34;&lt;/span&gt;) Long spuId,
                       &lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; List&amp;lt;ProductAttrValueEntity&amp;gt; entities) {
    productAttrValueService.&lt;span style=&#34;color:#658b00&#34;&gt;updateSpuAttr&lt;/span&gt;(spuId, entities);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;ProductAttrValueServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 獲取spu規格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;ProductAttrValueEntity&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;baseAttrListforspu&lt;/span&gt;(Long spuId) {
    List&amp;lt;ProductAttrValueEntity&amp;gt; attrValueEntityList = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;baseMapper&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;selectList&lt;/span&gt;(
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;ProductAttrValueEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;spu_id&amp;#34;&lt;/span&gt;, spuId));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; attrValueEntityList;
}

&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 修改商品規格
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param spuId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param entities
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;updateSpuAttr&lt;/span&gt;(Long spuId, List&amp;lt;ProductAttrValueEntity&amp;gt; entities) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 1、刪除spuId之前對應的所有屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;baseMapper&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;ProductAttrValueEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;spu_id&amp;#34;&lt;/span&gt;, spuId));

    &lt;span style=&#34;color:#228b22&#34;&gt;// 2、添加商品規格信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;ProductAttrValueEntity&amp;gt; collect = entities.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(item -&amp;gt; {
        item.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuId&lt;/span&gt;(spuId);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; item;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());

    &lt;span style=&#34;color:#228b22&#34;&gt;// 批量新增
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;saveBatch&lt;/span&gt;(collect);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;前端又要補一個非空判斷，我感覺這是因為不同版本載入順序不同造成的BUG，暫且不深究&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118170207649.png&#34; alt=&#34;image-20220118170207649&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;另外還有一個小BUG就是多選的屬性，只賦予單個值，且該值不屬於管理的屬性(attr表中可選的values，會出現在下拉表單中)，就是說那個值是save的時候或修改時現加的。會導致它在前端頁面修改屬性時回顯失敗(但資料庫中表格欄位沒錯)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sku檢索&#34;&gt;sku檢索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SkuInfoServiceImpl.java
&lt;ul&gt;
&lt;li&gt;大同小異，另外從網友那學到mybatisplus自帶的工具包&lt;code&gt;StringUtils.isNotBlank&lt;/code&gt;比Spring的&lt;code&gt;!StringUtils.isEmpty&lt;/code&gt;更好用&lt;/li&gt;
&lt;li&gt;另外注意價格區間搜索，前端預設傳來是0要做判斷&lt;/li&gt;
&lt;li&gt;我注意到傳來的參數都轉成String處理，而mybatisplus搜索時也是會自動把String轉成資料庫中的對應的格式&lt;/li&gt;
&lt;li&gt;總之都用String乍看沒毛病&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; PageUtils &lt;span style=&#34;color:#008b45&#34;&gt;queryPageByKeyword&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; params) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// key: &amp;#39;華為&amp;#39;,//檢索關鍵字
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// catelogId: 0,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// brandId: 0,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// min: 0,
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// max: 0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    QueryWrapper&amp;lt;SkuInfoEntity&amp;gt; wrapper = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;&amp;gt;();
    String key = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(key) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(key)) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;and&lt;/span&gt;(w -&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 模糊搜索為了怕蓋掉下面的所以用and，其實也能放最後就好
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 優先 NOT&amp;gt;AND&amp;gt;OR
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            w.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sku_id&amp;#34;&lt;/span&gt;, key).&lt;span style=&#34;color:#658b00&#34;&gt;or&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;like&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sku_name&amp;#34;&lt;/span&gt;, key);
        });
    }
    String catelogId = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelogId&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(catelogId) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(catelogId)) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catalog_id&amp;#34;&lt;/span&gt;, catelogId);
    }
    String brandId = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brandId&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(brandId) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(brandId)) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;brand_id&amp;#34;&lt;/span&gt;, brandId);
    }
    String min = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;min&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(min) &amp;amp;&amp;amp; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; BigDecimal(min).&lt;span style=&#34;color:#658b00&#34;&gt;compareTo&lt;/span&gt;(BigDecimal.&lt;span style=&#34;color:#658b00&#34;&gt;ZERO&lt;/span&gt;) &amp;gt; 0) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;ge&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;, min);
    }
    String max = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;max&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(max) &amp;amp;&amp;amp; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; BigDecimal(max).&lt;span style=&#34;color:#658b00&#34;&gt;compareTo&lt;/span&gt;(BigDecimal.&lt;span style=&#34;color:#658b00&#34;&gt;ZERO&lt;/span&gt;) &amp;gt; 0) {
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;le&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;, max);
    }

    IPage&amp;lt;SkuInfoEntity&amp;gt; page = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;page&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Query&amp;lt;SkuInfoEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getPage&lt;/span&gt;(params), wrapper);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PageUtils(page);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;庫存模組&#34;&gt;庫存模組&lt;/h1&gt;
&lt;p&gt;複習一下開新模組設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;啟動類註解掃描Mapper位置、開啟交易、開啟服務發現&lt;/li&gt;
&lt;li&gt;其實交易跟Mapper可以省略&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@EnableTransactionManagement&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@MapperScan&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yozi.mall.ware.dao&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@EnableDiscoveryClient&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;WareApplication&lt;/span&gt; {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;application.properties
&lt;ul&gt;
&lt;li&gt;我感覺還是.properties好用，不用在那邊對齊，複製貼上也快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-properties&#34; data-lang=&#34;properties&#34;&gt;# 服務註冊發現相關
server.port=11000
server.servlet.session.timeout=30m
spring.application.name=ware
spring.cloud.nacos.discovery.server-addr=localhost:8848
spring.cloud.nacos.config.server-addr=localhost:8848

# DB
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.url=jdbc:mysql://localhost:3306/gulimall_wms?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# mybatis-plus設定
mybatis-plus.mapper-locations=classpath:/mapper/**/*.xml
mybatis-plus.global-config.db-config.id-type=auto

# json日期時間格式
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;分頁插件，直接複製貼上
&lt;ul&gt;
&lt;li&gt;我感覺這種應該給common管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回去設定網關規則，不要手賤轉換，.properties的數組很悲劇&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;spring&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;cloud&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;gateway&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;routes&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;product_route&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uri&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;lb://product&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;predicates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- Path=/api/product/**&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;filters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- RewritePath=/api/(?&amp;lt;segment&amp;gt;.*),/$\{segment}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;member_route&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uri&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;lb://member&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;predicates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- Path=/api/member/**&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;filters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- RewritePath=/api/(?&amp;lt;segment&amp;gt;.*),/$\{segment}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;ware_route&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uri&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;lb://ware&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;predicates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- Path=/api/ware/**&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;filters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- RewritePath=/api/(?&amp;lt;segment&amp;gt;.*),/$\{segment}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;upload_route&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uri&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;lb://third-party&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;predicates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- Path=/api/third-party/**&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;filters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- RewritePath=/api/third-party/(?&amp;lt;segment&amp;gt;.*),/$\{segment}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;admin_route&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uri&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;lb://renren-fast&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;predicates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- Path=/api/**&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;filters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- RewritePath=/api/(?&amp;lt;segment&amp;gt;.*),/renren-fast/$\{segment}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;模組功能說明&#34;&gt;模組功能說明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;表與後台的對應&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118122024322.png&#34; alt=&#34;image-20220118122024322&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本單位是商品庫存id(wms_ware_sku表)，與一個商品sku_id對應，還有所在倉庫(關聯wms_ware_info表)與數量等等&lt;/li&gt;
&lt;li&gt;從商品庫存id新增採購需求(wms_purchase_detail表)，多個採購需求id彙整成一個採購單id(wms_purchase表)，這邊包含採購人、總金額等等&lt;/li&gt;
&lt;li&gt;從採購單id對應到庫存工作單(wms_ware_order_task)，這邊有採購單的配送狀態、物流、付款方式、任務進度等等，還能查看詳細採購的是那些sku(wms_ware_order_task_detail表)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118123014788.png&#34; alt=&#34;image-20220118123014788&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;幾個簡單的搜索&#34;&gt;幾個簡單的搜索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;搜索倉庫列表，WareInfoServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; PageUtils &lt;span style=&#34;color:#008b45&#34;&gt;queryPage&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; params) {
    QueryWrapper&amp;lt;WareInfoEntity&amp;gt; queryWrapper = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;&amp;gt;();
    String key = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(key)) {
        queryWrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;, key)
                .&lt;span style=&#34;color:#658b00&#34;&gt;or&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;like&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;, key)
                .&lt;span style=&#34;color:#658b00&#34;&gt;or&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;like&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;address&amp;#34;&lt;/span&gt;, key)
                .&lt;span style=&#34;color:#658b00&#34;&gt;or&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;like&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;areacode&amp;#34;&lt;/span&gt;, key);
    }
    IPage&amp;lt;WareInfoEntity&amp;gt; page = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;page&lt;/span&gt;(
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Query&amp;lt;WareInfoEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getPage&lt;/span&gt;(params),
            queryWrapper
    );
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PageUtils(page);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;搜索採購需求，PurchaseDetailServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; PageUtils &lt;span style=&#34;color:#008b45&#34;&gt;queryPage&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; params) {
    QueryWrapper&amp;lt;PurchaseDetailEntity&amp;gt; queryWrapper = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;PurchaseDetailEntity&amp;gt;();

    String key = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(key)) {
        queryWrapper.&lt;span style=&#34;color:#658b00&#34;&gt;and&lt;/span&gt;(wrapper -&amp;gt; {
            wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;purchase_id&amp;#34;&lt;/span&gt;, key).&lt;span style=&#34;color:#658b00&#34;&gt;or&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sku_id&amp;#34;&lt;/span&gt;, key);
        });
    }
    String status = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(status) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(status)) {
        queryWrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;, status);
    }
    String wareId = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;wareId&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isNotBlank&lt;/span&gt;(wareId) &amp;amp;&amp;amp; !&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(wareId)) {
        queryWrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ware_id&amp;#34;&lt;/span&gt;, wareId);
    }
    IPage&amp;lt;PurchaseDetailEntity&amp;gt; page = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;page&lt;/span&gt;(
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Query&amp;lt;PurchaseDetailEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getPage&lt;/span&gt;(params),
            queryWrapper
    );
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PageUtils(page);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;PurchaseServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 查詢未領取的採購單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; PageUtils &lt;span style=&#34;color:#008b45&#34;&gt;queryPageUnreceive&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; params) {
    QueryWrapper&amp;lt;PurchaseEntity&amp;gt; queryWrapper = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;PurchaseEntity&amp;gt;()
            .&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;, 0).&lt;span style=&#34;color:#658b00&#34;&gt;or&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;, 1);
    IPage&amp;lt;PurchaseEntity&amp;gt; page = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;page&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Query&amp;lt;PurchaseEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getPage&lt;/span&gt;(params), queryWrapper);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PageUtils(page);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;合併採購需求&#34;&gt;合併採購需求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PurchaseController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 合併採購需求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/merge&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;merge&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; MergeVo mergeVo) {
    purchaseService.&lt;span style=&#34;color:#658b00&#34;&gt;mergePurchase&lt;/span&gt;(mergeVo);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;PurchaseServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 合併採購需求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;mergePurchase&lt;/span&gt;(MergeVo mergeVo) {
    Long purchaseId = mergeVo.&lt;span style=&#34;color:#658b00&#34;&gt;getPurchaseId&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 沒有選擇任何【採購單】，將自動創建新單進行合併。
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (purchaseId == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        PurchaseEntity purchaseEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PurchaseEntity();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 設置採購單的預設狀態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        purchaseEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;CREATED&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(purchaseEntity);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取新建採購單的id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        purchaseId = purchaseEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;();
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 取出前端來的採購需求
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;Long&amp;gt; items = mergeVo.&lt;span style=&#34;color:#658b00&#34;&gt;getItems&lt;/span&gt;();

    &lt;span style=&#34;color:#228b22&#34;&gt;// 確認採購單狀態是0,1(還沒買)才可以合併
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Collection&amp;lt;PurchaseDetailEntity&amp;gt; purchaseDetailEntities = purchaseDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;listByIds&lt;/span&gt;(items);
    purchaseDetailEntities.&lt;span style=&#34;color:#658b00&#34;&gt;forEach&lt;/span&gt;((item) -&amp;gt; {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!item.&lt;span style=&#34;color:#658b00&#34;&gt;getStatus&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseDetailStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;CREATED&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;())
                &amp;amp;&amp;amp; !item.&lt;span style=&#34;color:#658b00&#34;&gt;getStatus&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseDetailStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;ASSIGNED&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;())) {
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;正在採購，無法進行分配&amp;#34;&lt;/span&gt;);
        }
    });
    &lt;span style=&#34;color:#228b22&#34;&gt;// lambda表達式說要final變數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Long finalPurchaseId = purchaseId;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 改變採購需求的狀態，併到這單上
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;PurchaseDetailEntity&amp;gt; collect = items.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(i -&amp;gt; {
        PurchaseDetailEntity purchaseDetailEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PurchaseDetailEntity();
        purchaseDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setId&lt;/span&gt;(i);
        purchaseDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setPurchaseId&lt;/span&gt;(finalPurchaseId);
        purchaseDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseDetailStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;ASSIGNED&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; purchaseDetailEntity;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;//批量修改
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    purchaseDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;updateBatchById&lt;/span&gt;(collect);

    PurchaseEntity purchaseEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PurchaseEntity();
    purchaseEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setId&lt;/span&gt;(purchaseId);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;updateById&lt;/span&gt;(purchaseEntity);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;受不了一直&lt;code&gt;new Date()&lt;/code&gt;，讓日期自動填充
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yoziming.github.io/post/220112-agg-spring-02-mybatis-plus/#%e8%87%aa%e5%8b%95%e5%a1%ab%e5%85%85&#34;&gt;https://yoziming.github.io/post/220112-agg-spring-02-mybatis-plus/#%e8%87%aa%e5%8b%95%e5%a1%ab%e5%85%85&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常數類 WareConstant.java
&lt;ul&gt;
&lt;li&gt;才知道原來可以在一個類中寫多個enum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;WareConstant&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; PurchaseStatusEnum {
        CREATED(0, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;新建&amp;#34;&lt;/span&gt;),
        ASSIGNED(1, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;已分配&amp;#34;&lt;/span&gt;),
        RECEIVE(2, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;已領取&amp;#34;&lt;/span&gt;),
        FINISH(3, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;已完成&amp;#34;&lt;/span&gt;),
        HASERROR(4, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;有異常&amp;#34;&lt;/span&gt;),
        ;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;enum&lt;/span&gt; PurchaseDetailStatusEnum {
        CREATED(0, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;新建&amp;#34;&lt;/span&gt;),
        ASSIGNED(1, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;已分配&amp;#34;&lt;/span&gt;),
        BUYING(2, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;正在採購&amp;#34;&lt;/span&gt;),
        FINISH(3, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;已完成&amp;#34;&lt;/span&gt;),
        HASERROR(4, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;採購失敗&amp;#34;&lt;/span&gt;),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;這裡前端有一個BUG，當合併某些需求到採購單後，產生的採購單id，在ROM中為purchaseId，會汙染到新增完顯示的預設值(假象)&lt;/li&gt;
&lt;li&gt;把這條ban了就好了，反正本來post就沒要傳接那麼多東西&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118143537293.png&#34; alt=&#34;image-20220118143537293&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;領取採購單&#34;&gt;領取採購單&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;暫時先假裝採購人員有個app之類能夠領取，驗證那些先不管，發給後端的就是採購單id構成的數組[]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118144431155.png&#34; alt=&#34;image-20220118144431155&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PurchaseController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 領取採購單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/received&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;received&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; List&amp;lt;Long&amp;gt; ids) {
    purchaseService.&lt;span style=&#34;color:#658b00&#34;&gt;received&lt;/span&gt;(ids);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;PurchaseServiceImpl.java
&lt;ul&gt;
&lt;li&gt;//TODO 這裡有邏輯漏洞，沒分配也能領(員工自主搶活幹?)，會導致採購人那些欄位都是空的卻進入採購狀態，先留著吧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 領取採購單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param ids 採購單的id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;received&lt;/span&gt;(List&amp;lt;Long&amp;gt; ids) {

    List&amp;lt;PurchaseEntity&amp;gt; collect = ids.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;::getById)
            .&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(
                    &lt;span style=&#34;color:#228b22&#34;&gt;// 1、確認當前採購單是新建或者是已分配狀態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    item -&amp;gt; item.&lt;span style=&#34;color:#658b00&#34;&gt;getStatus&lt;/span&gt;() == WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;CREATED&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() ||
                            item.&lt;span style=&#34;color:#658b00&#34;&gt;getStatus&lt;/span&gt;() == WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;ASSIGNED&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;())
            .&lt;span style=&#34;color:#658b00&#34;&gt;peek&lt;/span&gt;(
                    &lt;span style=&#34;color:#228b22&#34;&gt;// 改變採購單狀態為已領取
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    item -&amp;gt; {
                        item.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;RECEIVE&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
                    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// 保存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;updateBatchById&lt;/span&gt;(collect);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 改變採購需求的狀態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    collect.&lt;span style=&#34;color:#658b00&#34;&gt;forEach&lt;/span&gt;((item) -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 用採購單號查其下的採購需求，且status&amp;lt;2(還沒去買)的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        QueryWrapper&amp;lt;PurchaseDetailEntity&amp;gt; wrapper = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;PurchaseDetailEntity&amp;gt;();
        wrapper.&lt;span style=&#34;color:#658b00&#34;&gt;and&lt;/span&gt;(q -&amp;gt; {
            q.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;purchase_id&amp;#34;&lt;/span&gt;, item.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
            q.&lt;span style=&#34;color:#658b00&#34;&gt;lt&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;, 2);
        });
        List&amp;lt;PurchaseDetailEntity&amp;gt; list = purchaseDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;list&lt;/span&gt;(wrapper);

        List&amp;lt;PurchaseDetailEntity&amp;gt; detailEntities = list.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(entity -&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 更新要拿出id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            PurchaseDetailEntity purchaseDetailEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PurchaseDetailEntity();
            purchaseDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setId&lt;/span&gt;(entity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
            purchaseDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseDetailStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;BUYING&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; purchaseDetailEntity;
        }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
        purchaseDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;updateBatchById&lt;/span&gt;(detailEntities);
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;完成採購單&#34;&gt;完成採購單&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API與Vo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118144826792.png&#34; alt=&#34;image-20220118144826792&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;請求body，第一個id是採購單號，裡面的itemId是採購需求號&lt;/span&gt;
{
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;8&lt;/span&gt;,
  &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;items&amp;#34;&lt;/span&gt;: [{&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;itemId&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;16&lt;/span&gt;,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;reason&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;},{&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;itemId&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#b452cd&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;#34;reason&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;缺貨&amp;#34;&lt;/span&gt;}]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;PurchaseServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 完成採購單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param doneVo
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;done&lt;/span&gt;(PurchaseDoneVo doneVo) {

    &lt;span style=&#34;color:#228b22&#34;&gt;// 採購單id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Long id = doneVo.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// TODO 應該是要先判斷採購單與採購需求是否完成才能往下
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 改變採購需求的狀態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Boolean flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
    List&amp;lt;PurchaseItemDoneVo&amp;gt; items = doneVo.&lt;span style=&#34;color:#658b00&#34;&gt;getItems&lt;/span&gt;();
    List&amp;lt;PurchaseDetailEntity&amp;gt; updates = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (PurchaseItemDoneVo item : items) {
        PurchaseDetailEntity purchaseDetailEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PurchaseDetailEntity();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 採購需求失敗
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (item.&lt;span style=&#34;color:#658b00&#34;&gt;getStatus&lt;/span&gt;() == WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseDetailStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;HASERROR&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;()) {
            flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
            purchaseDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getStatus&lt;/span&gt;());
        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
            purchaseDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseDetailStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;FINISH&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
            &lt;span style=&#34;color:#228b22&#34;&gt;// 將成功採購的進行入庫
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 查出當前採購項的詳細信息，入庫
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            PurchaseDetailEntity entity = purchaseDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getItemId&lt;/span&gt;());
            wareSkuService.&lt;span style=&#34;color:#658b00&#34;&gt;addStock&lt;/span&gt;(entity.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;(), entity.&lt;span style=&#34;color:#658b00&#34;&gt;getWareId&lt;/span&gt;(), entity.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuNum&lt;/span&gt;());
        }
        purchaseDetailEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setId&lt;/span&gt;(item.&lt;span style=&#34;color:#658b00&#34;&gt;getItemId&lt;/span&gt;());
        &lt;span style=&#34;color:#228b22&#34;&gt;// 裝進更新的list
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        updates.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(purchaseDetailEntity);
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 批量更新
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    purchaseDetailService.&lt;span style=&#34;color:#658b00&#34;&gt;updateBatchById&lt;/span&gt;(updates);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 改變採購單狀態
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    PurchaseEntity purchaseEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PurchaseEntity();
    purchaseEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setId&lt;/span&gt;(id);
    purchaseEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStatus&lt;/span&gt;(flag ? WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;FINISH&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() :
            WareConstant.&lt;span style=&#34;color:#658b00&#34;&gt;PurchaseStatusEnum&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;HASERROR&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;updateById&lt;/span&gt;(purchaseEntity);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;WareSkuServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addStock&lt;/span&gt;(Long skuId, Long wareId, Integer skuNum) {

    &lt;span style=&#34;color:#228b22&#34;&gt;// 某倉庫中的某sku應該是唯一的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    WareSkuEntity isExistWareSku = wareSkuDao.&lt;span style=&#34;color:#658b00&#34;&gt;selectOne&lt;/span&gt;(
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;WareSkuEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sku_id&amp;#34;&lt;/span&gt;, skuId).&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ware_id&amp;#34;&lt;/span&gt;, wareId));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (isExistWareSku == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 判讀如果沒有這個庫存記錄，新增
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        WareSkuEntity wareSkuEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; WareSkuEntity();
        wareSkuEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuId);
        wareSkuEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStock&lt;/span&gt;(skuNum);
        wareSkuEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setWareId&lt;/span&gt;(wareId);
        wareSkuEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setStockLocked&lt;/span&gt;(0);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 遠端查找setSkuName
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        R info = productFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;info&lt;/span&gt;(skuId);
        Map&amp;lt;String, Object&amp;gt; data = (Map&amp;lt;String, Object&amp;gt;) info.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuInfo&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (info.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() == 0) {
            wareSkuEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuName&lt;/span&gt;((String) data.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuName&amp;#34;&lt;/span&gt;));
        }
        &lt;span style=&#34;color:#228b22&#34;&gt;// 添加庫存信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        wareSkuDao.&lt;span style=&#34;color:#658b00&#34;&gt;insert&lt;/span&gt;(wareSkuEntity);
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 修改庫存信息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        Integer oldStock = isExistWareSku.&lt;span style=&#34;color:#658b00&#34;&gt;getStock&lt;/span&gt;();
        wareSkuDao.&lt;span style=&#34;color:#658b00&#34;&gt;addStock&lt;/span&gt;(skuId, wareId, oldStock + skuNum);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;這邊又造了一個Feign接口，挺簡單的，在啟動類註解enable&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@FeignClient&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;product&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ProductFeignService&lt;/span&gt; {

    &lt;span style=&#34;color:#228b22&#34;&gt;// 完成採購需求時，存表需要sku_name
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@RequestMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/product/skuinfo/info/{skuId}&amp;#34;&lt;/span&gt;)
    R &lt;span style=&#34;color:#008b45&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;skuId&amp;#34;&lt;/span&gt;) Long skuId);

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;更新庫存數量寫了一個SQL，原來可以快速生成@Param&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118150055379.png&#34; alt=&#34;image-20220118150055379&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;update&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;addStock&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
        UPDATE wms_ware_sku
        SET stock = #{skuNum}
        WHERE sku_id = #{skuId}
          AND ware_id = #{wareId}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/update&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;分佈式基礎篇總結&#34;&gt;分佈式基礎篇總結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分佈式基礎概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微服務、註冊中心（Nacos）、配置中心（Nacos Cofig）、遠程調用、Feign、網關&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基礎開發&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SpringBoot2.0、SpringCloud、Mybatis-Plus、Vue組件化、雲存儲&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vagrant、Linux、Docker、MySQL、Redis、逆向工程&amp;amp;人人開源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開發規範&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;數據校驗JSR303、全局異常處理、全局統一返回、跨域處理&lt;/li&gt;
&lt;li&gt;枚舉狀態、業務狀態、VO與TO與PO劃分、邏輯刪除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220124-gulimall-07/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>array、list多型與BaseMapper之謎</title>
        <link>https://yoziming.github.io/post/220123-array-list-polymorphism/</link>
        <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220123-array-list-polymorphism/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220123-array-list-polymorphism/ -&lt;h2 id=&#34;array&#34;&gt;Array&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Java學著學著，有天用了一下go解題，才驚覺java中很少用Xxx[]，都快忘記為什麼了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;數組、陣列，例如&lt;code&gt;Cat[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;長度固定，造的時候就要指定&lt;/li&gt;
&lt;li&gt;可以間隔存&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不能泛型、但是協變 &lt;code&gt;String[] is subtype of Object[]&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;聽說是早期因為沒有泛型所以做的設計，沒人用了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;list&#34;&gt;List&lt;/h2&gt;
&lt;p&gt;List本身是接口，無法&lt;code&gt;new List()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList是它的主要實現類&lt;/li&gt;
&lt;li&gt;另一個兄弟是LinkedList(鏈表，在高頻重複拔插有利)&lt;/li&gt;
&lt;li&gt;還有一個被遺忘的vector，特色是執行緒安全，但幾乎沒人用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arraylist&#34;&gt;ArrayList&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;真正最常來當&amp;quot;數組&amp;quot;用的有序列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;長度可變&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;多型&#34;&gt;多型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目的是為了複用性與擴展性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要每個子類都造相同的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同一個行為具有多個不同表現形式或形態的能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三個必要條件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;繼承或實現: 總之有上下關係&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重寫: 子類中重寫同名方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父類的引用指向子類: 子類賦給父類，例如&lt;code&gt;List list = new ArrayList()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;動態綁定: 在編譯期虛擬調用，在執行期才確定調用的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;編譯看左，運行看右(子類)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;靜態多型: 成員屬性與靜態方法看父類的(左邊)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;結論: new誰就調用誰的方法，引用是誰，就用誰的成員和靜態&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;接口與類的關係&#34;&gt;接口與類的關係&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/19890792&#34;&gt;https://www.zhihu.com/question/19890792&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Class （類）是一張圖紙——比如 F16 戰鬥機的設計藍圖&lt;/li&gt;
&lt;li&gt;Interface （介面）是一種要求——比如“能發射導彈”&lt;/li&gt;
&lt;li&gt;Instance （實例）是一個具體的東西——比如一架編號為 A123 的 F16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;類可以實現介面，比如—— F16 的設計圖，是一張能夠發射導彈的飛機的設計圖&lt;/p&gt;
&lt;p&gt;介面可以用來描述類，比如——這堆飛機設計圖都設計了“發射導彈”這個功能&lt;/p&gt;
&lt;p&gt;所以，介面可以用來描述實例，比如—— F16 戰鬥機能發射導彈&lt;/p&gt;
&lt;p&gt;現在假設你是個資深飛行員，但不是機械師。也就是說，你知道怎麼讓飛機發射導彈，雖然你不知道怎麼造出一架能發射導彈的飛機。那麼，如果你對機械師說，“給我一架能發射導彈的飛機”，你其實並不在乎他給你的究竟是 F15 還是 F16，也不關心這架飛機具體怎麼實現”發射導彈“這個功能，只要它能發射導彈就好。&lt;/p&gt;
&lt;h4 id=&#34;java8特性&#34;&gt;Java8特性:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;接口中定義的靜態方法，只能透過接口去調用(類似工具類)&lt;/li&gt;
&lt;li&gt;預設方法:使用&lt;code&gt;default&lt;/code&gt;修飾，實現類的物件，可以調用接口中的預設方法；若實現時重寫了方法，那調用的還是重寫的方法。只是說用&lt;code&gt;default&lt;/code&gt;修飾，可以免去把抽象方法一一實現的過程而直接調用預設的方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;basemapper之謎&#34;&gt;BaseMapper之謎&lt;/h2&gt;
&lt;p&gt;在MybatisPlus中，為何只要繼承了BaseMapper，就能@Autowired出那個接口的&amp;quot;實例&amp;quot;然後執行各種方法，往上查BaseMapper只是繼承了一個空的Mapper，他們都是接口沒看到實現類，這是什麼巫術?&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface SysOssDao extends BaseMapper&amp;lt;SysOssEntity&amp;gt; {
.............
@Autowired
SysOssDao sysOssDao
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mapper介面的代理創建過程&#34;&gt;Mapper介面的代理創建過程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;詳解: &lt;a href=&#34;https://juejin.cn/post/6844903793625137165&#34;&gt;https://juejin.cn/post/6844903793625137165&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;掃描mapper介面基本包，將為註冊為BeanDefinition物件。&lt;/li&gt;
&lt;li&gt;設置BeanDefinition的物件的beanClass和sqlSessionFactory屬性。&lt;/li&gt;
&lt;li&gt;設置sqlSessionFactory屬性的時候，調用SqlSessionTemplate的構造方法，創建SqlSession介面的代理類。&lt;/li&gt;
&lt;li&gt;獲取BeanDefinition物件的時候，調用其工廠方法getObject，返回mapper介面的代理類。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後我們在Service層，通過@Autowired UserMapper userDao注入屬性的時候，返回的就是代理類。執行userDao的方法的時候，實際調用的是代理類的invoke方法。 最後的最後，我們看一下這個代理類長什麼樣子。&lt;/p&gt;
- https://yoziming.github.io/post/220123-array-list-polymorphism/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>保存sku、spu，feign遠程調用</title>
        <link>https://yoziming.github.io/post/220123-gulimall-06-feign/</link>
        <pubDate>Sun, 23 Jan 2022 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/220123-gulimall-06-feign/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/220123-gulimall-06-feign/ -&lt;h2 id=&#34;銷售屬性&#34;&gt;銷售屬性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;AttrController.java
&lt;ul&gt;
&lt;li&gt;獲取的API跟先前幾乎一樣，所以改造之前的&lt;code&gt;queryBasePageCatelogId&lt;/code&gt;，順便換名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 規格參數列表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/{attrType}/list/{catelogId}&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;//@RequiresPermissions(&amp;#34;product:attr:list&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;baseAttrList&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; params,
                      &lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelogId&amp;#34;&lt;/span&gt;) Long catelogId,
                      &lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrType&amp;#34;&lt;/span&gt;) String attrType
) {
    PageUtils page = attrService.&lt;span style=&#34;color:#658b00&#34;&gt;queryBaseAttrPage&lt;/span&gt;(params, catelogId, attrType);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;, page);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AttrServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; PageUtils &lt;span style=&#34;color:#008b45&#34;&gt;queryBaseAttrPage&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; params, Long catelogId, String attrType) {
    QueryWrapper&amp;lt;AttrEntity&amp;gt; qw = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;&amp;gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 判斷是要銷售還是基本屬性，1=基本，0=銷售
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    qw.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_type&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;base&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;equalsIgnoreCase&lt;/span&gt;(attrType) ? 1 : 0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;順便修改保存方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115135346367.png&#34; alt=&#34;image-20220115135346367&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為了不留技術債(只有自己知道的神秘代號)，新增一個枚舉類來表示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115135826032.png&#34; alt=&#34;image-20220115135826032&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把剛剛用的1、0都換成&lt;code&gt;ProductConstant.ATTR_TYPE_BASE.getCode()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查詢、修改的方法也都判斷一下是基本屬性才往下做&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分組關聯&#34;&gt;分組關聯&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;接口API:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115203918492.png&#34; alt=&#34;image-20220115203918492&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115210834640.png&#34; alt=&#34;image-20220115210834640&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沒有多的屬性，可以直接用AttrEntity作為DATA返回&lt;/li&gt;
&lt;li&gt;AttrGroupController.java
&lt;ul&gt;
&lt;li&gt;注意調用的是&lt;code&gt;attrService&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 根據分組ID查找關聯
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; *
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @param attrgroupId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * @return
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/{attrgroupId}/attr/relation&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;attrRelation&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrgroupId&amp;#34;&lt;/span&gt;) Long attrgroupId) {
    List&amp;lt;AttrEntity&amp;gt; entities = attrService.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrRelation&lt;/span&gt;(attrgroupId);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, entities);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AttrServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;AttrEntity&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getAttrRelation&lt;/span&gt;(Long attrgroupId) {
    List&amp;lt;AttrAttrgroupRelationEntity&amp;gt; relationEntities =
            relationDao.&lt;span style=&#34;color:#658b00&#34;&gt;selectList&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;AttrAttrgroupRelationEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_group_id&amp;#34;&lt;/span&gt;,
                    attrgroupId));
    &lt;span style=&#34;color:#228b22&#34;&gt;// 收集出attrId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;Long&amp;gt; longList =
            relationEntities.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(AttrAttrgroupRelationEntity::getAttrId).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (longList == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; || longList.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() == 0) {
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
    }
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;listByIds&lt;/span&gt;(longList);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;移除&#34;&gt;移除&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;就剛剛上面圖，點開關連旁邊的移除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;API:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115211206307.png&#34; alt=&#34;image-20220115211206307&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;業務上為了保持前後端溝通少、整齊，造一個Vo來接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115211534509.png&#34; alt=&#34;image-20220115211534509&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AttrGroupController.java
&lt;ul&gt;
&lt;li&gt;參數由於是自訂的的類，在HTTP用JSON傳遞，切記要加@RequestBody&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 删除
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/attr/relation/delete&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; AttrGroupRelationVo[] vos) {
    attrService.&lt;span style=&#34;color:#658b00&#34;&gt;deleteRelation&lt;/span&gt;(vos);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AttrServiceImpl.java
&lt;ul&gt;
&lt;li&gt;由於要批量刪除，造一個自訂的SQL &lt;code&gt;batchDelete&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;deleteRelation&lt;/span&gt;(AttrGroupRelationVo[] vos) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 無情將VO再轉回來 哭R
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;AttrAttrgroupRelationEntity&amp;gt; entities = Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;(vos).&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(item -&amp;gt; {
        AttrAttrgroupRelationEntity relationEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; AttrAttrgroupRelationEntity();
        BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(item, relationEntity);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; relationEntity;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    relationDao.&lt;span style=&#34;color:#658b00&#34;&gt;batchDelete&lt;/span&gt;(entities);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AttrAttrgroupRelationDao.java
&lt;ul&gt;
&lt;li&gt;莫忘記加@Param(&amp;ldquo;entities&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115213800121.png&#34; alt=&#34;image-20220115213800121&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AttrAttrgroupRelationDao.xml
&lt;ul&gt;
&lt;li&gt;動態SQL的寫法，foreach循環，間隔符號&lt;code&gt;&amp;quot; OR &amp;quot;&lt;/code&gt;前後記得都要空格&lt;/li&gt;
&lt;li&gt;寫xml的SQL特別小心拚錯誤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;delete&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;batchDelete&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
    DELETE
    FROM pms_attr_attrgroup_relation WHERE
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;foreach&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;collection=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;entities&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;item=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;separator=&lt;/span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; OR &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
        attr_id = #{item.attrId} AND attr_group_id = #{item.attrGroupId}
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/foreach&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;&amp;lt;/delete&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;新建關聯&#34;&gt;新建關聯&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;超級難點，套太多層了要想很久&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先做新建時要跳出的可選項API: &lt;code&gt;/product/attrgroup/{attrgroupId}/noattr/relation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115215125341.png&#34; alt=&#34;image-20220115215125341&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AttrGroupController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     * 根據分組ID查找無關聯(新增時逆向篩選用)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/{attrgroupId}/noattr/relation&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;attrNoRelation&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; params,
                        &lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attrgroupId&amp;#34;&lt;/span&gt;) Long attrgroupId) {
    PageUtils page = attrService.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrNoRelation&lt;/span&gt;(params, attrgroupId);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;, page);

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AttrServiceImpl.java
&lt;ul&gt;
&lt;li&gt;防空指針寫一堆not null，還以為在寫golang&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; PageUtils &lt;span style=&#34;color:#008b45&#34;&gt;getAttrNoRelation&lt;/span&gt;(Map&amp;lt;String, Object&amp;gt; params, Long attrgroupId) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 只查自己所屬分類中的屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    AttrGroupEntity attrGroupEntity = attrGroupDao.&lt;span style=&#34;color:#658b00&#34;&gt;selectById&lt;/span&gt;(attrgroupId);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取當前分類的id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Long catelogId = attrGroupEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getCatelogId&lt;/span&gt;();

    &lt;span style=&#34;color:#228b22&#34;&gt;// 只關連沒引用的屬性，這裡用排除法把已經被關聯的ID找出來，這是用來存排除的清單
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;Long&amp;gt; alreadyInGroupIdList = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 先找出當前分類下的其他分組
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;AttrGroupEntity&amp;gt; attr_groups = attrGroupDao.&lt;span style=&#34;color:#658b00&#34;&gt;selectList&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;AttrGroupEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(
            &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelog_id&amp;#34;&lt;/span&gt;
            , catelogId));
    List&amp;lt;Long&amp;gt; attr_group_ids =
            attr_groups.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(AttrGroupEntity::getAttrGroupId).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// 現在獲取到可能很多個attr_group_id，一個attr_group_id又會對應多個attr_id
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (attr_group_ids != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; attr_group_ids.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 到pms_attr_attrgroup_relation，拿attr_group_id找出對應的relationEntities
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;AttrAttrgroupRelationEntity&amp;gt; relationEntities =
                relationDao.&lt;span style=&#34;color:#658b00&#34;&gt;selectList&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;AttrAttrgroupRelationEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_group_id&amp;#34;&lt;/span&gt;,
                        attr_group_ids));
        &lt;span style=&#34;color:#228b22&#34;&gt;// 這些relationEntities有attr_group_id，表示他的attr_id已經在某個分組內了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (relationEntities != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; relationEntities.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 把其中的ID一個一個找出來，這些是要排除的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            alreadyInGroupIdList =
                    relationEntities.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(AttrAttrgroupRelationEntity::getAttrId).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
        }
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 可以開查了
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    QueryWrapper&amp;lt;AttrEntity&amp;gt; queryWrapper = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;AttrEntity&amp;gt;();
    &lt;span style=&#34;color:#228b22&#34;&gt;// 如果有要排除的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (alreadyInGroupIdList != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; alreadyInGroupIdList.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 只查自己所屬分類中的屬性，移除掉要排除的，而且只要基本屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        queryWrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelog_id&amp;#34;&lt;/span&gt;, catelogId).&lt;span style=&#34;color:#658b00&#34;&gt;notIn&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_id&amp;#34;&lt;/span&gt;, alreadyInGroupIdList).&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_type&amp;#34;&lt;/span&gt;,
                ProductConstant.&lt;span style=&#34;color:#658b00&#34;&gt;ATTR_TYPE_BASE&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 只查自己所屬分類中的屬性，而且只要基本屬性
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        queryWrapper.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelog_id&amp;#34;&lt;/span&gt;, catelogId).&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_type&amp;#34;&lt;/span&gt;, ProductConstant.&lt;span style=&#34;color:#658b00&#34;&gt;ATTR_TYPE_BASE&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;());
    }
    &lt;span style=&#34;color:#228b22&#34;&gt;// 前端要的是page，還可能要查key
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    String key = (String) params.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (!StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(key)) {
        queryWrapper.&lt;span style=&#34;color:#658b00&#34;&gt;and&lt;/span&gt;(qw -&amp;gt; {
            qw.&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_id&amp;#34;&lt;/span&gt;, key).&lt;span style=&#34;color:#658b00&#34;&gt;or&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;like&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_name&amp;#34;&lt;/span&gt;, key);
        });
    }
    IPage&amp;lt;AttrEntity&amp;gt; page = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;page&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Query&amp;lt;AttrEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getPage&lt;/span&gt;(params),
            queryWrapper);
    PageUtils pageUtils = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PageUtils(page);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; pageUtils;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修復前端頁面一個小bug，在attr-add-or-update.vue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先他dataForm.attrId ? &amp;lsquo;新增&amp;rsquo; : &amp;lsquo;修改&amp;rsquo;&amp;ldquo;本來綁的是.id，顯然錯誤(另一個也是這樣)，修改時沒有正確顯示標題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另外就是下面開關的，valueType是String類型，結果綁了冒號就怪怪的，點修改時不會動態跟隨傳過去的&amp;quot;1&amp;quot;或&amp;quot;0&amp;quot;而改變&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而且這個順序不對連文字顏色都會怪怪的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220115235612508.png&#34; alt=&#34;image-20220115235612508&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;保存&#34;&gt;保存&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;API:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220116004605824.png&#34; alt=&#34;image-20220116004605824&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AttrGroupController.java
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RequestBody&lt;/code&gt;不僅能裝成&lt;code&gt;[]&lt;/code&gt;也可以直接裝到&lt;code&gt;List&amp;lt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 新增保存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/attr/relation&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;//@RequiresPermissions(&amp;#34;product:attrgroup:save&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;addAttrGroupRelation&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; List&amp;lt;AttrGroupRelationVo&amp;gt; vos) {
    relationService.&lt;span style=&#34;color:#658b00&#34;&gt;addAttrGroupRelation&lt;/span&gt;(vos);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AttrAttrgroupRelationServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addAttrGroupRelation&lt;/span&gt;(List&amp;lt;AttrGroupRelationVo&amp;gt; vos) {
    List&amp;lt;AttrAttrgroupRelationEntity&amp;gt; collect = vos.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(e -&amp;gt; {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 一樣，轉存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        AttrAttrgroupRelationEntity relationEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; AttrAttrgroupRelationEntity();
        BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(e, relationEntity);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; relationEntity;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// 調用原生批量保存
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;saveBatch&lt;/span&gt;(collect);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;修改前面queryBaseAttrPage方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220116145735332.png&#34; alt=&#34;image-20220116145735332&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;還有保存關聯關係的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220116145858040.png&#34; alt=&#34;image-20220116145858040&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;刪除屬性時刪除關聯&#34;&gt;刪除屬性時刪除關聯&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有個漏洞，屬性被刪掉之後pms_attr_attrgroup_relation中的attr_id卻沒刪，雖然不會導致錯誤但會讓表中存在廢物資料&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;嘗試自己完善功能，AttrController.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 刪除
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/delete&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#228b22&#34;&gt;//@RequiresPermissions(&amp;#34;product:attr:delete&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; Long[] attrIds) {
    attrService.&lt;span style=&#34;color:#658b00&#34;&gt;removeAttrAndRelationByIds&lt;/span&gt;(Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;asList&lt;/span&gt;(attrIds));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AttrServiceImpl.java
&lt;ul&gt;
&lt;li&gt;結果第一次做又中了空指針，記住這些&lt;code&gt;xxDao.select&lt;/code&gt;一但查了就不會是null，而是可能返回內容為空的List&lt;/li&gt;
&lt;li&gt;要用&lt;strong&gt;長度判斷&lt;/strong&gt;，切記切記&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;removeAttrAndRelationByIds&lt;/span&gt;(List&amp;lt;Long&amp;gt; asList) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;removeByIds&lt;/span&gt;(asList);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 還要移除關聯
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;AttrAttrgroupRelationEntity&amp;gt; entities =
            relationDao.&lt;span style=&#34;color:#658b00&#34;&gt;selectList&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;AttrAttrgroupRelationEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;attr_id&amp;#34;&lt;/span&gt;, asList));
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (entities != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; entities.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        relationDao.&lt;span style=&#34;color:#658b00&#34;&gt;batchDelete&lt;/span&gt;(entities);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;新增商品頁面&#34;&gt;新增商品頁面&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;先處裡新增時需要找到該品項相關資訊的API&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117132244175.png&#34; alt=&#34;image-20220117132244175&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新增商品需要獲取會員等級，&lt;code&gt;/api/member/memberlevel/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;先到會員模組調整網關，增加member_route規則&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;id&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;member_route&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;uri&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;lb://member&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;predicates&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- Path=/api/member/**&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;filters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;- RewritePath=/api/(?&amp;lt;segment&amp;gt;.*),/$\{segment}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;會員模組的操作大部分比較單純，內建生成的暫時夠用&lt;/li&gt;
&lt;li&gt;隨便新增兩個會員等級&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117142225484.png&#34; alt=&#34;image-20220117142225484&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;根據分類返回關聯的品牌&#34;&gt;根據分類返回關聯的品牌&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;API:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117001707359.png&#34; alt=&#34;image-20220117001707359&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;返回的data很簡單，造一個Vo節省流量
&lt;ul&gt;
&lt;li&gt;BrandVo.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BrandVo&lt;/span&gt; {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long brandId;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String brandName;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;CategoryBrandRelationController.java
&lt;ul&gt;
&lt;li&gt;Controller用來處理請求、檢驗資料、封裝&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 根據catId返回關聯的品牌
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/brands/list&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestParam&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catId&amp;#34;&lt;/span&gt;) Long catId) {
    List&amp;lt;BrandEntity&amp;gt; vos = categoryBrandRelationService.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandsByCatId&lt;/span&gt;(catId);
    List&amp;lt;BrandVo&amp;gt; list = vos.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(e -&amp;gt; {
        BrandVo brandVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; BrandVo();
        brandVo.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandId&lt;/span&gt;(e.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;);
        brandVo.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandName&lt;/span&gt;(e.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandName&lt;/span&gt;);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; brandVo;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, list);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;CategoryBrandRelationServiceImpl.java
&lt;ul&gt;
&lt;li&gt;Service層寫業務邏輯，這邊雖然看起來白繞圈還循環查表，但卻是為了維護性與擴展性考量，多學習老師的思路總是好的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;BrandEntity&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getBrandsByCatId&lt;/span&gt;(Long catId) {
    List&amp;lt;CategoryBrandRelationEntity&amp;gt; relationEntities =
            baseMapper.&lt;span style=&#34;color:#658b00&#34;&gt;selectList&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;CategoryBrandRelationEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelog_id&amp;#34;&lt;/span&gt;, catId));
    List&amp;lt;BrandEntity&amp;gt; collect = relationEntities.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(e -&amp;gt; {
        Long brandId = e.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;();
        &lt;span style=&#34;color:#228b22&#34;&gt;// 調用Service而非DAO，因為DAO是生成的最好寫死的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; brandService.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(brandId);
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; collect;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;獲取規格參數&#34;&gt;獲取規格參數&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;API:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117131731335.png&#34; alt=&#34;image-20220117131731335&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要返回的是AttrGroup且裡面包含組內的屬性&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;	&amp;quot;data&amp;quot;: [{
		&amp;quot;attrGroupId&amp;quot;: 1,
		&amp;quot;attrGroupName&amp;quot;: &amp;quot;主体&amp;quot;,
		&amp;quot;sort&amp;quot;: 0,
		&amp;quot;descript&amp;quot;: &amp;quot;主体&amp;quot;,
		&amp;quot;icon&amp;quot;: &amp;quot;dd&amp;quot;,
		&amp;quot;catelogId&amp;quot;: 225,
		&amp;quot;attrs&amp;quot;: [{
			&amp;quot;attrId&amp;quot;: 7,
			&amp;quot;attrName&amp;quot;: &amp;quot;入网型号&amp;quot;,
			&amp;quot;searchType&amp;quot;: 1,
			&amp;quot;valueType&amp;quot;: 0,
			&amp;quot;icon&amp;quot;: &amp;quot;xxx&amp;quot;,
			&amp;quot;valueSelect&amp;quot;: &amp;quot;aaa;bb&amp;quot;,
			&amp;quot;attrType&amp;quot;: 1,
			&amp;quot;enable&amp;quot;: 1,
			&amp;quot;catelogId&amp;quot;: 225,
			&amp;quot;showDesc&amp;quot;: 1,
			&amp;quot;attrGroupId&amp;quot;: null
			}, {
			...
		},
		{
		&amp;quot;attrGroupId&amp;quot;: 2,
		...
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;造一個VO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117132943244.png&#34; alt=&#34;image-20220117132943244&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AttrGroupController.java
&lt;ul&gt;
&lt;li&gt;參數本身在URL的&lt;code&gt;/~/&lt;/code&gt;中用&lt;code&gt;@PathVariable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;?&lt;/code&gt;號後面的用&lt;code&gt;@RequestParam&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;控制層方法名取&amp;quot;想要返回的東西&amp;rdquo;&lt;/li&gt;
&lt;li&gt;服務層方法名後面再加上&amp;quot;傳入的參數&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 新增商品獲取規格參數
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/{catelogId}/withattr&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;getAttrGroupWithAttrs&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelogId&amp;#34;&lt;/span&gt;) Long catelogId) {
    List&amp;lt;AttrGroupWithAttrsVo&amp;gt; vos = attrGroupService.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrGroupWithAttrsByCatelogId&lt;/span&gt;(catelogId);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;put&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;, vos);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;AttrGroupServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; List&amp;lt;AttrGroupWithAttrsVo&amp;gt; &lt;span style=&#34;color:#008b45&#34;&gt;getAttrGroupWithAttrsByCatelogId&lt;/span&gt;(Long catelogId) {
    List&amp;lt;AttrGroupEntity&amp;gt; attrGroupEntities = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;list&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; QueryWrapper&amp;lt;AttrGroupEntity&amp;gt;().&lt;span style=&#34;color:#658b00&#34;&gt;eq&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;catelog_id&amp;#34;&lt;/span&gt;,
            catelogId));
    List&amp;lt;AttrGroupWithAttrsVo&amp;gt; collect = attrGroupEntities.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(e -&amp;gt; {
        AttrGroupWithAttrsVo attrGroupWithAttrsVo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; AttrGroupWithAttrsVo();
        BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(e, attrGroupWithAttrsVo);
        &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取attrs，用之前寫過的方法從分組ID就能找到
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;AttrEntity&amp;gt; attrEntityList = attrService.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrRelation&lt;/span&gt;(e.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrGroupId&lt;/span&gt;());
        &lt;span style=&#34;color:#228b22&#34;&gt;// 裝進VO
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        attrGroupWithAttrsVo.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrs&lt;/span&gt;(attrEntityList);
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; attrGroupWithAttrsVo;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; collect;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;回前端補一個非空判斷&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117140603784.png&#34; alt=&#34;image-20220117140603784&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功，話說這個前端頁面還蠻屌的，可選項沒有甚至還能現加，還好教材做了不然自己來肯定又要搞半天&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117141026751.png&#34; alt=&#34;image-20220117141026751&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;後面兩步都沒問題，前端頁面都做好了，會根據銷售屬性算出笛卡爾積，可以詳細針對每個SKU做設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117160514657.png&#34; alt=&#34;image-20220117160514657&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;點選發佈，會產生一串很長的JSON，接下來就到保存了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;保存商品&#34;&gt;保存商品&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;保存商品要調用商品模組、會員模組，不僅要跨模組，還涉及非常多張表，只能一點一點拆開來做了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117163355499.png&#34; alt=&#34;image-20220117163355499&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;從json生成pojo&#34;&gt;從JSON生成POJO&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;顯然自己手動造VO太累了，有更快的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;API:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117155719059.png&#34; alt=&#34;image-20220117155719059&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把API文檔直接丟給插件解析，我使用插件RoboPOJOGenerator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117155850409.png&#34; alt=&#34;image-20220117155850409&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;選框架、命名，自動生成POJO&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117160200428.png&#34; alt=&#34;image-20220117160200428&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但是要注意生成的數字類型，如果是金錢等要求精度的，手動換成&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;並且資料庫中都是Long類型，把相關的Int也都換掉&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;開始保存&#34;&gt;開始保存&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SpuInfoController.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; * 保存SpuSaveVo
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/save&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; R &lt;span style=&#34;color:#008b45&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; SpuSaveVo vo) {
    spuInfoService.&lt;span style=&#34;color:#658b00&#34;&gt;saveSpuInfo&lt;/span&gt;(vo);
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; R.&lt;span style=&#34;color:#658b00&#34;&gt;ok&lt;/span&gt;();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SpuInfoServiceImpl.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Transactional&lt;/span&gt;(rollbackFor = Exception.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;saveSpuInfo&lt;/span&gt;(SpuSaveVo vo) {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 1、保存spu基本信息：pms_spu_info
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    SpuInfoEntity spuInfoEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SpuInfoEntity();
    BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(vo, spuInfoEntity);
    spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setCreateTime&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Date());
    spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setUpdateTime&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Date());
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(spuInfoEntity);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 2、保存spu的描述圖片：pms_spu_info_desc
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 這個decript錯字來自前端...算了就照它的吧
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;String&amp;gt; decript = vo.&lt;span style=&#34;color:#658b00&#34;&gt;getDecript&lt;/span&gt;();
    SpuInfoDescEntity spuInfoDescEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SpuInfoDescEntity();
    spuInfoDescEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuId&lt;/span&gt;(spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
    &lt;span style=&#34;color:#228b22&#34;&gt;// 用逗號分隔多張描述圖片，描述圖片就是購物時左上那些摸過去會放大的小圖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// String.join方法可以自動遍歷數組中的String然後拼接成一個String
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    spuInfoDescEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setDecript&lt;/span&gt;(String.&lt;span style=&#34;color:#658b00&#34;&gt;join&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;, decript));
    spuInfoDescService.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(spuInfoDescEntity);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 3、保存spu的圖片集：pms_spu_images，
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 圖片集就是往下拉，在頁面中央出現的多張商品宣傳大圖
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;String&amp;gt; images = vo.&lt;span style=&#34;color:#658b00&#34;&gt;getImages&lt;/span&gt;();
    spuImagesService.&lt;span style=&#34;color:#658b00&#34;&gt;saveImages&lt;/span&gt;(spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;(), images);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 4、保存spu的規格參數：pms_product_attr_value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;BaseAttrsItem&amp;gt; baseAttrs = vo.&lt;span style=&#34;color:#658b00&#34;&gt;getBaseAttrs&lt;/span&gt;();
    List&amp;lt;ProductAttrValueEntity&amp;gt; collect = baseAttrs.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(attr -&amp;gt; {
        ProductAttrValueEntity valueEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ProductAttrValueEntity();
        valueEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrId&lt;/span&gt;(attr.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrId&lt;/span&gt;());

        &lt;span style=&#34;color:#228b22&#34;&gt;// 查詢attr屬性名
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        AttrEntity byId = attrService.&lt;span style=&#34;color:#658b00&#34;&gt;getById&lt;/span&gt;(attr.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrId&lt;/span&gt;());

        valueEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrName&lt;/span&gt;(byId.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrName&lt;/span&gt;());
        valueEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setAttrValue&lt;/span&gt;(attr.&lt;span style=&#34;color:#658b00&#34;&gt;getAttrValues&lt;/span&gt;());
        valueEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setQuickShow&lt;/span&gt;(attr.&lt;span style=&#34;color:#658b00&#34;&gt;getShowDesc&lt;/span&gt;());
        valueEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuId&lt;/span&gt;(spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; valueEntity;
    }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
    productAttrValueService.&lt;span style=&#34;color:#658b00&#34;&gt;saveBatch&lt;/span&gt;(collect);

    &lt;span style=&#34;color:#228b22&#34;&gt;// 6、保存spu的積分信息：gulimall_sms---&amp;gt;sms_spu_bounds
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    Bounds bounds = vo.&lt;span style=&#34;color:#658b00&#34;&gt;getBounds&lt;/span&gt;();
    SpuBoundsTo spuBoundsTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SpuBoundsTo();
    BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(bounds, spuBoundsTo);
    spuBoundsTo.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuId&lt;/span&gt;(spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
    R r = couponFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;saveSpuBounds&lt;/span&gt;(spuBoundsTo);

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() != 0) {
        log.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;遠程保存spu積分失敗&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#228b22&#34;&gt;// 5、保存當前spu對應的所有sku信息：pms_sku_info
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    List&amp;lt;SkusItem&amp;gt; skus = vo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkus&lt;/span&gt;();
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (skus != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; skus.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        skus.&lt;span style=&#34;color:#658b00&#34;&gt;forEach&lt;/span&gt;(item -&amp;gt; {
            &lt;span style=&#34;color:#228b22&#34;&gt;// 傳來的是多個skus，遍歷一個一個處理
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
            &lt;span style=&#34;color:#228b22&#34;&gt;// 5、1）、sku的基本信息:pms_sku_info
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 如果有設定預設圖片
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            String defaultImg = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (ImagesItem image : item.&lt;span style=&#34;color:#658b00&#34;&gt;getImages&lt;/span&gt;()) {
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (image.&lt;span style=&#34;color:#658b00&#34;&gt;getDefaultImg&lt;/span&gt;() == 1) {
                    defaultImg = image.&lt;span style=&#34;color:#658b00&#34;&gt;getImgUrl&lt;/span&gt;();
                }
            }

            &lt;span style=&#34;color:#228b22&#34;&gt;// 準備存到pms_sku_info表
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            SkuInfoEntity skuInfoEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuInfoEntity();
            BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(item, skuInfoEntity);
            skuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setBrandId&lt;/span&gt;(spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getBrandId&lt;/span&gt;());
            &lt;span style=&#34;color:#228b22&#34;&gt;// 資料庫中又是這個錯字CatalogId，之前被坑好久
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            skuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setCatalogId&lt;/span&gt;(spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getCatalogId&lt;/span&gt;());
            skuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSaleCount&lt;/span&gt;(0L);
            skuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuId&lt;/span&gt;(spuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
            skuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuDefaultImg&lt;/span&gt;(defaultImg);
            skuInfoService.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(skuInfoEntity);

            Long skuId = skuInfoEntity.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;();
            &lt;span style=&#34;color:#228b22&#34;&gt;// 5、2）、sku的圖片信息：pms_sku_images，這張表中的條目是基於skuId
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 因為一個skuId可以有多張圖片
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            List&amp;lt;SkuImagesEntity&amp;gt; imagesEntities = item.&lt;span style=&#34;color:#658b00&#34;&gt;getImages&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(img -&amp;gt; {
                SkuImagesEntity skuImagesEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuImagesEntity();
                skuImagesEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuId);
                skuImagesEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setImgUrl&lt;/span&gt;(img.&lt;span style=&#34;color:#658b00&#34;&gt;getImgUrl&lt;/span&gt;());
                skuImagesEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setDefaultImg&lt;/span&gt;(img.&lt;span style=&#34;color:#658b00&#34;&gt;getDefaultImg&lt;/span&gt;());
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; skuImagesEntity;
            }).&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(entity -&amp;gt; {
                &lt;span style=&#34;color:#228b22&#34;&gt;// filter返回true就是需要留下的，false就是剔除的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; !StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(entity.&lt;span style=&#34;color:#658b00&#34;&gt;getImgUrl&lt;/span&gt;());
            }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());

            &lt;span style=&#34;color:#228b22&#34;&gt;// 批量保存到pms_sku_images
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            skuImagesService.&lt;span style=&#34;color:#658b00&#34;&gt;saveBatch&lt;/span&gt;(imagesEntities);

            &lt;span style=&#34;color:#228b22&#34;&gt;// 5、3）、sku的銷售屬性：pms_sku_sale_attr_value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 就是因為銷售屬性的笛卡爾積導致有多個sku，這張表保存了某個skuId對應的屬性具體是啥值
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 例如顏色是黑色，RAM是8G
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            List&amp;lt;AttrItem&amp;gt; attr = item.&lt;span style=&#34;color:#658b00&#34;&gt;getAttr&lt;/span&gt;();
            List&amp;lt;SkuSaleAttrValueEntity&amp;gt; skuSaleAttrValueEntities = attr.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(a -&amp;gt; {
                SkuSaleAttrValueEntity skuSaleAttrValueEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuSaleAttrValueEntity();
                BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(a, skuSaleAttrValueEntity);
                skuSaleAttrValueEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuId);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; skuSaleAttrValueEntity;
            }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
            &lt;span style=&#34;color:#228b22&#34;&gt;// 批量保存到pms_sku_sale_attr_value
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            skuSaleAttrValueService.&lt;span style=&#34;color:#658b00&#34;&gt;saveBatch&lt;/span&gt;(skuSaleAttrValueEntities);

            &lt;span style=&#34;color:#228b22&#34;&gt;// 5、4）、sku的優惠、滿減等信息：gulimall_sms---&amp;gt;sms_sku_ladder、sms_sku_full_reduction、sms_member_price
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            SkuReductionTo skuReductionTo = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuReductionTo();
            BeanUtils.&lt;span style=&#34;color:#658b00&#34;&gt;copyProperties&lt;/span&gt;(item, skuReductionTo);
            skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuId);
            &lt;span style=&#34;color:#228b22&#34;&gt;// 有設定打折規則再保存，省得資料庫中存一堆0
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getFullCount&lt;/span&gt;() &amp;gt; 0 || skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getFullPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;compareTo&lt;/span&gt;(BigDecimal.&lt;span style=&#34;color:#658b00&#34;&gt;ZERO&lt;/span&gt;) == 1) {
                R r1 = couponFeignService.&lt;span style=&#34;color:#658b00&#34;&gt;saveSkuReduction&lt;/span&gt;(skuReductionTo);
                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (r1.&lt;span style=&#34;color:#658b00&#34;&gt;getCode&lt;/span&gt;() != 0) {
                    log.&lt;span style=&#34;color:#658b00&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;遠程保存sku優惠資訊失敗&amp;#34;&lt;/span&gt;);
                }
            }
        });
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;SpuImagesServiceImpl.java
&lt;ul&gt;
&lt;li&gt;saveImages方法是每張圖片有自己的一個&lt;code&gt;SpuImagesEntity&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117170242122.png&#34; alt=&#34;image-20220117170242122&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;saveImages&lt;/span&gt;(Long id, List&amp;lt;String&amp;gt; images) {
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (images != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; images.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;() &amp;gt; 0) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 要存成多條紀錄
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;SpuImagesEntity&amp;gt; collect = images.&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(e -&amp;gt; {
            SpuImagesEntity spuImagesEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SpuImagesEntity();
            spuImagesEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSpuId&lt;/span&gt;(id);
            spuImagesEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setImgUrl&lt;/span&gt;(e);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; spuImagesEntity;
        }).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;saveBatch&lt;/span&gt;(collect);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;遠程調用feign&#34;&gt;遠程調用feign&lt;/h3&gt;
&lt;p&gt;複習一下步驟:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;導依賴spring-cloud-starter-openfeign&lt;/li&gt;
&lt;li&gt;在common模組造feign包，包下放接口
&lt;ul&gt;
&lt;li&gt;接口上註解&lt;code&gt;@FeignClient(&amp;quot;要被調用的服務名&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把要被調用的方法完整URL寫上(可以去目標controller直接偷)&lt;/li&gt;
&lt;li&gt;範例: CouponFeignService.java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@FeignClient&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;coupon&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CouponFeignService&lt;/span&gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// 上傳商品時，保存 遠程調用的積分訊息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/coupon/spubounds/save&amp;#34;&lt;/span&gt;)
    R &lt;span style=&#34;color:#008b45&#34;&gt;saveSpuBounds&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; SpuBoundsTo spuBoundsTo);
    &lt;span style=&#34;color:#228b22&#34;&gt;// 相當於 R save(@RequestBody SpuBoundsEntity spuBounds)
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 因為都是轉成JSON在傳送，轉回來屬性能對上就行
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 上傳商品時，保存 遠程調用的滿減、會員優惠訊息
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@PostMapping&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/coupon/skufullreduction/saveinfo&amp;#34;&lt;/span&gt;)
    R &lt;span style=&#34;color:#008b45&#34;&gt;saveSkuReduction&lt;/span&gt;(&lt;span style=&#34;color:#707a7c&#34;&gt;@RequestBody&lt;/span&gt; SkuReductionTo skuReductionTo);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;回到要調用別人的啟動類，註解掃描&lt;code&gt;.common.feign&lt;/code&gt;包&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@EnableFeignClients&lt;/span&gt;(basePackages = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;yozi.mall.common.feign&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ProductApplication&lt;/span&gt; {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;to類&#34;&gt;To類&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Transfer Object&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;通常放在common模組下&lt;/li&gt;
&lt;li&gt;用於服務間傳遞物件，例如: SkuReductionTo.java&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SkuReductionTo&lt;/span&gt; {

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Long skuId;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 打幾折
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; BigDecimal discount;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer priceStatus;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; BigDecimal fullPrice;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; BigDecimal reducePrice;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer countStatus;
    &lt;span style=&#34;color:#228b22&#34;&gt;// 滿幾件
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Integer fullCount;

    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; List&amp;lt;MemberPriceItem&amp;gt; memberPrice;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其實feign是轉成JSON在傳送，轉回來屬性能對上就行&lt;/li&gt;
&lt;li&gt;但是要注意JSON轉化的規則，有時候不同依賴提供的JSON編碼有細小差異可能就會造成BUG&lt;/li&gt;
&lt;li&gt;這邊總共遠程調用了2個服務，第一個spu積分沒啥特別的，直接灌給生成的save方法就好&lt;/li&gt;
&lt;li&gt;第二個sku的滿減、會員優惠就很坑了，因為To中的屬性與目標地要保存的Entity有些對不上，於是才要自創saveInfo方法&lt;/li&gt;
&lt;li&gt;SkuFullReductionServiceImpl.java
&lt;ul&gt;
&lt;li&gt;善用快速產生setter的插件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;saveInfo&lt;/span&gt;(SkuReductionTo skuReductionTo) {
        &lt;span style=&#34;color:#228b22&#34;&gt;// 保存階梯優惠
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getFullCount&lt;/span&gt;() &amp;gt; 0) {
            SkuLadderEntity skuLadderEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuLadderEntity();
            skuLadderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;());
            skuLadderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setFullCount&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getFullCount&lt;/span&gt;());
            skuLadderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setDiscount&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getDiscount&lt;/span&gt;());
            skuLadderEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setAddOther&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getCountStatus&lt;/span&gt;());
            skuLadderService.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(skuLadderEntity);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;// 保存滿減優惠
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getFullPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;compareTo&lt;/span&gt;(BigDecimal.&lt;span style=&#34;color:#658b00&#34;&gt;ZERO&lt;/span&gt;) &amp;gt; 0) {
            SkuFullReductionEntity fullReductionEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SkuFullReductionEntity();
            fullReductionEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;());
            fullReductionEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setFullPrice&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getFullPrice&lt;/span&gt;());
            fullReductionEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setReducePrice&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getReducePrice&lt;/span&gt;());
            fullReductionEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setAddOther&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getCountStatus&lt;/span&gt;());
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;save&lt;/span&gt;(fullReductionEntity);
        }

        &lt;span style=&#34;color:#228b22&#34;&gt;// 保存會員優惠
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        List&amp;lt;MemberPriceEntity&amp;gt; collect = skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getMemberPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;map&lt;/span&gt;(e -&amp;gt; {
            MemberPriceEntity memberPriceEntity = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; MemberPriceEntity();
            memberPriceEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setSkuId&lt;/span&gt;(skuReductionTo.&lt;span style=&#34;color:#658b00&#34;&gt;getSkuId&lt;/span&gt;());
            memberPriceEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setMemberLevelId&lt;/span&gt;(e.&lt;span style=&#34;color:#658b00&#34;&gt;getId&lt;/span&gt;());
            memberPriceEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setMemberLevelName&lt;/span&gt;(e.&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;());
            memberPriceEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setMemberPrice&lt;/span&gt;(e.&lt;span style=&#34;color:#658b00&#34;&gt;getPrice&lt;/span&gt;());
            &lt;span style=&#34;color:#228b22&#34;&gt;// 預設可疊加會員優惠
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            memberPriceEntity.&lt;span style=&#34;color:#658b00&#34;&gt;setAddOther&lt;/span&gt;(1);
            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; memberPriceEntity;
        }).&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(e -&amp;gt; e.&lt;span style=&#34;color:#658b00&#34;&gt;getMemberPrice&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;compareTo&lt;/span&gt;(BigDecimal.&lt;span style=&#34;color:#658b00&#34;&gt;ZERO&lt;/span&gt;) &amp;gt; 0).&lt;span style=&#34;color:#658b00&#34;&gt;collect&lt;/span&gt;(Collectors.&lt;span style=&#34;color:#658b00&#34;&gt;toList&lt;/span&gt;());
        memberPriceService.&lt;span style=&#34;color:#658b00&#34;&gt;saveBatch&lt;/span&gt;(collect);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;知識點&#34;&gt;知識點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;String.join遍歷數組中的String，拼接成一個長的String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手動設定id的屬性，非自增要加註解(mybatisPlus預設會自增)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117213214251.png&#34; alt=&#34;image-20220117213214251&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在流中使用過濾器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;filter&lt;/span&gt;(entity -&amp;gt; {
    &lt;span style=&#34;color:#228b22&#34;&gt;// filter返回true就是需要留下的，false就是剔除的
&lt;/span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; !StringUtils.&lt;span style=&#34;color:#658b00&#34;&gt;isEmpty&lt;/span&gt;(entity.&lt;span style=&#34;color:#658b00&#34;&gt;getImgUrl&lt;/span&gt;());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;BigDecimal的比較與判斷
&lt;ul&gt;
&lt;li&gt;A.compareTo(B)，返回1表示A比B大，返回0表示相等，返回-1表示A比B小&lt;/li&gt;
&lt;li&gt;判斷BigDecimal xxx是否&amp;gt; 0 :&lt;/li&gt;
&lt;li&gt;幹對阿==1不就 &amp;gt; 0，直接用&amp;gt;0還比較好讀&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;xxx.&lt;span style=&#34;color:#658b00&#34;&gt;compareTo&lt;/span&gt;(BigDecimal.&lt;span style=&#34;color:#658b00&#34;&gt;ZERO&lt;/span&gt;) == 1 或 &amp;gt; 0 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;debug小技巧&#34;&gt;Debug小技巧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;快速導出HTTP請求到postman&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117215243371.png&#34; alt=&#34;image-20220117215243371&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;縮減F12不需要顯示的區塊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220118162128763.png&#34; alt=&#34;image-20220118162128763&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讓mybatis-plus輸出log到控制台，application.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Compound批次啟動服務&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117212630739.png&#34; alt=&#34;image-20220117212630739&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-Xmx設定最大占用記憶體&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117212736437.png&#34; alt=&#34;image-20220117212736437&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設置斷點
&lt;ul&gt;
&lt;li&gt;要查看的物件直接點灰字可以展開詳細&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220117220041272.png&#34; alt=&#34;image-20220117220041272&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用F8下一步，或設好下一個斷點直接按左下的快進(F9)&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/220123-gulimall-06-feign/ - Yoziming</description>
        </item>
    
    
  </channel>
</rss> 