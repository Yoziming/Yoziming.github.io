<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>柚子茶室</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yoziming</copyright>
    <lastBuildDate>Wed, 17 Nov 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>單向鏈表</title>
        <link>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E5%96%AE%E5%90%91%E9%8F%88%E8%A1%A8/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E5%96%AE%E5%90%91%E9%8F%88%E8%A1%A8/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E5%96%AE%E5%90%91%E9%8F%88%E8%A1%A8/ -&lt;h1 id=&#34;單向鏈表&#34;&gt;單向鏈表&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type HeroNode struct {
	no   int
	name string
	next *HeroNode //表示指向下一個節點
}

//給鏈表插入節點
func Insert(head *HeroNode, newHeroNode *HeroNode) {
	//先找到最後的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		}
		temp = temp.next //不斷往下找
	}
	//把newHeroNode加到屁股
	temp.next = newHeroNode
}

//根據No從小到大插入
func InsertNo(head *HeroNode, newHeroNode *HeroNode) {
	//想找到適當的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		} else if temp.next.no &amp;gt; newHeroNode.no {
			//表示new要插到temp後
			break
		} else if temp.next.no == newHeroNode.no {
			//表示new這個編號已存在
			fmt.Println(newHeroNode.no, &amp;quot;該編號已存在&amp;quot;)
			return
		}
		temp = temp.next //不斷往下找

	}
	//把newHeroNode加到找到的地方
	newHeroNode.next = temp.next
	temp.next = newHeroNode 
}

//根據no刪除一個節點
func DelHeroNode(head *HeroNode, id int) {
	//想找到適當的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		} else if temp.next.no == id {
			//表示找到了
			fmt.Println(id, &amp;quot;該編號已刪除&amp;quot;)
			temp.next = temp.next.next
			return
		}
		temp = temp.next //不斷往下找
	}

}

//顯示
func List(head *HeroNode) {
	//創建一個輔助
	temp := head
	if temp.next == nil { //空鏈表?
		fmt.Println(&amp;quot;空&amp;quot;)
		return
	}
	for {
		fmt.Printf(&amp;quot;[%d,%s]==&amp;gt;&amp;quot;, temp.next.no, temp.next.name)
		temp = temp.next      //不斷往下找
		if temp.next == nil { //到尾了
			fmt.Println(&amp;quot;完畢&amp;quot;)
			break
		}
	}
}

func main() {
	//創建一個頭節點(空的)
	head := &amp;amp;HeroNode{}
	hero1 := &amp;amp;HeroNode{
		no:   1,
		name: &amp;quot;宋江&amp;quot;,
	}
	hero2 := &amp;amp;HeroNode{
		no:   2,
		name: &amp;quot;李奎&amp;quot;,
	}
	hero3 := &amp;amp;HeroNode{
		no:   3,
		name: &amp;quot;李軌&amp;quot;,
	}
	hero4 := &amp;amp;HeroNode{
		no:   3,
		name: &amp;quot;321&amp;quot;,
	}
	InsertNo(head, hero3)
	InsertNo(head, hero1)
	InsertNo(head, hero2)
	InsertNo(head, hero4)
	List(head)
	DelHeroNode(head, 2)
	List(head)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E5%96%AE%E5%90%91%E9%8F%88%E8%A1%A8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>插入&amp;選擇&amp;快速排序</title>
        <link>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E6%8F%92%E5%85%A5%E9%81%B8%E6%93%87%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E6%8F%92%E5%85%A5%E9%81%B8%E6%93%87%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E6%8F%92%E5%85%A5%E9%81%B8%E6%93%87%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/ -&lt;h1 id=&#34;插入選擇快速排序&#34;&gt;插入&amp;amp;選擇&amp;amp;快速排序&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//選擇排序
func SelectSort(array *[6]int) {
	for j := 0; j &amp;lt; len(array)-1; j++ {
		min := array[j]
		minIndex := j
		//尋找最小的下標
		for i := j + 1; i &amp;lt; len(array); i++ {
			if min &amp;gt; array[i] {
				min = array[i]
				minIndex = i
			}
		}
		if minIndex != j {
			array[j], array[minIndex] = array[minIndex], array[j]
		}
		fmt.Printf(&amp;quot;第%d次交換後 %v\n&amp;quot;, j+1, *array)
	}

}

//插入排序
func InsertSort(arr *[6]int) {
	for j := 1; j &amp;lt; len(arr); j++ {
		//給第二個元素找位置
		insertVal := arr[j]
		insertIndex := j - 1 //下標
		//由大到小
		for insertIndex &amp;gt;= 0 &amp;amp;&amp;amp; arr[insertIndex] &amp;lt; insertVal {
			arr[insertIndex+1] = arr[insertIndex] //數據後移
			insertIndex--
		}
		//插入
		if insertIndex+1 != j {
			arr[insertIndex+1] = insertVal
		}
		fmt.Printf(&amp;quot;第%d次插入後 %v\n&amp;quot;, j, *arr)
	}

}

//快速排序
func QuickSort(left int, right int, array *[6]int) {
	l := left
	r := right
	pivot := array[(left+right)/2] //中軸

	//比pivot小就放到左邊，反之亦然
	for l &amp;lt; r {
		for array[l] &amp;lt; pivot {
			l++
		}
		for array[r] &amp;gt; pivot {
			r--
		}
		if l &amp;gt;= r { //表示分割完成
			break
		}
		//如果沒完成就交換
		array[l], array[r] = array[r], array[l]
		//改善
		if array[l] == pivot {
			r--
		}
		if array[r] == pivot {
			l++
		}
	}
	//防卡住
	if l == r {
		l++
		r--
	}
	if left &amp;lt; r {
		QuickSort(left, r, array)
	}
	if right &amp;gt; l {
		QuickSort(l, right, array)
	}

}

func main() {
	// var array = [6]int{10, 34, 19, 100, 80, -5}
	// // SelectSort(&amp;amp;array)
	// // InsertSort(&amp;amp;array)
	// // fmt.Println(array)
	// QuickSort(0, len(array)-1, &amp;amp;array)
	// fmt.Println(array)

}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E6%8F%92%E5%85%A5%E9%81%B8%E6%93%87%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>模擬棧&amp;四則運算</title>
        <link>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E6%A8%A1%E6%93%AC%E6%A3%A7%E5%9B%9B%E5%89%87%E9%81%8B%E7%AE%97/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E6%A8%A1%E6%93%AC%E6%A3%A7%E5%9B%9B%E5%89%87%E9%81%8B%E7%AE%97/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E6%A8%A1%E6%93%AC%E6%A3%A7%E5%9B%9B%E5%89%87%E9%81%8B%E7%AE%97/ -&lt;h1 id=&#34;模擬棧四則運算&#34;&gt;模擬棧&amp;amp;四則運算&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//模擬棧的使用
type Stack struct {
	MaxTop int //最大可存個數
	Top    int //頂
	arr    [20]int
}

func (s *Stack) Push(val int) (err error) {
	//先判斷是否滿
	if s.Top == s.MaxTop-1 {
		fmt.Println(&amp;quot;stack full&amp;quot;)
		return errors.New(&amp;quot;stack full&amp;quot;)
	}
	//放入數據
	s.Top++
	s.arr[s.Top] = val
	return
}

func (s *Stack) Pop() (val int, err error) {
	//先判斷是否空
	if s.Top == -1 {
		fmt.Println(&amp;quot;stack empty&amp;quot;)
		return 0, errors.New(&amp;quot;stack empty&amp;quot;)
	}
	//彈出數據
	val = s.arr[s.Top]
	s.Top--
	return val, nil
}

//遍歷
func (s *Stack) List() {
	//先判斷是否空
	if s.Top == -1 {
		fmt.Println(&amp;quot;stack empty&amp;quot;)
		return
	}
	fmt.Println(&amp;quot;stack now=&amp;quot;)
	for i := s.Top; i &amp;gt;= 0; i-- {
		fmt.Printf(&amp;quot;arr[%d]=%d\n&amp;quot;, i, s.arr[i])
	}
}

//判斷字符是數字還運算符號
func (s *Stack) IsOper(val int) bool {
	if val == 42 || val == 43 || val == 45 || val == 47 {
		//ASC碼的+-*/
		return true
	} else {
		return false
	}
}

//運算
func (s *Stack) Cal(n1, n2, oper int) int {
	res := 0
	switch oper {
	case 42:
		res = n2 * n1
	case 43:
		res = n2 + n1
	case 45:
		res = n2 - n1
	case 47:
		res = n2 / n1
	default:
		fmt.Println(&amp;quot;運算符號錯誤&amp;quot;)
	}
	return res
}

//優先級
func (s *Stack) Priority(oper int) int {
	res := 0
	if oper == 42 || oper == 47 {
		res = 1
	} else if oper == 43 || oper == 45 {
		res = 0
	}
	return res
}

func main() {
	// stack := &amp;amp;Stack{
	// 	MaxTop: 5,  //最多存5個
	// 	Top:    -1, //表示棧為空
	// }
	// stack.Push(1)
	// stack.Push(2)
	// stack.Push(3)
	// stack.Push(4)
	// stack.Push(5)
	// stack.Push(6)
	// p1, _ := stack.Pop()
	// fmt.Println(&amp;quot;彈出&amp;quot;, p1)
	// p1, _ = stack.Pop()
	// fmt.Println(&amp;quot;彈出&amp;quot;, p1)
	// p1, _ = stack.Pop()
	// fmt.Println(&amp;quot;彈出&amp;quot;, p1)
	// p1, _ = stack.Pop()
	// fmt.Println(&amp;quot;彈出&amp;quot;, p1)
	// p1, _ = stack.Pop()
	// fmt.Println(&amp;quot;彈出&amp;quot;, p1)

	//四則運算練習

	//數字棧
	numStack := &amp;amp;Stack{
		MaxTop: 20,
		Top:    -1,
	}

	//運算符號
	operStack := &amp;amp;Stack{
		MaxTop: 20,
		Top:    -1,
	}

	exp := &amp;quot;30+20*6+1&amp;quot;
	n1 := 0
	n2 := 0
	oper := 0
	res := 0
	keepNum := &amp;quot;&amp;quot;

	//定義一個index來掃描
	index := 0
	for {
		ch := exp[index : index+1]  //字符串
		temp := int([]byte(ch)[0])  //對應的ASC碼
		if operStack.IsOper(temp) { //說明是符號
			if operStack.Top == -1 { //說明是空棧
				operStack.Push(temp) //就入
			} else {
				if operStack.Priority(operStack.arr[operStack.Top]) &amp;gt;= operStack.Priority(temp) {
					//比較一下棧頂的運算符號優先級，如果有先乘除的
					n1, _ = numStack.Pop()
					n2, _ = numStack.Pop()
					oper, _ = operStack.Pop()
					res = operStack.Cal(n1, n2, oper)
					//算完塞回去
					numStack.Push(res)
					operStack.Push(temp)
				} else {
					operStack.Push(temp)
				}
			}
		} else {
			//處理多位數，看index後面是不是運算符號
			//拼接
			keepNum += ch

			if index == len(exp)-1 { //如果已經到最後
				val, _ := strconv.ParseInt(keepNum, 10, 64)
				numStack.Push(int(val))
			} else {
				if operStack.IsOper(int([]byte(exp[index+1 : index+2])[0])) {
					val, _ := strconv.ParseInt(keepNum, 10, 64)
					numStack.Push(int(val))
					keepNum = &amp;quot;&amp;quot;
				}
			}
			//從ASC轉回數字
			// val, _ := strconv.ParseInt(ch, 10, 64)
			// numStack.Push(int(val))
		}
		//判斷是否繼續掃描
		if index+1 == len(exp) {
			break
		}
		index++
	}

	for {
		if operStack.Top == -1 {
			break
		}
		n1, _ = numStack.Pop()
		n2, _ = numStack.Pop()
		oper, _ = operStack.Pop()
		res = operStack.Cal(n1, n2, oper)
		//算完塞回去
		numStack.Push(res)
	}
	final, _ := numStack.Pop()
	fmt.Printf(&amp;quot;算式%s=%v&amp;quot;, exp, final)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E6%A8%A1%E6%93%AC%E6%A3%A7%E5%9B%9B%E5%89%87%E9%81%8B%E7%AE%97/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>環形單向鏈表</title>
        <link>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%92%B0%E5%BD%A2%E5%96%AE%E5%90%91%E9%8F%88%E8%A1%A8/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%92%B0%E5%BD%A2%E5%96%AE%E5%90%91%E9%8F%88%E8%A1%A8/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%92%B0%E5%BD%A2%E5%96%AE%E5%90%91%E9%8F%88%E8%A1%A8/ -&lt;h1 id=&#34;環形單向鏈表&#34;&gt;環形單向鏈表&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type CatNode struct {
	no   int
	name string
	next *CatNode
}

func Insert(head *CatNode, newCatNode *CatNode) {
	//判斷是否第一隻貓
	if head.next == nil {
		head.no = newCatNode.no
		head.name = newCatNode.name
		head.next = head //構成環形
		fmt.Println(*newCatNode, &amp;quot;已初始化並加入環形鏈表&amp;quot;)
		return
	}

	//定義一個變量找到環形最後一個
	temp := head
	for {
		if temp.next == head {
			break
		}
		temp = temp.next

	}
	temp.next = newCatNode
	fmt.Println(*newCatNode, &amp;quot;已加入環形鏈表&amp;quot;)
	newCatNode.next = head

}

func Del(head *CatNode, id int) *CatNode {
	temp := head
	helper := head
	if temp.next == nil {
		fmt.Println(&amp;quot;這是一個空鏈表&amp;quot;)
		return head
	}
	if temp.next == head { //只有一點
		temp.next = nil
		fmt.Println(id, &amp;quot;已刪除&amp;quot;)
		return head
	}

	//helper放到尾
	for {
		if helper.next == head {
			break
		}
		helper = helper.next
	}

	flag := true
	for {
		if temp.next == head { //說明比到最後一個了
			break
		}
		if temp.no == id {
			if temp == head { //說明刪除的是頭
				head = head.next
			}
			helper.next = temp.next
			fmt.Println(id, &amp;quot;已刪除&amp;quot;)
			flag = false
			break
		}
		temp = temp.next     //移動比較用
		helper = helper.next //一旦找到要刪除的點
	}
	if flag {
		if temp.no == id {
			helper.next = temp.next
			fmt.Println(id, &amp;quot;已刪除&amp;quot;)
		} else {
			fmt.Println(id, &amp;quot;找不到&amp;quot;)
		}
	}
	return head
}

func List(head *CatNode) {
	temp := head
	if temp.next == nil {
		fmt.Println(&amp;quot;空的環形鏈表&amp;quot;)
		return
	}
	for {
		fmt.Printf(&amp;quot;貓id=%d name=%s ~&amp;gt;&amp;quot;, temp.no, temp.name)
		if temp.next == head {
			break
		}
		temp = temp.next
	}
	fmt.Println()
}

func main() {
	head := &amp;amp;CatNode{}
	cat1 := &amp;amp;CatNode{
		no:   1,
		name: &amp;quot;tom&amp;quot;,
	}
	cat2 := &amp;amp;CatNode{
		no:   2,
		name: &amp;quot;bbb&amp;quot;,
	}
	cat3 := &amp;amp;CatNode{
		no:   3,
		name: &amp;quot;ccc&amp;quot;,
	}

	Insert(head, cat1)
	Insert(head, cat2)
	Insert(head, cat3)
	List(head)
	// Del(head, 2)
	// List(head)
	head = Del(head, 4)
	List(head)

}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%92%B0%E5%BD%A2%E5%96%AE%E5%90%91%E9%8F%88%E8%A1%A8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>稀疏數組</title>
        <link>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%A8%80%E7%96%8F%E6%95%B8%E7%B5%84/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%A8%80%E7%96%8F%E6%95%B8%E7%B5%84/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%A8%80%E7%96%8F%E6%95%B8%E7%B5%84/ -&lt;h1 id=&#34;稀疏數組&#34;&gt;稀疏數組&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type ValNode struct {
	row int //橫的
	col int //直的
	val int
}

func main() {
	//創建數組範例
	var chessMap [11][11]int
	chessMap[1][2] = 1
	chessMap[2][3] = 2

	//輸出看樣子
	for _, v := range chessMap {
		for _, v2 := range v {
			fmt.Printf(&amp;quot;%d\t&amp;quot;, v2)
		}
		fmt.Println()
	}

	//轉成稀疏數組，思路:遍歷他，創造一個結構體，發現有值就放進對應的切片
	var sparseArr []ValNode
	//紀錄規模跟預設值
	valNode0 := ValNode{
		row: 11,
		col: 11,
		val: 0,
	}
	sparseArr = append(sparseArr, valNode0)

	for i, v := range chessMap {
		for j, k := range v {
			if k != 0 {
				valNodeFind := ValNode{
					row: i,
					col: j,
					val: k,
				}
				sparseArr = append(sparseArr, valNodeFind)
			}
		}
	}
	//輸出這個數組看看
	for i, valNode := range sparseArr {
		fmt.Printf(&amp;quot;%d: %d %d %d\n&amp;quot;, i, valNode.row, valNode.col, valNode.val)
	}

	//恢復
	var chessMapRe [11][11]int
	for i, v := range sparseArr {
		if i != 0 { //跳過第一row
			chessMapRe[v.row][v.col] = v.val

		}
	}

	//輸出看樣子
	for _, v := range chessMapRe {
		for _, v2 := range v {
			fmt.Printf(&amp;quot;%d\t&amp;quot;, v2)
		}
		fmt.Println()
	}
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%A8%80%E7%96%8F%E6%95%B8%E7%B5%84/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>約瑟夫問題</title>
        <link>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%B4%84%E7%91%9F%E5%A4%AB%E5%95%8F%E9%A1%8C/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%B4%84%E7%91%9F%E5%A4%AB%E5%95%8F%E9%A1%8C/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%B4%84%E7%91%9F%E5%A4%AB%E5%95%8F%E9%A1%8C/ -&lt;h1 id=&#34;約瑟夫問題&#34;&gt;約瑟夫問題&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Boy struct {
	No   int
	Next *Boy //指向下一個小孩的指針
}

func addBoy(num int) *Boy {
	//num表示小孩的個數，*Boy返回第一個小孩的指針
	first := &amp;amp;Boy{}
	temp := &amp;amp;Boy{}
	if num &amp;lt; 1 {
		fmt.Println(&amp;quot;num值錯誤&amp;quot;)
		return first
	}

	for i := 1; i &amp;lt;= num; i++ {
		boy := &amp;amp;Boy{
			No: i,
		}
		if i == 1 {
			first = boy //不變
			temp = boy
			temp.Next = first
		} else {
			temp.Next = boy
			temp = boy
			temp.Next = first //構成環形
		}
	}
	return first
}

func show(first *Boy) {
	if first.Next == nil {
		fmt.Println(&amp;quot;列表為空&amp;quot;)
		return
	}
	temp := first
	for {
		fmt.Printf(&amp;quot;編號%d~&amp;gt;&amp;quot;, temp.No)
		if temp.Next == first {
			break
		}
		temp = temp.Next
	}
}

func play(first *Boy, k int, m int) {
	//從第k人開始報數m出列
	if first.Next == nil {
		fmt.Println(&amp;quot;列表為空&amp;quot;)
		return
	}
	tail := first
	for {
		if tail.Next == first {
			break
		}
		tail = tail.Next
	}
	//讓first移動到k
	for i := 0; i &amp;lt; k-1; i++ {
		first = first.Next
		tail = tail.Next
	}

	//開始數m
	for {
		for i := 1; i &amp;lt;= m-1; i++ {
			first = first.Next
			tail = tail.Next
		}
		fmt.Println(first.No, &amp;quot;出列&amp;quot;)
		first = first.Next
		tail.Next = first

		//退出
		if tail == first {
			break
		}
	}
	fmt.Println(first.No, &amp;quot;為最後一個&amp;quot;)
}
func main() {
	first := addBoy(41)
	show(first)
	fmt.Println()
	play(first, 1, 3)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E7%B4%84%E7%91%9F%E5%A4%AB%E5%95%8F%E9%A1%8C/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>迷宮遞迴</title>
        <link>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E8%BF%B7%E5%AE%AE%E9%81%9E%E8%BF%B4/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E8%BF%B7%E5%AE%AE%E9%81%9E%E8%BF%B4/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E8%BF%B7%E5%AE%AE%E9%81%9E%E8%BF%B4/ -&lt;h1 id=&#34;迷宮遞迴&#34;&gt;迷宮遞迴&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func SetWay(myMap *[8][7]int, a int, b int) bool {
	//a,b 表示對地圖的那個點測試

	//找到出口
	if myMap[6][5] == 2 {
		return true
	} else {
		//繼續找
		if myMap[a][b] == 0 { //可探測的點
			myMap[a][b] = 2            //踩上去了，再探上下左右，但是我知道要往下往右探
			if SetWay(myMap, a+1, b) { //下
				return true
			} else if SetWay(myMap, a, b+1) { //右
				return true
			} else if SetWay(myMap, a-1, b) { //上
				return true
			} else if SetWay(myMap, a, b-1) { //左
				return true
			} else { //死路
				myMap[a][b] = 3
				return false
			}
		} else { //不可探測的點
			return false
		}
	}
}
func main() {
	//定義地圖 1=牆壁 0=沒走過的點 2=通路 3=走過的死路
	var myMap [8][7]int

	//四周設置圍牆
	for i := 0; i &amp;lt; 7; i++ {
		myMap[0][i] = 1
		myMap[7][i] = 1
	}
	for i := 0; i &amp;lt; 8; i++ {
		myMap[i][0] = 1
		myMap[i][6] = 1
	}
	myMap[3][1] = 1
	myMap[3][2] = 1

	//看樣子
	for i := 0; i &amp;lt; 8; i++ {
		for j := 0; j &amp;lt; 7; j++ {
			fmt.Print(myMap[i][j], &amp;quot; &amp;quot;)
		}
		fmt.Println()
	}

	SetWay(&amp;amp;myMap, 1, 1)
	fmt.Println(&amp;quot;已探完&amp;quot;)

	for i := 0; i &amp;lt; 8; i++ {
		for j := 0; j &amp;lt; 7; j++ {
			fmt.Print(myMap[i][j], &amp;quot; &amp;quot;)
		}
		fmt.Println()
	}
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E8%BF%B7%E5%AE%AE%E9%81%9E%E8%BF%B4/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>雙向鏈表</title>
        <link>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E9%9B%99%E5%90%91%E9%8F%88%E8%A1%A8/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E9%9B%99%E5%90%91%E9%8F%88%E8%A1%A8/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E9%9B%99%E5%90%91%E9%8F%88%E8%A1%A8/ -&lt;h1 id=&#34;雙向鏈表&#34;&gt;雙向鏈表&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type HeroNode struct {
	no   int
	name string
	pre  *HeroNode //表示指向前一個節點
	next *HeroNode //表示指向下一個節點
}

//給鏈表插入節點
func Insert(head *HeroNode, newHeroNode *HeroNode) {
	//先找到最後的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		}
		temp = temp.next //不斷往下找
	}
	//把newHeroNode加到屁股
	temp.next = newHeroNode
	newHeroNode.pre = temp
}

//根據No從小到大插入
func InsertNo(head *HeroNode, newHeroNode *HeroNode) {
	//想找到適當的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		} else if temp.next.no &amp;gt; newHeroNode.no {
			//表示new要插到temp後
			break
		} else if temp.next.no == newHeroNode.no {
			//表示new這個編號已存在
			fmt.Println(newHeroNode.no, &amp;quot;該編號已存在&amp;quot;)
			return
		}
		temp = temp.next //不斷往下找

	}
	//把newHeroNode加到找到的地方
	newHeroNode.next = temp.next
	newHeroNode.pre = temp
	if temp.next != nil {
		temp.next.pre = newHeroNode //temp的下一個的前一個=新
	}
	temp.next = newHeroNode
}

//根據no刪除一個節點
func DelHeroNode(head *HeroNode, id int) {
	//想找到適當的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		} else if temp.next.no == id {
			//表示找到了
			fmt.Println(id, &amp;quot;該編號已刪除&amp;quot;)
			temp.next = temp.next.next
			if temp.next != nil {
				temp.next.pre = temp
			}
			return
		}
		temp = temp.next //不斷往下找
	}

}

//顯示
func List(head *HeroNode) {
	//創建一個輔助
	temp := head
	if temp.next == nil { //空鏈表?
		fmt.Println(&amp;quot;空&amp;quot;)
		return
	}
	for {
		fmt.Printf(&amp;quot;[%d,%s]==&amp;gt;&amp;quot;, temp.next.no, temp.next.name)
		temp = temp.next      //不斷往下找
		if temp.next == nil { //到尾了
			fmt.Println(&amp;quot;完畢&amp;quot;)
			break
		}
	}
}

func main() {
	//創建一個頭節點(空的)
	head := &amp;amp;HeroNode{}
	hero1 := &amp;amp;HeroNode{
		no:   1,
		name: &amp;quot;宋江&amp;quot;,
	}
	hero2 := &amp;amp;HeroNode{
		no:   2,
		name: &amp;quot;李奎&amp;quot;,
	}
	hero3 := &amp;amp;HeroNode{
		no:   3,
		name: &amp;quot;李軌&amp;quot;,
	}
	InsertNo(head, hero3)
	InsertNo(head, hero1)
	InsertNo(head, hero2)

	List(head)
	DelHeroNode(head, 3)
	List(head)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-%E9%9B%99%E5%90%91%E9%8F%88%E8%A1%A8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>channel通道</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-channel%E9%80%9A%E9%81%93/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-channel%E9%80%9A%E9%81%93/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-channel%E9%80%9A%E9%81%93/ -&lt;h1 id=&#34;channel通道&#34;&gt;channel通道&lt;/h1&gt;
&lt;h2 id=&#34;lock-sync與chan基本認識&#34;&gt;lock sync與chan基本認識&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//階乘1-n 把各個數放到map中 用goroutine完成
var (
	myMap = make(map[int]int, 10)
	//聲明一個全局的互斥鎖
	lock sync.Mutex
	//來點管道 記得要make初始化才能用
	intChan chan int = make(chan int, 3)

	//聲明類型為空接口可以接收任意類型
	allChan chan interface{} = make(chan interface{}, 5)
	//注意後面沒聲明容量則不給用
)

type Cat struct {
	Name string
	Age  int
}

func test(n int) {
	res := 1
	for i := 1; i &amp;lt;= n; i++ {
		res = res * i
	}
	//把res放進mayMap
	//加鎖
	lock.Lock()
	myMap[n] = res
	//解鎖
	lock.Unlock()
}

func main() {
	//啟用多個協程
	for i := 1; i &amp;lt;= 1; i++ {
		go test(i)
	}
	//如果不加鎖concurrent map iteration and map write
	lock.Lock()
	for i, v := range myMap {
		fmt.Printf(&amp;quot;map[%d]=%v\n&amp;quot;, i, v)
	}
	lock.Unlock()

	//看看管道
	fmt.Println(intChan)
	//出來是一個地址，表示誰要經過這 (當然本身也有一個地址但不重要)
	fmt.Printf(&amp;quot;長度=%v 容量=%v\n&amp;quot;, len(intChan), cap(intChan))

	//向管道寫入數據
	intChan &amp;lt;- 10
	fmt.Printf(&amp;quot;長度=%v 容量=%v\n&amp;quot;, len(intChan), cap(intChan))
	num1 := 5
	intChan &amp;lt;- num1
	intChan &amp;lt;- 1
	fmt.Printf(&amp;quot;長度=%v 容量=%v\n&amp;quot;, len(intChan), cap(intChan))
	//intChan &amp;lt;- 12 //超過3個太長報錯

	//從管道取數據
	var num2 int = &amp;lt;-intChan
	fmt.Println(num2)
	fmt.Printf(&amp;quot;長度=%v 容量=%v\n&amp;quot;, len(intChan), cap(intChan))
	//先進先出，取完超過一樣報錯
	num3 := &amp;lt;-intChan
	fmt.Println(num3)
	fmt.Printf(&amp;quot;長度=%v 容量=%v\n&amp;quot;, len(intChan), cap(intChan))

	//關於allChan
	allChan &amp;lt;- 10
	allChan &amp;lt;- &amp;quot;ABC&amp;quot;
	cat1 := Cat{&amp;quot;小花&amp;quot;, 3}
	allChan &amp;lt;- cat1
	//可以亂塞一通

	//想拿到第三個元素 先把兩個推出來
	&amp;lt;-allChan
	&amp;lt;-allChan

	newCat := &amp;lt;-allChan //從管道中取出來的cat1
	fmt.Printf(&amp;quot;類型=%T 值=%v\n&amp;quot;, newCat, newCat)
	// fmt.Printf(&amp;quot;%v\n&amp;quot;, newCat.Name) //雖然類型一樣但這樣用不通過
	//必須類型斷言
	a := newCat.(Cat)
	fmt.Printf(&amp;quot;%v\n&amp;quot;, a.Name)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;只讀或寫&#34;&gt;只讀或寫&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//chan可以只讀或只寫
	// chan1 chan int //可讀可寫
	var chan2 chan&amp;lt;- int = make(chan int, 3) //只寫
	chan2 &amp;lt;- 20
	// num:=&amp;lt;-chan2//報錯
	fmt.Println(chan2)

	var chan3 &amp;lt;-chan int = make(chan int, 3)
	num2 := &amp;lt;-chan3
	fmt.Println(num2)
	chan3 &amp;lt;- 10 //報錯
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;遍歷chan&#34;&gt;遍歷chan&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//用close關掉channel就不能往內加(但是可以拿出)
	var intChan chan int = make(chan int, 3)
	intChan &amp;lt;- 100
	intChan &amp;lt;- 200
	close(intChan)
	// intChan &amp;lt;- 300 //錯誤
	n1 := &amp;lt;-intChan
	fmt.Println(n1)

	//遍歷
	intChan2 := make(chan int, 100)
	for i := 0; i &amp;lt; 100; i++ {
		intChan2 &amp;lt;- i * 2 //放100個數據(2,4,6...進去)
	}
	//得用for:=range用一般for遍歷會報錯
	//如果已經close遍歷完就會自動停止，如果沒有先關掉會deadlock
	close(intChan2)
	for v := range intChan2 {
		fmt.Println(v)
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;阻塞&#34;&gt;阻塞&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func writeData(intChan chan int) {
	for i := 1; i &amp;lt;= 50; i++ {
		intChan &amp;lt;- i
		fmt.Printf(&amp;quot;writeData=%v\n&amp;quot;, i)
		// time.Sleep(time.Second / 1000)
	}
	close(intChan) //寫完就關
}
func readData(intChan chan int, exitChan chan bool) {
	for {
		v, ok := &amp;lt;-intChan
		// time.Sleep(time.Second / 1000)
		if !ok {
			break
		}
		fmt.Printf(&amp;quot;readData讀取到數據=%v\n&amp;quot;, v)
	}
	//讀取完=任務完成 其實這裡不管對exitChan做啥都無所謂，重點是有調用他就能阻塞main
	exitChan &amp;lt;- true
	close(exitChan)
}

func main() {

	intChan := make(chan int, 5)
	//即使管道小 寫的慢讀得快或相反，他會排隊，重點不要阻塞死鎖就能繼續
	exitChan := make(chan bool, 1)

	go writeData(intChan)
	go readData(intChan, exitChan)
	if &amp;lt;-exitChan { //重點就是這個判斷調用到一個管道有跨到子函數的就能阻塞住main
		fmt.Println(&amp;quot;任務完成&amp;quot;)
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;用select解決阻塞&#34;&gt;用select解決阻塞&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func sayH() {
	for i := 0; i &amp;lt; 10; i++ {
		time.Sleep(time.Second / 10)
		fmt.Println(&amp;quot;hello&amp;quot;)
	}
}

func test() {
	defer func() {
		if err := recover(); err != nil {
			fmt.Println(&amp;quot;test錯誤&amp;quot;, err)
		}
	}()
	myMap := make(map[int]string)
	myMap[0] = &amp;quot;我家&amp;quot;
	fmt.Println(myMap)
}

func main() {

	go sayH()
	go test()
	fmt.Println(&amp;quot;hellom&amp;quot;)

	intChan := make(chan int, 10)
	for i := 0; i &amp;lt; 10; i++ {
		intChan &amp;lt;- i
	}

	stringChan := make(chan string, 5)
	for i := 0; i &amp;lt; 5; i++ {
		stringChan &amp;lt;- &amp;quot;hello&amp;quot; + fmt.Sprintf(&amp;quot;%d&amp;quot;, i)
	}
	//傳統方法遍歷，如果不關閉會阻塞 就導致deadlock
	//實際開發不好確定哪時候關閉，就用select解決
	for {
		select {
		//就算沒關閉，只要阻塞他就往其他case移動
		case v := &amp;lt;-intChan:
			fmt.Printf(&amp;quot;intChan取出%d\n&amp;quot;, v)
		case v := &amp;lt;-stringChan:
			fmt.Printf(&amp;quot;stringChan取出%s\n&amp;quot;, v)
		default:
			fmt.Println(&amp;quot;取完了&amp;quot;)
			return
		}
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-channel%E9%80%9A%E9%81%93/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>const常量</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-const%E5%B8%B8%E9%87%8F/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-const%E5%B8%B8%E9%87%8F/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-const%E5%B8%B8%E9%87%8F/ -&lt;h1 id=&#34;const常量&#34;&gt;const常量&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;常量 聲明時必須賦值、不能修改、只能是bool、數值、string，賦值需是一個確定的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	const tax int = 10
	const x = 9 / 3
	// const c = 9 / a //因為a可能是一個變量所以這樣不行
	// var a int = 3
	fmt.Println(tax, x)

	const (
		a = iota //表示a=0
		b        //b=a+1
		c        //c=b+1
	)
	fmt.Println(a, b, c)

	const (
		d = iota
		e
		f, g = iota, iota
	)
	fmt.Println(d, e, f, g)

	//其他程式語言常量會用全大寫，go中沒限制，且一樣用首字母大小來控制使用範圍
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-const%E5%B8%B8%E9%87%8F/ - yoziming</description>
        </item>
    
    
  </channel>
</rss> 