<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>柚子茶室</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yoziming</copyright>
    <lastBuildDate>Wed, 17 Nov 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Split切分字串</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-split%E5%88%87%E5%88%86%E5%AD%97%E4%B8%B2/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-split%E5%88%87%E5%88%86%E5%AD%97%E4%B8%B2/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-split%E5%88%87%E5%88%86%E5%AD%97%E4%B8%B2/ -&lt;h1 id=&#34;split切分字串&#34;&gt;Split切分字串&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// abc,b=&amp;gt;[a c]
func Split(str, sep string) []string {
	// str=&amp;quot;bsfcvjkhbafs&amp;quot; sep=&amp;quot;b&amp;quot;
	var ret = make([]string, 0, strings.Count(str, sep)+1)
	index := strings.Index(str, sep)
	for index &amp;gt;= 0 {
		ret = append(ret, str[:index])
		str = str[index+len(sep):]
		index = strings.Index(str, sep)
	}
	ret = append(ret, str)
	return ret
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-split%E5%88%87%E5%88%86%E5%AD%97%E4%B8%B2/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Test單元測試</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-test%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-test%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-test%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/ -&lt;h1 id=&#34;test單元測試&#34;&gt;Test單元測試&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;單元測試目的是驗證程式碼(例如一個方法)本身的邏輯是否正確&lt;/li&gt;
&lt;li&gt;單元測試應排除外部依賴（Database、File System IO）&lt;/li&gt;
&lt;li&gt;單元測試應該是隨時隨地都要能正確執行&lt;/li&gt;
&lt;li&gt;單元測試的標題需要具備好的可讀性、明確、標題與測試的內容精確吻合
例：「public void GetTest_帶入會員ID＿應回該ID搜尋到的會員資料DTO」，盡量符合：受測方法＿傳入參數意義＿期望得到的結果&lt;/li&gt;
&lt;li&gt;一個測試只應該關注一件事情，如果受測目標有多種狀況，應該分成好幾個測試去涵蓋所有邏輯&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;3A原則&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Arrange = 準備受測物件、參數、預期結果&lt;/li&gt;
&lt;li&gt;Act = 執行受測方法&lt;/li&gt;
&lt;li&gt;Assert = 驗證執行結果與預測結果是否一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;calgo&#34;&gt;cal.go&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func addUpper(n int) int {
	res := 0
	for i := 0; i &amp;lt;= n; i++ {
		res = +i
	}
	return res
}

func getSub(n1, n2 int) int {
	return n1 - n2
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;cal_testgo&#34;&gt;cal_test.go&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func TestAddUpper(t *testing.T) {
	//調用
	res := addUpper(10)
	if res != 55 {
		t.Fatalf(&amp;quot;AddUpper(10)執行錯誤 期望=%v 實際=%v&amp;quot;, 55, res)
	}
	t.Logf(&amp;quot;執行正確&amp;quot;)
}

func TestHello(t *testing.T) {
	fmt.Println(&amp;quot;hello&amp;quot;)
}

func TestGetSub(t *testing.T) {
	res2 := getSub(5, 10)
	if res2 != 10 {
		t.Fatalf(&amp;quot;getSub(5, 10)執行錯誤 期望=%v 實際=%v&amp;quot;, 10, res2)
	}
	t.Logf(&amp;quot;執行正確&amp;quot;)
}

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;測性能&#34;&gt;測性能&lt;/h2&gt;
&lt;h4 id=&#34;splitgo&#34;&gt;Split.go&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// abc,b=&amp;gt;[a c]
func Split(str, sep string) []string {
	// str=&amp;quot;bsfcvjkhbafs&amp;quot; sep=&amp;quot;b&amp;quot;
	var ret = make([]string, 0, strings.Count(str, sep)+1)
	index := strings.Index(str, sep)
	for index &amp;gt;= 0 {
		ret = append(ret, str[:index])
		str = str[index+len(sep):]
		index = strings.Index(str, sep)
	}
	ret = append(ret, str)
	return ret
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;split_testgo&#34;&gt;Split_test.go&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func BenchmarkSplit(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Split(&amp;quot;a:b:c&amp;quot;, &amp;quot;:&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-test%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>WaitGroup鎖</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-waitgroup%E9%8E%96/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-waitgroup%E9%8E%96/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-waitgroup%E9%8E%96/ -&lt;h1 id=&#34;waitgroup鎖&#34;&gt;WaitGroup鎖&lt;/h1&gt;
&lt;h3 id=&#34;讀寫鎖&#34;&gt;讀寫鎖&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var x = 0
var wg sync.WaitGroup
var rwlock sync.RWMutex

func write() {
	rwlock.Lock()
	x = x + 1
	time.Sleep(time.Millisecond * 10)
	rwlock.Unlock()
	wg.Done()
}

func read() {
	// lock.Lock()
	rwlock.RLock() //鎖讀
	time.Sleep(time.Millisecond)
	rwlock.RUnlock()
	// lock.Unlock()
	wg.Done()
}

func main() {
	start := time.Now()
	for i := 0; i &amp;lt; 10; i++ {
		wg.Add(1)
		go write()
	}
	for i := 0; i &amp;lt; 1000; i++ {
		wg.Add(1)
		go read()
	}
	wg.Wait()
	end := time.Now()
	fmt.Println(end.Sub(start))
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;互斥鎖&#34;&gt;互斥鎖&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var x = 0
var wg sync.WaitGroup
var lock sync.Mutex

func add() {
	for i := 0; i &amp;lt; 50000; i++ {
		lock.Lock()
		x = x + 1
		lock.Unlock()
	}
	wg.Done()
}

func main() {
	wg.Add(2)
	go add()
	go add()
	wg.Wait()
	fmt.Println(x)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-waitgroup%E9%8E%96/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>二維數組</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E4%BA%8C%E7%B6%AD%E6%95%B8%E7%B5%84/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E4%BA%8C%E7%B6%AD%E6%95%B8%E7%B5%84/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E4%BA%8C%E7%B6%AD%E6%95%B8%E7%B5%84/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
// 000000
// 001000
// 020300
// 000000
func main() {
	var arr [4][6]int
	arr[1][2] = 1
	arr[2][1] = 2
	arr[2][3] = 3
	//遍歷
	for i := 0; i &amp;lt; len(arr); i++ {
		for j := 0; j &amp;lt; len(arr[i]); j++ {
			fmt.Print(arr[i][j], &amp;quot; &amp;quot;)
		}
		fmt.Println()
	}
	//遍歷range
	for i, v := range arr {
		for j, v2 := range v {
			fmt.Printf(&amp;quot;arr[%v][%v]=%v \t&amp;quot;, i, j, v2)
		}

		fmt.Println()
	}
	//三班五學生
	var score [3][5]float64
	for i := 0; i &amp;lt; len(score); i++ {
		for j := 0; j &amp;lt; len(score[i]); j++ {
			fmt.Printf(&amp;quot;輸入第%v班第%v位成績&amp;quot;, i+1, j+1)
			fmt.Scanln(&amp;amp;score[i][j])
		}

	}
	cal(score)

}
func cal(score [3][5]float64) {
	total := 0.0
	for i := 0; i &amp;lt; len(score); i++ {
		sum := 0.0
		for j := 0; j &amp;lt; len(score[i]); j++ {
			sum = sum + score[i][j]
		}
		total += sum
		fmt.Printf(&amp;quot;第%d班的總分為%v 平均分%v \n&amp;quot;, i+1, sum, sum/5)
	}
	fmt.Printf(&amp;quot;總分為%v 平均分%v \n&amp;quot;, total, total/15)

}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E4%BA%8C%E7%B6%AD%E6%95%B8%E7%B5%84/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>冒泡排序</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/ -&lt;h1 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var arr1 = [...]int{5, 9, 6, 8, 7, 3, 4, 2, 1, 6}

func main() {
	s1 := arr1[:]
	bubbleSort(s1)
	fmt.Println(arr1)
}

func bubbleSort(x []int) {
	for j := 1; j &amp;lt; len(x); j++ {
		for i := 0; i &amp;lt; len(x)-1; i++ {
			if x[i] &amp;gt; x[i+1] {
				x[i], x[i+1] = x[i+1], x[i]
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>函數封裝的金字塔</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E5%B0%81%E8%A3%9D%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E5%B0%81%E8%A3%9D%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E5%B0%81%E8%A3%9D%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

var input int

func jin(input int) {

	for i := 1; i &amp;lt;= input; i++ {
		for k := 1; k &amp;lt;= input-i; k++ {
			fmt.Print(&amp;quot; &amp;quot;)
		}
		for j := 1; j &amp;lt;= 2*i-1; j++ {
			if j == 1 || j == 2*i-1 || i == input {
				fmt.Print(&amp;quot;*&amp;quot;)
			} else {
				fmt.Print(&amp;quot; &amp;quot;)
			}
		}
		fmt.Println()
	}
}

func main() {
	fmt.Println(&amp;quot;層數=?&amp;quot;)
	fmt.Scanln(&amp;amp;input)
	jin(input)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E5%B0%81%E8%A3%9D%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>函數綁定方法</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E7%B6%81%E5%AE%9A%E6%96%B9%E6%B3%95/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E7%B6%81%E5%AE%9A%E6%96%B9%E6%B3%95/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E7%B6%81%E5%AE%9A%E6%96%B9%E6%B3%95/ -&lt;h1 id=&#34;函數綁定方法&#34;&gt;函數綁定方法&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;方法:結構體的行為，自訂義的結構都可以有方法，方法是作用在指定類型上(綁定的)&lt;/p&gt;
&lt;p&gt;方法就是跟一種類型綁定的函數，因為綁定數據類型了就可以偷雞，具體表現在省指針&lt;/p&gt;
&lt;p&gt;定義方法時候寫的是func(a ABC) //後面怎樣調用都是值拷貝&lt;/p&gt;
&lt;p&gt;定義方法時候寫的是func(a *ABC)//後面怎樣調用都是真實地址&lt;/p&gt;
&lt;p&gt;要調用方法，只能透過那種類型的的數據變量 例如a1.ABC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

type Person struct {
	Name string
}

//給Person類型綁定一個方法
func (p Person) test() {
	p.Name = &amp;quot;jack&amp;quot;
	fmt.Println(&amp;quot;test()=&amp;quot;, p.Name)
}

//給Person類型添加一個speak方法，輸出xxx是好人
func (p Person) speak() {
	fmt.Println(p.Name, &amp;quot;是一個好人&amp;quot;)
}

//添加一個計算方法算+1...+100
func (p Person) count() {
	res := 0
	for i := 1; i &amp;lt;= 100; i++ {
		res += i
	}
	fmt.Println(p.Name, &amp;quot;計算的結果是&amp;quot;, res)
}

//添加一個計算方法算+1...+n
func (p Person) count2(n int) {
	res := 0
	for i := 1; i &amp;lt;= n; i++ {
		res += i
	}
	fmt.Println(p.Name, &amp;quot;計算的結果是&amp;quot;, res)
}

//添加一個方法計算2個值的和並返回
func (p Person) getSum(n1, n2 int) int {
	return n1 + n2
}

//為了提高效率，通常把方法跟結構的指針綁定
type Circle struct {
	radius float64
}

func (c *Circle) area() float64 {
	c.radius = 10.0                   //因為傳來的是指針，如果在函數裡改他就等於改真實地址了
	return 3.14 * c.radius * c.radius //語法糖 本來應該是要寫(*c)來計算的
}

//給某方法實現方法String()
type Student struct {
	Name string
	Age  int
}

func (stu *Student) String() string {
	str := fmt.Sprintf(&amp;quot;Name=%v Age=%v&amp;quot;, stu.Name, stu.Age)
	return str
}

//練習題
type MeUtils struct {
	//123
}

func (mu MeUtils) Print(m int, n int) {
	for i := 1; i &amp;lt;= m; i++ {
		for j := 1; j &amp;lt;= n; j++ {
			fmt.Print(&amp;quot;*&amp;quot;)
		}
		fmt.Println()
	}

}

func main() {
	var p Person
	p.Name = &amp;quot;tom&amp;quot;
	p.test() //調用方法
	fmt.Println(&amp;quot;main=&amp;quot;, p.Name)
	//test()//報錯的
	//總的來說就是把test方法跟Person類型綁定，而這個test只能用Person類型調用
	//傳的是形參 (函數裡的是一個副本)
	//---------------------------------------------以下開始應用練習
	p.speak()
	p.count()
	p.count2(1000)
	res := p.getSum(10, 20)
	fmt.Println(res)

	//創建變量嘗試調用area
	var c Circle
	c.radius = 5.0
	res2 := c.area() //語法糖 本來應該是要寫(&amp;amp;c).area()的
	fmt.Println(res2)

	//調用Student
	stu1 := Student{
		Name: &amp;quot;tom&amp;quot;,
		Age:  18,
	}
	//如果實現了*Student類型的String方法就會自動調用
	fmt.Println(&amp;amp;stu1)

	//練習題
	var mu MeUtils
	mu.Print(5, 10)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E7%B6%81%E5%AE%9A%E6%96%B9%E6%B3%95/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>切片</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%88%87%E7%89%87/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%88%87%E7%89%87/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%88%87%E7%89%87/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//切片的類型是引用(傳遞的時候也是引用地址)
	//切片長度可變(不像數組)
	var arr1 = [5]int{1, 2, 3, 4, 5}
	s1 := arr1[1:3] //表示切arr的[1 2] 左開右閉(含左不含右)
	//var slice=arr[0:end]簡寫[:end]
	//[start:len(arr)]=[start:]
	//[0:len(arr)]=[:]
	fmt.Println(&amp;quot;s1內容是&amp;quot;, s1)
	fmt.Println(&amp;quot;s1長度是&amp;quot;, len(s1))
	fmt.Println(&amp;quot;s1容量是&amp;quot;, cap(s1))
	fmt.Printf(&amp;quot;s1第一個地址是%p\n&amp;quot;, &amp;amp;s1[0])
	fmt.Printf(&amp;quot;arr1[1]地址是%p\n&amp;quot;, &amp;amp;arr1[1])
	s1[0] = 33
	fmt.Println(&amp;quot;arr1內容是&amp;quot;, arr1)

	//var 切片名[]type=make([]type,len,cap)
	var s2 []float64 = make([]float64, 5, 10)
	fmt.Println(s2)
	//var 變量=make(類型)
	var s22 = make([]float64, 5, 10)
	fmt.Println(s22)
	var s3 []int = []int{1, 2, 3, 4, 5}
	fmt.Println(s3)
	//用append動態追加
	s3 = append(s3, 6, 7, 8, 9)
	fmt.Println(s3)
	s3 = append(s3, s3...) //...表示擴展
	//用append的時候 其實是創建一個新的arr，值拷貝過去，然後重新指向
	s3[10] = 600
	fmt.Println(s3)

	//用copy 要求2者都是切片類型
	//短的賦給長的 後面沒東西就保持原樣(0)
	//長的賦給短的 不會自動擴容 依照短的
	var s4 = make([]int, 20)
	fmt.Println(s4)
	copy(s4, s3)
	fmt.Println(s4)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切string&#34;&gt;切string&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;	str := &amp;quot;hello@yozimingfight!&amp;quot;
	//string是一個byte數組，所以可以切片擷取
	s1 := str[6:]
	fmt.Println(s1)
	//但是string是不可變的，不能用s1[0]=&#39;z&#39;這樣想改變一個字
	//看做一個read only的切片

	//可以轉[]byte或[]rune 修改 後轉回去
	arr1 := []byte(str)
	arr1[0] = &#39;z&#39;
	str = string(arr1)
	fmt.Println(str)
	//byte不能處理中文字(3字節)
	arr2 := []rune(str)
	arr2[0] = &#39;我&#39;
	str = string(arr2)
	fmt.Println(str)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切片練習-費波納數列&#34;&gt;切片練習-費波納數列&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func fbn(n int) []uint64 {
	var s1 []uint64 = make([]uint64, n)
	if n &amp;lt; 2 {
		s1[0] = 1
		return s1
	} else {
		s1[0] = 1
		s1[1] = 1
		for i := 2; i &amp;lt; n; i++ {
			s1[i] = s1[i-1] + s1[i-2]
		}
		return s1
	}
}

func main() {
	a := fbn(1)
	fmt.Println(a)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%88%87%E7%89%87/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>匿名函數與閉包</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/ -&lt;h1 id=&#34;匿名函數&#34;&gt;匿名函數&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	res := func(n1, n2 int) int {
		return n1 + n2
	}(10, 20)
	fmt.Println(res)
	a := func(n1, n2 int) int {
		return n1 - n2
	}
	res = a(10, 5)
	fmt.Println(res)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;閉包&#34;&gt;閉包&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//累加器
func Add() func(int) int { //Add是一個函數，返回的數據類型是func(int) int

	var n int = 10 //返回的是一個匿名函數，那這個函數用到函數外的n，因此形成一個整體稱為閉包
	return func(x int) int {
		n = n + x
		return n
		//閉包是類，函數是操作，n是字段，函數+使用n構成閉包
		//n只初始化一次
	}
}
func main() {
	a := Add()
	fmt.Println(a(1))
	fmt.Println(a(2))
	fmt.Println(a(3))

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;案例2&#34;&gt;案例2&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func makeSuffix(suffix string) func(string) string {
	return func(name string) string {
		if !strings.HasSuffix(name, suffix) {
			return name + suffix
		}
		return name
	}
}
func main() {
	f := makeSuffix(&amp;quot;.jpg&amp;quot;)
	fmt.Println(f(&amp;quot;654&amp;quot;))
	fmt.Println(f(&amp;quot;123.jpg&amp;quot;))

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>命令行參數Args&amp;Flag</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/ -&lt;h1 id=&#34;命令行參數argsflag&#34;&gt;命令行參數Args&amp;amp;Flag&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	fmt.Println(&amp;quot;命令行參數有&amp;quot;, len(os.Args))
	//遍歷os.Args切片 得到所有輸入的參數值
	for i, v := range os.Args {
		fmt.Printf(&amp;quot;args[%v]=%v\n&amp;quot;, i, v)
	}
	fmt.Println(&amp;quot;=====================&amp;quot;)

	//flag方法 先定義幾個變量用於接收參數值
	var user string
	var pwd string
	var host string
	var port int

	flag.StringVar(&amp;amp;user, &amp;quot;u&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;帳號 預設為空&amp;quot;)
	flag.StringVar(&amp;amp;pwd, &amp;quot;pwd&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;密碼 預設為空&amp;quot;)
	flag.StringVar(&amp;amp;host, &amp;quot;h&amp;quot;, &amp;quot;localhost&amp;quot;, &amp;quot;主機 預設為localhost&amp;quot;)
	flag.IntVar(&amp;amp;port, &amp;quot;port&amp;quot;, 3306, &amp;quot;端口 預設為3306&amp;quot;)
	//前面有亂打的字就不行 比如...exe 12354 -u tom會調用預設

	flag.Parse() //這個一定要調用

	//輸出結果
	fmt.Printf(&amp;quot;user=%v pwd=%v host=%v port=%v&amp;quot;,
		user, pwd, host, port)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/ - yoziming</description>
        </item>
    
    
  </channel>
</rss> 