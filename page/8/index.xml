<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yoziming&#39; Blog</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on yoziming&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yoziming</copyright>
    <lastBuildDate>Sun, 28 Nov 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>對有序數列進行二分查找</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%9C%89%E5%BA%8F%E6%95%B8%E5%88%97%E9%80%B2%E8%A1%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%9C%89%E5%BA%8F%E6%95%B8%E5%88%97%E9%80%B2%E8%A1%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%9C%89%E5%BA%8F%E6%95%B8%E5%88%97%E9%80%B2%E8%A1%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//對有序數列進行二分查找
var arr1 = [...]int{5, 9, 6, 8, 7, 3, 4, 2, 1, 0}

func bubble(x []int) {
	for j := 1; j &amp;lt; len(x); j++ {
		for i := 0; i &amp;lt; len(x)-1; i++ {
			if x[i] &amp;gt; x[i+1] {
				x[i], x[i+1] = x[i+1], x[i]
			}
		}
	}
}
func bi(x int, s []int, left int, right int) {
	middle := (right + left) / 2
	if left &amp;gt; right {
		fmt.Println(&amp;quot;找不到&amp;quot;)
		return
	}
	if x &amp;lt; s[middle] {
		//在左邊
		bi(x, s, left, middle-1)
	} else if x &amp;gt; s[middle] {
		//在右邊
		bi(x, s, middle+1, right)
	} else {
		fmt.Println(&amp;quot;找到下標=&amp;quot;, middle)
	}

}
func main() {
	s1 := arr1[:]
	bubble(s1)
	fmt.Println(s1)
	bi(9, s1, 0, len(s1)-1)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%9C%89%E5%BA%8F%E6%95%B8%E5%88%97%E9%80%B2%E8%A1%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>工廠模式</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%B7%A5%E5%BB%A0%E6%A8%A1%E5%BC%8F/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%B7%A5%E5%BB%A0%E6%A8%A1%E5%BC%8F/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%B7%A5%E5%BB%A0%E6%A8%A1%E5%BC%8F/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//工廠模式
// 假如有些要公用的東西又不想用大寫讓人隨意改了 例如結構體、結構體內的字段等等
// 我就在那個包裏建一個方法，這個方法本身大寫，在方法中原地調用那些本來是大寫的玩意
// 返回一個相同的值過來，相當於那在那個包里把該封裝的都封好，拿出來的就是產品

import (
	&amp;quot;fmt&amp;quot;
)

type Student struct {
	Name  string
	Age   int
	Score float64
}

func (s *Student) Say() string {
	infoStr := fmt.Sprintf(&amp;quot;信息 name=[%v] age=[%v] score=[%v]&amp;quot;,
		s.Name, s.Age, s.Score)
	return infoStr
}

func main() {
	var s1 = Student{
		Name:  &amp;quot;tom&amp;quot;,
		Score: 98,
		Age:   18, //不依賴順序
	}
	res := s1.Say()
	fmt.Println(res)

	//其他創建結構變量同時指定值的方法:
	stu2 := Student{&amp;quot;Jack&amp;quot;, 20, 100} //項目順序都要有對應
	fmt.Println(stu2)
	//返回結構的指針
	var stu3 = &amp;amp;Student{&amp;quot;Mary&amp;quot;, 28, 5}
	fmt.Println(*stu3)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%B7%A5%E5%BB%A0%E6%A8%A1%E5%BC%8F/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>拷貝檔案</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%8B%B7%E8%B2%9D%E6%AA%94%E6%A1%88/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%8B%B7%E8%B2%9D%E6%AA%94%E6%A1%88/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%8B%B7%E8%B2%9D%E6%AA%94%E6%A1%88/ -&lt;h1 id=&#34;拷貝一個檔案&#34;&gt;拷貝一個檔案&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//定義一個函數接收2個路徑
func CopyFile(dstFileName, srcFileName string) (written int64, err error) {
	srcFile, err := os.Open(srcFileName)
	if err != nil {
		fmt.Println(err)
	}
	defer srcFile.Close()
	//通過srcFile獲取到reader
	reader := bufio.NewReader(srcFile)

	//打開dstFileName
	dstFile, err := os.OpenFile(dstFileName, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		fmt.Println(err)
	}

	//通過dstFile獲取到writer
	writer := bufio.NewWriter(dstFile)
	defer dstFile.Close()
	return io.Copy(writer, reader)

}

func main() {
	src := &amp;quot;C:/01.mkv&amp;quot; //原始檔
	dst := &amp;quot;C:/food2.mkv&amp;quot;
	_, err := CopyFile(dst, src)
	if err == nil {
		fmt.Println(&amp;quot;拷貝完成&amp;quot;)
	} else {
		fmt.Println(&amp;quot;拷貝失敗&amp;quot;)
	}

}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%8B%B7%E8%B2%9D%E6%AA%94%E6%A1%88/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>接口interface</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%8E%A5%E5%8F%A3interface/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%8E%A5%E5%8F%A3interface/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%8E%A5%E5%8F%A3interface/ -&lt;h1 id=&#34;接口interface&#34;&gt;接口interface&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;例如定義 只要滿足&amp;quot;會跑&amp;quot;且&amp;quot;會叫&amp;quot;的就是&amp;quot;動物&amp;quot;，&lt;/p&gt;
&lt;p&gt;那不管你是啥玩意只要實現會跑跟會叫，我就當你是動物，就能用動物的接口去調用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//接口內不能有變量，方法也不能實現
type Usb interface {
	//聲明兩個沒實現的方法
	Start()
	Stop()
}

type Usb2 interface {
	//接口是不需要顯示聲明，只要能實現就都能調用
	Start()
	Stop()
	//假如我多聲明一個沒實現的方法在接口內就不能調用
	Test() //有方法沒實現，導致Usb2這個接口不能用
}
type Phone struct {
}

//讓Phone實現USB接口的方法
func (p Phone) Start() {
	fmt.Println(&amp;quot;手機啟動&amp;quot;)
}
func (p Phone) Stop() {
	fmt.Println(&amp;quot;手機停止&amp;quot;)
}

type Camera struct {
}

func (c Camera) Start() {
	fmt.Println(&amp;quot;相機啟動~~&amp;quot;)
}
func (c Camera) Stop() {
	fmt.Println(&amp;quot;相機停止&amp;quot;)
}

//電腦
type Computer struct {
}

func (c Computer) Working(usb Usb) { //接受一個Usb的接口類型
	//通過usb變量來調用Start等方法
	fmt.Println(&amp;quot;電腦連接usb中...&amp;quot;)
	usb.Start()
	usb.Stop()

}
func main() {
	computer := Computer{}
	phone := Phone{}
	camera := Camera{}

	//關鍵
	computer.Working(phone)
	computer.Working(camera)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;接口繼承&#34;&gt;接口繼承&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;繼承主要在於復用性跟可維護性
接口價值在於擴展性(設計好規範(方法)，讓其他類型去實現&lt;/p&gt;
&lt;p&gt;繼承是 is a的關係 例如 學生是個人
接口是 like a的關係 例如 學生會說英語&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (m *Monkey) climb() {
	fmt.Println(m.Name, &amp;quot;生來會爬樹&amp;quot;)
}

//聲明接口
type BirdAble interface {
	Flying()
}

func (lm *LittleMonkey) Flying() {
	fmt.Println(lm.Name, &amp;quot;學會飛了&amp;quot;)
}

func main() {
	var monkey1 LittleMonkey
	monkey1.Name = &amp;quot;悟空&amp;quot;
	monkey1.climb()
	monkey1.Flying()

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;接口實踐排序&#34;&gt;接口實踐排序&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Hero struct {
	Name string
	Age  int
}

//聲明一個Hero結構體的切片類型
type HeroSlice []Hero

//實現接口
func (hs HeroSlice) Len() int {
	return len(hs)
}

func (hs HeroSlice) Less(i, j int) bool {
	//return hs[i].Age &amp;lt; hs[j].Age //Less就是決定使用哪個字段來排序
	return hs[i].Name &amp;lt; hs[j].Name //Less就是決定使用哪個字段來排序
}

func (hs HeroSlice) Swap(i, j int) {
	hs[i], hs[j] = hs[j], hs[i]
}

func main() {
	//定義一個數組跟切片
	var intSlice = []int{5, 3, 1, 2, 4}
	//來排序
	sort.Ints(intSlice)
	fmt.Println(intSlice)

	//系統提供的方法
	
	//創建切片內容
	var heroes HeroSlice
	for i := 0; i &amp;lt; 10; i++ {
		hero := Hero{
			Name: fmt.Sprintf(&amp;quot;英雄%d&amp;quot;, rand.Intn(100)),
			Age:  rand.Intn(100),
		}
		//放進切片 隨機創建了十個hero放進heroes這個切片
		heroes = append(heroes, hero)
	}

	//排序前
	for _, v := range heroes {
		fmt.Println(v)
	}

	//調用sort.Sort
	sort.Sort(heroes)
	//因為我的結構體能實現接口，就可以享受這些方便
	fmt.Println(&amp;quot;---排序後---&amp;quot;)
	for _, v := range heroes {
		fmt.Println(v)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;類型斷言&#34;&gt;類型斷言&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func TypeJudge(items ...interface{}) {
	for index, x := range items {
		switch x.(type) {
		case bool:
			fmt.Printf(&amp;quot;第%v個參數是bool類型,值是%v\n&amp;quot;, index+1, x)
		case int, int32, int64:
			fmt.Printf(&amp;quot;第%v個參數是int類型,值是%v\n&amp;quot;, index+1, x)
		case string:
			fmt.Printf(&amp;quot;第%v個參數是string類型,值是%v\n&amp;quot;, index+1, x)
		default:
			fmt.Printf(&amp;quot;第%v個參數是不明類型,值是%v\n&amp;quot;, index+1, x)
		}
	}
}

func main() {
	var n1 float64 = 2.3
	var n2 int = 30
	var name string = &amp;quot;tom&amp;quot;
	n4 := 300

	TypeJudge(n1, n2, name, n4)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%8E%A5%E5%8F%A3interface/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>數組</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%95%B8%E7%B5%84/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%95%B8%E7%B5%84/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%95%B8%E7%B5%84/ -&lt;h1 id=&#34;數組&#34;&gt;數組&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	var n1 [3]int = [3]int{1, 2, 3}
	var n2 = [3]int{4, 5, 6}
	//長度聲明後就不能變化
	var n3 = [...]int{7, 8, 9}
	//數組長度是類型的一部分 [3]int != [4]int
	var n4 = [...]string{0: &amp;quot;李四&amp;quot;, 1: &amp;quot;張三&amp;quot;, 5: &amp;quot;王武&amp;quot;}
	n5 := []int{5, 5, 5, 5, 5}
	//[]int 這樣定義其實是切片

	fmt.Println(n1)
	fmt.Println(n2)
	fmt.Println(n3)
	fmt.Println(n4)
	fmt.Println(n5)

	n9 := fmt.Sprintf(&amp;quot;%.2f&amp;quot;, 9.888888)
	fmt.Println(n9)

	var score [5]float64
	for i := 0; i &amp;lt; len(score); i++ {
		fmt.Println(&amp;quot;輸入成績&amp;quot;)
		fmt.Scanln(&amp;amp;score[i])
	}
	for i := 0; i &amp;lt; len(score); i++ {
		fmt.Printf(&amp;quot;score[%d]=%v\n&amp;quot;, i, score[i])

	}
	arr := [3]int{11, 22, 33}
	fmt.Println(arr)
	test(&amp;amp;arr)
	fmt.Println(arr)

}

func test(a *[3]int) {
	a[0] = 88
	var arr4 = [3]string{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;}
	b := 3
	arr4[b] = &amp;quot;tom&amp;quot;
	fmt.Println(arr4)
}

&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;遍歷數組&#34;&gt;遍歷數組&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	arr1 := []int{1, 2, 3, 4, 5, 6, 7}
	for index, value := range arr1 {
		fmt.Printf(&amp;quot;index=%v,value=%v\n&amp;quot;, index, value)
	}
	for _, v := range arr1 {
		fmt.Printf(&amp;quot;%v&amp;quot;, v)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;應用練習&#34;&gt;應用練習&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	var az [26]byte
	for i := 0; i &amp;lt; len(az); i++ {
		az[i] = &#39;A&#39; + byte(i)
		fmt.Printf(&amp;quot;%c &amp;quot;, az[i])

	}

	var n1 = [...]int{1, 2, 6, 8, -5, 99, 44, 3, 0}
	max := n1[0]
	for i := 1; i &amp;lt; len(n1); i++ {
		if max &amp;lt; n1[i] {
			max = n1[i]
		}

	}
	fmt.Printf(&amp;quot;%v\n&amp;quot;, max)

	var n2 = [...]int{1, 2, 6, 8, -5, 99, 44, 3, 0}
	var sum int
	for _, v := range n2 {
		sum = sum + v
	}
	fmt.Printf(&amp;quot;和=%v\n&amp;quot;, sum)
	fmt.Printf(&amp;quot;平均=%v\n&amp;quot;, sum/len(n2))
	//我要保留平均的小數點
	fmt.Printf(&amp;quot;平均=%.2f\n&amp;quot;, float64(sum)/float64(len(n2)))

	//要求:隨機生成5個數字，並反轉後打印
	//思路:隨機 rand.Init()，放進數組，把數組反轉，打印

	var arr3 [5]int
	rand.Seed(time.Now().UnixNano())
	for i := 0; i &amp;lt; len(arr3); i++ {
		arr3[i] = rand.Intn(100) //0&amp;lt;=n&amp;lt;100
	}
	fmt.Println(arr3)
	//順序翻轉
	for i := 0; i &amp;lt; len(arr3)/2; i++ {
		arr3[i], arr3[len(arr3)-i-1] = arr3[len(arr3)-i-1], arr3[i]
	}
	fmt.Println(arr3)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%95%B8%E7%B5%84/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>文字檔案讀取寫入</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%96%87%E5%AD%97%E6%AA%94%E6%A1%88%E8%AE%80%E5%8F%96%E5%AF%AB%E5%85%A5/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%96%87%E5%AD%97%E6%AA%94%E6%A1%88%E8%AE%80%E5%8F%96%E5%AF%AB%E5%85%A5/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%96%87%E5%AD%97%E6%AA%94%E6%A1%88%E8%AE%80%E5%8F%96%E5%AF%AB%E5%85%A5/ -&lt;h2 id=&#34;讀取&#34;&gt;讀取&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//打開一個文件
	file, err := os.Open(&amp;quot;c:/test.txt&amp;quot;)
	//有人叫file對象/指針/文件句柄
	if err != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err)
	}
	//看看文件是啥
	fmt.Printf(&amp;quot;file=%v\n&amp;quot;, file)
	//退出函數就關閉文件
	defer file.Close()

	//創建一個帶緩衝的reader，預設大小是4096
	reader := bufio.NewReader(file)
	for {
		str, err := reader.ReadString(&#39;\n&#39;) //讀到換行就結束
		fmt.Print(str)
		if err == io.EOF { //表示文件末尾
			break
		}
	}
	fmt.Println(&amp;quot;\n讀取結束&amp;quot;)

	//用ioutil.ReadFile一次讀完
	//這個包已經封裝了open跟close了，只適用在檔案大小不大的情境
	file2 := &amp;quot;c:/test.txt&amp;quot;
	str2, err2 := ioutil.ReadFile(file2)
	if err2 != nil {
		fmt.Println(err)
	}
	fmt.Printf(&amp;quot;%s&amp;quot;, str2) //原本輸出是[]byte,用%s轉

	//創建一個新檔案，寫入5句話
	filePath := &amp;quot;c:/abc.txt&amp;quot;
	file3, err3 := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666)
	if err3 != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err3)
		return
	}
	defer file3.Close() //及時關閉文件
	str3 := &amp;quot;hello\r\n&amp;quot;
	writer3 := bufio.NewWriter(file3)
	for i := 0; i &amp;lt; 5; i++ {
		writer3.WriteString(str3)
	}
	writer3.Flush() //因為本來是存在buf區要把它實際寫出來

	//覆蓋一個檔案，寫入3句話
	filePath4 := &amp;quot;c:/abc2.txt&amp;quot;
	file4, err4 := os.OpenFile(filePath4, os.O_WRONLY|os.O_TRUNC, 0666)
	if err3 != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err4)
		return
	}
	defer file4.Close() //及時關閉文件
	str4 := &amp;quot;覆蓋\r\n&amp;quot;
	writer4 := bufio.NewWriter(file4)
	for i := 0; i &amp;lt; 3; i++ {
		writer4.WriteString(str4)
	}
	writer4.Flush() //因為本來是存在buf區要把它實際寫出來

	//打開一個檔案abc，追加寫入3句話
	file5, err4 := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, 0666)
	if err3 != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err4)
		return
	}
	defer file5.Close() //及時關閉文件
	str5 := &amp;quot;追加\r\n&amp;quot;
	writer5 := bufio.NewWriter(file5)
	for i := 0; i &amp;lt; 3; i++ {
		writer5.WriteString(str5)
	}
	writer5.Flush() //因為本來是存在buf區要把它實際寫出來

	//打開一個檔案abc，讀取打印出來並追加寫入5句話
	file6, err4 := os.OpenFile(filePath, os.O_RDWR|os.O_APPEND, 0666)
	if err3 != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err4)
		return
	}
	//先讀取
	reader6 := bufio.NewReader(file6)
	for {
		str, err := reader6.ReadString(&#39;\n&#39;)
		if err == io.EOF { //如果讀到末尾
			break
		}
		fmt.Print(str)
	}
	defer file6.Close() //及時關閉文件
	str6 := &amp;quot;追加2BBB\r\n&amp;quot;
	writer6 := bufio.NewWriter(file6)
	for i := 0; i &amp;lt; 5; i++ {
		writer6.WriteString(str6)
	}
	writer6.Flush() //因為本來是存在buf區要把它實際寫出來

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;寫入&#34;&gt;寫入&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
func main() {
	//打開一個文件
	file, err := os.Open(&amp;quot;c:/test.txt&amp;quot;)
	//有人叫file對象/指針/文件句柄
	if err != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err)
	}
	//看看文件是啥
	fmt.Printf(&amp;quot;file=%v\n&amp;quot;, file)
	//退出函數就關閉文件
	defer file.Close()

	//創建一個帶緩衝的reader，預設大小是4096
	reader := bufio.NewReader(file)
	for {
		str, err := reader.ReadString(&#39;\n&#39;) //讀到換行就結束
		fmt.Print(str)
		if err == io.EOF { //表示文件末尾
			break
		}
	}
	fmt.Println(&amp;quot;\n讀取結束&amp;quot;)

	//用ioutil.ReadFile一次讀完
	//這個包已經封裝了open跟close了，只適用在檔案大小不大的情境
	file2 := &amp;quot;c:/test.txt&amp;quot;
	str2, err2 := ioutil.ReadFile(file2)
	if err2 != nil {
		fmt.Println(err)
	}
	fmt.Printf(&amp;quot;%s&amp;quot;, str2) //原本輸出是[]byte,用%s轉

	//創建一個新檔案，寫入5句話
	filePath := &amp;quot;c:/abc.txt&amp;quot;
	file3, err3 := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666)
	if err3 != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err3)
		return
	}
	defer file3.Close() //及時關閉文件
	str3 := &amp;quot;hello\r\n&amp;quot;
	writer3 := bufio.NewWriter(file3)
	for i := 0; i &amp;lt; 5; i++ {
		writer3.WriteString(str3)
	}
	writer3.Flush() //因為本來是存在buf區要把它實際寫出來

	//覆蓋一個檔案，寫入3句話
	filePath4 := &amp;quot;c:/abc2.txt&amp;quot;
	file4, err4 := os.OpenFile(filePath4, os.O_WRONLY|os.O_TRUNC, 0666)
	if err3 != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err4)
		return
	}
	defer file4.Close() //及時關閉文件
	str4 := &amp;quot;覆蓋\r\n&amp;quot;
	writer4 := bufio.NewWriter(file4)
	for i := 0; i &amp;lt; 3; i++ {
		writer4.WriteString(str4)
	}
	writer4.Flush() //因為本來是存在buf區要把它實際寫出來

	//打開一個檔案abc，追加寫入3句話
	file5, err4 := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, 0666)
	if err3 != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err4)
		return
	}
	defer file5.Close() //及時關閉文件
	str5 := &amp;quot;追加\r\n&amp;quot;
	writer5 := bufio.NewWriter(file5)
	for i := 0; i &amp;lt; 3; i++ {
		writer5.WriteString(str5)
	}
	writer5.Flush() //因為本來是存在buf區要把它實際寫出來

	//打開一個檔案abc，讀取打印出來並追加寫入5句話
	file6, err4 := os.OpenFile(filePath, os.O_RDWR|os.O_APPEND, 0666)
	if err3 != nil {
		fmt.Println(&amp;quot;open file err=&amp;quot;, err4)
		return
	}
	//先讀取
	reader6 := bufio.NewReader(file6)
	for {
		str, err := reader6.ReadString(&#39;\n&#39;)
		if err == io.EOF { //如果讀到末尾
			break
		}
		fmt.Print(str)
	}
	defer file6.Close() //及時關閉文件
	str6 := &amp;quot;追加2BBB\r\n&amp;quot;
	writer6 := bufio.NewWriter(file6)
	for i := 0; i &amp;lt; 5; i++ {
		writer6.WriteString(str6)
	}
	writer6.Flush() //因為本來是存在buf區要把它實際寫出來

	//將c:/abc的內容導入到c:abc2

	fileAPath := &amp;quot;c:/abc.txt&amp;quot;
	fileBPath := &amp;quot;c:/abc2.txt&amp;quot;

	data, err9 := ioutil.ReadFile(fileAPath)
	if err9 != nil {
		fmt.Println(&amp;quot;文件讀取錯誤&amp;quot;, err9)
		return
	}
	err = ioutil.WriteFile(fileBPath, data, 0666)
	if err != nil {
		fmt.Println(&amp;quot;文件讀取錯誤&amp;quot;, err)
		return
	}

}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%96%87%E5%AD%97%E6%AA%94%E6%A1%88%E8%AE%80%E5%8F%96%E5%AF%AB%E5%85%A5/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>文檔字符統計</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%96%87%E6%AA%94%E5%AD%97%E7%AC%A6%E7%B5%B1%E8%A8%88/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%96%87%E6%AA%94%E5%AD%97%E7%AC%A6%E7%B5%B1%E8%A8%88/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%96%87%E6%AA%94%E5%AD%97%E7%AC%A6%E7%B5%B1%E8%A8%88/ -&lt;h1 id=&#34;文檔字符統計&#34;&gt;文檔字符統計&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//保存結果用
type CharCount struct {
	ChCount    int //英文字數
	NumCount   int //
	SpaceCount int
	OtherCount int
}

func main() {
	//思路 打開一個文件 創一個reader每讀取一行就去統計，將結果保存到一個結構體
	fileName := &amp;quot;c:/abc.txt&amp;quot;
	file, err := os.Open(fileName)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer file.Close()
	//來個實例
	var count CharCount
	reader := bufio.NewReader(file)

	//開始讀取
	for {
		str, err := reader.ReadString(&#39;\n&#39;)
		//這存在BUG 當行不換行做結尾就統計不到
		if err == io.EOF {
			break
		}
		for _, v := range str {
			switch {
			case v &amp;gt;= &#39;a&#39; &amp;amp;&amp;amp; v &amp;lt;= &#39;z&#39;:
				fallthrough
			case v &amp;gt;= &#39;A&#39; &amp;amp;&amp;amp; v &amp;lt;= &#39;Z&#39;:
				count.ChCount++
			case v == &#39; &#39; || v == &#39;\t&#39;:
				count.SpaceCount++
			case v &amp;gt;= &#39;0&#39; &amp;amp;&amp;amp; v &amp;lt;= &#39;9&#39;:
				count.NumCount++
			default:
				count.OtherCount++
			}
		}
	}
	fmt.Printf(&amp;quot;字符=%v 數字=%v 空格=%v 其他=%v&amp;quot;,
		count.ChCount, count.NumCount, count.SpaceCount, count.OtherCount)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%96%87%E6%AA%94%E5%AD%97%E7%AC%A6%E7%B5%B1%E8%A8%88/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>日期時間</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93/ -&lt;h1 id=&#34;日期時間&#34;&gt;日期時間&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//1.獲取當前本地時間
	now := time.Now()
	fmt.Printf(&amp;quot;now=%v,type=%T&amp;quot;, now, now) //返回的類型是struct
	//2.通過now獲取各種詳細
	fmt.Printf(&amp;quot;年=%v,type=%T\n&amp;quot;, now.Year(), now.Year())
	fmt.Printf(&amp;quot;月=%v,type=%T\n&amp;quot;, now.Month(), now.Month())
	fmt.Printf(&amp;quot;月=%v,type=%T\n&amp;quot;, int(now.Month()), int(now.Month()))
	fmt.Printf(&amp;quot;日=%v,type=%T\n&amp;quot;, now.Day(), now.Day())
	fmt.Printf(&amp;quot;時=%v,type=%T\n&amp;quot;, now.Hour(), now.Hour())
	fmt.Printf(&amp;quot;分=%v,type=%T\n&amp;quot;, now.Minute(), now.Minute())
	fmt.Printf(&amp;quot;秒=%v,type=%T\n&amp;quot;, now.Second(), now.Second())
	fmt.Printf(&amp;quot;星期=%v,type=%T\n&amp;quot;, now.Weekday(), now.Weekday())
	fmt.Printf(&amp;quot;星期=%v\n&amp;quot;, int(now.Weekday()))
	//3.格式化日期時間
	dateStr := fmt.Sprintf(&amp;quot;年月日時分=%d-%d-%d %d:%d\n&amp;quot;, now.Year(), now.Month(),
		now.Day(), now.Minute(), now.Second())
	fmt.Println(dateStr)
	//4.蛋疼的指定格式
	fmt.Println(now.Format(&amp;quot;2006-01-02 15:04:05&amp;quot;))
	fmt.Println(now.Format(&amp;quot;2006-01-02&amp;quot;))
	fmt.Println(now.Format(&amp;quot;06&amp;quot;))
	fmt.Println(now.Format(&amp;quot;01&amp;quot;))
	fmt.Println(now.Format(&amp;quot;03&amp;quot;))
	fmt.Println(now.Format(&amp;quot;01-02-06 03 04 05&amp;quot;))
	//123456=月日時分秒年
	//5.時間常量&amp;amp;休眠
	//每隔固定時間打印數字，打到100退出
	for i := 0; i &amp;lt;= 100; i++ {
		fmt.Println(i)
		time.Sleep(time.Millisecond)
	}
	//6.獲取時間戳unix unixNano
	fmt.Println(now.Unix())
	fmt.Println(now.UnixNano())

	//跑之前的時間
	start := now.Unix()
	test()
	end := now.Unix()
	fmt.Printf(&amp;quot;耗時%v&amp;quot;, end-start)
}

//7.統計函數執行時間
func test() {
	str := &amp;quot;&amp;quot;
	for i := 0; i &amp;lt; 100000; i++ {
		str = str + &amp;quot;hello&amp;quot; + strconv.Itoa(i)
	}
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E6%97%A5%E6%9C%9F%E6%99%82%E9%96%93/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>結構體</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E7%B5%90%E6%A7%8B%E9%AB%94/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E7%B5%90%E6%A7%8B%E9%AB%94/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E7%B5%90%E6%A7%8B%E9%AB%94/ -&lt;h1 id=&#34;結構體&#34;&gt;結構體&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Cat struct {
	Name  string
	Age   int
	Color string
	// S1    []int //可以是切片 但是預設值為nil(沒分配空間，一樣要先make後才能用)
}

//結構體是一個值類型，預設是值拷貝，比如cat1跟cat2是獨立存在兩個空間

func main() {
	//創建Cat的變量
	var cat1 Cat
	cat1.Name = &amp;quot;小花&amp;quot;
	cat1.Age = 18
	cat1.Color = &amp;quot;花&amp;quot;
	fmt.Println(&amp;quot;cat1=&amp;quot;, cat1)
	// cat1.S1 = make([]int, 10)
	// cat1.S1[0] = 100
	// fmt.Println(&amp;quot;cat1=&amp;quot;, cat1)

	//推薦方式
	cat2 := Cat{&amp;quot;小黑&amp;quot;, 5, &amp;quot;black&amp;quot;}
	fmt.Println(cat2)

	//方法3
	//var c *C=new(C)
	var cat3 *Cat = new(Cat)
	//因為cat3是一個指針
	(*cat3).Name = &amp;quot;小白&amp;quot;
	//語法糖 cat3.Age也可以 ，不建議
	cat3.Age = 6
	fmt.Println(*cat3)

	//方法4
	//var c *C=&amp;amp;C{}
	//因為c是一個指針 本來應該要用*...但是不用也行 草
	var cat4 *Cat = &amp;amp;Cat{&amp;quot;阿皇&amp;quot;, 0, &amp;quot;Yellow&amp;quot;}
	cat4.Name = &amp;quot;阿煌&amp;quot;
	(*cat4).Age = 1
	fmt.Println(*cat4)

	type Person struct {
		Name string `json:&amp;quot;name&amp;quot;`
		Age  int    `json:&amp;quot;age&amp;quot;`
	}

	p1 := Person{&amp;quot;aaa&amp;quot;, 10}
	fmt.Println(p1)
	var p2 *Person = &amp;amp;p1
	// fmt.Println(*p2.Age) //這樣寫會報錯。因為.的優先級比*高
	fmt.Println(p2.Age) //語法糖

	//用type重定義(類似於取別名)但是他會認為是2種類型
	type Per Person
	// var p3 Person = Person{&amp;quot;tommy&amp;quot;, 5}
	// var p4 Per
	// //p3=p4 //這樣會報錯
	// p4 = Per(p3) //這樣強轉
	// fmt.Println(p3, p4)
	fmt.Println(&amp;quot;--------------&amp;quot;)
	//struct的每個字段上可以寫一個tag，該tag可以通過反射機制獲取，常用於序列化
	pj := Per{&amp;quot;李四&amp;quot;, 44}
	jsonStr, err := json.Marshal(pj) //返回的是byte
	if err != nil {
		fmt.Println(&amp;quot;錯誤&amp;quot;)
	}
	fmt.Println(string(jsonStr)) //返回的是byte所以加一個string

}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E7%B5%90%E6%A7%8B%E9%AB%94/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>繼承</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E7%B9%BC%E6%89%BF/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E7%B9%BC%E6%89%BF/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E7%B9%BC%E6%89%BF/ -&lt;h1 id=&#34;繼承&#34;&gt;繼承&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Student struct {
	Name  string
	Age   int
	Score int
	//共有的字段
}

type Pupil struct {
	Student //套入
	Covid19 bool
}

type College struct {
	Student //套入指針效率更好
	SexExp  bool
}

func (stu *Student) ShowInfo() {
	fmt.Printf(&amp;quot;姓名=%v 年齡=%v 成績=%v\n&amp;quot;, stu.Name, stu.Age, stu.Score)
}

func (stu *Student) SetScore(s int) {
	stu.Score = s
}

func (p *Pupil) Test() {
	fmt.Println(&amp;quot;小學生考試&amp;quot;)
}

func main() {
	pupilA := &amp;amp;Pupil{}
	pupilA.Student.Name = &amp;quot;tome&amp;quot;
	pupilA.Student.Age = 8
	pupilA.Covid19 = true

	pupilA.Test()
	pupilA.Student.SetScore(66)
	pupilA.Student.ShowInfo()
	fmt.Println(&amp;quot;是否得肺炎&amp;quot;, pupilA.Covid19)

	C1 := College{}
	C1.Student.Name = &amp;quot;John&amp;quot;
	C1.Age = 23 //其實可以省略.Student
	C1.SexExp = false

	C1.Student.SetScore(39)
	C1.ShowInfo() //其實可以省略.Student
	fmt.Println(&amp;quot;是否破處&amp;quot;, C1.SexExp)

	//如果有低能把結構體跟匿名結構體用了相同的字段或方法，會採取就近訪問原則
	// 如果在一個結構中嵌入多個匿名結構，且匿名結構有同名的字段，那就必須指明匿名結構否則報錯

	//組合
	var d D
	d.a.Name = &amp;quot;xxxx&amp;quot; //有名字的結構體訪問時就要上完整名字
}

//組合
type D struct {
	a Student //有名字的結構體
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E7%B9%BC%E6%89%BF/ - yoziming</description>
        </item>
    
    
  </channel>
</rss> 