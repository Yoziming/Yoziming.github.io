<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>柚子茶室</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yoziming</copyright>
    <lastBuildDate>Wed, 17 Nov 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>二維數組</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E4%BA%8C%E7%B6%AD%E6%95%B8%E7%B5%84/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E4%BA%8C%E7%B6%AD%E6%95%B8%E7%B5%84/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E4%BA%8C%E7%B6%AD%E6%95%B8%E7%B5%84/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
// 000000
// 001000
// 020300
// 000000
func main() {
	var arr [4][6]int
	arr[1][2] = 1
	arr[2][1] = 2
	arr[2][3] = 3
	//遍歷
	for i := 0; i &amp;lt; len(arr); i++ {
		for j := 0; j &amp;lt; len(arr[i]); j++ {
			fmt.Print(arr[i][j], &amp;quot; &amp;quot;)
		}
		fmt.Println()
	}
	//遍歷range
	for i, v := range arr {
		for j, v2 := range v {
			fmt.Printf(&amp;quot;arr[%v][%v]=%v \t&amp;quot;, i, j, v2)
		}

		fmt.Println()
	}
	//三班五學生
	var score [3][5]float64
	for i := 0; i &amp;lt; len(score); i++ {
		for j := 0; j &amp;lt; len(score[i]); j++ {
			fmt.Printf(&amp;quot;輸入第%v班第%v位成績&amp;quot;, i+1, j+1)
			fmt.Scanln(&amp;amp;score[i][j])
		}

	}
	cal(score)

}
func cal(score [3][5]float64) {
	total := 0.0
	for i := 0; i &amp;lt; len(score); i++ {
		sum := 0.0
		for j := 0; j &amp;lt; len(score[i]); j++ {
			sum = sum + score[i][j]
		}
		total += sum
		fmt.Printf(&amp;quot;第%d班的總分為%v 平均分%v \n&amp;quot;, i+1, sum, sum/5)
	}
	fmt.Printf(&amp;quot;總分為%v 平均分%v \n&amp;quot;, total, total/15)

}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E4%BA%8C%E7%B6%AD%E6%95%B8%E7%B5%84/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>冒泡排序</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/ -&lt;h1 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var arr1 = [...]int{5, 9, 6, 8, 7, 3, 4, 2, 1, 6}

func main() {
	s1 := arr1[:]
	bubbleSort(s1)
	fmt.Println(arr1)
}

func bubbleSort(x []int) {
	for j := 1; j &amp;lt; len(x); j++ {
		for i := 0; i &amp;lt; len(x)-1; i++ {
			if x[i] &amp;gt; x[i+1] {
				x[i], x[i+1] = x[i+1], x[i]
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>函數封裝的金字塔</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E5%B0%81%E8%A3%9D%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E5%B0%81%E8%A3%9D%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E5%B0%81%E8%A3%9D%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

var input int

func jin(input int) {

	for i := 1; i &amp;lt;= input; i++ {
		for k := 1; k &amp;lt;= input-i; k++ {
			fmt.Print(&amp;quot; &amp;quot;)
		}
		for j := 1; j &amp;lt;= 2*i-1; j++ {
			if j == 1 || j == 2*i-1 || i == input {
				fmt.Print(&amp;quot;*&amp;quot;)
			} else {
				fmt.Print(&amp;quot; &amp;quot;)
			}
		}
		fmt.Println()
	}
}

func main() {
	fmt.Println(&amp;quot;層數=?&amp;quot;)
	fmt.Scanln(&amp;amp;input)
	jin(input)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E5%B0%81%E8%A3%9D%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>函數綁定方法</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E7%B6%81%E5%AE%9A%E6%96%B9%E6%B3%95/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E7%B6%81%E5%AE%9A%E6%96%B9%E6%B3%95/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E7%B6%81%E5%AE%9A%E6%96%B9%E6%B3%95/ -&lt;h1 id=&#34;函數綁定方法&#34;&gt;函數綁定方法&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;方法:結構體的行為，自訂義的結構都可以有方法，方法是作用在指定類型上(綁定的)&lt;/p&gt;
&lt;p&gt;方法就是跟一種類型綁定的函數，因為綁定數據類型了就可以偷雞，具體表現在省指針&lt;/p&gt;
&lt;p&gt;定義方法時候寫的是func(a ABC) //後面怎樣調用都是值拷貝&lt;/p&gt;
&lt;p&gt;定義方法時候寫的是func(a *ABC)//後面怎樣調用都是真實地址&lt;/p&gt;
&lt;p&gt;要調用方法，只能透過那種類型的的數據變量 例如a1.ABC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
)

type Person struct {
	Name string
}

//給Person類型綁定一個方法
func (p Person) test() {
	p.Name = &amp;quot;jack&amp;quot;
	fmt.Println(&amp;quot;test()=&amp;quot;, p.Name)
}

//給Person類型添加一個speak方法，輸出xxx是好人
func (p Person) speak() {
	fmt.Println(p.Name, &amp;quot;是一個好人&amp;quot;)
}

//添加一個計算方法算+1...+100
func (p Person) count() {
	res := 0
	for i := 1; i &amp;lt;= 100; i++ {
		res += i
	}
	fmt.Println(p.Name, &amp;quot;計算的結果是&amp;quot;, res)
}

//添加一個計算方法算+1...+n
func (p Person) count2(n int) {
	res := 0
	for i := 1; i &amp;lt;= n; i++ {
		res += i
	}
	fmt.Println(p.Name, &amp;quot;計算的結果是&amp;quot;, res)
}

//添加一個方法計算2個值的和並返回
func (p Person) getSum(n1, n2 int) int {
	return n1 + n2
}

//為了提高效率，通常把方法跟結構的指針綁定
type Circle struct {
	radius float64
}

func (c *Circle) area() float64 {
	c.radius = 10.0                   //因為傳來的是指針，如果在函數裡改他就等於改真實地址了
	return 3.14 * c.radius * c.radius //語法糖 本來應該是要寫(*c)來計算的
}

//給某方法實現方法String()
type Student struct {
	Name string
	Age  int
}

func (stu *Student) String() string {
	str := fmt.Sprintf(&amp;quot;Name=%v Age=%v&amp;quot;, stu.Name, stu.Age)
	return str
}

//練習題
type MeUtils struct {
	//123
}

func (mu MeUtils) Print(m int, n int) {
	for i := 1; i &amp;lt;= m; i++ {
		for j := 1; j &amp;lt;= n; j++ {
			fmt.Print(&amp;quot;*&amp;quot;)
		}
		fmt.Println()
	}

}

func main() {
	var p Person
	p.Name = &amp;quot;tom&amp;quot;
	p.test() //調用方法
	fmt.Println(&amp;quot;main=&amp;quot;, p.Name)
	//test()//報錯的
	//總的來說就是把test方法跟Person類型綁定，而這個test只能用Person類型調用
	//傳的是形參 (函數裡的是一個副本)
	//---------------------------------------------以下開始應用練習
	p.speak()
	p.count()
	p.count2(1000)
	res := p.getSum(10, 20)
	fmt.Println(res)

	//創建變量嘗試調用area
	var c Circle
	c.radius = 5.0
	res2 := c.area() //語法糖 本來應該是要寫(&amp;amp;c).area()的
	fmt.Println(res2)

	//調用Student
	stu1 := Student{
		Name: &amp;quot;tom&amp;quot;,
		Age:  18,
	}
	//如果實現了*Student類型的String方法就會自動調用
	fmt.Println(&amp;amp;stu1)

	//練習題
	var mu MeUtils
	mu.Print(5, 10)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%87%BD%E6%95%B8%E7%B6%81%E5%AE%9A%E6%96%B9%E6%B3%95/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>切片</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%88%87%E7%89%87/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%88%87%E7%89%87/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%88%87%E7%89%87/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//切片的類型是引用(傳遞的時候也是引用地址)
	//切片長度可變(不像數組)
	var arr1 = [5]int{1, 2, 3, 4, 5}
	s1 := arr1[1:3] //表示切arr的[1 2] 左開右閉(含左不含右)
	//var slice=arr[0:end]簡寫[:end]
	//[start:len(arr)]=[start:]
	//[0:len(arr)]=[:]
	fmt.Println(&amp;quot;s1內容是&amp;quot;, s1)
	fmt.Println(&amp;quot;s1長度是&amp;quot;, len(s1))
	fmt.Println(&amp;quot;s1容量是&amp;quot;, cap(s1))
	fmt.Printf(&amp;quot;s1第一個地址是%p\n&amp;quot;, &amp;amp;s1[0])
	fmt.Printf(&amp;quot;arr1[1]地址是%p\n&amp;quot;, &amp;amp;arr1[1])
	s1[0] = 33
	fmt.Println(&amp;quot;arr1內容是&amp;quot;, arr1)

	//var 切片名[]type=make([]type,len,cap)
	var s2 []float64 = make([]float64, 5, 10)
	fmt.Println(s2)
	//var 變量=make(類型)
	var s22 = make([]float64, 5, 10)
	fmt.Println(s22)
	var s3 []int = []int{1, 2, 3, 4, 5}
	fmt.Println(s3)
	//用append動態追加
	s3 = append(s3, 6, 7, 8, 9)
	fmt.Println(s3)
	s3 = append(s3, s3...) //...表示擴展
	//用append的時候 其實是創建一個新的arr，值拷貝過去，然後重新指向
	s3[10] = 600
	fmt.Println(s3)

	//用copy 要求2者都是切片類型
	//短的賦給長的 後面沒東西就保持原樣(0)
	//長的賦給短的 不會自動擴容 依照短的
	var s4 = make([]int, 20)
	fmt.Println(s4)
	copy(s4, s3)
	fmt.Println(s4)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切string&#34;&gt;切string&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;	str := &amp;quot;hello@yozimingfight!&amp;quot;
	//string是一個byte數組，所以可以切片擷取
	s1 := str[6:]
	fmt.Println(s1)
	//但是string是不可變的，不能用s1[0]=&#39;z&#39;這樣想改變一個字
	//看做一個read only的切片

	//可以轉[]byte或[]rune 修改 後轉回去
	arr1 := []byte(str)
	arr1[0] = &#39;z&#39;
	str = string(arr1)
	fmt.Println(str)
	//byte不能處理中文字(3字節)
	arr2 := []rune(str)
	arr2[0] = &#39;我&#39;
	str = string(arr2)
	fmt.Println(str)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切片練習-費波納數列&#34;&gt;切片練習-費波納數列&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func fbn(n int) []uint64 {
	var s1 []uint64 = make([]uint64, n)
	if n &amp;lt; 2 {
		s1[0] = 1
		return s1
	} else {
		s1[0] = 1
		s1[1] = 1
		for i := 2; i &amp;lt; n; i++ {
			s1[i] = s1[i-1] + s1[i-2]
		}
		return s1
	}
}

func main() {
	a := fbn(1)
	fmt.Println(a)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%88%87%E7%89%87/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>匿名函數與閉包</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/ -&lt;h1 id=&#34;匿名函數&#34;&gt;匿名函數&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	res := func(n1, n2 int) int {
		return n1 + n2
	}(10, 20)
	fmt.Println(res)
	a := func(n1, n2 int) int {
		return n1 - n2
	}
	res = a(10, 5)
	fmt.Println(res)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;閉包&#34;&gt;閉包&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//累加器
func Add() func(int) int { //Add是一個函數，返回的數據類型是func(int) int

	var n int = 10 //返回的是一個匿名函數，那這個函數用到函數外的n，因此形成一個整體稱為閉包
	return func(x int) int {
		n = n + x
		return n
		//閉包是類，函數是操作，n是字段，函數+使用n構成閉包
		//n只初始化一次
	}
}
func main() {
	a := Add()
	fmt.Println(a(1))
	fmt.Println(a(2))
	fmt.Println(a(3))

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;案例2&#34;&gt;案例2&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func makeSuffix(suffix string) func(string) string {
	return func(name string) string {
		if !strings.HasSuffix(name, suffix) {
			return name + suffix
		}
		return name
	}
}
func main() {
	f := makeSuffix(&amp;quot;.jpg&amp;quot;)
	fmt.Println(f(&amp;quot;654&amp;quot;))
	fmt.Println(f(&amp;quot;123.jpg&amp;quot;))

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>命令行參數Args&amp;Flag</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/ -&lt;h1 id=&#34;命令行參數argsflag&#34;&gt;命令行參數Args&amp;amp;Flag&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	fmt.Println(&amp;quot;命令行參數有&amp;quot;, len(os.Args))
	//遍歷os.Args切片 得到所有輸入的參數值
	for i, v := range os.Args {
		fmt.Printf(&amp;quot;args[%v]=%v\n&amp;quot;, i, v)
	}
	fmt.Println(&amp;quot;=====================&amp;quot;)

	//flag方法 先定義幾個變量用於接收參數值
	var user string
	var pwd string
	var host string
	var port int

	flag.StringVar(&amp;amp;user, &amp;quot;u&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;帳號 預設為空&amp;quot;)
	flag.StringVar(&amp;amp;pwd, &amp;quot;pwd&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;密碼 預設為空&amp;quot;)
	flag.StringVar(&amp;amp;host, &amp;quot;h&amp;quot;, &amp;quot;localhost&amp;quot;, &amp;quot;主機 預設為localhost&amp;quot;)
	flag.IntVar(&amp;amp;port, &amp;quot;port&amp;quot;, 3306, &amp;quot;端口 預設為3306&amp;quot;)
	//前面有亂打的字就不行 比如...exe 12354 -u tom會調用預設

	flag.Parse() //這個一定要調用

	//輸出結果
	fmt.Printf(&amp;quot;user=%v pwd=%v host=%v port=%v&amp;quot;,
		user, pwd, host, port)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>字串轉換常用函數</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AD%97%E4%B8%B2%E8%BD%89%E6%8F%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B8/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AD%97%E4%B8%B2%E8%BD%89%E6%8F%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B8/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AD%97%E4%B8%B2%E8%BD%89%E6%8F%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B8/ -&lt;h1 id=&#34;字串轉換常用函數&#34;&gt;字串轉換常用函數&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
var str string = &amp;quot;abc123中文&amp;quot;

func main() {
	fmt.Println(&amp;quot;長度=&amp;quot;, len(str))
	r := []rune(str)
	for i := 0; i &amp;lt; len(r); i++ {
		fmt.Printf(&amp;quot;遍歷=%q\n&amp;quot;, r[i])
	}
	//轉成整數 Atoi
	n, err := strconv.Atoi(&amp;quot;5421&amp;quot;)
	if err != nil {
		fmt.Println(&amp;quot;錯誤,err&amp;quot;)
	} else {
		fmt.Println(&amp;quot;轉換成&amp;quot;, n)
		//整數轉字串
		str2 := strconv.Itoa(654231)
		fmt.Printf(&amp;quot;類型是%T\n&amp;quot;, str2)
		//轉byte
		var bytes = []byte(&amp;quot;hello&amp;quot;)
		fmt.Printf(&amp;quot;bytes=%v \n&amp;quot;, bytes)
		//byte轉回字串
		str3 := string([]byte{97, 98, 99})
		fmt.Printf(&amp;quot;str3=%v \n&amp;quot;, str3)
		//10進制轉2,8,16返回字串
		str4 := strconv.FormatInt(123, 2)
		fmt.Printf(&amp;quot;str4類型是%T,值=%v \n&amp;quot;, str4, str4)
		//查找子串
		b := strings.Contains(&amp;quot;seafood&amp;quot;, &amp;quot;foo&amp;quot;)
		fmt.Printf(&amp;quot;b類型是%T,值=%v \n&amp;quot;, b, b)
		//統計符合數量
		c := strings.Count(&amp;quot;sgfjklewshfrrrrrr&amp;quot;, &amp;quot;r&amp;quot;)
		fmt.Printf(&amp;quot;c類型是%T,值=%v \n&amp;quot;, c, c)
		//不分大小寫 (因為==是分的)
		d := strings.EqualFold(&amp;quot;ABCd&amp;quot;, &amp;quot;aBcD&amp;quot;)
		fmt.Printf(&amp;quot;d類型是%T,值=%v \n&amp;quot;, d, d)
		//查找第一次出現的子串位置
		i := strings.Index(&amp;quot;sdaf654abc&amp;quot;, &amp;quot;a&amp;quot;)
		fmt.Printf(&amp;quot;i類型是%T,值=%v \n&amp;quot;, i, i)
		//查找最後出現的子串位置
		l := strings.LastIndex(&amp;quot;sdaf654abc&amp;quot;, &amp;quot;a&amp;quot;)
		fmt.Printf(&amp;quot;l類型是%T,值=%v \n&amp;quot;, l, l)
		//替換文字
		str5 := &amp;quot;瘟疫之地有瘟疫,瘟疫病人身上有瘟疫&amp;quot;
		r := strings.Replace(str5, &amp;quot;瘟疫&amp;quot;, &amp;quot;痔瘡&amp;quot;, 2)
		fmt.Println(&amp;quot;原句&amp;quot;, str5)
		fmt.Printf(&amp;quot;r類型是%T,值=%v \n&amp;quot;, r, r)
		//依照指定的字串分割成切片
		s := strings.Split(&amp;quot;hello,world,ok&amp;quot;, &amp;quot;,&amp;quot;)
		fmt.Printf(&amp;quot;s類型是%T,值=%v \n&amp;quot;, s, s)
		//大小寫轉換
		cap := &amp;quot;DDDDssss&amp;quot;
		cap = strings.ToLower(cap)
		fmt.Println(cap)
		cap = strings.ToUpper(cap)
		fmt.Println(cap)
		//去掉左右兩邊空格
		sp := strings.TrimSpace(&amp;quot;  KJHF JKLH LKJ  ..   &amp;quot;)
		fmt.Println(sp)
		//去掉左右指定 //TrimLeft // TrimRight
		lr := strings.Trim(&amp;quot;!!KJHFJHG!!!&amp;quot;, &amp;quot;!&amp;quot;)
		fmt.Println(lr)
		//判斷開頭或結束  //HasSuffix
		s6 := strings.HasPrefix(&amp;quot;ftp://192.164.2.1&amp;quot;, &amp;quot;ftp&amp;quot;)
		fmt.Printf(&amp;quot;s6類型是%T,值=%v \n&amp;quot;, s6, s6)
	}
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AD%97%E4%B8%B2%E8%BD%89%E6%8F%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-ini解析器</title>
        <link>https://yoziming.github.io/post/210820-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-ini%E8%A7%A3%E6%9E%90%E5%99%A8/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-ini%E8%A7%A3%E6%9E%90%E5%99%A8/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210820-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-ini%E8%A7%A3%E6%9E%90%E5%99%A8/ -&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;用來解析.ini文檔格式是否有問題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;reflect&amp;quot;
	&amp;quot;strings&amp;quot;
)

type RedisConfig struct {
	Host     string `ini:&amp;quot;host&amp;quot;`
	Port     int    `ini:&amp;quot;port&amp;quot;`
	Password string `ini:&amp;quot;password&amp;quot;`
	Database int    `ini:&amp;quot;database&amp;quot;`
}
type MysqlConfig struct {
	Address  string `ini:&amp;quot;address&amp;quot;`
	Port     int    `ini:&amp;quot;port&amp;quot;`
	Password string `ini:&amp;quot;password&amp;quot;`
	Username string `ini:&amp;quot;username&amp;quot;`
}

type Config struct {
	MysqlConfig `ini:&amp;quot;mysql&amp;quot;`
	RedisConfig `ini:&amp;quot;redis&amp;quot;`
}

func loadIni(fileName string, data interface{}) (err error) {
	// 0. 參數校驗
	// 0.1 傳來的data必須是結構體類型指針
	t := reflect.TypeOf(data)
	// fmt.Println(t.Kind())
	if t.Kind() != reflect.Ptr {
		err = fmt.Errorf(&amp;quot;傳來的data必須是指針&amp;quot;)
		return
	}
	if t.Elem().Kind() != reflect.Struct {
		err = fmt.Errorf(&amp;quot;傳來的data必須是結構體類型指針&amp;quot;)
		return
	}
	// 1. 讀取文件~&amp;gt;Byte類型
	b, err := ioutil.ReadFile(fileName)
	if err != nil {
		return
	}
	//轉成字符串
	lineSlice := strings.Split(string(b), &amp;quot;\r\n&amp;quot;)
	// fmt.Println(lineSlice)
	// 2. 一行一行讀取數據
	var structName string
	for idx, line := range lineSlice {
		line = strings.TrimSpace(line) //去除多餘空格
		// 2.1 如果是註釋就跳過
		if strings.HasPrefix(line, &amp;quot;;&amp;quot;) || strings.HasPrefix(line, &amp;quot;#&amp;quot;) {
			continue
		}
		//純空行就跳過
		if len(line) == 0 {
			continue
		}
		// 2.2 如果是[]開頭表示是節
		if strings.HasPrefix(line, &amp;quot;[&amp;quot;) {
			if line[0] != &#39;[&#39; || line[len(line)-1] != &#39;]&#39; {
				err = fmt.Errorf(&amp;quot;line:%d syntax error&amp;quot;, idx+1)
				return
			}
			//去掉這行的首尾跟空格拿到內容
			section := strings.TrimSpace(line[1 : len(line)-1])
			if len(section) == 0 {
				err = fmt.Errorf(&amp;quot;line:%d syntax error&amp;quot;, idx+1)
				return
			}
			//根據section去data反射對應的結構體
			for i := 0; i &amp;lt; t.Elem().NumField(); i++ {
				field := t.Elem().Field(i)
				if section == field.Tag.Get(&amp;quot;ini&amp;quot;) {
					//說明找到了，把字段名記下
					structName = field.Name
					fmt.Println(section, structName)
				}

			}

		} else {
			// 2.3 剩下的就是分割的鍵值對
			//先排除異常的行
			if strings.Index(line, &amp;quot;=&amp;quot;) == -1 || strings.HasPrefix(line, &amp;quot;=&amp;quot;) {
				err = fmt.Errorf(&amp;quot;line:%d syntax error&amp;quot;, idx+1)
				return
			}
			index := strings.Index(line, &amp;quot;=&amp;quot;)
			key := strings.TrimSpace(line[:index])
			// value := strings.TrimSpace(line[:index+1])
			v := reflect.ValueOf(data)
			sValue := v.Elem().FieldByName(structName) //拿到嵌套結構體的值信息
			sType := sValue.Type()                     //拿到嵌套結構體的類型信息
			if sType.Kind() != reflect.Struct {
				err = fmt.Errorf(&amp;quot;%s應該為一個結構體&amp;quot;, structName)
				return
			}
			var fieldName string
			//遍歷嵌套結構體每一個字段 判斷tag是否=key
			for i := 0; i &amp;lt; sValue.NumField(); i++ {
				field := sType.Field(i)
				if field.Tag.Get(&amp;quot;ini&amp;quot;) == key {
					fieldName = field.Name
					break
				}
			}
			//根據fieldName取出字段賦值
			fileObj := sValue.FieldByName(fieldName)
			fmt.Println(fieldName, fileObj)
		}

	}
	return
}

func main() {
	var cfg Config
	err := loadIni(&amp;quot;C:/config.ini&amp;quot;, &amp;amp;cfg)
	if err != nil {
		panic(err)
	}
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-ini%E8%A7%A3%E6%9E%90%E5%99%A8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-txt文本批次取代器</title>
        <link>https://yoziming.github.io/post/210820-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-txt%E6%96%87%E6%9C%AC%E6%89%B9%E6%AC%A1%E5%8F%96%E4%BB%A3%E5%99%A8/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-txt%E6%96%87%E6%9C%AC%E6%89%B9%E6%AC%A1%E5%8F%96%E4%BB%A3%E5%99%A8/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210820-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-txt%E6%96%87%E6%9C%AC%E6%89%B9%E6%AC%A1%E5%8F%96%E4%BB%A3%E5%99%A8/ -&lt;h1 id=&#34;實作練習-txt文本批次取代器&#34;&gt;實作練習-txt文本批次取代器&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;自己寫用來一次取代多個名詞，去除多餘空格或符號等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strings&amp;quot;
)

var data []string = make([]string, 128)

func main() {
	readByBufio()
	for _, v := range data {
		if v == &amp;quot;&amp;quot; {
			break
		}
		fmt.Print(v)
	}

}
func readByBufio() {
	file, err := os.Open(&amp;quot;C:/test.txt&amp;quot;)
	if err != nil {
		fmt.Printf(&amp;quot;os.Open err %s\n&amp;quot;, err)
		return
	}
	defer file.Close()
	reader := bufio.NewReader(file)
	for i := 0; ; i++ {
		line, err := reader.ReadString(&#39;\n&#39;)
		if err == io.EOF {
			return
		}
		if err != nil {
			fmt.Printf(&amp;quot;reader.ReadString err %s\n&amp;quot;, err)
			return
		}
		line = strings.ReplaceAll(line, &amp;quot;++&amp;quot;, &amp;quot;+&amp;quot;) //去除多餘++
		line = strings.ReplaceAll(line, &amp;quot;  &amp;quot;, &amp;quot; &amp;quot;) //去除多餘空格
		line = strings.ReplaceAll(line, &amp;quot;*&amp;quot;, &amp;quot;&amp;quot;)   //去除多餘*
		line = strings.ReplaceAll(line, &amp;quot;AAAA&amp;quot;, &amp;quot;BBBB&amp;quot;)
		line = strings.ReplaceAll(line, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;)
		data[i] = line
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-txt%E6%96%87%E6%9C%AC%E6%89%B9%E6%AC%A1%E5%8F%96%E4%BB%A3%E5%99%A8/ - yoziming</description>
        </item>
    
    
  </channel>
</rss> 