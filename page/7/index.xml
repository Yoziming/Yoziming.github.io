<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yoziming&#39; Blog</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on yoziming&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yoziming</copyright>
    <lastBuildDate>Sun, 28 Nov 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>切片</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%88%87%E7%89%87/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%88%87%E7%89%87/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%88%87%E7%89%87/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//切片的類型是引用(傳遞的時候也是引用地址)
	//切片長度可變(不像數組)
	var arr1 = [5]int{1, 2, 3, 4, 5}
	s1 := arr1[1:3] //表示切arr的[1 2] 左開右閉(含左不含右)
	//var slice=arr[0:end]簡寫[:end]
	//[start:len(arr)]=[start:]
	//[0:len(arr)]=[:]
	fmt.Println(&amp;quot;s1內容是&amp;quot;, s1)
	fmt.Println(&amp;quot;s1長度是&amp;quot;, len(s1))
	fmt.Println(&amp;quot;s1容量是&amp;quot;, cap(s1))
	fmt.Printf(&amp;quot;s1第一個地址是%p\n&amp;quot;, &amp;amp;s1[0])
	fmt.Printf(&amp;quot;arr1[1]地址是%p\n&amp;quot;, &amp;amp;arr1[1])
	s1[0] = 33
	fmt.Println(&amp;quot;arr1內容是&amp;quot;, arr1)

	//var 切片名[]type=make([]type,len,cap)
	var s2 []float64 = make([]float64, 5, 10)
	fmt.Println(s2)
	//var 變量=make(類型)
	var s22 = make([]float64, 5, 10)
	fmt.Println(s22)
	var s3 []int = []int{1, 2, 3, 4, 5}
	fmt.Println(s3)
	//用append動態追加
	s3 = append(s3, 6, 7, 8, 9)
	fmt.Println(s3)
	s3 = append(s3, s3...) //...表示擴展
	//用append的時候 其實是創建一個新的arr，值拷貝過去，然後重新指向
	s3[10] = 600
	fmt.Println(s3)

	//用copy 要求2者都是切片類型
	//短的賦給長的 後面沒東西就保持原樣(0)
	//長的賦給短的 不會自動擴容 依照短的
	var s4 = make([]int, 20)
	fmt.Println(s4)
	copy(s4, s3)
	fmt.Println(s4)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切string&#34;&gt;切string&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;	str := &amp;quot;hello@yozimingfight!&amp;quot;
	//string是一個byte數組，所以可以切片擷取
	s1 := str[6:]
	fmt.Println(s1)
	//但是string是不可變的，不能用s1[0]=&#39;z&#39;這樣想改變一個字
	//看做一個read only的切片

	//可以轉[]byte或[]rune 修改 後轉回去
	arr1 := []byte(str)
	arr1[0] = &#39;z&#39;
	str = string(arr1)
	fmt.Println(str)
	//byte不能處理中文字(3字節)
	arr2 := []rune(str)
	arr2[0] = &#39;我&#39;
	str = string(arr2)
	fmt.Println(str)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切片練習-費波納數列&#34;&gt;切片練習-費波納數列&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func fbn(n int) []uint64 {
	var s1 []uint64 = make([]uint64, n)
	if n &amp;lt; 2 {
		s1[0] = 1
		return s1
	} else {
		s1[0] = 1
		s1[1] = 1
		for i := 2; i &amp;lt; n; i++ {
			s1[i] = s1[i-1] + s1[i-2]
		}
		return s1
	}
}

func main() {
	a := fbn(1)
	fmt.Println(a)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%88%87%E7%89%87/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>匿名函數與閉包</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/ -&lt;h1 id=&#34;匿名函數&#34;&gt;匿名函數&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	res := func(n1, n2 int) int {
		return n1 + n2
	}(10, 20)
	fmt.Println(res)
	a := func(n1, n2 int) int {
		return n1 - n2
	}
	res = a(10, 5)
	fmt.Println(res)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;閉包&#34;&gt;閉包&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//累加器
func Add() func(int) int { //Add是一個函數，返回的數據類型是func(int) int

	var n int = 10 //返回的是一個匿名函數，那這個函數用到函數外的n，因此形成一個整體稱為閉包
	return func(x int) int {
		n = n + x
		return n
		//閉包是類，函數是操作，n是字段，函數+使用n構成閉包
		//n只初始化一次
	}
}
func main() {
	a := Add()
	fmt.Println(a(1))
	fmt.Println(a(2))
	fmt.Println(a(3))

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;案例2&#34;&gt;案例2&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func makeSuffix(suffix string) func(string) string {
	return func(name string) string {
		if !strings.HasSuffix(name, suffix) {
			return name + suffix
		}
		return name
	}
}
func main() {
	f := makeSuffix(&amp;quot;.jpg&amp;quot;)
	fmt.Println(f(&amp;quot;654&amp;quot;))
	fmt.Println(f(&amp;quot;123.jpg&amp;quot;))

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B8%E8%88%87%E9%96%89%E5%8C%85/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>命令行參數Args&amp;Flag</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/ -&lt;h1 id=&#34;命令行參數argsflag&#34;&gt;命令行參數Args&amp;amp;Flag&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	fmt.Println(&amp;quot;命令行參數有&amp;quot;, len(os.Args))
	//遍歷os.Args切片 得到所有輸入的參數值
	for i, v := range os.Args {
		fmt.Printf(&amp;quot;args[%v]=%v\n&amp;quot;, i, v)
	}
	fmt.Println(&amp;quot;=====================&amp;quot;)

	//flag方法 先定義幾個變量用於接收參數值
	var user string
	var pwd string
	var host string
	var port int

	flag.StringVar(&amp;amp;user, &amp;quot;u&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;帳號 預設為空&amp;quot;)
	flag.StringVar(&amp;amp;pwd, &amp;quot;pwd&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;密碼 預設為空&amp;quot;)
	flag.StringVar(&amp;amp;host, &amp;quot;h&amp;quot;, &amp;quot;localhost&amp;quot;, &amp;quot;主機 預設為localhost&amp;quot;)
	flag.IntVar(&amp;amp;port, &amp;quot;port&amp;quot;, 3306, &amp;quot;端口 預設為3306&amp;quot;)
	//前面有亂打的字就不行 比如...exe 12354 -u tom會調用預設

	flag.Parse() //這個一定要調用

	//輸出結果
	fmt.Printf(&amp;quot;user=%v pwd=%v host=%v port=%v&amp;quot;,
		user, pwd, host, port)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%83%E6%95%B8argsflag/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>字串轉換常用函數</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%AD%97%E4%B8%B2%E8%BD%89%E6%8F%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B8/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%AD%97%E4%B8%B2%E8%BD%89%E6%8F%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B8/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%AD%97%E4%B8%B2%E8%BD%89%E6%8F%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B8/ -&lt;h1 id=&#34;字串轉換常用函數&#34;&gt;字串轉換常用函數&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
var str string = &amp;quot;abc123中文&amp;quot;

func main() {
	fmt.Println(&amp;quot;長度=&amp;quot;, len(str))
	r := []rune(str)
	for i := 0; i &amp;lt; len(r); i++ {
		fmt.Printf(&amp;quot;遍歷=%q\n&amp;quot;, r[i])
	}
	//轉成整數 Atoi
	n, err := strconv.Atoi(&amp;quot;5421&amp;quot;)
	if err != nil {
		fmt.Println(&amp;quot;錯誤,err&amp;quot;)
	} else {
		fmt.Println(&amp;quot;轉換成&amp;quot;, n)
		//整數轉字串
		str2 := strconv.Itoa(654231)
		fmt.Printf(&amp;quot;類型是%T\n&amp;quot;, str2)
		//轉byte
		var bytes = []byte(&amp;quot;hello&amp;quot;)
		fmt.Printf(&amp;quot;bytes=%v \n&amp;quot;, bytes)
		//byte轉回字串
		str3 := string([]byte{97, 98, 99})
		fmt.Printf(&amp;quot;str3=%v \n&amp;quot;, str3)
		//10進制轉2,8,16返回字串
		str4 := strconv.FormatInt(123, 2)
		fmt.Printf(&amp;quot;str4類型是%T,值=%v \n&amp;quot;, str4, str4)
		//查找子串
		b := strings.Contains(&amp;quot;seafood&amp;quot;, &amp;quot;foo&amp;quot;)
		fmt.Printf(&amp;quot;b類型是%T,值=%v \n&amp;quot;, b, b)
		//統計符合數量
		c := strings.Count(&amp;quot;sgfjklewshfrrrrrr&amp;quot;, &amp;quot;r&amp;quot;)
		fmt.Printf(&amp;quot;c類型是%T,值=%v \n&amp;quot;, c, c)
		//不分大小寫 (因為==是分的)
		d := strings.EqualFold(&amp;quot;ABCd&amp;quot;, &amp;quot;aBcD&amp;quot;)
		fmt.Printf(&amp;quot;d類型是%T,值=%v \n&amp;quot;, d, d)
		//查找第一次出現的子串位置
		i := strings.Index(&amp;quot;sdaf654abc&amp;quot;, &amp;quot;a&amp;quot;)
		fmt.Printf(&amp;quot;i類型是%T,值=%v \n&amp;quot;, i, i)
		//查找最後出現的子串位置
		l := strings.LastIndex(&amp;quot;sdaf654abc&amp;quot;, &amp;quot;a&amp;quot;)
		fmt.Printf(&amp;quot;l類型是%T,值=%v \n&amp;quot;, l, l)
		//替換文字
		str5 := &amp;quot;瘟疫之地有瘟疫,瘟疫病人身上有瘟疫&amp;quot;
		r := strings.Replace(str5, &amp;quot;瘟疫&amp;quot;, &amp;quot;痔瘡&amp;quot;, 2)
		fmt.Println(&amp;quot;原句&amp;quot;, str5)
		fmt.Printf(&amp;quot;r類型是%T,值=%v \n&amp;quot;, r, r)
		//依照指定的字串分割成切片
		s := strings.Split(&amp;quot;hello,world,ok&amp;quot;, &amp;quot;,&amp;quot;)
		fmt.Printf(&amp;quot;s類型是%T,值=%v \n&amp;quot;, s, s)
		//大小寫轉換
		cap := &amp;quot;DDDDssss&amp;quot;
		cap = strings.ToLower(cap)
		fmt.Println(cap)
		cap = strings.ToUpper(cap)
		fmt.Println(cap)
		//去掉左右兩邊空格
		sp := strings.TrimSpace(&amp;quot;  KJHF JKLH LKJ  ..   &amp;quot;)
		fmt.Println(sp)
		//去掉左右指定 //TrimLeft // TrimRight
		lr := strings.Trim(&amp;quot;!!KJHFJHG!!!&amp;quot;, &amp;quot;!&amp;quot;)
		fmt.Println(lr)
		//判斷開頭或結束  //HasSuffix
		s6 := strings.HasPrefix(&amp;quot;ftp://192.164.2.1&amp;quot;, &amp;quot;ftp&amp;quot;)
		fmt.Printf(&amp;quot;s6類型是%T,值=%v \n&amp;quot;, s6, s6)
	}
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E8%AA%B2go-%E5%AD%97%E4%B8%B2%E8%BD%89%E6%8F%9B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-ini解析器</title>
        <link>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-ini%E8%A7%A3%E6%9E%90%E5%99%A8/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-ini%E8%A7%A3%E6%9E%90%E5%99%A8/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-ini%E8%A7%A3%E6%9E%90%E5%99%A8/ -&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;用來解析.ini文檔格式是否有問題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;reflect&amp;quot;
	&amp;quot;strings&amp;quot;
)

type RedisConfig struct {
	Host     string `ini:&amp;quot;host&amp;quot;`
	Port     int    `ini:&amp;quot;port&amp;quot;`
	Password string `ini:&amp;quot;password&amp;quot;`
	Database int    `ini:&amp;quot;database&amp;quot;`
}
type MysqlConfig struct {
	Address  string `ini:&amp;quot;address&amp;quot;`
	Port     int    `ini:&amp;quot;port&amp;quot;`
	Password string `ini:&amp;quot;password&amp;quot;`
	Username string `ini:&amp;quot;username&amp;quot;`
}

type Config struct {
	MysqlConfig `ini:&amp;quot;mysql&amp;quot;`
	RedisConfig `ini:&amp;quot;redis&amp;quot;`
}

func loadIni(fileName string, data interface{}) (err error) {
	// 0. 參數校驗
	// 0.1 傳來的data必須是結構體類型指針
	t := reflect.TypeOf(data)
	// fmt.Println(t.Kind())
	if t.Kind() != reflect.Ptr {
		err = fmt.Errorf(&amp;quot;傳來的data必須是指針&amp;quot;)
		return
	}
	if t.Elem().Kind() != reflect.Struct {
		err = fmt.Errorf(&amp;quot;傳來的data必須是結構體類型指針&amp;quot;)
		return
	}
	// 1. 讀取文件~&amp;gt;Byte類型
	b, err := ioutil.ReadFile(fileName)
	if err != nil {
		return
	}
	//轉成字符串
	lineSlice := strings.Split(string(b), &amp;quot;\r\n&amp;quot;)
	// fmt.Println(lineSlice)
	// 2. 一行一行讀取數據
	var structName string
	for idx, line := range lineSlice {
		line = strings.TrimSpace(line) //去除多餘空格
		// 2.1 如果是註釋就跳過
		if strings.HasPrefix(line, &amp;quot;;&amp;quot;) || strings.HasPrefix(line, &amp;quot;#&amp;quot;) {
			continue
		}
		//純空行就跳過
		if len(line) == 0 {
			continue
		}
		// 2.2 如果是[]開頭表示是節
		if strings.HasPrefix(line, &amp;quot;[&amp;quot;) {
			if line[0] != &#39;[&#39; || line[len(line)-1] != &#39;]&#39; {
				err = fmt.Errorf(&amp;quot;line:%d syntax error&amp;quot;, idx+1)
				return
			}
			//去掉這行的首尾跟空格拿到內容
			section := strings.TrimSpace(line[1 : len(line)-1])
			if len(section) == 0 {
				err = fmt.Errorf(&amp;quot;line:%d syntax error&amp;quot;, idx+1)
				return
			}
			//根據section去data反射對應的結構體
			for i := 0; i &amp;lt; t.Elem().NumField(); i++ {
				field := t.Elem().Field(i)
				if section == field.Tag.Get(&amp;quot;ini&amp;quot;) {
					//說明找到了，把字段名記下
					structName = field.Name
					fmt.Println(section, structName)
				}

			}

		} else {
			// 2.3 剩下的就是分割的鍵值對
			//先排除異常的行
			if strings.Index(line, &amp;quot;=&amp;quot;) == -1 || strings.HasPrefix(line, &amp;quot;=&amp;quot;) {
				err = fmt.Errorf(&amp;quot;line:%d syntax error&amp;quot;, idx+1)
				return
			}
			index := strings.Index(line, &amp;quot;=&amp;quot;)
			key := strings.TrimSpace(line[:index])
			// value := strings.TrimSpace(line[:index+1])
			v := reflect.ValueOf(data)
			sValue := v.Elem().FieldByName(structName) //拿到嵌套結構體的值信息
			sType := sValue.Type()                     //拿到嵌套結構體的類型信息
			if sType.Kind() != reflect.Struct {
				err = fmt.Errorf(&amp;quot;%s應該為一個結構體&amp;quot;, structName)
				return
			}
			var fieldName string
			//遍歷嵌套結構體每一個字段 判斷tag是否=key
			for i := 0; i &amp;lt; sValue.NumField(); i++ {
				field := sType.Field(i)
				if field.Tag.Get(&amp;quot;ini&amp;quot;) == key {
					fieldName = field.Name
					break
				}
			}
			//根據fieldName取出字段賦值
			fileObj := sValue.FieldByName(fieldName)
			fmt.Println(fieldName, fileObj)
		}

	}
	return
}

func main() {
	var cfg Config
	err := loadIni(&amp;quot;C:/config.ini&amp;quot;, &amp;amp;cfg)
	if err != nil {
		panic(err)
	}
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-ini%E8%A7%A3%E6%9E%90%E5%99%A8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-txt文本批次取代器</title>
        <link>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-txt%E6%96%87%E6%9C%AC%E6%89%B9%E6%AC%A1%E5%8F%96%E4%BB%A3%E5%99%A8/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-txt%E6%96%87%E6%9C%AC%E6%89%B9%E6%AC%A1%E5%8F%96%E4%BB%A3%E5%99%A8/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-txt%E6%96%87%E6%9C%AC%E6%89%B9%E6%AC%A1%E5%8F%96%E4%BB%A3%E5%99%A8/ -&lt;h1 id=&#34;實作練習-txt文本批次取代器&#34;&gt;實作練習-txt文本批次取代器&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;自己寫用來一次取代多個名詞，去除多餘空格或符號等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;quot;bufio&amp;quot;
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;os&amp;quot;
	&amp;quot;strings&amp;quot;
)

var data []string = make([]string, 128)

func main() {
	readByBufio()
	for _, v := range data {
		if v == &amp;quot;&amp;quot; {
			break
		}
		fmt.Print(v)
	}

}
func readByBufio() {
	file, err := os.Open(&amp;quot;C:/test.txt&amp;quot;)
	if err != nil {
		fmt.Printf(&amp;quot;os.Open err %s\n&amp;quot;, err)
		return
	}
	defer file.Close()
	reader := bufio.NewReader(file)
	for i := 0; ; i++ {
		line, err := reader.ReadString(&#39;\n&#39;)
		if err == io.EOF {
			return
		}
		if err != nil {
			fmt.Printf(&amp;quot;reader.ReadString err %s\n&amp;quot;, err)
			return
		}
		line = strings.ReplaceAll(line, &amp;quot;++&amp;quot;, &amp;quot;+&amp;quot;) //去除多餘++
		line = strings.ReplaceAll(line, &amp;quot;  &amp;quot;, &amp;quot; &amp;quot;) //去除多餘空格
		line = strings.ReplaceAll(line, &amp;quot;*&amp;quot;, &amp;quot;&amp;quot;)   //去除多餘*
		line = strings.ReplaceAll(line, &amp;quot;AAAA&amp;quot;, &amp;quot;BBBB&amp;quot;)
		line = strings.ReplaceAll(line, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;)
		data[i] = line
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-txt%E6%96%87%E6%9C%AC%E6%89%B9%E6%AC%A1%E5%8F%96%E4%BB%A3%E5%99%A8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-多人聊天室</title>
        <link>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/ -&lt;h1 id=&#34;實作練習-多人聊天室&#34;&gt;實作練習-多人聊天室&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本來很傻的檔案代碼一個一個貼，後來學了github的專案管理就放到那了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yoziming/go-practice-chatroom&#34;&gt;https://github.com/yoziming/go-practice-chatroom&lt;/a&gt;&lt;/p&gt;
- https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-客戶名單管理系統</title>
        <link>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%AE%A2%E6%88%B6%E5%90%8D%E5%96%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%B5%B1/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%AE%A2%E6%88%B6%E5%90%8D%E5%96%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%B5%B1/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%AE%A2%E6%88%B6%E5%90%8D%E5%96%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%B5%B1/ -&lt;h1 id=&#34;實作練習-客戶名單管理系統&#34;&gt;實作練習-客戶名單管理系統&lt;/h1&gt;
&lt;h3 id=&#34;model&#34;&gt;model&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Customer struct {
	Id     int
	Name   string
	Gender string
	Age    int
	Phone  string
	Email  string
}

//使用工廠模式返回一個實例
func NewCustomer(id int, name string, gender string,
	age int, phone string, email string) Customer {
	return Customer{
		Id:     id,
		Name:   name,
		Gender: gender,
		Age:    age,
		Phone:  phone,
		Email:  email,
	}
}

//返回用戶訊息
func (c Customer) GetInfo() string {
	info := fmt.Sprintf(&amp;quot;%v	%v	%v	%v	%v	%v&amp;quot;,
		c.Id, c.Name, c.Gender, c.Age, c.Phone, c.Email)
	return info

}

//用戶創建
func NewCustomer2(name string, gender string,
	age int, phone string, email string) Customer {
	return Customer{
		Name:   name,
		Gender: gender,
		Age:    age,
		Phone:  phone,
		Email:  email,
	}
}

//修改
func (c *Customer) Reset(name string, gender string, age int, phone string, email string) {
	if name != &amp;quot;&amp;quot; {
		c.Name = name
	}
	if gender != &amp;quot;&amp;quot; {
		c.Gender = gender
	}
	if age != 0 {
		c.Age = age
	}
	if phone != &amp;quot;&amp;quot; {
		c.Phone = phone
	}
	if email != &amp;quot;&amp;quot; {
		c.Email = email
	}

}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;view&#34;&gt;view&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
type customerView struct {
	key             string //接收用戶輸入
	loop            bool   //是否循環回到主頁面
	customerService *service.CustomerService
}

//顯示主菜單
func (cv *customerView) mainMenu() {
	for {
		fmt.Println(&amp;quot;\n---客戶訊息管理系統---&amp;quot;)
		fmt.Println(&amp;quot;   1 添加新客戶&amp;quot;)
		fmt.Println(&amp;quot;   2 修改客戶&amp;quot;)
		fmt.Println(&amp;quot;   3 刪除客戶&amp;quot;)
		fmt.Println(&amp;quot;   4 客戶列表&amp;quot;)
		fmt.Println(&amp;quot;   5 退出&amp;quot;)
		fmt.Print(&amp;quot;請選擇(1-5)...&amp;quot;)
		fmt.Scanln(&amp;amp;cv.key)
		switch cv.key {
		case &amp;quot;1&amp;quot;:
			fmt.Println(&amp;quot;你選擇的是...1 添加新客戶&amp;quot;)
			cv.add()
		case &amp;quot;2&amp;quot;:
			fmt.Println(&amp;quot;你選擇的是...2 修改客戶&amp;quot;)
		case &amp;quot;3&amp;quot;:
			fmt.Println(&amp;quot;你選擇的是...3 刪除客戶&amp;quot;)
			cv.delete()
		case &amp;quot;4&amp;quot;:
			fmt.Println(&amp;quot;你選擇的是...4 客戶列表&amp;quot;)
			cv.list()
		case &amp;quot;5&amp;quot;:
			fmt.Println(&amp;quot;你選擇的是...5 退出&amp;quot;)
			cv.loop = false
		default:
			fmt.Println(&amp;quot;輸入有誤，請重新輸入...&amp;quot;)
		}
		if !cv.loop {
			break
		}
	}
	fmt.Println(&amp;quot;你已成功退出客戶訊息管理系統!&amp;quot;)
}

//得到用戶輸入並添加
func (cv *customerView) add() {
	fmt.Println(&amp;quot;---添加新客戶---&amp;quot;)
	fmt.Println(&amp;quot;輸入姓名...&amp;quot;)
	name := &amp;quot;&amp;quot;
	fmt.Scanln(&amp;amp;name)
	fmt.Println(&amp;quot;輸入性別...&amp;quot;)
	gender := &amp;quot;&amp;quot;
	fmt.Scanln(&amp;amp;gender)
	fmt.Println(&amp;quot;輸入年齡...&amp;quot;)
	age := 0
	fmt.Scanln(&amp;amp;age)
	fmt.Println(&amp;quot;輸入電話...&amp;quot;)
	phone := &amp;quot;&amp;quot;
	fmt.Scanln(&amp;amp;phone)
	fmt.Println(&amp;quot;輸入信箱...&amp;quot;)
	email := &amp;quot;&amp;quot;
	fmt.Scanln(&amp;amp;email)
	//構建一個Customer實例
	//id要系統分配
	customer := model.NewCustomer2(name, gender, age, phone, email)
	//調用
	if cv.customerService.Add(customer) {
		fmt.Println(&amp;quot;添加完成!&amp;quot;)
	} else {
		fmt.Println(&amp;quot;添加失敗!&amp;quot;)
	}

}

//修改
// func (cs *customerView) Reset() {
// 	var id int
// 	fmt.Println(&amp;quot;请输入需要修改的用户ID(无需请输入-1)&amp;quot;)
// 	fmt.Scanln(&amp;amp;id)
// 	if id == -1 {
// 		return
// 	}
// 	resetIndex := cs.customerService.FindById(id)
// 	if resetIndex == -1 {
// 		fmt.Println(&amp;quot;改用户不存在&amp;quot;)
// 	} else {
// 		_, name, gender, age, phone, email := cs.customerService[resetIndex].GetInfo()
// 		fmt.Printf(&amp;quot;姓名(%v):&amp;quot;, name)
// 		fmt.Scanln(&amp;amp;name)
// 		fmt.Printf(&amp;quot;性别(%v):&amp;quot;, gender)
// 		fmt.Scanln(&amp;amp;gender)
// 		fmt.Printf(&amp;quot;年龄(%v):&amp;quot;, age)
// 		fmt.Scanln(&amp;amp;age)
// 		fmt.Printf(&amp;quot;电话(%v):&amp;quot;, phone)
// 		fmt.Scanln(&amp;amp;phone)
// 		fmt.Printf(&amp;quot;邮箱(%v):&amp;quot;, email)
// 		fmt.Scanln(&amp;amp;email)
// 		cs.customerService.List()[resetIndex].Reset(name, gender, age, phone, email)

// 	// }

// }

//刪除用戶
func (cv *customerView) delete() {
	fmt.Println(&amp;quot;---刪除客戶---&amp;quot;)
	fmt.Println(&amp;quot;輸入ID(-1=退出)...&amp;quot;)
	id := -1
	fmt.Scanln(&amp;amp;id)
	if id == -1 {
		return //放棄刪除
	}
	fmt.Println(&amp;quot;確認是否刪除?(Y/N)&amp;quot;)
	var choice string = &amp;quot;&amp;quot;
	fmt.Scanln(&amp;amp;choice)
	if choice == &amp;quot;y&amp;quot; || choice == &amp;quot;Y&amp;quot; {
		if cv.customerService.Delete(id) {
			fmt.Println(&amp;quot;刪除完成!&amp;quot;)
		} else {
			fmt.Println(&amp;quot;刪除失敗，該ID不存在&amp;quot;)
		}
	}

}

//顯示所有客戶信息
func (cv *customerView) list() {
	customers := cv.customerService.List()
	fmt.Println(&amp;quot;---客戶列表---&amp;quot;)
	fmt.Println(&amp;quot;編號\t姓名\t性別\t年齡\t電話\t信箱&amp;quot;)
	for i := range customers {
		fmt.Println(customers[i].GetInfo())

	}

	fmt.Println(&amp;quot;---客戶列表末尾---&amp;quot;)
}

func main() {
	//創建一個customerView的實例並運行顯示
	customerView := customerView{
		key:  &amp;quot;&amp;quot;,
		loop: true,
	}
	//對customerService字段初始化
	customerView.customerService = service.NewCustomerService()

	customerView.mainMenu()
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;controler&#34;&gt;controler&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//完成對Customer的操作
type CustomerService struct {
	customers []model.Customer
	//聲明一個字段，表示當前切片有幾個客戶
	customerNum int //還能作為新客戶的id+1
}

//寫一個方法返回*CustomerService，就是Customer的切片
func NewCustomerService() *CustomerService {
	customerService := &amp;amp;CustomerService{}
	//初始化一個客戶
	customerService.customerNum = 1
	customer := model.NewCustomer(1, &amp;quot;摺紙&amp;quot;, &amp;quot;女&amp;quot;, 15, &amp;quot;110&amp;quot;, &amp;quot;001@x.mail&amp;quot;)
	customerService.customers = append(customerService.customers, customer)
	return customerService

}

//返回客戶切片
func (cs *CustomerService) List() []model.Customer {
	return cs.customers
}

//添加客戶到customer切片
func (cs *CustomerService) Add(customer model.Customer) bool {
	//添加一個分配ID的規則
	cs.customerNum++
	customer.Id = cs.customerNum
	cs.customers = append(cs.customers, customer)
	return true
}

//根據id尋找對應切片的下標
func (cs *CustomerService) FindById(id int) int {
	index := -1 //找不到則返回-1
	for i := 0; i &amp;lt; len(cs.customers); i++ {
		if cs.customers[i].Id == id {
			//找到了
			index = i
		}
	}
	return index
}

//刪除
func (cs *CustomerService) Delete(id int) bool {
	index := cs.FindById(id)
	if index == -1 {
		return false
	}
	//從切片中刪除一個元素
	cs.customers = append(cs.customers[:index], cs.customers[index+1:]...)
	return true
}

//修改

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%AE%A2%E6%88%B6%E5%90%8D%E5%96%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%B5%B1/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-家庭收支小app</title>
        <link>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E5%B0%8Fapp/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E5%B0%8Fapp/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E5%B0%8Fapp/ -&lt;h1 id=&#34;實作練習-家庭收支小app&#34;&gt;實作練習-家庭收支小app&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type MyMoney struct {
	key     string  //鍵入值
	note    string  //收支說明
	balance float64 //餘額
	money   float64 //收支
	flag    bool    //判斷是否有明細
	details string  //詳細
	loop    bool    //循環
}

//綁定方法
func (mm *MyMoney) MainMenu() {
	for {
		if !mm.loop {
			break
		}
		fmt.Println(&amp;quot;\n-----------------家庭收支记账软件-----------------&amp;quot;)
		fmt.Println(&amp;quot;                  1 收支明细&amp;quot;)
		fmt.Println(&amp;quot;                  2 登记收入&amp;quot;)
		fmt.Println(&amp;quot;                  3 登记支出&amp;quot;)
		fmt.Println(&amp;quot;                  4 退出软件&amp;quot;)
		fmt.Print(&amp;quot;請選擇(1-4)...&amp;quot;)
		fmt.Scanln(&amp;amp;mm.key)

		switch mm.key {
		case &amp;quot;1&amp;quot;:
			mm.showDetails()
		case &amp;quot;2&amp;quot;:
			mm.income()
		case &amp;quot;3&amp;quot;:
			mm.outcome()
		case &amp;quot;4&amp;quot;:
			mm.exit()
		default:
			fmt.Println(&amp;quot;輸入錯誤，返回主選單&amp;quot;)
		}
	}
}

func (mm *MyMoney) showDetails() {
	fmt.Println(&amp;quot;\n-----------------收支明细-----------------&amp;quot;)
	if mm.flag {
		fmt.Println(mm.details)
	} else {
		fmt.Println(&amp;quot;當前沒有明細&amp;quot;)
	}
}

func (mm *MyMoney) income() {
	fmt.Println(&amp;quot;\n-----------------登记收入-----------------&amp;quot;)
	fmt.Println(&amp;quot;輸入收入金額...&amp;quot;)
	fmt.Scanln(&amp;amp;mm.money)
	mm.balance += mm.money
	fmt.Println(&amp;quot;輸入收入說明...&amp;quot;)
	fmt.Scanln(&amp;amp;mm.note)
	mm.details += fmt.Sprintf(&amp;quot;\n收入\t%v\t	%v\t	%v&amp;quot;, mm.balance, mm.money, mm.note)
	mm.flag = true
}

func (mm *MyMoney) outcome() {
	fmt.Println(&amp;quot;本次支出金额:&amp;quot;)
	fmt.Scanln(&amp;amp;mm.money)
	//这里需要做一个必要的判断
	mm.balance -= mm.money
	fmt.Println(&amp;quot;本次支出说明:&amp;quot;)
	fmt.Scanln(&amp;amp;mm.note)
	mm.details += fmt.Sprintf(&amp;quot;\n支出\t%v\t	%v\t	%v&amp;quot;, mm.balance, mm.money, mm.note)
	mm.flag = true
}

func (mm *MyMoney) exit() {
	fmt.Println(&amp;quot;確定使否退出?(Y/N)&amp;quot;)
	choice := &amp;quot;&amp;quot;
	for {
		fmt.Scanln(&amp;amp;choice)
		if choice == &amp;quot;Y&amp;quot; || choice == &amp;quot;N&amp;quot; {
			break
		}
		fmt.Println(&amp;quot;錯誤，確定使否退出?(Y/N)&amp;quot;)
	}
	if choice == &amp;quot;Y&amp;quot; {
		fmt.Println(&amp;quot;\n-----------------結束-----------------&amp;quot;)
		mm.loop = false
	} else {
		mm.loop = true
	}
}

//工廠模式
func NewMyMoney() *MyMoney {
	return &amp;amp;MyMoney{
		key:     &amp;quot;&amp;quot;,
		loop:    true,
		balance: 10000.0,
		money:   0.0,
		note:    &amp;quot;&amp;quot;,
		flag:    false,
		details: &amp;quot;收支\t账户金额\t收支金额\t说 明&amp;quot;,
	}
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E5%AE%B6%E5%BA%AD%E6%94%B6%E6%94%AF%E5%B0%8Fapp/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-點對點聊天</title>
        <link>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E9%BB%9E%E5%B0%8D%E9%BB%9E%E8%81%8A%E5%A4%A9/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E9%BB%9E%E5%B0%8D%E9%BB%9E%E8%81%8A%E5%A4%A9/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E9%BB%9E%E5%B0%8D%E9%BB%9E%E8%81%8A%E5%A4%A9/ -&lt;h1 id=&#34;實作練習-點對點聊天&#34;&gt;實作練習-點對點聊天&lt;/h1&gt;
&lt;h3 id=&#34;servergo&#34;&gt;server.go&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	fmt.Println(&amp;quot;服務器開始監聽&amp;quot;)
	listen, err := net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;0.0.0.0:8888&amp;quot;) //0.0.0.0 寫4位ip v4 v6都能用
	if err != nil {
		fmt.Println(&amp;quot;監聽失敗&amp;quot;, err)
		return
	}
	defer listen.Close() //主程式退出後就關閉監聽
	// fmt.Printf(&amp;quot;listen succes=%v\n&amp;quot;, listen)
	for {
		//開啟監聽端口8888
		time.Sleep(time.Microsecond)
		fmt.Println(&amp;quot;等待連接中...&amp;quot;)
		conn, err := listen.Accept()
		if err != nil {
			fmt.Println(&amp;quot;Accept()err=&amp;quot;, err)
		} else {
			fmt.Printf(&amp;quot;conn suc con=%v 客戶端ip=%v\n&amp;quot;, conn, conn.RemoteAddr().String())
		}
		//準備啟動一個協程
		go process(conn)
	}
}

func process(conn net.Conn) {
	//循環接收客戶端送來的數據
	defer conn.Close()
	fmt.Printf(&amp;quot;服務器等待%s客戶端輸入...\n&amp;quot;, conn.RemoteAddr().String())
	for {
		//創建一個新的切片
		buf := make([]byte, 1024)
		n, err := conn.Read(buf) //從conn讀取
		//等待客戶端通過conn發送信息
		//如果客戶端沒有write,那協程就阻塞在這

		if err != nil {
			fmt.Println(&amp;quot;客戶端Read err&amp;quot;, err)
			return
		}
		fmt.Print(string(buf[:n])) //不用換行因為接收來的就包含\n
		//來的是一個byte切片 讀到[:n]剛好，後面還有玩意不是要的
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;clientgo&#34;&gt;client.go&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	conn, err := net.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;127.0.0.1:8888&amp;quot;)
	if err != nil {
		fmt.Println(&amp;quot;client dial err=&amp;quot;, err)
		return
	}
	fmt.Printf(&amp;quot;conn suc con=%v 主機端ip=%v\n&amp;quot;, conn, conn.RemoteAddr().String())
	//客戶端讀取輸入行

	for {

		reader := bufio.NewReader(os.Stdin) //代表標準輸入(終端)
		fmt.Println(&amp;quot;等待輸入... (exit=離開)&amp;quot;)
		data, err := reader.ReadString(&#39;\n&#39;) //代表接受到\n為止
		if err != nil {
			fmt.Println(&amp;quot;ReadString&amp;quot;, err)
		}
		//如果輸入exit就退出
		line := strings.Trim(data, &amp;quot;\n\r&amp;quot;)
		if line == &amp;quot;exit&amp;quot; {
			fmt.Println(&amp;quot;客戶端已退出&amp;quot;)
			break
		}
		//從客戶端發送數據
		n, err := conn.Write([]byte(data))
		if err != nil {
			fmt.Println(&amp;quot;conn.Write&amp;quot;, err)
		}
		fmt.Printf(&amp;quot;客戶端發送了%d字節的數據\n&amp;quot;, n)

	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-%E5%B0%9A%E8%AA%B2go-%E5%AF%A6%E4%BD%9C%E7%B7%B4%E7%BF%92-%E9%BB%9E%E5%B0%8D%E9%BB%9E%E8%81%8A%E5%A4%A9/ - yoziming</description>
        </item>
    
    
  </channel>
</rss> 