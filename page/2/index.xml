<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>柚子茶室</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Yoziming</copyright>
    <lastBuildDate>Sun, 10 Apr 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>常用類:String相關類與方法</title>
        <link>https://yoziming.github.io/post/211205-agg-ja-20/</link>
        <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211205-agg-ja-20/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211205-agg-ja-20/ -&lt;h1 id=&#34;string類&#34;&gt;String類&lt;/h1&gt;
&lt;h3 id=&#34;string類特性&#34;&gt;String類特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;表示字符串，內容以&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;包裹表示，稱為字面量的定義方式&lt;/li&gt;
&lt;li&gt;是一個&lt;code&gt;final&lt;/code&gt;類，不可被繼承&lt;/li&gt;
&lt;li&gt;實現了&lt;code&gt;Serializable&lt;/code&gt;接口，可以序列化&lt;/li&gt;
&lt;li&gt;實現了&lt;code&gt;Comparable&lt;/code&gt;接口，表示可以比較大小&lt;/li&gt;
&lt;li&gt;內部定義了一個&lt;code&gt;final char[] value&lt;/code&gt;數組來實際儲存數據，代表不可變的字符序列
&lt;ul&gt;
&lt;li&gt;當我們用字面量(區別於&lt;code&gt;new&lt;/code&gt;)定義了一個&lt;code&gt;String str1=&amp;quot;abc&amp;quot;&lt;/code&gt;，相當於在方法區的字符串常量池中新增了一個&lt;code&gt;&amp;quot;abc&amp;quot;&lt;/code&gt;序列，其為不可變的&lt;/li&gt;
&lt;li&gt;字符串常量池中不會儲存內容相同的字符串，比如我再新增一個&lt;code&gt;str2=&amp;quot;abc&amp;quot;&lt;/code&gt;，則他們指向同一地址。
&lt;ul&gt;
&lt;li&gt;延伸&lt;code&gt;str6=&amp;quot;a&amp;quot;+&amp;quot;bc&amp;quot;&lt;/code&gt;，在聲明時字面量相加，等於常量跟常量拼接，都是在常量池，所以指向同樣位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而當我把&lt;code&gt;str1=&amp;quot;hello&amp;quot;&lt;/code&gt;，或是用&lt;code&gt;+&lt;/code&gt;拼接了其他內容，或是用&lt;code&gt;replace&lt;/code&gt;取代了其中某一位的字，都是在常量池重新開闢空間，所謂不可變是這個意思&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果是用&lt;code&gt;String str3=new String(&amp;quot;abc&amp;quot;);&lt;/code&gt;方法生成，則是創在堆中，str3本身是指向堆的地址，去比&lt;code&gt;==&lt;/code&gt;都是&lt;code&gt;false&lt;/code&gt;。這個動作實際開闢了2個記憶體空間，它在堆中的value才指向常量池
&lt;ul&gt;
&lt;li&gt;如果是&lt;code&gt;new&lt;/code&gt;一個構造器生成時賦予的name傳入形參則跟&lt;code&gt;new&lt;/code&gt; String是不同的，傳入形參也是類似於字面量的方法(因為顯然多在堆中開闢位置是毫無必要的)&lt;/li&gt;
&lt;li&gt;若是用+拼接有任何涉及到變量的，例如&lt;code&gt;str4=str1+&amp;quot;def&amp;quot;&lt;/code&gt;，都是相當於在堆空間&lt;code&gt;new&lt;/code&gt;的操作，&lt;code&gt;==&lt;/code&gt;去比較時全都&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;但如果變量被&lt;code&gt;final&lt;/code&gt;修飾(正常不會有人這麼做)，相當於這個變量存在常量池，又會是常量跟常量拼接，所以指向同樣位置&lt;/li&gt;
&lt;li&gt;若是用&lt;code&gt;intern()&lt;/code&gt;方法，例如&lt;code&gt;str5=str1.intern();&lt;/code&gt;，返回值是在常量池中，&lt;code&gt;==&lt;/code&gt;比較是&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面試題-判斷結果&#34;&gt;面試題-判斷結果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;StringTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String str = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;good&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] ch = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;change&lt;/span&gt;(String str, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] ch) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;bad&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ch[0] = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        StringTest ex = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; StringTest();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ex.&lt;span style=&#34;color:#658b00&#34;&gt;change&lt;/span&gt;(ex.&lt;span style=&#34;color:#658b00&#34;&gt;str&lt;/span&gt;, ex.&lt;span style=&#34;color:#658b00&#34;&gt;ch&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(ex.&lt;span style=&#34;color:#658b00&#34;&gt;str&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(ex.&lt;span style=&#34;color:#658b00&#34;&gt;ch&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// best
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;切記傳形參時，引用類型傳的是地址值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這個案例中形參只是正好也叫&lt;code&gt;str&lt;/code&gt;而已，仔細看編譯器提示它應該會是灰色的，因為根本沒用到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;change的&lt;code&gt;str&lt;/code&gt;是方法的形參，當屬性的&lt;code&gt;str&lt;/code&gt;作為實參傳入時，把屬性&lt;code&gt;str&lt;/code&gt;的地址給了形參&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;形參&lt;code&gt;str&lt;/code&gt;指向方法區造了一個&lt;code&gt;&amp;quot;bad&amp;quot;&lt;/code&gt;，但也沒用到然後隨著方法結束就消亡了。而屬性&lt;code&gt;str&lt;/code&gt;仍然指向&lt;code&gt;&amp;quot;good&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ch的狀況同理，它的地址被傳進去給了形參，形參跟實參都是指向同一個位置，地址指向的首位元素被改成了b，所以改變&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而若使用&lt;code&gt;this.str = &amp;quot;bad&amp;quot;;&lt;/code&gt;，形參叫啥名字、或有無這個&lt;code&gt;string&lt;/code&gt;的形參根本都無所謂，是等同於在其他地方&lt;code&gt;str = &amp;quot;bad&amp;quot;;&lt;/code&gt;，在方法區常量池中重新開闢並重新賦值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string常用方法&#34;&gt;String常用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int length()&lt;/code&gt;:返回字數(一個中英文字母都是1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;char charAt(index)&lt;/code&gt;:返回指定下標，小心越位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean isEmpty()&lt;/code&gt;:返回是否空字串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean equals(Object obj)&lt;/code&gt;:比較內容是否相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean equalsIgnoreCase(String str)&lt;/code&gt;:忽略大小寫比較內容是否相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String concat(String str2)&lt;/code&gt;:將str2拼接到後面，等同於&amp;quot;&lt;code&gt;+&lt;/code&gt;&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int CompareTo(String str2)&lt;/code&gt;:根據字符串編碼，拿調用者減去&lt;code&gt;str2&lt;/code&gt;，可以用在排序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String toLowerCase()&lt;/code&gt;:返回一份全轉為小寫的副本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String toUpperCase()&lt;/code&gt;:返回一份全轉為大寫的副本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String trim()&lt;/code&gt;:刪除前後的空格(中間的不算)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String substring(int 開始,結尾)&lt;/code&gt;:根據下標取切片，左閉右開(含頭不含尾)，結尾可省略
&lt;ul&gt;
&lt;li&gt;即是說想從頭複製到尾形參是&lt;code&gt;(0,length)&lt;/code&gt;，注意超過會溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean endsWith(String str)&lt;/code&gt;:返回是否以&lt;code&gt;str&lt;/code&gt;結尾，區分大小寫，長度不限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean startsWith(String str)&lt;/code&gt;:返回是否以&lt;code&gt;str&lt;/code&gt;開頭，區分大小寫，長度不限
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolean startsWith(String str,int 下標)&lt;/code&gt;:從指定下標開始(含)算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean contains(String str)&lt;/code&gt;:返回是否包含一個以上&lt;code&gt;str&lt;/code&gt;，區分大小寫，長度不限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int indexOf(String str)&lt;/code&gt;:返回第一次匹配到&lt;code&gt;str&lt;/code&gt;的下標，區分大小寫，長度不限。-1表示無
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int indexOf(String str,int 下標)&lt;/code&gt;:從指定下標開始(含)算&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int lastIndexOf(String str)&lt;/code&gt;:返回最後一次匹配到&lt;code&gt;str&lt;/code&gt;的下標，區分大小寫，長度不限。-1表示無
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int lastIndexOf(String str,int 下標)&lt;/code&gt;:從指定下標開始(含)反向搜索(往左搜)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;當&lt;/code&gt;indexOf&lt;code&gt;與&lt;/code&gt;lastIndexOf`返回相同，要嘛只存在一個解，要嘛都-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String replace(string 舊,新)&lt;/code&gt;:拿舊換新，區分大小寫，長度不限，預設全部取代&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String replaceAll(string 正則,新)&lt;/code&gt;:正則式替換，全部取代&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String replaceFirst(string 正則,新)&lt;/code&gt;:正則式替換，只取代第一個匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean match(string 正則)&lt;/code&gt;:匹配是否符合正則&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String[] split(string 正則)&lt;/code&gt;:依照正則切分成字符串的數組
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String[] split(string 正則,int limit)&lt;/code&gt;:最多切成幾個元素，超過全放在最後&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string類基本數據轉換複習&#34;&gt;String類、基本數據轉換(複習)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;轉成基本數據、包裝類:&lt;code&gt;Integer.parseInt(str)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;基本數據、包裝類轉String:&lt;code&gt;String.valueOf(num)&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;或是直接&lt;code&gt;str2=num+&amp;quot;&amp;quot;;&lt;/code&gt;  // 是在堆裡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;轉成char[]:&lt;code&gt;toCharArray()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;反轉，直接調用構造器&lt;code&gt;= new String(arr)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;轉成byte[]:getBytes()，會返回位元組(字節)，預設編碼&lt;code&gt;utf-8&lt;/code&gt;(中文字大多是3位)，utf-8本身是一個可變長度的編碼方式
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getBytes(字元編碼)&lt;/code&gt;:也可以指定編碼&lt;/li&gt;
&lt;li&gt;反轉，一樣調用構造器&lt;code&gt;= new String(arr)&lt;/code&gt;，形參也可以加,&amp;ldquo;指定編碼&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;stringbuffer&#34;&gt;StringBuffer&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;面試重點題&lt;/th&gt;
&lt;th&gt;字符序列&lt;/th&gt;
&lt;th&gt;特性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;不可變&lt;/td&gt;
&lt;td&gt;改變等於新創，效率最低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringBuffer&lt;/td&gt;
&lt;td&gt;可變&lt;/td&gt;
&lt;td&gt;線程安全、效率低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringBuilder&lt;/td&gt;
&lt;td&gt;可變&lt;/td&gt;
&lt;td&gt;線程不安全、效率高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;以下沒特別講都是&lt;code&gt;StringBuffer&lt;/code&gt;跟&lt;code&gt;StringBuilder&lt;/code&gt;都共有的特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;底層都是&lt;code&gt;char[]&lt;/code&gt;，但不同於&lt;code&gt;String&lt;/code&gt;有&lt;code&gt;final&lt;/code&gt;修飾，&lt;code&gt;StringBuffer&lt;/code&gt;的內容是可變的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new StringBuffer&lt;/code&gt;或&lt;code&gt;StringBuilder&lt;/code&gt;時，&lt;code&gt;capacity&lt;/code&gt;預設容量是16，注意容量不等於當前長度&lt;code&gt;length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;當使用&lt;code&gt;append&lt;/code&gt;拼接其他內容時，會先判斷是否超過容量，超過就創立一個新的數組容量是原有*2再+2，把原來的複製過去再拼接&lt;/li&gt;
&lt;li&gt;超過太多會考慮直接計算欲拼接完的字符長度來當新容量&lt;/li&gt;
&lt;li&gt;實際開發中，由於拼接複製效率低，最好在構造時就預想好需使用的容量，&lt;code&gt;StringBuffer(int capacity)&lt;/code&gt;、&lt;code&gt;StringBuilder(int capacity)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stringbuffer常用方法&#34;&gt;StringBuffer常用方法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;範圍沒特別說都是左閉右開(含頭不含尾)，預設返回都是對&lt;code&gt;this&lt;/code&gt;操作&lt;/p&gt;
&lt;p&gt;都是&lt;code&gt;StringBuffer&lt;/code&gt;跟&lt;code&gt;StringBuilder&lt;/code&gt;共有的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;append(xxx)&lt;/code&gt;:拼接，內容xxx都視為String拚上去&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete(int start,int end)&lt;/code&gt;:刪除指定範圍的內容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace(首,尾,str)&lt;/code&gt;:取代指定範圍的內容為str&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setCharAt(index,ch)&lt;/code&gt;:修改指定位內容為ch&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert(index,str)&lt;/code&gt;:從指定位置插入str，插完的index位即是str開頭&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reverse()&lt;/code&gt;:序列反轉&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indexOf(String str)&lt;/code&gt;:返回第一次匹配到str的下標，區分大小寫，長度不限。-1表示無&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string算法題練習&#34;&gt;String算法題練習&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CharCount&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 获取一个字符串在另一个字符串中出现的次数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//比如：获取&amp;#34; ab&amp;#34;在&amp;#34;abkkcadkabkebfkabkskab&amp;#34; 中出现的次数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String s0 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abkkcadkabkebfkabkskab&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//        String s0 = &amp;#34;abkkcadkabkebfkabababababababababababababerg654erg654erg564abababkskab&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String st = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ab&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; count = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (s0.&lt;span style=&#34;color:#658b00&#34;&gt;contains&lt;/span&gt;(st)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String s1 = s0.&lt;span style=&#34;color:#658b00&#34;&gt;replace&lt;/span&gt;(st, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] c1 = s1.&lt;span style=&#34;color:#658b00&#34;&gt;toCharArray&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(c1));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; c1.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (c1[i] == 64) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    count++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            count = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;次數=&amp;#34;&lt;/span&gt; + count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    老師思路:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    while包住，用indexOf(子str,index)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    匹配有，就count++，index+=子str長度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Reverse&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 将一个字符串进行反转。将字符串中指定部分进行反转。比如&amp;#34;abcdefg&amp;#34;反转为&amp;#34;abfedcg&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; left = 2; &lt;span style=&#34;color:#228b22&#34;&gt;// 擷取左邊保留位數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; right = 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 擷取右邊倒數保留位數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abcdefghijk&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String s2 = str.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(left, str.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;() - right);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;欲反轉順序區=&amp;#34;&lt;/span&gt; + s2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] rs2 = s2.&lt;span style=&#34;color:#658b00&#34;&gt;toCharArray&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; rs2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; / 2; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt; c = rs2[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            rs2[i] = rs2[rs2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1 - i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            rs2[rs2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1 - i] = c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;反轉後=&amp;#34;&lt;/span&gt; + Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(rs2));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String rrs2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String(rs2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String str3 = str.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(0, left) + rrs2 + str.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(str.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;() - right);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;最終=&amp;#34;&lt;/span&gt; + str3);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;老師的思路一:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;不切出sub數組，而是在for循環直接換位
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;for(int x=左,y=右;x&amp;lt;y;x++,y--){
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;char temp=arr[x];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;arr[x]=arr[y]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;思路二:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;切出來，倒著遍歷數組，拼成一個反著的string，再接回去
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;思路三:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;切出來，用stringBuilder裝，反轉
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Contain&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 4.获取两个字符串中最大相同子串。比如：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//str1 = &amp;#34;abcwerthelloyuiodef&amp;#34;;str2 = &amp;#34;cvhellobnm&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//前提，只存在一解
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;//提示：将短的那个串进行长度依次递减的子串与较长的串比较。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        String str1 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;abcwerthelloyuiodef&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String str2 = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;cvhellobnm&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String ans = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; str2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;(); i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String str3 = str2.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (str1.&lt;span style=&#34;color:#658b00&#34;&gt;contains&lt;/span&gt;(str3)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ans = str3;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                String str4 = str2.&lt;span style=&#34;color:#658b00&#34;&gt;substring&lt;/span&gt;(i, str2.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;() - 1 - i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (str1.&lt;span style=&#34;color:#658b00&#34;&gt;contains&lt;/span&gt;(str4)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ans = str4;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;ans=&amp;#34;&lt;/span&gt; + ans);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;    老師思路:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;用兩個循環包住，外部控制位數從長度--，內部一個個去切，直到contains符合
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;類的不可變性:底層是一個&lt;code&gt;final char[]&lt;/code&gt;，長度跟內容自然不可變，改變都是新造一個重給地址&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211205-agg-ja-20/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>多線程:安全&amp;通信、Callable接口與線程池</title>
        <link>https://yoziming.github.io/post/211204-agg-ja-19/</link>
        <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211204-agg-ja-19/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211204-agg-ja-19/ -&lt;h1 id=&#34;線程安全&#34;&gt;線程安全&lt;/h1&gt;
&lt;h3 id=&#34;線程的生命週期&#34;&gt;線程的生命週期&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Thread.State&lt;/code&gt;類中定義了:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建:&lt;code&gt;Thread&lt;/code&gt;類的物件被創建&lt;/li&gt;
&lt;li&gt;就緒:&lt;code&gt;start()&lt;/code&gt;後等待分配CPU資源的階段，可能是獲取了同步鎖、被&lt;code&gt;notify()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;運行:拿到實際資源、開始執行&lt;code&gt;run()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;阻塞:被暫時掛起，可能是&lt;code&gt;sleep()&lt;/code&gt;或是被&lt;code&gt;join()&lt;/code&gt;、或等待同步鎖、&lt;code&gt;wait()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;死亡:跑完或提前&lt;code&gt;stop()&lt;/code&gt;、出錯了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;同步代碼塊&#34;&gt;同步代碼塊&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解決多線程安全問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (同步器) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 需要同步的代碼
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步器可以是任何物件，只需要滿足&amp;quot;&lt;strong&gt;它是多個線程共用的&lt;/strong&gt;&amp;quot;，比如同類中的一個變量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若是靠實現&lt;code&gt;Runnable&lt;/code&gt;接口方法的多線程，可以用&lt;code&gt;this&lt;/code&gt;，因為只有一個該類，當前對象是同一個&lt;/li&gt;
&lt;li&gt;如果是繼承類實現的多線程，則可以用&lt;code&gt;static變量&lt;/code&gt;，或是考慮&amp;quot;&lt;code&gt;類名.class&lt;/code&gt;&amp;quot;(這玩意也是唯一的)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但這樣做實質等於單線程了，效率不高&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;同步方法&#34;&gt;同步方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解決多線程安全問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SynTest&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ticket = 100;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; ticket &amp;gt; 0; ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Thread.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(10);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;賣票&amp;#34;&lt;/span&gt; + ticket);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ticket--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SynTest s1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SynTest();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread thread0 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread thread1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread thread2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread0.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把要鎖的地方提取出來，寫成一個&lt;code&gt;synchronized&lt;/code&gt;修飾的方法，切記不是寫在&lt;code&gt;run()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非靜態的同步方法，此時的同步器=&lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同理，若是由繼承類實現的多線程，它必然是一個靜態方法(加上static的)，此時的同步器是&lt;code&gt;類.class&lt;/code&gt;(類本身)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;懶漢單例模式改進&#34;&gt;懶漢單例模式改進&lt;/h3&gt;
&lt;p&gt;雙重判斷是為了增加效率，同時也線程安全了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Bank &lt;span style=&#34;color:#008b45&#34;&gt;getInstance&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (Bank.&lt;span style=&#34;color:#658b00&#34;&gt;class&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                instance=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Bank();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;死鎖deadlock&#34;&gt;死鎖deadlock&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不同的線程分別占用對方需要的同步資源不放棄，都在等待對方釋出資源，就形成死鎖&lt;/li&gt;
&lt;li&gt;形成死鎖後不會報錯，只會互相阻塞無法繼續&lt;/li&gt;
&lt;li&gt;解法:專門的算法、原則，盡量減少定義同步資源，盡量避免嵌套同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可重入鎖reentrantlock&#34;&gt;可重入鎖ReentrantLock&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;解決線程安全問題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;造一個&lt;code&gt;ReentrantLock&lt;/code&gt;類的物件 (Reentrant=可重入)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上鎖，然後用&lt;code&gt;try&lt;/code&gt;把要保護的地方包起來&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;finally&lt;/code&gt;區塊寫上解鎖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.locks.ReentrantLock&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;SynTest&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; ticket = 100;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; ReentrantLock lock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ReentrantLock(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            lock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 這裡加鎖
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (ticket &amp;gt; 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;賣票&amp;#34;&lt;/span&gt; + ticket);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ticket--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                lock.&lt;span style=&#34;color:#658b00&#34;&gt;unlock&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 這裡解鎖，切記
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        SynTest s1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; SynTest();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread thread0 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread thread1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread thread2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(s1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread0.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;new ReentrantLock(true);&lt;/code&gt;後面的true表示是一個公平鎖，先入先出；預設沒寫則=false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同樣的，若是由繼承類實現的多線程，new lock時還要加上static&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優勢在於Lock可以靈活手動控制，而synchronized只能自動&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;練習lock&#34;&gt;練習Lock&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;同時存錢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.locks.ReentrantLock&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Account&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; balance = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ReentrantLock lock = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; ReentrantLock(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;deposit&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; amt) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lock.&lt;span style=&#34;color:#658b00&#34;&gt;lock&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (amt &amp;gt; 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                balance = balance + amt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;存錢成功&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;餘額&amp;#34;&lt;/span&gt; + balance);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            lock.&lt;span style=&#34;color:#658b00&#34;&gt;unlock&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Customer&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Thread {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Account acct;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Customer&lt;/span&gt;(Account acct) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;acct&lt;/span&gt; = acct;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 3; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            acct.&lt;span style=&#34;color:#658b00&#34;&gt;deposit&lt;/span&gt;(1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;BankTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Account acct = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Account();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Customer c1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(acct);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Customer c2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(acct);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        c1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        c2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;線程的通信&#34;&gt;線程的通信&lt;/h1&gt;
&lt;h3 id=&#34;方法&#34;&gt;方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wait()&lt;/code&gt;:使當前線程進入阻塞狀態，並釋放同步器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notifly()&lt;/code&gt;:喚醒被wait的一個線程，若有多個則喚醒優先極高的那個&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notifyAll()&lt;/code&gt;:全叫醒&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;限制&#34;&gt;限制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三個方法必須位於同步代碼塊或同步方法中&lt;/li&gt;
&lt;li&gt;三個方法的調用者必須是同一個的計數器，例如都是&lt;code&gt;this&lt;/code&gt;；否則會&lt;code&gt;IllegalMonitorStateException&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;從任何物件都能成為計數器可以得知，這些方法都是位於&lt;code&gt;Object&lt;/code&gt;類中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;範例&#34;&gt;範例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Number&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num = 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Object obj = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Object();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;notify&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// this可省略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (num &amp;lt;= 100) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        Thread.&lt;span style=&#34;color:#658b00&#34;&gt;sleep&lt;/span&gt;(1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + num);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        num++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;wait&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// this可省略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#228b22&#34;&gt;// 注意要先執行完才wait，否則會多一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ComTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Number number = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Number();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread thread1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(number);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread thread2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(number);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread1.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;t1&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread2.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;t2&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        thread2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;面試題-sleep與wait&#34;&gt;面試題-sleep與wait&lt;/h3&gt;
&lt;p&gt;相同:都能使當前線程進入阻塞&lt;/p&gt;
&lt;p&gt;相異:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;sleep()&lt;/th&gt;
&lt;th&gt;wait()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;調用的主體&lt;/td&gt;
&lt;td&gt;Thread類&lt;/td&gt;
&lt;td&gt;Object類&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用的位置&lt;/td&gt;
&lt;td&gt;任意場景&lt;/td&gt;
&lt;td&gt;同步代碼塊或方法中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;重新就緒條件&lt;/td&gt;
&lt;td&gt;設定的時間&lt;/td&gt;
&lt;td&gt;等到被notify為止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;是否釋放同步器&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;經典例題-生產者與消費者&#34;&gt;經典例題-生產者與消費者&lt;/h3&gt;
&lt;p&gt;可能同時有複數的生產者跟消費者都在使用同一個資源(產品)，它們共同的屬性:經過店員當作中轉&lt;/p&gt;
&lt;p&gt;所以造一個店員類，店員擁有這個資源(產品)作為屬性&lt;/p&gt;
&lt;p&gt;而生產者跟消費者都繼承&lt;code&gt;Thread&lt;/code&gt;類，並且以同一個店員作為構造器生成物件(生出來的實例都有同一個&amp;quot;店員&amp;quot;屬性，所以可以拿這個店員當共同的計數器，實現線程間的溝通&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Clerk&lt;/span&gt; { &lt;span style=&#34;color:#228b22&#34;&gt;// 店員
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; Product = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;launchProduct&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Product &amp;lt; 20) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Product++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:上架第&amp;#34;&lt;/span&gt; + Product + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;個產品&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            notify(); &lt;span style=&#34;color:#228b22&#34;&gt;// 上架了就能喚醒消費者
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                wait();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sellProduct&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Product &amp;gt; 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;:消費了第&amp;#34;&lt;/span&gt; + Product + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;個產品&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Product--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            notify(); &lt;span style=&#34;color:#228b22&#34;&gt;// 消費了就能喚醒生產者
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                wait();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Producer&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Thread {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Clerk clerk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(getName() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;開始生產商品&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sleep(100);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            clerk.&lt;span style=&#34;color:#658b00&#34;&gt;launchProduct&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Producer&lt;/span&gt;(Clerk clerk) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;clerk&lt;/span&gt; = clerk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Customer&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Thread {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Clerk clerk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Customer&lt;/span&gt;(Clerk clerk) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;clerk&lt;/span&gt; = clerk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(getName() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;開始消費商品&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                sleep(1000);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            clerk.&lt;span style=&#34;color:#658b00&#34;&gt;sellProduct&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ProductTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Clerk c1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Clerk();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Customer cus = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(c1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Customer cus2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(c1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Producer pro = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Producer(c1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cus.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;消費者&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cus2.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;消費者2&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pro.&lt;span style=&#34;color:#658b00&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;生產者&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cus.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cus2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pro.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;jdk50新增的線程特性&#34;&gt;JDK5.0新增的線程特性&lt;/h1&gt;
&lt;h3 id=&#34;callable接口&#34;&gt;Callable接口&lt;/h3&gt;
&lt;p&gt;與&lt;code&gt;Runnable&lt;/code&gt;相比，&lt;code&gt;Callable&lt;/code&gt;有以下優勢:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以有&lt;strong&gt;返回值&lt;/strong&gt;，並支持泛型的返回值&lt;/li&gt;
&lt;li&gt;方法可以&lt;strong&gt;拋出異常&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;需要藉助&lt;code&gt;FutureTask&lt;/code&gt;類，例如獲取返回結果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;future接口&#34;&gt;Future接口&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以對具體&lt;code&gt;Runnable&lt;/code&gt;、&lt;code&gt;Callable&lt;/code&gt;任務的執行結果進行取消、查詢等等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FutureTask&lt;/code&gt;類是&lt;code&gt;Future&lt;/code&gt;接口的唯一實現類&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FutureTask&lt;/code&gt;同時實現了&lt;code&gt;Runnable&lt;/code&gt;與&lt;code&gt;Future&lt;/code&gt;接口，他既可以做為&lt;code&gt;Runnable&lt;/code&gt;被線程執行，也可以作為&lt;code&gt;Future&lt;/code&gt;獲取&lt;code&gt;Callable&lt;/code&gt;的返回值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法三-實現callable接口&#34;&gt;方法三-實現Callable接口&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;其實跟&lt;code&gt;Runnable&lt;/code&gt;沒差多少，就是多套了一層&lt;code&gt;FutureTask&lt;/code&gt;當中轉來解決返回值跟拋異常的需求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;創建一個自訂類實現&lt;code&gt;Callable&lt;/code&gt;接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在自訂類實現&lt;code&gt;call&lt;/code&gt;方法，裡面放進想多線程的代碼(類似於&lt;code&gt;run&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建此自訂類的實例物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將剛剛創立的物件作為形參傳遞到&lt;code&gt;FutureTask&lt;/code&gt;構造器中，創立&lt;code&gt;FutureTask&lt;/code&gt;類的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將剛剛創立的&lt;code&gt;FutureTask&lt;/code&gt;物件作為形參傳遞到&lt;code&gt;Thread&lt;/code&gt;構造器，創立&lt;code&gt;Thread&lt;/code&gt;類的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以此&lt;code&gt;Thread&lt;/code&gt;類物件調用&lt;code&gt;start()&lt;/code&gt;方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若想獲取返回值，使用&lt;code&gt;FutureTask類的物件.get()&lt;/code&gt;，並且此方法可以拋出異常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.Callable&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.ExecutionException&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.FutureTask&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;NumThread&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Callable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#008b45&#34;&gt;call&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 100; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sum += i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;CallTest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NumThread numThread = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NumThread();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        FutureTask futureTask = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; FutureTask(numThread);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(futureTask).&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Object sum = futureTask.&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;總合為&amp;#34;&lt;/span&gt; + sum);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (ExecutionException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;方法四-使用線程池&#34;&gt;方法四-使用線程池&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;實際開發中使用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;ExecutorService 接口名 = Executors.newFixedThreadPool();&lt;/code&gt;創造指定線程數量的線程池接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設置線程池的各種屬性，他們的關係其實是這樣:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ThreadPoolExecutor extends AbstractExecutorService&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AbstractExecutorService implements ExecutorService&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所以可以向下強轉接口得到方便設置屬性的物件&lt;code&gt;ThreadPoolExecutor 物件名= (ThreadPoolExecutor) 接口名;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;線程池接口.execute&lt;/code&gt;調用&lt;code&gt;Runnable&lt;/code&gt;方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;線程池接口.submit&lt;/code&gt;調用&lt;code&gt;Callable&lt;/code&gt;方法，或再加&lt;code&gt;.get()&lt;/code&gt;獲取返回值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;線程池接口.shutdown()&lt;/code&gt;關閉線程池&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.concurrent.*&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;NumThread1&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 10; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-i=&amp;#34;&lt;/span&gt; + i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;NumThread2&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Callable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#008b45&#34;&gt;call&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 10; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-i=&amp;#34;&lt;/span&gt; + i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sum += i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; sum;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;ThreadPool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//        1. 使用ExecutorService 接口名 = Executors.newFixedThreadPool();創造指定線程數量的線程池接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ExecutorService service = Executors.&lt;span style=&#34;color:#658b00&#34;&gt;newFixedThreadPool&lt;/span&gt;(5);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//        2. 設置線程池的各種屬性
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        ThreadPoolExecutor serviceObj = (ThreadPoolExecutor) service;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(service.&lt;span style=&#34;color:#658b00&#34;&gt;getClass&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        serviceObj.&lt;span style=&#34;color:#658b00&#34;&gt;setCorePoolSize&lt;/span&gt;(15);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        serviceObj.&lt;span style=&#34;color:#658b00&#34;&gt;setKeepAliveTime&lt;/span&gt;(100, TimeUnit.&lt;span style=&#34;color:#658b00&#34;&gt;MILLISECONDS&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//        3. 線程池接口.execute調用Runnable方法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        service.&lt;span style=&#34;color:#658b00&#34;&gt;execute&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NumThread1());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//        4. 線程池接口.submit調用Callable方法，或再加.get()獲取返回值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Object obj = service.&lt;span style=&#34;color:#658b00&#34;&gt;submit&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; NumThread2()).&lt;span style=&#34;color:#658b00&#34;&gt;get&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;返回值=&amp;#34;&lt;/span&gt; + obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (ExecutionException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//        5. 線程池接口.shutdown()關閉線程池
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        service.&lt;span style=&#34;color:#658b00&#34;&gt;shutdown&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;線程的就緒:被&lt;code&gt;notify&lt;/code&gt;、獲取了同步器&lt;/li&gt;
&lt;li&gt;線程的阻塞:&lt;code&gt;sleep&lt;/code&gt;、&lt;code&gt;wait&lt;/code&gt;、被&lt;code&gt;join&lt;/code&gt;、等待同步器&lt;/li&gt;
&lt;li&gt;同步器:必須是多個線程間共用的物件，要嘛是&lt;code&gt;this&lt;/code&gt;、要嘛&lt;code&gt;static&lt;/code&gt;的則是&lt;code&gt;類.class&lt;/code&gt;本身&lt;/li&gt;
&lt;li&gt;確保線程安全時，鎖的性能考慮:&lt;code&gt;ReentranLock&lt;/code&gt; &amp;gt; 同步代碼塊 &amp;gt; 同步方法&lt;/li&gt;
&lt;li&gt;創建多線程的4種方式與關鍵點
&lt;ul&gt;
&lt;li&gt;繼承&lt;code&gt;Thread&lt;/code&gt;類:用&lt;code&gt;static&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;實現&lt;code&gt;Runnable&lt;/code&gt;接口:用&lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;實現&lt;code&gt;Callable&lt;/code&gt;接口:可返回，用&lt;code&gt;FutureTask&lt;/code&gt;中轉&lt;/li&gt;
&lt;li&gt;線程池:便於開發使用，記得關&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211204-agg-ja-19/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>IntelliJ IDEA Live Templates</title>
        <link>https://yoziming.github.io/post/211203-idea-live-templates/</link>
        <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211203-idea-live-templates/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211203-idea-live-templates/ -&lt;h1 id=&#34;intellij-idea-live-templates&#34;&gt;IntelliJ IDEA Live Templates&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;盤點IDEA中Tab的實用招式，再配上alt+insert就能橫著走了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;基本聲明&#34;&gt;基本聲明&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;psvm或main &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; main 方法
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;st &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; String
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prsf &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;psf &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    psfi &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    psfs &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; String
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;創立物件&#34;&gt;創立物件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;類名.&lt;span style=&#34;color:#658b00&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類名()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類名().&lt;span style=&#34;color:#658b00&#34;&gt;var或&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 類 物件名 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類名().&lt;span style=&#34;color:#658b00&#34;&gt;field&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 在方法外聲明一個成員變量&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;並在這裡初始化一個
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;print&#34;&gt;print&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sout &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;souf &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;say something&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;sout&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;say something&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;sout&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;soutv&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;obj = &amp;#34;&lt;/span&gt; + obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 標準錯誤輸出流，這個無緩衝，顯示的位置可能跟你想像的不同
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;serr&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; System.&lt;span style=&#34;color:#658b00&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;遍歷相關&#34;&gt;遍歷相關&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fori &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; ; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;itar &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iter &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; foreach
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;數組或集合物件.&lt;span style=&#34;color:#658b00&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; foreach
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;數組物件.&lt;span style=&#34;color:#658b00&#34;&gt;forr&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; i &amp;gt;= 0; i--) &lt;span style=&#34;color:#228b22&#34;&gt;// 反向
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;itit &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 遍歷&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (iterator.&lt;span style=&#34;color:#658b00&#34;&gt;hasNext&lt;/span&gt;()) { iterator.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;類型轉換&#34;&gt;類型轉換&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 適用於多態物件，例如Object obj = new String();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;instr &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 檢查包含 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; 的物件類型並向下轉換
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;cast&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; ((String) obj)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;((String) obj).&lt;span style=&#34;color:#658b00&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; String obj1 = (String) obj;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;也可以一次搞定
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;castvar&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; String s = (String) obj;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;if相關&#34;&gt;if相關&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bool.&lt;span style=&#34;color:#658b00&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (bool) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (obj == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;nn&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (obj != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;異常相關&#34;&gt;異常相關&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;執行語句();.try ▶ 用try-catch包裹

thr ▶ throw new

new RuntimeException().throw ▶ throw new RuntimeException();
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;some string&amp;#34;&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 格式化字串
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;物件.&lt;span style=&#34;color:#658b00&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; (obj) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj.&lt;span style=&#34;color:#658b00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; obj;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在方法上/** + Enter &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;▶&lt;/span&gt; 產生方法與參數說明
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/211203-idea-live-templates/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>多線程:基礎、Thread類、用法</title>
        <link>https://yoziming.github.io/post/211203-agg-ja-18/</link>
        <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211203-agg-ja-18/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211203-agg-ja-18/ -&lt;h1 id=&#34;多線程&#34;&gt;多線程&lt;/h1&gt;
&lt;h3 id=&#34;名詞解釋&#34;&gt;名詞解釋&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;英文&lt;/th&gt;
&lt;th&gt;台灣&lt;/th&gt;
&lt;th&gt;中國&lt;/th&gt;
&lt;th&gt;意義&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Program&lt;/td&gt;
&lt;td&gt;程式&lt;/td&gt;
&lt;td&gt;程序&lt;/td&gt;
&lt;td&gt;靜態的程式碼集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Process&lt;/td&gt;
&lt;td&gt;程序(進程)&lt;/td&gt;
&lt;td&gt;進程&lt;/td&gt;
&lt;td&gt;動態、被執行中且載入記憶體的program，也是 OS 分配資源的最小單位。打開工作管理員看到的就是這個&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Thread&lt;/td&gt;
&lt;td&gt;執行緒&lt;/td&gt;
&lt;td&gt;線程&lt;/td&gt;
&lt;td&gt;一個進程裡至少會有一個線程，表示內部的一條執行路徑。把進程比喻為一個工廠，線程則是工廠裡面的工人，負責任務的實際執行。同一個Process內的Thread使用相同的Memory Space，但這些Thread各自擁有其Stack。換句話說，Thread能透過reference存取到相同的Object，但是local variable卻是各自獨立的。白話:共享方法區跟堆，獨立棧跟計數器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Coroutine&lt;/td&gt;
&lt;td&gt;協程&lt;/td&gt;
&lt;td&gt;協程&lt;/td&gt;
&lt;td&gt;輕量級的執行緒，由使用者掌控，例如GO的goroutine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Concurrent&lt;/td&gt;
&lt;td&gt;並行&lt;/td&gt;
&lt;td&gt;並發&lt;/td&gt;
&lt;td&gt;一個 CPU 會去做多件事，但是同一個時間點之內只會做一件事，像是早上做 Job1、下午做 Job2、晚上做 Job3不斷的切換，目標是希望能做更多的事&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Parallel&lt;/td&gt;
&lt;td&gt;平行&lt;/td&gt;
&lt;td&gt;並行&lt;/td&gt;
&lt;td&gt;多個 CPU 在同一個時間點內會去做多件事，例如會有三個人同時分別在做 Job1、Job2、Job3 的事情。目標是希望能把事情更快速的做完。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;需求來源&#34;&gt;需求來源&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;希望同時執行複數的任務，例如一邊執行main方法，GC一邊收垃圾&lt;/li&gt;
&lt;li&gt;需要等待的狀況，例如等用戶輸入、等IO、等網路連接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java多線程-方法一&#34;&gt;Java多線程-方法一&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;造一個類，繼承&lt;code&gt;Thread&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重寫此類的&lt;code&gt;run&lt;/code&gt;方法(將想多線程執行的代碼包進去)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實例化此類的一個物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;透過此物件調用&lt;code&gt;start();&lt;/code&gt;，此時啟動此線程並且調用他的&lt;code&gt;run()&lt;/code&gt;方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若想再啟動另一條線程，需要再new一個物件，同一物件start多次會報&lt;code&gt;IllegalThreadStateException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyThread&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Thread {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 2 == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;新造#####&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 2 == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;主線程*****&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MyThread t1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; MyThread();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 10000; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 2 != 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;匿名類?????&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;也可以透過匿名類的方法&lt;code&gt;new Thread(){//要執行的代碼}.start();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;thread類的常用方法&#34;&gt;Thread類的常用方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start()&lt;/code&gt;:啟動當前線程、調用其&lt;code&gt;run()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;currentThread()&lt;/code&gt;:靜態方法，返回當前執行代碼的線程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getName()&lt;/code&gt;:獲取當前線程的名字，常與&amp;quot;&lt;code&gt;currentThread().getName()&lt;/code&gt;&amp;ldquo;這樣連用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setName(String)&lt;/code&gt;:設定線程名，在&lt;code&gt;start&lt;/code&gt;前後都有用，也可以用&lt;code&gt;Thread.currentThread().setName(&amp;quot;設定主線程名&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yeild()&lt;/code&gt;:靜態方法，釋放當前線程的執行權(但也有可能馬上又搶回)，會拋異常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;join()&lt;/code&gt;:在線程A中調用線程B的&lt;code&gt;join()&lt;/code&gt;，此時A就阻塞，等B完全做完才繼續A。白話:在我的地盤說&lt;code&gt;誰.join&lt;/code&gt;就是我讓誰插隊&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sleep(毫秒)&lt;/code&gt;:當前線程休息，休息時是阻塞的，會拋異常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isAlive()&lt;/code&gt;:判斷當前線程是否存活&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setDaemon(true)&lt;/code&gt;:轉為守護線程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;線程的優先級&#34;&gt;線程的優先級&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;寫在Thread中的，最小是1，預設是5，最大是10&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MIN_PRIORITY = 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; NORM_PRIORITY = 5;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MAX_PRIORITY = 10;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getPriority()&lt;/code&gt;:獲取優先級&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setPriority(int)&lt;/code&gt;:設置優先級&lt;/li&gt;
&lt;li&gt;但並不是說高優先就一定先執行完，只是機率上的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java多線程-方法二&#34;&gt;Java多線程-方法二&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;造一個實現Runnable接口的類&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實現其中的抽象方法&lt;code&gt;run()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建實現類的實例物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將此物件作為參數，傳到&lt;code&gt;Thread&lt;/code&gt;類的構造器中，創建&lt;code&gt;Thread&lt;/code&gt;類的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通過此&lt;code&gt;Thread類的物件&lt;/code&gt;調用&lt;code&gt;start()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自訂的類是作為形參，想再創一個線程只要&lt;code&gt;new Thread&lt;/code&gt;即可，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyThread2&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Runnable {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;run&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 100; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#658b00&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; + i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;test&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MyThread2 m2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; MyThread2();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread t1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(m2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t1.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Thread t2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Thread(m2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t2.&lt;span style=&#34;color:#658b00&#34;&gt;start&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優勢在於&lt;strong&gt;只造了一個類&lt;/strong&gt;，假如類中有個屬性需要被共用，不管後面造了多少線程都是共用這個變量(而不需使用&lt;code&gt;static&lt;/code&gt;宣告)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;還一個優勢在於，本身類可能已經有繼承對象了，而我只要實現接口就可以&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其實方法一點開源碼看也是方法二，實際就優先用方法二吧&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;多線程的核心就是重寫&lt;code&gt;run()&lt;/code&gt;、調用&lt;code&gt;start()&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211203-agg-ja-18/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>項目練習3-開發團隊調度系統</title>
        <link>https://yoziming.github.io/post/211202-agg-ja-17/</link>
        <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211202-agg-ja-17/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211202-agg-ja-17/ -&lt;h1 id=&#34;項目練習3-開發團隊調度系統&#34;&gt;項目練習3-開發團隊調度系統&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;雖然不是特別難，實做一遍還是會遇到不少坑，以下個人復盤的筆記&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A類中用到B類的物件，引包後可以直接&amp;quot;&lt;code&gt;private B類 物件名=new B類();&lt;/code&gt;&amp;ldquo;一個預設的來用&lt;/li&gt;
&lt;li&gt;忽略大小寫可用&lt;code&gt;equalsIgnoreCase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;繼承的子類重複用到結構類似的方法，提取出相同因子在父類做一個&lt;code&gt;public&lt;/code&gt;的然後去子類各自重寫，也能用來解決孫子&lt;code&gt;super&lt;/code&gt;不到爺爺的困境&lt;/li&gt;
&lt;li&gt;遍歷時注意&lt;code&gt;.length&lt;/code&gt;的長度是在數組建立時就&lt;strong&gt;定死了&lt;/strong&gt;，絕對不等於當前數組內的元素個數，如果遍歷&lt;code&gt;.length&lt;/code&gt;有可能去遍歷到後面&lt;code&gt;null&lt;/code&gt;的指針而報錯&lt;/li&gt;
&lt;li&gt;單純只是想遍歷最好用&lt;code&gt;foreach&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;手動複製數組使用&lt;code&gt;System.arraycopy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;方法形參是父類，想篩選傳進來的是否為某具體子類，用&lt;code&gt;if(!(物件 instanceof 子類))&lt;/code&gt;可以優雅的判斷&lt;/li&gt;
&lt;li&gt;switch-case如果沒有&lt;code&gt;return&lt;/code&gt;記得&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211202-agg-ja-17/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>利用bat一鍵更新HugoBlog</title>
        <link>https://yoziming.github.io/post/211201-blog-one-key-update/</link>
        <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211201-blog-one-key-update/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211201-blog-one-key-update/ -&lt;h1 id=&#34;一鍵更新&#34;&gt;一鍵更新&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;透過&lt;code&gt;.bat&lt;/code&gt;批次執行檔，一鍵打包+發布&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;首先要安裝git用來推送，這個很基本就不多說&lt;/li&gt;
&lt;li&gt;接著要有權限，讓本機電腦的git可以連上遠端的github的個人倉庫並允許上傳&lt;/li&gt;
&lt;li&gt;具體作法是在本機電腦生成一個key(一串暗號)，然後到個人的github網頁上設定，約好拿這個key來的人就允許上傳，步驟如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;生成本機key&#34;&gt;生成本機key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;隨便開一個cmd，輸入&lt;code&gt;ssh-keygen&lt;/code&gt;後enter執行，開始產生金鑰，沒有想特別設定的可以無腦enter&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ssh-keygen                                   # 產生金鑰
Generating public/private rsa key pair.
Enter file in which to save the key :   
# 金鑰存放路徑，預設會放到我的文件/.ssh
# 放哪不是特別重要，有強迫症可以自己改，否則直接按Enter

Enter passphrase (empty for no passphrase):    # 密碼，可設定可不設定，設定的話每次上傳會多需要輸入一次密碼
Enter same passphrase again:                   # 再輸入一次密碼
The key fingerprint is:                        # 之後會顯示你的 fingerprint，到這裡就完成 key 的產生了
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;將key報備到專案&#34;&gt;將key報備到專案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;到生成的路徑，找id_rsa.pub，右鍵筆記本編輯打開，會看到很長一行開頭是&amp;quot;ssh-rsa &amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.&amp;quot;，全選複製&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128105840868.png&#34; alt=&#34;image-20211128105840868&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回你的github專案&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128105742295.png&#34; alt=&#34;image-20211128105742295&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;內容貼上剛剛複製的那行&lt;/li&gt;
&lt;li&gt;自己給這個key起個名，懶得命名可以取剛剛那串最尾的&amp;quot;使用者@電腦&amp;quot;當名稱&lt;/li&gt;
&lt;li&gt;記得勾選允許&lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建立批次執行檔&#34;&gt;建立批次執行檔&lt;/h3&gt;
&lt;p&gt;起一個.bat檔案，放在hugo的根目錄(跟config.toml同層)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@echo off
set pan=.\public\
set repo=git@github.com:yoziming/yoziming.github.io.git
set branch=master
if exist %pan% (
    echo &amp;#34;clean public directory&amp;#34;
    rd /S /Q %pan%
    echo &amp;#34;Hugo again for new site&amp;#34;
    hugo
) else (
    echo &amp;#34;can not find public directory&amp;#34;
    echo &amp;#34;Hugo again for new site&amp;#34;
    hugo
)
if exist %pan% (
    cd %pan%
    echo &amp;#34;git init and commit&amp;#34;
    git init
    git add --all
    git commit -m &amp;#34;update site at %time%&amp;#34;
    echo &amp;#34;set remote repository and push forcely&amp;#34;
    git remote add origin %repo%
    git push -f origin master:master -v
) else (
    echo &amp;#34;can not find public directory, hugo fail!&amp;#34;
)
pause
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中這2行要自己編輯&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set repo=git@github.com:yoziming/yoziming.github.io.git
// 修改成你的用戶名與倉庫網址
set branch=master
/* branch是倉庫裡的分支，預設有可能是main，這邊是用master
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;更改專案預設分支&#34;&gt;更改專案預設分支&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128104929795.png&#34; alt=&#34;image-20211128104929795&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;更改個人頁面的資料來源&#34;&gt;更改個人頁面的資料來源&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128104750907.png&#34; alt=&#34;image-20211128104750907&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;完成&#34;&gt;完成&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;以後更新只要執行這個bat瞬間就搞定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128105931063.png&#34; alt=&#34;image-20211128105931063&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意這個腳本是每次都把倉庫清空重傳，我本身檔案不多速度很快，如果只想上傳更新的部分可以估狗其他教學，我也有看過相關的辦法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;補充1&#34;&gt;補充1&lt;/h3&gt;
&lt;p&gt;在末尾加入上傳完自動關閉功能&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;#34;ALL DONE&amp;#34;
echo &amp;#34;ALL DONE&amp;#34;
echo &amp;#34;ALL DONE&amp;#34;
echo &amp;#34;waiting for auto exit...&amp;#34;
timeout /t 1
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;補充2&#34;&gt;補充2&lt;/h3&gt;
&lt;p&gt;如果文章時間設在未來然後用draft控制是否顯示的，用-F可以強制把未來日期的文章也一併上傳&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;把有用到hugo指令的地方都改成
hugo -F
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/211201-blog-one-key-update/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>異常處理:try-catch、finally與throws</title>
        <link>https://yoziming.github.io/post/211201-agg-ja-16/</link>
        <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211201-agg-ja-16/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211201-agg-ja-16/ -&lt;h1 id=&#34;異常的分類&#34;&gt;異常的分類&lt;/h1&gt;
&lt;p&gt;在Java中，程序執行中的異常分為&lt;code&gt;Exception&lt;/code&gt;與&lt;code&gt;Error&lt;/code&gt;，他們都繼承自&lt;code&gt;Throwable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(語法錯誤跟邏輯錯誤那不叫異常)&lt;/p&gt;
&lt;h3 id=&#34;error&#34;&gt;Error&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;錯誤，JVM系統內部錯誤虛擬機無法解決的問題、資源耗盡等嚴重情況，比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;無限迴圈產生堆疊溢位(&lt;code&gt;Stack Overflow&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寫錯分配導致記憶體不足(&lt;code&gt;Out-Of-Memory&lt;/code&gt;)，&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解決方法就是把它寫對&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;exception&#34;&gt;Exception&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;例外，發生了出乎預料的事，又依&amp;quot;受不受檢&amp;quot;分成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Checked Exception&lt;/code&gt;:又稱編譯時異常，通常在原始碼中必須顯式地catch並且處理，比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IOException&lt;/code&gt;、讀取文件不存在&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ClassNotFoundException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這部分在compile time就會檢查&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Unchecked Exception&lt;/code&gt;:又稱&lt;code&gt;RuntimeException&lt;/code&gt;，運行時異常，比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NullPointerException&lt;/code&gt;，空指針訪問&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;，數組角標越界&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClassCastException&lt;/code&gt;，類型轉換異常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NumberFormatException&lt;/code&gt;，數字類型不合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InputMismatchException&lt;/code&gt;，輸入數據不符合，例如&lt;code&gt;scan int&lt;/code&gt;結果來了字串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArithmeticException&lt;/code&gt;，算法異常，例如把某數除以0&lt;/li&gt;
&lt;li&gt;通常是透過撰寫相應程式以避免的邏輯錯誤, 可以根據當下的情境來判斷是不是要&lt;code&gt;catch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;異常處理&#34;&gt;異常處理&lt;/h1&gt;
&lt;p&gt;代碼執行時，一旦出現異常，就會在異常處生成一個對應異常類的物件，並將其拋出，拋出後的代碼就不再執行&lt;/p&gt;
&lt;h3 id=&#34;try-catch&#34;&gt;try-catch&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; num = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(str);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 印出異常
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// something
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;try{...}&lt;/code&gt;將可能有異常的代碼段包起來，當運行中異常發生時，走到哪停在哪，且生成一個異常的物件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;catch&lt;/code&gt;預測可能生成的異常物件類，當有對應的就進入處理(類似於switch-case結構)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;catch&lt;/code&gt;想抓的異常類型，如果有子父類關係，必須從小到大，否則報錯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;try&lt;/code&gt;結構中聲明的變量，只能在&lt;code&gt;try&lt;/code&gt;中使用，出了&lt;code&gt;try&lt;/code&gt;就不能再被調用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;try-catch-finally&#34;&gt;try-catch-finally&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#707a7c&#34;&gt;@org.junit.Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;test1&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = method();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(n);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;method&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[3];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr[5]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;異常發生之後的語句&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 不會執行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (ArrayIndexOutOfBoundsException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;抓到對應的異常類&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 先執行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;必執行&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 後執行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 3; &lt;span style=&#34;color:#228b22&#34;&gt;// 最後真正返回的值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;finally&lt;/code&gt;&lt;strong&gt;不是必要&lt;/strong&gt;的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當使用&lt;code&gt;finally&lt;/code&gt;時，只要真的有異常，則其中的語句必定會被執行，即使前面的異常處理有&lt;code&gt;return&lt;/code&gt;、&lt;code&gt;throw new&lt;/code&gt;之類也不管，總之&lt;code&gt;finally&lt;/code&gt;就是要墊底走一趟&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像是資料庫連接、IO輸出入、網路socket等資源，JVM不能自動回收的，我們需要手動寫資源釋放，就會把這塊放在&lt;code&gt;finally&lt;/code&gt;中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;try-catch-finally&lt;/code&gt;可以嵌套使用，例如我要關掉資料庫的連接，上面&lt;code&gt;try&lt;/code&gt;區包了一個連接用的物件conn，出了try區想在&lt;code&gt;finally&lt;/code&gt;區寫&amp;quot;&lt;code&gt;conn.close()&lt;/code&gt;&amp;ldquo;卻編譯報錯不給用，只好再用一個&lt;code&gt;try-catch&lt;/code&gt;把&lt;code&gt;finally&lt;/code&gt;包起來。舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FileInputStream file = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 操作...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (FileNotFoundException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;finally&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (file != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            file.&lt;span style=&#34;color:#658b00&#34;&gt;close&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (IOException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;throws異常類型&#34;&gt;throws+異常類型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式:聲明在方法之後，指明這個方法執行時，可能會拋出的異常類型，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception,RuntimeException{}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拋出的異常類型可以是複數&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;體會:只是將異常拋給方法的調用者，適合用在方法有層層遞進關係的程式碼中，達成一個集中處理提高可讀性。但拋到最後總要有個接鍋俠去try-catch真正解決問題&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果父類的方法沒有拋出，則子類重寫的方法也不能拋出，只能在原地try-catch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子類重寫的方法，拋出的異常類型不能比父類本來拋出的類型還大(兒子犯的錯，要老爸罩得住)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;手動拋出異常&#34;&gt;手動拋出異常&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;想要手動的把某些狀況讓JVM當作是異常來處理，使用關鍵字**&lt;code&gt;throw new 異常類&lt;/code&gt;**，注意沒有s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Test&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Student s1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            s1.&lt;span style=&#34;color:#658b00&#34;&gt;register&lt;/span&gt;(-5);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 當異常發生時，不希望以下的代碼被執行，所以在方法手動拋出
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;生成成功，ID為&amp;#34;&lt;/span&gt; + s1.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (Exception e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//            e.printStackTrace();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(e.&lt;span style=&#34;color:#658b00&#34;&gt;getMessage&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; id) &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (id &amp;gt; 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;id&lt;/span&gt; = id;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Exception(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;數據非法!&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 這邊手動拋
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 或使用throw new RuntimeException(&amp;#34;數據非法!&amp;#34;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 就不需要上面方法處的thorws，但就只是單純報錯停下而無處理
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自定義異常類&#34;&gt;自定義異常類&lt;/h3&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;MyException&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; RuntimeException {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 身分證號
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; serialVersionUID = -70348971907457669L;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 構造器
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;MyException&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;MyException&lt;/span&gt;(String msg) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;super&lt;/span&gt;(msg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;throw&lt;/code&gt;:通常跟&lt;code&gt;new&lt;/code&gt;一起聲明在方法體內，表示在此&lt;strong&gt;必定&lt;/strong&gt;拋出一個異常類的物件，只要執行到這就拋異常並且撒手不幹了，必須有誰來處理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;throws&lt;/code&gt;:是&lt;strong&gt;方法能夠拋出異常的聲明&lt;/strong&gt;，表明調用此方法時&lt;strong&gt;可能&lt;/strong&gt;拋出的異常種類(可以是複數)，誰調用此方法就必須考慮可能發生異常，自己看著辦吧&lt;/li&gt;
&lt;li&gt;兩者都是消極的異常處理，只是&lt;strong&gt;拋出&lt;/strong&gt;或&lt;strong&gt;表明可能拋出&lt;/strong&gt;異常，真正處理終究是需要一個try-catch去處置&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;案例比喻&#34;&gt;案例比喻&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;當&amp;quot;小朋友衝到馬路上&amp;quot;時，&lt;code&gt;throw&lt;/code&gt;一個異常，停止當前方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;照顧小朋友&lt;/span&gt;() &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throws&lt;/span&gt; KidsException {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (小朋友衝到馬路上=&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; KidsException(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;出事了阿北&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#228b22&#34;&gt;// 手動拋出異常
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#228b22&#34;&gt;// 安全，繼續做別的事
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// KidsException是一個自訂的異常類，繼承自Exception
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 如果是RuntimeException通常不會顯式的用try-catch處理
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 運行時異常也不會被要求在方法聲明時顯式的throws
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;throws&lt;/code&gt;是用來修飾&amp;quot;照顧小朋友&amp;quot;這個方法，表示預期某些異常可能發生&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完整的處裡流程:我執行照顧小朋友方法，若發生了異常我就將其&lt;code&gt;catch&lt;/code&gt;起來，呼叫父母處理，實際解決異常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	我.&lt;span style=&#34;color:#658b00&#34;&gt;照顧小朋友&lt;/span&gt;();   &lt;span style=&#34;color:#228b22&#34;&gt;// 此方法用throws修飾了，表示我預期某些異常可能發生
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;catch&lt;/span&gt; (KidsException e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	e.&lt;span style=&#34;color:#658b00&#34;&gt;printStackTrace&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	我.&lt;span style=&#34;color:#658b00&#34;&gt;呼叫父母&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 實際解決異常
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211201-agg-ja-16/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>抽象abstract、接口interface、內部類</title>
        <link>https://yoziming.github.io/post/211130-agg-ja-15/</link>
        <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211130-agg-ja-15/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211130-agg-ja-15/ -&lt;h1 id=&#34;抽象abstract&#34;&gt;抽象abstract&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;隨著繼承不斷疊代，子類越來越具體，而父類越來越通用。&lt;/p&gt;
&lt;p&gt;類的設計必須保證子類與父類共有特徵，有時候我們將父類設計得非常抽象，以至於它沒有具體的實例，這樣的類稱為&lt;strong&gt;抽象類&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;定義&#34;&gt;定義&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;abstract&lt;/code&gt;屬於Java中的關鍵字，可以用來修飾類與方法，以下分別說明&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abstract修飾類&#34;&gt;abstract修飾類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;此類不能實例化&lt;/li&gt;
&lt;li&gt;必定有構造器被繼承&lt;/li&gt;
&lt;li&gt;開發中都會提供抽象類的子類，讓子類形成實例來調用&lt;/li&gt;
&lt;li&gt;不能修飾&lt;code&gt;final&lt;/code&gt;類，&lt;code&gt;final&lt;/code&gt;類規定不能被繼承，玩毛線&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;abstract修飾方法&#34;&gt;abstract修飾方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;稱為抽象方法，只有聲明，沒有方法體 (就沒要讓你具體用)&lt;/li&gt;
&lt;li&gt;此方法不能被調用&lt;/li&gt;
&lt;li&gt;包含抽象方法的類，必定是一個抽象類。反之抽象類不一定要有抽象方法&lt;/li&gt;
&lt;li&gt;實際開發中的調用必須是被子類繼承後重寫，所有的抽象方法都被重寫後此子類才能實例化(否則，存在繼承來的抽象方法你就是個抽象類)&lt;/li&gt;
&lt;li&gt;不能修飾私有&lt;code&gt;private&lt;/code&gt;方法，因為抽象就是為了被繼承，抽象與其矛盾&lt;/li&gt;
&lt;li&gt;不能修飾靜態&lt;code&gt;static&lt;/code&gt;方法，靜態方法跟類共存亡，可以直接被類調用，通常是去弄靜態屬性的，抽象與其矛盾&lt;/li&gt;
&lt;li&gt;不能修飾&lt;code&gt;final&lt;/code&gt;方法，&lt;code&gt;final&lt;/code&gt;方法規定是不能被重寫，抽象與其矛盾&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;應用-模板方法設計&#34;&gt;應用-模板方法設計&lt;/h3&gt;
&lt;p&gt;在軟體開發中，實現某種功能時，整體中很固定、通用的方法，在父類中就寫好了；而其他不確定、易變的就先抽象起來，交給子類去實現&lt;/p&gt;
&lt;h3 id=&#34;匿名子類的匿名對象&#34;&gt;匿名子類的匿名對象&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在一次性使用的場合，不想實際造一個匿名類的實體子類，可以在&lt;code&gt;new 匿名類()&lt;/code&gt;後面接&lt;code&gt;{}&lt;/code&gt;，&lt;code&gt;{&lt;/code&gt;內直接重寫方法，範例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Person&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;work&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Person {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;work&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生讀書&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        method(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        method(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Person() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;work&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用一次的街友&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;method&lt;/span&gt;(Person person) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        person.&lt;span style=&#34;color:#658b00&#34;&gt;work&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;接口interface&#34;&gt;接口interface&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;繼承是is a的關係，例如學生是人，關係重點在於&amp;quot;是不是&amp;quot;；而接口則是&amp;quot;能不能&amp;quot;的關係。Java中，接口跟類是並列的兩個結構(平級關係)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;定義-1&#34;&gt;定義&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用關鍵字&lt;code&gt;interface 接口名{}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK7以前:只能定義全局常量&lt;code&gt;public static final&lt;/code&gt;，和抽象方法&lt;code&gt;public abstract&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK8包含以上兩種，還可以定義靜態方法、預設方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Flyable&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MAX_SPEED = 7900;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; MIN_SPEED = 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 關鍵字可以省略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;fly&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;stop&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 關鍵字可以省略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口中不能定義構造器，它是不能實例化的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口通過讓類實現(&lt;code&gt;implement&lt;/code&gt;)來使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果實現類覆蓋(重寫)了接口中的所有方法，則此實現類可以實例化；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;反之，沒有完全實現接口的類，就只能是一個抽象類&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Plane&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;implements&lt;/span&gt; Flyable{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;fly&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;飛機起飛&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;stop&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;飛機停止&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一個類可以實現多個接口，(算是JAVA彌補單繼承的一個解決方案)，格式範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;A2&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; A1 implement CC,DD,EE
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口之間可以繼承，而且可以多繼承，格式範例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AA&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; BB,CC
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;接口實現了多態性&lt;/li&gt;
&lt;li&gt;接口其實是定義了一種規範&lt;/li&gt;
&lt;li&gt;比如我把某方法的形參用接口，管你啥類只要實現了這個接口，此類實例化的物件就可以調用這個方法，(用起來跟go的沒啥區別)&lt;/li&gt;
&lt;li&gt;Java8特性:
&lt;ul&gt;
&lt;li&gt;接口中定義的靜態方法，只能透過接口去調用(類似工具類)&lt;/li&gt;
&lt;li&gt;預設方法:使用&lt;code&gt;default&lt;/code&gt;修飾，實現類的物件，可以調用接口中的預設方法；若實現時重寫了方法，那調用的還是重寫的方法。只是說用&lt;code&gt;default&lt;/code&gt;修飾，可以免去把抽象方法一一實現的過程而直接調用預設的方法&lt;/li&gt;
&lt;li&gt;如果實現類繼承的父類和實現的接口聲明了同名同參的方法，沒有重寫的情況下，優先調用父類的那個，稱為類優先原則&lt;/li&gt;
&lt;li&gt;如果實現類實現了多個接口，其中存在複數同名同參的方法，在沒有重寫的情況下，報錯-接口衝突&lt;/li&gt;
&lt;li&gt;假如有重寫，但想調用接口中的預設方法:&lt;code&gt;接口名.super.方法名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;內部類inner-class&#34;&gt;內部類inner class&lt;/h1&gt;
&lt;p&gt;Java允許在類A中聲明一個類B，此時B是內部類，A稱為外部類。他們在編譯時都會生成字節碼文件(XX.class)&lt;/p&gt;
&lt;p&gt;內部類可分成:成員內部類(靜態、非靜態)與局部內部類(方法內、代碼塊內、構造器內)，以下細說&lt;/p&gt;
&lt;h3 id=&#34;成員內部類&#34;&gt;成員內部類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作為外部類的成員&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以調用外部類的結構&lt;/li&gt;
&lt;li&gt;可以被&lt;code&gt;static&lt;/code&gt;修飾&lt;/li&gt;
&lt;li&gt;可以被4種權限修飾&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另一方面，本身作為一個類&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;類內可以定義屬性、方法、構造器&amp;hellip;等等&lt;/li&gt;
&lt;li&gt;內部類可以被繼承(甚至可以被其他類以&amp;quot;&lt;code&gt;extends 外部類.內部類&lt;/code&gt;&amp;ldquo;的方式繼承，但如果內部類沒有&lt;code&gt;static&lt;/code&gt;的話，還需要提前建立一個封閉實例，很難搞)，可以被&lt;code&gt;abstract&lt;/code&gt;修飾&lt;/li&gt;
&lt;li&gt;可以被&lt;code&gt;final&lt;/code&gt;修飾來表示不能被繼承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;eat&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;eat something&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Cat&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;小貓睡覺&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Dog&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;小狗看門&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Animal.&lt;span style=&#34;color:#658b00&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;eat&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 調用外部類的方法，
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#228b22&#34;&gt;// 其實&amp;#34;Animal.this.&amp;#34;可以省略
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實例化:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 創建靜態的成員內部類
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Animal.&lt;span style=&#34;color:#658b00&#34;&gt;Cat&lt;/span&gt; c1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal.&lt;span style=&#34;color:#658b00&#34;&gt;Cat&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c1.&lt;span style=&#34;color:#658b00&#34;&gt;show&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 創建非靜態的成員內部類實例，需要先有一個外部成員實例，再用這個實例去new
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Animal a1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Animal.&lt;span style=&#34;color:#658b00&#34;&gt;Dog&lt;/span&gt; d1 = a1.&lt;span style=&#34;color:#658b00&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Dog&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;d1.&lt;span style=&#34;color:#658b00&#34;&gt;show&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;區分調用的屬性或方法:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;用&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;指向當前內部類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;用&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;外部類名.this.&amp;#34;&lt;/span&gt;指向外部類
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;當然最好還是不要有重名的屬性或方法
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編譯時生成字節碼文件格式為&amp;rdquo;&lt;code&gt;外部類$內部類.class&lt;/code&gt;&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;局部內部類&#34;&gt;局部內部類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;局部內部類可以聲明在方法內、代碼塊內、構造器內&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;局部內部類中，若用到其外一層的屬性，則這個屬性必須是&lt;code&gt;final&lt;/code&gt;的，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;someMethod&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age = 18;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;AA&lt;/span&gt; { &lt;span style=&#34;color:#228b22&#34;&gt;// 局部內部類
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;show&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           age=10; &lt;span style=&#34;color:#228b22&#34;&gt;// 會報錯，因為這個age相當於是外面傳進來的副本
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(age);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實際開發中較少用，比較可能見到是在android開發中，某方法為了實現某個接口，而暫時創建的一個局部內部類。類似上面提到過的匿名子類的匿名對象的用法，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 比如點某按鈕就要跳出某訊息的方法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onCreate&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; number = 10;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// View.onClickListener()是一個接口需要被實現
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    button.&lt;span style=&#34;color:#658b00&#34;&gt;setOnClickListener&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; View.&lt;span style=&#34;color:#658b00&#34;&gt;onClickListener&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;onClick&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;點按鈕後產生的訊息&amp;#34;&lt;/span&gt;+number);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編譯時生成字節碼文件格式為&amp;quot;&lt;code&gt;外部類$數字 內部類.class&lt;/code&gt;&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;抽象類:不能實例化、單繼承、有構造器&lt;/li&gt;
&lt;li&gt;接口:不能實例化、多繼承、接口不會有構造器、可以有預設方法&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211130-agg-ja-15/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>關鍵字:static/main/final、代碼塊與單例模式</title>
        <link>https://yoziming.github.io/post/211129-agg-ja-14/</link>
        <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211129-agg-ja-14/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211129-agg-ja-14/ -&lt;h1 id=&#34;關鍵字static&#34;&gt;關鍵字static&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;意義:靜態的，類中共用的，生命週期跟隨類的&lt;/li&gt;
&lt;li&gt;使用對象:屬性、方法、內部類、代碼塊，以下分別說明&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用static修飾屬性&#34;&gt;使用static修飾屬性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;稱為&amp;quot;靜態變量&amp;quot;或&amp;quot;類變量&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先複習關於變量的知識&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211126131625719.png&#34; alt=&#34;image-20211126131625719&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;實例變量是每個造出來的物件各自有的，比如:大明跟小明各自的age不同&lt;/li&gt;
&lt;li&gt;類變量是整個類共用的，比如:大明跟小明的nation都是TW
&lt;ul&gt;
&lt;li&gt;類變量隨著類的加載而加載，可以通過&amp;quot;類.靜態變量&amp;quot;進行調用&lt;/li&gt;
&lt;li&gt;物件沒創建之前類變量就已經存在&lt;/li&gt;
&lt;li&gt;由於類只會加載一次，靜態變量在記憶體中也只存在一份，位於方法區的靜態域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在哪應用靜態屬性:
&lt;ul&gt;
&lt;li&gt;類中共用的，生命週期跟隨類的
&lt;ul&gt;
&lt;li&gt;舉例:構造器中自動生成編號的基數(比如從1001開始、1002..)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常量也常聲明為&lt;code&gt;static&lt;/code&gt;，再加上&lt;code&gt;final&lt;/code&gt;修飾
&lt;ul&gt;
&lt;li&gt;舉例:&lt;code&gt;Math.PI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用static修飾方法&#34;&gt;使用static修飾方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;稱為靜態方法，規則大致與上面相同&lt;/li&gt;
&lt;li&gt;隨著類的加載而加載，可以通過&amp;quot;類.靜態方法&amp;quot;進行調用&lt;/li&gt;
&lt;li&gt;不能在靜態方法中調用非靜態的屬性或方法(畢竟沒有物件)&lt;/li&gt;
&lt;li&gt;在靜態方法中，不能使用&lt;code&gt;this&lt;/code&gt;或&lt;code&gt;super&lt;/code&gt;關鍵字(物件都沒出生當然不能用)&lt;/li&gt;
&lt;li&gt;在哪應用靜態方法:
&lt;ul&gt;
&lt;li&gt;操作靜態屬性的方法，通常設為靜態&lt;/li&gt;
&lt;li&gt;工具類的方法，比如&lt;code&gt;Math&lt;/code&gt;、&lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Collections&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;單例singleton設計模式&#34;&gt;單例(singleton)設計模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定義:整個系統中，強制某個類只存在一個實例，減少資源消耗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;應用場合:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;網站的計數器，只造一個，不然難以同步&lt;/li&gt;
&lt;li&gt;日誌:通常是一個日誌文件一直被開著，最好只有一個實例去操作它&lt;/li&gt;
&lt;li&gt;資料庫的連接池&lt;/li&gt;
&lt;li&gt;Windows的Task Manager跟Recycle Bin也是很典型的單例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;餓漢式&amp;quot;實現:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;私有化的構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;內部創建類靜態的實例 (一上來就造好，只給你訪問這個)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提供外部的靜態方法，返回類的實例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優劣:加載時間長，但線程安全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Bank&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Bank&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Bank instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Bank();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Bank &lt;span style=&#34;color:#008b45&#34;&gt;getInstance&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;懶漢式&amp;quot;實現:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;私有化的構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聲明類的靜態實例，但&lt;strong&gt;不初始化&lt;/strong&gt;(沒用到就不造所以稱為懶)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;聲明外部的、靜態的返回當前類實例的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;優劣:延遲創建，但線程不安全，需要加鎖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Order&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Order&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Order instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// synchronized=上同步鎖
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; Order &lt;span style=&#34;color:#008b45&#34;&gt;getInstance&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (instance == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            instance = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Order();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; instance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字main&#34;&gt;關鍵字main&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;其實就是一個靜態的方法，作為入口，生命週期是跟隨類本身&lt;/li&gt;
&lt;li&gt;以往寫的東西老是造對象然後透過實例調用，其實也可以透過static修飾然後直接&amp;quot;類.屬性或方法&amp;quot;來調用&lt;/li&gt;
&lt;li&gt;形參(&lt;code&gt;String[] args&lt;/code&gt;)，其實就是命令行，可以跟控制台互動在調用的時候加入一些參數&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;代碼塊&#34;&gt;代碼塊&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;類似go中的init，初始化時執行的區塊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定義:在類中用大括弧&lt;code&gt;{}&lt;/code&gt;包裹的區塊&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修飾:只能考慮使用&lt;code&gt;static&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;區別:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;靜態初始化塊:隨著&lt;strong&gt;類的加載&lt;/strong&gt;而執行，而且只執行一次，通常用來初始化類的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非靜態初始化塊:隨著實體&lt;strong&gt;物件的創立&lt;/strong&gt;而執行，在創立物件時，將物件的屬性進行初始化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以存在多個，執行順序按上下決定，但不建議這樣做&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若創立一個物件，代碼塊的執行先於構造器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由父及子，靜態先行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字final&#34;&gt;關鍵字final&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;意義:最終的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用對象:類、方法、變量，以下分別說明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用&lt;code&gt;final&lt;/code&gt;修飾類:此類不能被繼承(絕子絕孫)，例如&lt;code&gt;String&lt;/code&gt;類、&lt;code&gt;System&lt;/code&gt;類、&lt;code&gt;StringBuffer&lt;/code&gt;類&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用final修飾方法:此方法不能被重寫，例如Object類中的&lt;code&gt;getClass();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用final修飾成員變量:修飾實例變量時，此時的&amp;quot;變量&amp;quot;就是一個常變量，即每個物件的這個屬性可能不同，但出生時就定死了不會再改(舉例:每個人的生日)，可以考慮的位置有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顯式初始化&lt;/li&gt;
&lt;li&gt;代碼塊中初始化&lt;/li&gt;
&lt;li&gt;構造器中初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;static final&lt;/code&gt;用來修飾類的屬性(類變量):全局常量，整個類都會用到，加載類的時候就定死不會改的東西，用於:比如物理常數&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用&lt;code&gt;final&lt;/code&gt;修飾局部變量:修飾局部變量時，類似&lt;code&gt;const&lt;/code&gt;，就是一個不能再改的常量，用於:比如想定死一個形參的變量值、寫到一個方法中用到的某變量不想它被改變&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;修飾的屬性:生命週期跟隨類、隨著類加載一次，存在方法區的靜態域&lt;/li&gt;
&lt;li&gt;單例模式:希望整個類只有一個實例達省資源，把構造器私有化，接著分成餓漢模式:提前造一個，對外唯一&lt;code&gt;get&lt;/code&gt;方法調用它；懶漢模式:聲明靜態實例為&lt;code&gt;null&lt;/code&gt;，要用時若&lt;code&gt;null&lt;/code&gt;就造一個給你調用，否則就調生好那個給你用&lt;/li&gt;
&lt;li&gt;代碼塊:起到一個&lt;code&gt;init&lt;/code&gt;的作用，執行優先於構造器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;:不想被繼承的類、不想被重寫的方法、不想被改的變量&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211129-agg-ja-14/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>多態:關鍵字instanceof、Object類與包裝類</title>
        <link>https://yoziming.github.io/post/211128-agg-ja-13/</link>
        <pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211128-agg-ja-13/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211128-agg-ja-13/ -&lt;h1 id=&#34;多態性&#34;&gt;多態性&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;類似go接口的概念，就是為了讓子類能調用父類的方法&lt;/p&gt;
&lt;p&gt;白話:為了實現代碼的通用性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一個事物的多種形態&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父類的引用指向子類的物件(子類的物件賦給父類的引用)，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Father obj = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Child();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用:&lt;strong&gt;虛擬方法調用&lt;/strong&gt;，編譯期只能調用父類中聲明的方法，但運行時執行的是子類重寫父類的方法。多態只有在運行那一個才知道要調用哪個方法，即多態是個&lt;strong&gt;運行時行為&lt;/strong&gt;，又稱為&lt;strong&gt;動態綁定&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白話:&lt;strong&gt;編譯看左，運行看右&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前提:類的繼承關係、方法的重寫，缺一不可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;目的:避免重複寫很多重載的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;體現:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;舉例&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;Person&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;類 之下有子類 &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;Chinese&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`、`&lt;/span&gt;Japanese&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`、`&lt;/span&gt;American&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;Person&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;類有&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;welcome&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;方法&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;被各自子類以該國語言重寫過
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;我的某功能調用&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;welcome&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;時能接受&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;Person&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;依照實際子類物件呈現不同語言的&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;welcome&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;結果
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;該功能即不需要&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;Chinese&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`、`&lt;/span&gt;Japanese&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`、`&lt;/span&gt;American&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;都寫一次
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Atest&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Atest test = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Atest();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               test.&lt;span style=&#34;color:#658b00&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Dog());  &lt;span style=&#34;color:#228b22&#34;&gt;// 多態體現在這
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;func&lt;/span&gt;(Animal animal) { &lt;span style=&#34;color:#228b22&#34;&gt;//Animal animal=new Dog();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        animal.&lt;span style=&#34;color:#658b00&#34;&gt;eat&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        animal.&lt;span style=&#34;color:#658b00&#34;&gt;shout&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;eat&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;動物吃&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;shout&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;動物叫&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Dog&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Animal {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;eat&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;狗吃骨頭&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;shout&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;狗旺旺叫&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 調用資料庫
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Driver&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;doData&lt;/span&gt;(Connection conn) { &lt;span style=&#34;color:#228b22&#34;&gt;// conn=new MySqlConnection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        conn.&lt;span style=&#34;color:#658b00&#34;&gt;method1&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只適用於方法，&lt;strong&gt;屬性沒有多態&lt;/strong&gt;!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白話:屬性全看左&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;小復習&#34;&gt;小復習&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 面試陰險考點
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Child objC = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Child() &lt;span style=&#34;color:#228b22&#34;&gt;// 造一個子類物件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Father objF=objC; &lt;span style=&#34;color:#228b22&#34;&gt;// 子類物件賦值給父類形成多態
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;此時objF&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;objC地址值是相同的 &lt;span style=&#34;color:#228b22&#34;&gt;// 即objF==objC為true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;但他們的屬性可以是各自的(屬性沒有多態)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;方法則是動態綁定(編譯看左&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;運行看右)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子類可以獲取父類中&lt;code&gt;private&lt;/code&gt;的屬性或方法，但無法直接調用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法的重寫:繼承後，同名同參的方法，對於子類重寫的方法來說，權限範圍不能縮小，返回值與拋出異常必須同類或是其子類。被重寫的方法必須非&lt;code&gt;private&lt;/code&gt;、非&lt;code&gt;static&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重載:同一類中，只要參數的類型或個數不同，允許存在同名的方法或構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;構造器的繼承與重載&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this(形參列表)&lt;/code&gt;:本類重載其他的構造器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;super(形參列表)&lt;/code&gt;:調用父類中指定的構造器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字instanceof&#34;&gt;關鍵字instanceof&lt;/h1&gt;
&lt;h3 id=&#34;前提&#34;&gt;前提&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;父類 多態物件=new 子類&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;當有了物件的多態性以後，因為右邊是有&lt;code&gt;=new 子類&lt;/code&gt;，記憶體中其實是有加載子類特有的屬性與方法的，只是由於變量聲明為父類類型，導致編譯時無法直接調用&lt;/li&gt;
&lt;li&gt;可以用&amp;quot;&lt;code&gt;(子類名)多態物件&lt;/code&gt;&amp;ldquo;向下強轉，但可能報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用instanceof&#34;&gt;使用instanceof&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a instanceof A&lt;/code&gt;，判斷物件a是否為類A的實例，返回&lt;code&gt;boolean&lt;/code&gt;，舉例:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Animal a1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Dog();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (a1 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; Dog) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Dog a2 = (Dog) a1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a2.&lt;span style=&#34;color:#658b00&#34;&gt;shout&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;對於祖父類也適用，即可以一直向上追溯都能返回&lt;code&gt;true&lt;/code&gt;的意思&lt;/li&gt;
&lt;li&gt;實際開發很少用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;陰險面試題&#34;&gt;陰險面試題&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Base&lt;/span&gt; { &lt;span style=&#34;color:#228b22&#34;&gt;// 一個父類
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;... arr) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;base&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Sub&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; Base { &lt;span style=&#34;color:#228b22&#34;&gt;// 一個子類
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#707a7c&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sub1&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; b, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;sub2&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Base t = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Sub(); &lt;span style=&#34;color:#228b22&#34;&gt;// 創建一個多態的物件t
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    t.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(1, 2, 3);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 結果是sub1，因為編譯器認為int...跟int[]一樣
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 形參一樣，構成重寫，所以出來sub1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Sub s = (Sub) t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(1, 2, 3);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 子類有自己確定性的方法，優先調用，結果是sub2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[]{4, 5, 6};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s.&lt;span style=&#34;color:#658b00&#34;&gt;add&lt;/span&gt;(1, arr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 結果是sub1，理由同上，有優先適用的形參
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;object類&#34;&gt;Object類&lt;/h1&gt;
&lt;p&gt;在Java中&lt;code&gt;Object&lt;/code&gt;類是所有類的父類，意味著&lt;code&gt;Object&lt;/code&gt;類中的屬性與方法具有共通性，以下挑幾個常用的介紹&lt;/p&gt;
&lt;h3 id=&#34;運算符&#34;&gt;運算符&amp;rdquo;==&amp;quot;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;&lt;code&gt;==&lt;/code&gt;&amp;ldquo;可以用在基本數據類型，判斷值是否相等(類型不一定要相同，可能自動提升)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;&lt;code&gt;==&lt;/code&gt;&amp;ldquo;也可以用在引用類型，判斷地址是否相等(即是否指向同一個物件)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;equals&#34;&gt;equals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object&lt;/code&gt;類中&lt;code&gt;equals()&lt;/code&gt;的定義等同於&amp;rdquo;&lt;code&gt;==&lt;/code&gt;&amp;quot;，比的還是地址值是否相同，源碼如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;equals&lt;/span&gt;(Object obj) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt; == obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;而String、Date、File、包裝類等都重寫了&lt;code&gt;Object&lt;/code&gt;類中&lt;code&gt;equals()&lt;/code&gt;方法，重寫後比較的是&amp;quot;實體內容&amp;quot;是否相同&lt;/li&gt;
&lt;li&gt;通常情況下，我們自訂義類用&lt;code&gt;equals()&lt;/code&gt;時想比的也是實體內容而非地址，就必須重寫
&lt;ul&gt;
&lt;li&gt;重寫的原則:比較類的關鍵屬性是否相同，也可以自動生成
&lt;ul&gt;
&lt;li&gt;對稱性:若&lt;code&gt;x.equals(y)=true&lt;/code&gt;，則&lt;code&gt;y.equals(x)&lt;/code&gt;也必須是&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自反性:&lt;code&gt;x.equals(x)&lt;/code&gt;=必須&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;傳遞性:若&lt;code&gt;x.equals(y)=true&lt;/code&gt;，且&lt;code&gt;y.equals(z)=true&lt;/code&gt;，則&lt;code&gt;z.equals(x)=true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一致性:若&lt;code&gt;x.equals(y)=true&lt;/code&gt;，只要x與y內容不變，則不管重複幾次結果都是&lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;任何情況下&lt;code&gt;x.equals(null)&lt;/code&gt;必須=&lt;code&gt;flase&lt;/code&gt;，&lt;code&gt;x.equals(非x類對象)&lt;/code&gt;必須=&lt;code&gt;flase&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面試題與equals的區別&#34;&gt;面試題:==與equals()的區別&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;==&lt;/code&gt;用來比較基本數據類型，而引用類型&lt;code&gt;==&lt;/code&gt;與&lt;code&gt;equals()&lt;/code&gt;就根本上追溯到&lt;code&gt;object類&lt;/code&gt;其實是一樣的，比較的是地址值。只是通常我們在用&lt;code&gt;equals()&lt;/code&gt;時都重寫了，變成用來比較實體內容&lt;/p&gt;
&lt;h3 id=&#34;tostring&#34;&gt;toString&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;當我們輸出一個物件的引用時(沒重寫就會是看地址)，實際上就是調用&lt;code&gt;toString()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源碼&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;toString&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; getClass().&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@&amp;#34;&lt;/span&gt; + Integer.&lt;span style=&#34;color:#658b00&#34;&gt;toHexString&lt;/span&gt;(hashCode());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;而String、Date、File、包裝類等都重寫了Object類中&lt;code&gt;toString()&lt;/code&gt;方法，重寫後返回的是&amp;quot;實體內容&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;包裝類&#34;&gt;包裝類&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;把基本數據類型封裝成類，真正實現&amp;quot;一切都是物件&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;舉例:手動&lt;code&gt;Float f1 = new Float(12.3)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JDK 5.0後，會自動拆裝箱，所以其實直接用就可以了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本數據類型、包裝類都可以簡單地透過&lt;code&gt;valueOf&lt;/code&gt;轉換成&lt;code&gt;String&lt;/code&gt;，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Float f1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Float(12.&lt;span style=&#34;color:#658b00&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String str = String.&lt;span style=&#34;color:#658b00&#34;&gt;valueOf&lt;/span&gt;(f1);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;String&lt;/code&gt;轉回基本數據類型則使用&lt;code&gt;parseXXX&lt;/code&gt;，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String str = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(str);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面試題-1&#34;&gt;面試題-1&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Object o1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt; ? &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Integer(1) : &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Double(2.&lt;span style=&#34;color:#658b00&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(o1); &lt;span style=&#34;color:#228b22&#34;&gt;// 1.0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;乍看可能覺得是&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;1&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`，&lt;/span&gt;但三元運算符後面兩個條件必須是同類型(否則編譯就報錯了)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;於是1被自動類型提升成&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;Double&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`，&lt;/span&gt;答案變&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;1.&lt;span style=&#34;color:#658b00&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;若把題目那一行拆成if-else結構那就是&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;1&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;面試題-2&#34;&gt;面試題-2&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Integer i = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Integer(1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Integer j = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Integer(1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i == j); &lt;span style=&#34;color:#228b22&#34;&gt;// false，地址值不同
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Integer m = 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Integer n = 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(m == n); &lt;span style=&#34;color:#228b22&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Integer x = 128;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Integer y = 128;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(x == y); &lt;span style=&#34;color:#228b22&#34;&gt;// false，地址值不同
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;Integer&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;內部定義了一個&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;IntegerCache&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;結構&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;造了一個數組保存了 - 128 ~127 內的整數&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;我們日常使用自動裝箱其實就是使用這個數組內的元素&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;不用一直&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;物件&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;達到增加效率&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;而當超出這個範圍&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;就相當於&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;`&lt;/span&gt;了新物件&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;所以x跟y地址不同
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習題-vector可變長度容器&#34;&gt;練習題-Vector可變長度容器&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可以當做一個可變長度的數組來用&lt;/p&gt;
&lt;p&gt;添加元素:&lt;code&gt;vector.addElement(Object obj);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看元素內容:&lt;code&gt;vector.elementAt(下標)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Vector v = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Vector();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxScore = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; loopFlag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; loopFlag; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入學生成績，負數離開&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; inputInt = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (inputInt &amp;lt; 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loopFlag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (inputInt &amp;gt; 100) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;成績有誤，重新輸入&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 這個continue蠻關鍵的，當輸入有誤雖然i++了但不會插入錯誤值到數組中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 因為&amp;#34;跳過這次&amp;#34;了，下面的語句不會執行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 再退一步說其實for的i就是多餘的，因為addElement不用遍歷插入值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// loopFlag也是多餘的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (maxScore &amp;lt; inputInt) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maxScore = inputInt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v.&lt;span style=&#34;color:#658b00&#34;&gt;addElement&lt;/span&gt;(inputInt);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;最高分是&amp;#34;&lt;/span&gt; + maxScore);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; v.&lt;span style=&#34;color:#658b00&#34;&gt;size&lt;/span&gt;(); i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Object obj = v.&lt;span style=&#34;color:#658b00&#34;&gt;elementAt&lt;/span&gt;(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; score = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) obj;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (maxScore - score &amp;gt; 40) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為&amp;#34;&lt;/span&gt; + score + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，不合格\n&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為&amp;#34;&lt;/span&gt; + score + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，合格\n&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;不合格人數是&amp;#34;&lt;/span&gt; + sum);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/211128-agg-ja-13/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>繼承:方法重寫、關鍵字super與物件實例化過程</title>
        <link>https://yoziming.github.io/post/211127-agg-ja-12/</link>
        <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211127-agg-ja-12/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211127-agg-ja-12/ -&lt;h1 id=&#34;繼承&#34;&gt;繼承&lt;/h1&gt;
&lt;h3 id=&#34;目的&#34;&gt;目的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;減少代碼冗餘、提高復用性&lt;/li&gt;
&lt;li&gt;便於功能擴展&lt;/li&gt;
&lt;li&gt;為多態鋪路&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;格式&#34;&gt;格式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;extends&lt;/span&gt; B{} &lt;span style=&#34;color:#228b22&#34;&gt;// A延展了B
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;A:子類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;派生類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;subclass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;B:父類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;超類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;基類&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;、&lt;/span&gt;superclass
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;繪圖時，通常用&lt;strong&gt;空心箭頭從子指向父&lt;/strong&gt;，例如:Student→Person，表示學生類繼承了人類&lt;/p&gt;
&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A繼承B之後，子類A就獲取了B聲明的所有屬性與方法，&lt;strong&gt;包含了私有(private)的&lt;/strong&gt;，&lt;strong&gt;但是&lt;/strong&gt;由於封裝性的影響，&lt;strong&gt;子類無法直接調用&lt;/strong&gt;父類私有(private)的屬性與方法&lt;/li&gt;
&lt;li&gt;不允許多重繼承(一人只能有一個老爸)&lt;/li&gt;
&lt;li&gt;可以多層繼承(允許有孫子，孫子也會繼承爺爺的特性)&lt;/li&gt;
&lt;li&gt;一個父類可以有多個子類(允許家族開枝散葉)&lt;/li&gt;
&lt;li&gt;所有類都繼承自&lt;code&gt;java.lang.Object&lt;/code&gt;，換言之所有類都具有&lt;code&gt;Object類&lt;/code&gt;的特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;權限修飾符protected的應用&#34;&gt;權限修飾符protected的應用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;之前提過&lt;code&gt;protected&lt;/code&gt;的範圍是&lt;strong&gt;不同包的子類&lt;/strong&gt;也能用，就是應在這了
&lt;ul&gt;
&lt;li&gt;實際發開中用的比較少一點&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;方法的重寫&#34;&gt;方法的重寫&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;子類繼承父類後，對父類&lt;strong&gt;同名同參數&lt;/strong&gt;的方法，進行覆蓋&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子類重寫的方法權限修飾符必須不小於父類被重寫的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;白話:不能把公車私有化，權限範圍不能縮小&lt;/li&gt;
&lt;li&gt;注意:不能重寫父類中聲明為&lt;code&gt;private&lt;/code&gt;的方法(本身就見不到)，可以在子類中硬寫一個同名的方法，但那就不是構成重寫&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若父類被重寫的方法返回值是&lt;code&gt;void&lt;/code&gt;，子類重寫的方法也必須返回&lt;code&gt;void&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若父類被重寫的方法返回值是A類型，子類重寫的方法返回值可以是A類或A類的子類&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;舉例:父類返回值是動物類，子類可以重寫返回動物類或貓類狗類&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若父類被重寫的方法返回值是基本數據類型，子類重寫的方法返回值必須是相同基本數據類&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;舉例:父類返回&lt;code&gt;double&lt;/code&gt;子類也必須是&lt;code&gt;double&lt;/code&gt;，&lt;strong&gt;不能&lt;/strong&gt;是&lt;code&gt;int&lt;/code&gt;期待他自動類型提升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拋出異常(&lt;code&gt;throws&lt;/code&gt;)的規則與返回值相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以上白話小結:&lt;strong&gt;權限不能小於爸爸、返回值不能大於爸爸&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;補充:子類與父類同名同參數的方法要嘛都聲明為非&lt;code&gt;static&lt;/code&gt;的(考慮重寫)，要嘛都聲明為&lt;code&gt;static&lt;/code&gt;的(不是重寫，靜態類的方法不能被覆蓋)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字super&#34;&gt;關鍵字super&lt;/h1&gt;
&lt;p&gt;用來表示&lt;strong&gt;父類中的&lt;/strong&gt;屬性、方法、構造器&lt;/p&gt;
&lt;h3 id=&#34;調用屬性與方法&#34;&gt;調用屬性與方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以在子類的方法或構造中，用&amp;quot;&lt;code&gt;super.方法&lt;/code&gt;&amp;ldquo;或&amp;rdquo;&lt;code&gt;super.屬性&lt;/code&gt;&amp;ldquo;來顯式調用父類中聲明的屬性或方法&lt;/li&gt;
&lt;li&gt;就近原則，比如有人很欠揍的在A01類A02類A03類三代中都命名了同為&lt;code&gt;id&lt;/code&gt;的屬性，我在A03調&lt;code&gt;super.id&lt;/code&gt;會調到A02的&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;方法則基本上就是用來區分重寫的子類方法，跟原先父類的同名方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;super&lt;/code&gt;不能突破封裝性的限制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;調用構造器&#34;&gt;調用構造器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在子類的構造器中，顯示使用&amp;rdquo;&lt;code&gt;super(形參列表)&lt;/code&gt;&amp;ldquo;顯式調用父類中聲明的指定構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;&lt;code&gt;super(形參列表)&lt;/code&gt;&amp;ldquo;必須聲明在子類構造器的首行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意味著&amp;rdquo;&lt;code&gt;super(形參列表)&lt;/code&gt;&amp;ldquo;與&amp;rdquo;&lt;code&gt;this(形參列表)&lt;/code&gt;&amp;ldquo;只能二選一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若沒寫則首行預設是一個&amp;rdquo;&lt;code&gt;super()&lt;/code&gt;&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意味著子類構造器中必定至少存在一個構造器來自於父類&lt;/li&gt;
&lt;li&gt;要是在父類中的空參構造器寫了某個特徵，那他所有往下的子類都帶有這個特徵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;子類物件實例化的過程&#34;&gt;子類物件實例化的過程&lt;/h1&gt;
&lt;h3 id=&#34;從結果上來看&#34;&gt;從結果上來看&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;子類繼承父類後，就獲取了父類聲明的屬性或方法&lt;/li&gt;
&lt;li&gt;創建子類的物件，在堆空間中就會加載所有父類中聲明的屬性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;從過程上來看&#34;&gt;從過程上來看&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;當創建子類的物件時，必定會直接或間接的調用其父類的構造器，層層往上直到調用了&lt;code&gt;java.lang.Object&lt;/code&gt;類中的空參構造器為止，正因為加載過所有父類的結構，所以才可以看到內存中有父類的結構，子類物件才可以考慮進行調用&lt;/li&gt;
&lt;li&gt;雖然子類創立物件時調用了父類的構造器，但自始至終就只&lt;code&gt;new&lt;/code&gt;一個子類的物件&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211127-agg-ja-12/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>項目練習2-客戶訊息管理系統</title>
        <link>https://yoziming.github.io/post/211126-agg-ja-11/</link>
        <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211126-agg-ja-11/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211126-agg-ja-11/ -&lt;h1 id=&#34;項目練習-客戶訊息管理系統&#34;&gt;項目練習-客戶訊息管理系統&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;有點基礎這部分都蠻簡單的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有個知識點是這邊在&amp;quot;刪除用戶&amp;quot;的功能用到了循環鏈表的概念&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;deleteCustomer&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (customers[index] != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = index; i &amp;lt; total - 1; i++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 不能搬到total，否則[i+1]會越位
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            customers[i] = customers[i + 1];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        customers[total - 1] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;刪除用戶成功!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;索引無效，操作失敗&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;total&lt;/code&gt;表示當前數組中用戶總數，這個&lt;code&gt;i &amp;lt; total - 1&lt;/code&gt;蠻關鍵的，我原先沒想到這邊要-1，還想著讓他把後面的&lt;code&gt;null&lt;/code&gt;往前搬就好，沒考慮到末尾可能會越位的情況。&lt;/p&gt;
&lt;p&gt;搬完再跟&lt;code&gt;customers[total - 1] = null&lt;/code&gt;搭配使用，這樣才是健壯的&lt;/p&gt;
- https://yoziming.github.io/post/211126-agg-ja-11/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>封裝性、構造器、關鍵字this、Package包</title>
        <link>https://yoziming.github.io/post/211125-agg-ja-10/</link>
        <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211125-agg-ja-10/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211125-agg-ja-10/ -&lt;h1 id=&#34;封裝的設計思想&#34;&gt;封裝的設計思想&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;高內聚:類的內部數據操作細節自己完成，不允許外部干涉&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;低耦合:對外露出少量的方法(API)供使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;舉例:微波爐，我不需要用戶控制燈光、波照、轉盤等等，只要他放入東西按下&amp;quot;解凍&amp;quot;即可。即所謂的&amp;quot;一鍵XX&amp;quot;功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;封裝性的體現&#34;&gt;封裝性的體現&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;將類的屬性私有化(&lt;code&gt;private&lt;/code&gt;)，通過公共的(&lt;code&gt;public&lt;/code&gt;)的&lt;code&gt;set&lt;/code&gt;與&lt;code&gt;get&lt;/code&gt;方法讓外部調用，舉例:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Animal a1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        a1.&lt;span style=&#34;color:#658b00&#34;&gt;setAge&lt;/span&gt;(10);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(a1.&lt;span style=&#34;color:#658b00&#34;&gt;getAge&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setAge&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        age = i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getAge&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不對外公開的私有方法(比如對外是各種排序方法，內部自己寫了一個交換兩數據位置的&amp;quot;小工具&amp;quot;)&lt;/li&gt;
&lt;li&gt;單例模式(將構造器私有化)&lt;/li&gt;
&lt;li&gt;&amp;hellip;等等&lt;/li&gt;
&lt;li&gt;需要權限修飾符來配合&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;權限修飾符&#34;&gt;權限修飾符&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JAVA中有4種權限修飾符，各自的範圍是: (從小到大，下包含上)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;:限當前類內部使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;default(缺省，就是不寫)&lt;/code&gt;:同一個包名就可以調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;:不同包它的子類可以調用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;:相當於開放的&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;修飾的對象&#34;&gt;修飾的對象&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;以上4種可以用於修飾&lt;strong&gt;類的內部結構&lt;/strong&gt;:屬性、方法、構造器、內部類&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;class&lt;/code&gt;本身的修飾只能是缺省或&lt;code&gt;public&lt;/code&gt;&lt;/strong&gt;，一個&lt;code&gt;.java檔&lt;/code&gt;只能包含一個&lt;code&gt;public類&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;構造器constructor&#34;&gt;構造器(constructor)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;作用:創立物件、初始化物件的屬性&lt;/li&gt;
&lt;li&gt;說明:如果沒有顯示定義構造器，則系統預設提供一個空參的構造器&lt;/li&gt;
&lt;li&gt;格式:&lt;code&gt;權限修飾符 類名(形參列表){}&lt;/code&gt;，注意&lt;strong&gt;構造器名=類名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在一個類中可以定義多個構造器，彼此構成重載，舉例:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Animal a1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal(5);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Animal a2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Animal(4, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;狗&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Animal&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String kind;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        age = a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;初始化並定義年齡為&amp;#34;&lt;/span&gt; + a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a, String k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        age = a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        kind = k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;初始化並定義年齡為&amp;#34;&lt;/span&gt; + a + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，種類為&amp;#34;&lt;/span&gt; + kind);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;初始化的順序&#34;&gt;初始化的順序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;預設初始化:0或null那種，例如&lt;code&gt;private int age;&lt;/code&gt;，new一個實例出來age預設是0&lt;/li&gt;
&lt;li&gt;顯式初始化:定義屬性時直接寫好的，例如&lt;code&gt;private int age=18;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;代碼塊初始化:專門做初始化的一個&lt;code&gt;{}&lt;/code&gt;區(若有人手很賤把代碼塊放在顯式初始化之上，則代碼塊會比顯式先執行，但看到這樣做的人先拖出去打)&lt;/li&gt;
&lt;li&gt;構造器初始化，造實例時同時賦值&lt;/li&gt;
&lt;li&gt;造完物件後調用賦值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;javabean&#34;&gt;JavaBean&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaBean是一個遵循特定寫法的Java類，是一種Java語言編寫的可重用元件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;它的方法命名，構造及行為必須符合特定的約定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;這個類必須具有一個公共的(&lt;code&gt;public&lt;/code&gt;)空參構造器&lt;/li&gt;
&lt;li&gt;所有屬性私有化(&lt;code&gt;private&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;私有化的屬性必須通過&lt;code&gt;public&lt;/code&gt;型別的方法(&lt;code&gt;getter&lt;/code&gt;和&lt;code&gt;setter&lt;/code&gt;)暴露給其他程式，並且方法的命名也必須遵循一定的命名規範。&lt;/li&gt;
&lt;li&gt;這個類應是可序列化的(比如可以實現&lt;code&gt;Serializable&lt;/code&gt;接口，用於實現&lt;code&gt;bean&lt;/code&gt;的永續性)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;uml類圖&#34;&gt;UML類圖&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Unified Modeling Language，統一建模語言，用於快速表示類&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20211123131818447.png&#34; alt=&#34;image-20211123131818447&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三個分區:從上到下為類名、屬性、方法&lt;/li&gt;
&lt;li&gt;權限修飾符:&lt;code&gt;- private&lt;/code&gt;、&lt;code&gt;+ public&lt;/code&gt;、&lt;code&gt;# protected&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;內表示形參&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:&lt;/code&gt;後表示返回值類型&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;關鍵字this的使用&#34;&gt;關鍵字This的使用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以用來修飾屬性、方法、構造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;this.XX&lt;/code&gt;，就是表明&amp;quot;&lt;strong&gt;當前物件&lt;/strong&gt;&amp;quot;，用在例如:形參與屬性同名時&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用在本類中構造器調用&lt;strong&gt;其他構造器&lt;/strong&gt;，最多一個且必須聲明在首行，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String kind;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;age&lt;/span&gt; = age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;初始化並定義年齡為&amp;#34;&lt;/span&gt; + age);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Animal&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; age, String k) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;(age); &lt;span style=&#34;color:#228b22&#34;&gt;// 調用形參為age的，就是上面那個構造器
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    kind = k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，種類為&amp;#34;&lt;/span&gt; + kind);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-銀行用戶清單&#34;&gt;練習題-銀行用戶清單&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;造一個Account類，可以顯示餘額、存取錢&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Account&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; balance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Account&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; init_balance) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;balance&lt;/span&gt; = init_balance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getBalance&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; balance;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;deposit&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; amt) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (amt &amp;gt; 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            balance += amt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;存錢成功&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;金額錯誤&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;withdraw&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; amt) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (balance &amp;gt;= amt) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            balance -= amt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;取錢成功&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;金額錯誤&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;造一個Customer類，可以顯示用戶名跟他名下的Account&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Customer&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; String name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Account account;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Customer&lt;/span&gt;(String name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Account &lt;span style=&#34;color:#008b45&#34;&gt;getAccount&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; account;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setAccount&lt;/span&gt;(Account account) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;account&lt;/span&gt; = account;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#008b45&#34;&gt;getName&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;setName&lt;/span&gt;(String name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;name&lt;/span&gt; = name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;造一個Bank類，可以存用戶列表為數組，跟用戶數量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Bank&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; Customer[] customers;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; numberOfCustomer = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;Bank&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        customers = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;初始化了一個客戶清單，上限個數為&amp;#34;&lt;/span&gt; + n);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;addCustomer&lt;/span&gt;(String name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Customer cust = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Customer(name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        customers[numberOfCustomer++] = cust;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;添加客戶成功&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; Customer &lt;span style=&#34;color:#008b45&#34;&gt;getCustomer&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (index &amp;gt;= 0 &amp;amp;&amp;amp; index &amp;lt; numberOfCustomer) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; customers[index];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getNumberOfCustomer&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; numberOfCustomer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;調用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Bank b1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Bank(10);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b1.&lt;span style=&#34;color:#658b00&#34;&gt;addCustomer&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Tom&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b1.&lt;span style=&#34;color:#658b00&#34;&gt;getCustomer&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;setAccount&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Account(1000));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b1.&lt;span style=&#34;color:#658b00&#34;&gt;getCustomer&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getAccount&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;withdraw&lt;/span&gt;(400);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; balance = b1.&lt;span style=&#34;color:#658b00&#34;&gt;getCustomer&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getAccount&lt;/span&gt;().&lt;span style=&#34;color:#658b00&#34;&gt;getBalance&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;用戶&amp;#34;&lt;/span&gt; + b1.&lt;span style=&#34;color:#658b00&#34;&gt;getCustomer&lt;/span&gt;(0).&lt;span style=&#34;color:#658b00&#34;&gt;getName&lt;/span&gt;() +
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的餘額為&amp;#34;&lt;/span&gt; + balance);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;mvc設計模式&#34;&gt;MVC設計模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;太基礎不多提了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;M:資料庫，資料存這&lt;/li&gt;
&lt;li&gt;C:控制器，一切操作都寫這&lt;/li&gt;
&lt;li&gt;V:視圖，用戶實際交互的UI&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;package的使用&#34;&gt;Package的使用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;為了方便管理，類似命名空間的概念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;package&lt;/code&gt;聲明類或接口所屬的包，聲明在文件首行&lt;/li&gt;
&lt;li&gt;包名屬於標示符，遵循規範(全小寫aaa.bbb.ccc)，見明知意&lt;/li&gt;
&lt;li&gt;每&amp;quot;&lt;code&gt;.&lt;/code&gt;&amp;ldquo;一次，代表一層文件目錄&lt;/li&gt;
&lt;li&gt;同一個包下，不能存在同名的類、接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;import的使用&#34;&gt;Import的使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;格式:&lt;code&gt;import 包名&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;聲明在包名和類的聲明之間(第二區塊的意思)&lt;/li&gt;
&lt;li&gt;可以用&lt;code&gt;XXX.*&lt;/code&gt;來導入XXX下所有包(一層而已，之下的子包還是需要顯式導入)&lt;/li&gt;
&lt;li&gt;當前包與系統預設的(如&lt;code&gt;java.lang&lt;/code&gt;)包可以不用寫導入&lt;/li&gt;
&lt;li&gt;若想調用&lt;strong&gt;當前包的子包&lt;/strong&gt;則還是需要顯式導入&lt;/li&gt;
&lt;li&gt;若想調用&lt;strong&gt;不同包下同名的類&lt;/strong&gt;，則需在調用時使用&amp;quot;全類名&amp;rdquo;，舉例:&lt;code&gt;java.lang.String&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import static&lt;/code&gt;可以導入指定類或接口下的靜態屬性或方法 (很少用)&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211125-agg-ja-10/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>物件導向:方法的重載與參數的值傳遞</title>
        <link>https://yoziming.github.io/post/211124-agg-ja-09/</link>
        <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211124-agg-ja-09/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211124-agg-ja-09/ -&lt;h1 id=&#34;細說方法&#34;&gt;細說方法&lt;/h1&gt;
&lt;h3 id=&#34;方法的重載overload&#34;&gt;方法的重載(overload)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定義:同一各類中，允許存在一個以上的同名方法，只要他們的參數個數或參數類型不同即可&lt;/li&gt;
&lt;li&gt;跟方法的權限修飾符、返回值類型、形參變量名、方法體&lt;strong&gt;無關&lt;/strong&gt;，判斷重點在於參數本身&lt;/li&gt;
&lt;li&gt;可能會自動類型提升，舉例:傳入的是&lt;code&gt;int&lt;/code&gt;形，方法中沒有&lt;code&gt;int&lt;/code&gt;但有&lt;code&gt;double&lt;/code&gt;，就會調用double&lt;/li&gt;
&lt;li&gt;典型的例子就是內建的&lt;code&gt;println()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可變個數形參&#34;&gt;可變個數形參&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;格式:&lt;code&gt;方法名(形參類型 ... 形參名)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;調用時傳入的形參數量可以是0到多個，包含數組&lt;/li&gt;
&lt;li&gt;與本類中方法名相同，形參不同的方法間構成重載(可共存)&lt;/li&gt;
&lt;li&gt;與本類中方法名相同，形參類型也相同的數組之間不構成重載(不可共存)
&lt;ul&gt;
&lt;li&gt;PS.這是歷史遺留問題，因為可變個數形參是JDK5加入的，以前都是用數組&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;方法內把它當作數組使用，遍歷&lt;code&gt;itar (i=0;i&amp;lt;形參名.length;i++){}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;必須聲明在末尾&lt;/strong&gt;，且最多只能有一個&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法參數的值傳遞&#34;&gt;方法參數的值傳遞&lt;/h3&gt;
&lt;h4 id=&#34;先複習一下變量的賦值規則&#34;&gt;先複習一下變量的賦值規則&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;變量是基本數據類型(byte、short、int、long、char、float、double、boolean)，賦值的是變量所保存的數據值&lt;/li&gt;
&lt;li&gt;變量是引用類型(引用類型就只有null跟地址值兩種情況)，賦值給的是所保存數據的地址值&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;名詞解釋&#34;&gt;名詞解釋&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;形參:方法定義時，聲明的小括號中的參數&lt;/li&gt;
&lt;li&gt;實參:方法調用時，實際傳給形參的數據&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;傳參規則&#34;&gt;傳參規則&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;跟變量的賦值規則其實相同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果參數是基本數據類型，實參賦給形參的是&lt;strong&gt;數據值&lt;/strong&gt;(類似給一份副本)&lt;/li&gt;
&lt;li&gt;如果參數是引用類型，實參賦給形參的是&lt;strong&gt;地址值&lt;/strong&gt;(包含變量的數據類型)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;陷阱題&#34;&gt;陷阱題&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;println&lt;/code&gt;在&lt;code&gt;char[]&lt;/code&gt;這有個特例，要避免踩坑就是調用時多看看方法格式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[]{1, 2, 3};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr1); &lt;span style=&#34;color:#228b22&#34;&gt;// [I@1b6d3586
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[] arr2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;char&lt;/span&gt;[]{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr2); &lt;span style=&#34;color:#228b22&#34;&gt;// abc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習-在方法中引用其他類的方法並調用&#34;&gt;練習-在方法中引用其他類的方法並調用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        PassObject t1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; PassObject();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Circle c = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Circle();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t1.&lt;span style=&#34;color:#658b00&#34;&gt;printAreas&lt;/span&gt;(c, 5);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(c.&lt;span style=&#34;color:#658b00&#34;&gt;radius&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Circle&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;findArea&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; Math.&lt;span style=&#34;color:#658b00&#34;&gt;PI&lt;/span&gt; * radius * radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;PassObject&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;printAreas&lt;/span&gt;(Circle c, &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; t) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Radius\t\tArea&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= t; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            c.&lt;span style=&#34;color:#658b00&#34;&gt;radius&lt;/span&gt; = i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(c.&lt;span style=&#34;color:#658b00&#34;&gt;radius&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t\t&amp;#34;&lt;/span&gt; + c.&lt;span style=&#34;color:#658b00&#34;&gt;findArea&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        c.&lt;span style=&#34;color:#658b00&#34;&gt;radius&lt;/span&gt; = t + 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;遞歸方法&#34;&gt;遞歸方法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;方法中調用自己達成類似&lt;code&gt;for&lt;/code&gt;的效果，但注意必須能收斂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;求1到n之和&#34;&gt;求1到n之和&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;getSum&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n == 1) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; n + getSum(n - 1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;求某已知數列&#34;&gt;求某已知數列&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;已知數列f(0)=1,	f(1)=4,	f(n+2)=2*f(n+1)+f(n)，求f(10)=?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (n == 1) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 4;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; 2 * f(n - 1) + f(n - 2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;重點在不能寫&lt;code&gt;f(n+2)=2*f(n+1)+f(n)&lt;/code&gt;，寫+2就死龜了，要左右都-2&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211124-agg-ja-09/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>物件導向:基本概念與學習路線</title>
        <link>https://yoziming.github.io/post/211123-agg-ja-08/</link>
        <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211123-agg-ja-08/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211123-agg-ja-08/ -&lt;h1 id=&#34;物件導向&#34;&gt;物件導向&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Object-oriented programming中國翻為&amp;quot;面向對象&amp;quot;，台灣則翻為物件導向&lt;/p&gt;
&lt;p&gt;我個人也覺得&amp;quot;物件導向&amp;quot;翻的比較信雅達，可以參考這篇知乎問答的解釋&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/22515658/answer/120754062&#34;&gt;https://www.zhihu.com/question/22515658/answer/120754062&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;
&lt;p&gt;首先用咖啡機煮咖啡為例:&lt;/p&gt;
&lt;h5 id=&#34;過程導向process-oriented&#34;&gt;過程導向(Process-oriented)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;過程導向強調的是功能行為，以&lt;strong&gt;函數為最小單位，考慮如何做&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;執行加咖啡豆方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行加水方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行煮咖啡方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行喝咖啡方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;物件導向object-oriented&#34;&gt;物件導向(Object-oriented)&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;物件導向則是先將功能封裝進物件，強調具備功能的物件，以&lt;strong&gt;類/物件為最小單位，考慮誰來做&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在執行煮咖啡操作前要抽象出：人和咖啡機（分類），然後開始執行：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;人.加咖啡豆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人.加水&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;咖啡機.煮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;人.喝咖啡&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;物件導向的三大特徵&#34;&gt;物件導向的三大特徵&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;封裝(Encapsulation)&lt;/li&gt;
&lt;li&gt;繼承(Inheritance)&lt;/li&gt;
&lt;li&gt;多態(Polymorphism)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;類和實例&#34;&gt;類和實例&lt;/h3&gt;
&lt;p&gt;類(class):抽象的模板、概念上的定義&lt;/p&gt;
&lt;p&gt;物件(object):是實際存在的個體，也稱為實例(Instance)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如說有輪子、吃汽油跑的是汽車類。小弟的車new march則為實例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;類的設計&#34;&gt;類的設計&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;設計類其實就是設計類的成員&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;屬性(field):成員變量，又稱域、字段、欄位&lt;/p&gt;
&lt;p&gt;行為(method):成員方法，又稱函數&lt;/p&gt;
&lt;p&gt;舉例:汽車類的屬性有輪子大小、有品牌名稱；汽車的行為有吃汽油跑&lt;/p&gt;
&lt;h3 id=&#34;練習-在java創建類並實例化&#34;&gt;練習-在JAVA創建類並實例化&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Car&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 屬性
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    String brand;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    String owner;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; isNew = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 可以給預設值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 行為(方法)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;crash&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (isNew) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(owner + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;新買的&amp;#34;&lt;/span&gt; + brand + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;出車禍，很嘔&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;老車，撞就撞了&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 實例化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        car c1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Car();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        c1.&lt;span style=&#34;color:#658b00&#34;&gt;owner&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;小弟&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        c1.&lt;span style=&#34;color:#658b00&#34;&gt;brand&lt;/span&gt; = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;march&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 調用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        c1.&lt;span style=&#34;color:#658b00&#34;&gt;crash&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;屬性成員變量與局部變量的差異&#34;&gt;屬性(成員變量)與局部變量的差異&lt;/h3&gt;
&lt;h5 id=&#34;聲明的位置&#34;&gt;聲明的位置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;屬性:直接放在類的一對&lt;code&gt;{}&lt;/code&gt;內&lt;/li&gt;
&lt;li&gt;局部變量:聲明在方法、方法形餐、代碼塊、構造器形參、構造器內部的變量&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;記憶體中位置&#34;&gt;記憶體中位置&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;屬性:對於非&lt;code&gt;static&lt;/code&gt;的屬性，放在堆。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;為線程共享，在類加載階段就實例化，放在方法區&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;局部變量:放在棧&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;權限修飾符&#34;&gt;權限修飾符&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;封裝時會用到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;屬性:可以在聲明時修飾權限，常見的有&lt;code&gt;private&lt;/code&gt;、&lt;code&gt;public&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;、缺省&lt;/li&gt;
&lt;li&gt;局部變量:只允許使用&lt;code&gt;final&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;預設初始化狀態&#34;&gt;預設初始化狀態&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;屬性:根據其類型有對應的預設值，也可以在聲明時自定義&lt;/li&gt;
&lt;li&gt;局部變量:沒有預設初始化值，調用之前一定要顯示賦值，否則報錯。
&lt;ul&gt;
&lt;li&gt;形參則是調用時賦值即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法的聲明與使用&#34;&gt;方法的聲明與使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;方法:描述類應該具有的功能，例如:狗類會汪汪叫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;聲明格式&#34;&gt;聲明格式&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;方法名是標示符，依規範用小駝峰(舉例:touchCat)表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;權限修飾符 返回值類型 &lt;span style=&#34;color:#008b45&#34;&gt;方法名&lt;/span&gt;(形參列表){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//方法體
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;舉例:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;sleep&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; hour){} &lt;span style=&#34;color:#228b22&#34;&gt;// void=無返回值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;權限修飾符-1&#34;&gt;權限修飾符&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;常見的4種為private、public、protected、缺省&lt;/li&gt;
&lt;li&gt;進階的有static、final、abstract後面封裝時再講&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;返回值與形參&#34;&gt;返回值與形參&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;有沒有返回值跟形參，要看具體情境判斷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果有返回值，必須在聲明時指定返回值的類型，且方法中必須使用&amp;quot;&lt;code&gt;return 數據&lt;/code&gt;&amp;ldquo;返回該類型的變量或常量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若沒有返回值，聲明時用&lt;code&gt;void&lt;/code&gt;，通常就不用&lt;code&gt;return&lt;/code&gt;；也可以用，但只能純&amp;rdquo;&lt;code&gt;return&lt;/code&gt;&amp;ldquo;表示結束方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以聲明0或多個形參，格式:數據類型1 形參1,數據類型2 形參2,&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;使用注意&#34;&gt;使用注意&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;方法中可以調用當前類的屬性或其他方法&lt;/li&gt;
&lt;li&gt;也可以調用自己(遞歸調用)，但切記要能閉合而不是造成無限循環&lt;/li&gt;
&lt;li&gt;方法中不能再定義方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習-建立一個學生類的數組&#34;&gt;練習-建立一個學生類的數組&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;創建一個學生類，包含學號1~20、隨機的年級與成績，用數組表示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Student[] stus = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student[20];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 20; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stus[i] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Student(); &lt;span style=&#34;color:#228b22&#34;&gt;// 相當於給數組中的每個元素賦值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;number&lt;/span&gt; = i + 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;state&lt;/span&gt; = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) (Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;() * 6 + 1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;score&lt;/span&gt; = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) (Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;() * 101);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; stus.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學號&amp;#34;&lt;/span&gt; + stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;number&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;,年級是&amp;#34;&lt;/span&gt; + stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;state&lt;/span&gt; + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;,成績是&amp;#34;&lt;/span&gt; + stus[i].&lt;span style=&#34;color:#658b00&#34;&gt;score&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;Student&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; number;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; score;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;重點:&lt;code&gt;new&lt;/code&gt;了數組&lt;code&gt;stus&lt;/code&gt;後，其中每一個物件&lt;code&gt;stus[n]&lt;/code&gt;也都需要&lt;code&gt;new&lt;/code&gt;才能使用&lt;/p&gt;
&lt;h3 id=&#34;匿名物件&#34;&gt;匿名物件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一次性使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; 類名.&lt;span style=&#34;color:#658b00&#34;&gt;欲調用的屬性或方法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;或在參數中直接new &lt;span style=&#34;color:#008b45&#34;&gt;Circle&lt;/span&gt;()調用一個預設的類的實例
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;h3 id=&#34;學習物件導向的三條主線&#34;&gt;學習物件導向的三條主線&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;類及類的成員:屬性、方法、構造器；代碼塊、內部類&lt;/li&gt;
&lt;li&gt;物件導向特徵:封裝、繼承、多態、抽象&lt;/li&gt;
&lt;li&gt;其他關鍵字:this、super、abstract、interface、static、final、package、import&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一切都是物件&#34;&gt;一切都是物件&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在JAVA中我們把功能、結構都封裝到類中，通過類的實例化來調用具體的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;類與物件的操作順序&#34;&gt;類與物件的操作順序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;創建類，定義屬性、方法&lt;/li&gt;
&lt;li&gt;類的實例化(new一個該類的物件)&lt;/li&gt;
&lt;li&gt;調用物件的結構(物件.屬性、物件.方法)&lt;/li&gt;
&lt;/ol&gt;
- https://yoziming.github.io/post/211123-agg-ja-08/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>數組:填值/複製/查找/排序、Arrays工具類</title>
        <link>https://yoziming.github.io/post/211122-agg-ja-07/</link>
        <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211122-agg-ja-07/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211122-agg-ja-07/ -&lt;h1 id=&#34;數組常用算法&#34;&gt;數組常用算法&lt;/h1&gt;
&lt;h3 id=&#34;數據結構&#34;&gt;數據結構&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;程序=數據結構+演算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;數據間的邏輯關係:集合、一對一、一對多、多對多&lt;/li&gt;
&lt;li&gt;數據的儲存結構:
&lt;ul&gt;
&lt;li&gt;線性表:順序表(如:數組)、鏈表、棧、隊列&lt;/li&gt;
&lt;li&gt;樹形結構:二叉樹&lt;/li&gt;
&lt;li&gt;圖形結構&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;演算法-algorithm&#34;&gt;演算法-Algorithm&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;檢索&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加密&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-帕斯卡三角&#34;&gt;練習題-帕斯卡三角&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;形狀不是很漂亮&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20211120160204410.png&#34; alt=&#34;image-20211120160204410&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[10][];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr[i] = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[i + 1];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 兩外邊都是1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    arr[i][0] = 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr[i][i] = 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i &amp;gt; 1) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 1; j &amp;lt; arr[i].&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; arr[i].&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(arr[i][j] + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;題外話-關於行列&#34;&gt;題外話-關於行列&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;台灣教育部規定跟小學老師教的是&amp;quot;直行橫列&amp;quot;，但這個已經不合時宜了&lt;/p&gt;
&lt;p&gt;比如說&amp;quot;一行文字&amp;quot;，現代人直覺想到是橫的一行字；程式碼&amp;quot;line幾&amp;quot;我們也說&amp;quot;第幾行&amp;quot;&lt;/p&gt;
&lt;p&gt;如果溝通時混淆可以用英文，這有個記憶小訣竅&lt;/p&gt;
&lt;p&gt;column，看col中的l就是直的，列。而row，寫w是橫著寫過去，所以是橫的，行&lt;/p&gt;
&lt;p&gt;中國、日本都是這樣用，確實比較合理。現在連公文都橫式了，台灣教育部不改革真的失職&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;難題-螺旋矩陣&#34;&gt;難題-螺旋矩陣&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;這個leetcode中等難度了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = 5;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[n][n];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; count = 0; &lt;span style=&#34;color:#228b22&#34;&gt;// 填入的數值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxX = n - 1; &lt;span style=&#34;color:#228b22&#34;&gt;// x軸最大下標
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxY = n - 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; minX = 0; &lt;span style=&#34;color:#228b22&#34;&gt;// x軸最小下標
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; minY = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (minX &amp;lt;= maxX) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; x = minX; x &amp;lt;= maxX; x++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 左到右
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arr[minY][x] = ++count; &lt;span style=&#34;color:#228b22&#34;&gt;// y不變，x從0、1、2..直到填滿
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    minY++; &lt;span style=&#34;color:#228b22&#34;&gt;// 走到右上角頂了，此時x固定，開始加+Y往下走
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; y = minY; y &amp;lt;= maxY; y++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 右到下
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arr[y][maxX] = ++count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    maxX--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; x = maxX; x &amp;gt;= minX; x--) { &lt;span style=&#34;color:#228b22&#34;&gt;// 下到左
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arr[maxY][x] = ++count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    maxY--;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; y = maxY; y &amp;gt;= minY; y--) { &lt;span style=&#34;color:#228b22&#34;&gt;// 左到上
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        arr[y][minX] = ++count;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    minX++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 印
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; arr[i].&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(arr[i][j] + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;java產生隨機數&#34;&gt;JAVA產生隨機數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Math.random()方法是返回一個0到1之間，前閉後開[)aka含前不含後的double值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;()*10) &lt;span style=&#34;color:#228b22&#34;&gt;// 返回0到9的隨機整數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;()*n) &lt;span style=&#34;color:#228b22&#34;&gt;// 返回0到n-1的隨機整數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;()*100)+1 &lt;span style=&#34;color:#228b22&#34;&gt;// 返回1到100的隨機整數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;() * (99 - 10 + 1) + 10) &lt;span style=&#34;color:#228b22&#34;&gt;// 返回2位正整數[10,99]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)(Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;()*(MAX-min+1)) + min &lt;span style=&#34;color:#228b22&#34;&gt;// 返回min到m的隨機整數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;數組的淺複製&#34;&gt;數組的淺複製&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JAVA中引用類型互相賦值其實是傳遞指針，舉例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr1 = {1, 2, 3};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arr2 = arr1; &lt;span style=&#34;color:#228b22&#34;&gt;// 其實是指到同一個記憶體地址了，畢竟沒有new東西
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;arr2[0] = 9;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arr2=\t&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j : arr2) { &lt;span style=&#34;color:#228b22&#34;&gt;// 順便練習一下foreach遍歷數組
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(j + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arr1=\t&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j : arr1) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(j + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// arr1跟arr2的[0]都變成9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;真正複製數組&#34;&gt;真正複製數組&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;new一個然後一一對應賦值，舉例:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[10];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr1.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr2[i] = arr1[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;數組序列反轉&#34;&gt;數組序列反轉&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;記得/2，不然又全換回去&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; / 2; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp = arr[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr[i] = arr[arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - i - 1];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr[arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - i - 1] = tmp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 方法2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0, j = arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; i &amp;lt; j; i++, j--) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; tmp = arr[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr[i] = arr[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr[j] = tmp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;數組的查找&#34;&gt;數組的查找&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;比對String是否相同使用.equals()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String[] arr = {&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;李四&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;王五&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;劉六&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;張三&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;String dest = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;張三&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (dest.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(arr[i])) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;找到對應元素，下標為&amp;#34;&lt;/span&gt; + i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;查無結果&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;二分查找&#34;&gt;二分查找&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;重點在於建立head、middle、end三個下標索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr = {1, 20, 22, 41, 52, 53, 67, 75, 80, 99};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; dest = 80;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 二分查找
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; head = 0; &lt;span style=&#34;color:#228b22&#34;&gt;// 索引首
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; end = arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; &lt;span style=&#34;color:#228b22&#34;&gt;// 索引尾
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (head &amp;lt;= end) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; mid = (head + end) / 2; &lt;span style=&#34;color:#228b22&#34;&gt;// 這個mid每輪都要更新不能放在while外
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (dest == arr[mid]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;找到了，下標為&amp;#34;&lt;/span&gt; + mid);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (dest &amp;lt; arr[mid]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		end = mid - 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		head = mid + 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;沒找到&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;排序&#34;&gt;排序&lt;/h1&gt;
&lt;h3 id=&#34;衡量排序法優劣的指標&#34;&gt;衡量排序法優劣的指標&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;時間複雜度:比較的次數、移動的次數&lt;/li&gt;
&lt;li&gt;空間複查度:所需記憶體&lt;/li&gt;
&lt;li&gt;穩定性:若序列中A與B的關鍵字值相等，排序後A、B次序保持不變，稱為穩定的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;排序分類&#34;&gt;排序分類&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;內部排序:不需要額外的儲存器(如硬碟)，在記憶體中就能完成&lt;/li&gt;
&lt;li&gt;外部排序:參與的數據量極大，需藉由外部儲存協助完成，常見的有多路歸併排序。可以認為外部排序是多次配部排序組成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;十大經典排序法&#34;&gt;十大經典排序法&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hustcc/JS-Sorting-Algorithm&#34;&gt;https://github.com/hustcc/JS-Sorting-Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;動態圖文講解+各大語言實例，簡直完美&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;確定性算法的五大特徵&#34;&gt;確定性算法的五大特徵&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;輸入:有0或多個輸入數據，必須清楚描述與定義&lt;/li&gt;
&lt;li&gt;輸出:至少1個輸出結果，不可沒有結果&lt;/li&gt;
&lt;li&gt;有限性:不可無限循環，且每步驟在可接受的時間內完成&lt;/li&gt;
&lt;li&gt;明確性:每一步都有明確含意，不可有歧意&lt;/li&gt;
&lt;li&gt;可行性:每一步都是清楚可行的，能讓用戶紙筆記算求出答案&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java冒泡排序bubble-sort&#34;&gt;JAVA冒泡排序(Bubble Sort)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;N個元素要進行冒泡排序，最多總共進行&lt;code&gt;N-1&lt;/code&gt;趟排序，第i趟的比較次數為&lt;code&gt;(N-i)&lt;/code&gt;次&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - 1; i++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 外圈循環趟數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt; - i - 1; j++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 內圈比較次數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (arr[j] &amp;gt; arr[j + 1]) { &lt;span style=&#34;color:#228b22&#34;&gt;// 若前比後大則交換。排完由小到大
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; temp = arr[j];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[j] = arr[j + 1];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            arr[j + 1] = temp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;arrays工具類的使用&#34;&gt;Arrays工具類的使用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;util包提供常用的功能如下，還有很多可以自己探索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(arr1,arr2)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;判斷2數組是否完全相符
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(arr)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;將arr完整轉成string&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;方便印出
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;fill&lt;/span&gt;(arr,n)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;將n作為元素填滿數組&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;方便初始化
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;sort&lt;/span&gt;(arr)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;快速排序
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;binarySearch&lt;/span&gt;(arr,dest)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;二分查找返回下標或負數(找不到)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;生成0到99長度為n的序列並排序&#34;&gt;生成0到99長度為n的序列並排序&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// creat and print array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = 10; &lt;span style=&#34;color:#228b22&#34;&gt;// arr.length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arr[i] = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) (Math.&lt;span style=&#34;color:#658b00&#34;&gt;random&lt;/span&gt;() * 100);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arr=&amp;#34;&lt;/span&gt; + Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(arr));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// sort
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;sort&lt;/span&gt;(arr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// print array after sort
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;arr&amp;#39;=&amp;#34;&lt;/span&gt; + Arrays.&lt;span style=&#34;color:#658b00&#34;&gt;toString&lt;/span&gt;(arr));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;數組常見的錯誤&#34;&gt;數組常見的錯誤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;，下標越界&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NullPointerException&lt;/code&gt;，空指針異常，比如想存取一個引用類型其中某元素但沒賦值的情況&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211122-agg-ja-07/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>數組Array</title>
        <link>https://yoziming.github.io/post/211121-agg-ja-06/</link>
        <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211121-agg-ja-06/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211121-agg-ja-06/ -&lt;h1 id=&#34;數組array&#34;&gt;數組Array&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;多個相同類型的數據按一定的順序排列的集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;結構&#34;&gt;結構&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;數組名&lt;/li&gt;
&lt;li&gt;元素&lt;/li&gt;
&lt;li&gt;下標aka角標/索引&lt;/li&gt;
&lt;li&gt;長度(元素的個數)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;特性&#34;&gt;特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;數組本身是引用數據類型，其中的元素可以是任何類型&lt;/li&gt;
&lt;li&gt;數組的排列是有序的&lt;/li&gt;
&lt;li&gt;在記憶體中開闢一整塊連續的空間，數組名引用的是這塊連續空間的首地址&lt;/li&gt;
&lt;li&gt;長度確定後就&lt;strong&gt;不可更改&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;聲明與初始化&#34;&gt;聲明與初始化&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;數組必須初始化才能使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;方法1-靜態初始化，創建時填入已知的元素內容，由系統判定長度&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array1; &lt;span style=&#34;color:#228b22&#34;&gt;// 聲明
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;array1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[]{1, 2, 3}; &lt;span style=&#34;color:#228b22&#34;&gt;// 靜態初始化:同時對元素賦值了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 也可以合併成
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[]{1, 2, 3};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 可以再縮寫成 (類型推斷)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array1 = {1, 2, 3};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;方法2-動態初始化，創建時填入已知的長度，元素內容為0或空(系統預設，後述)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] array3 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[3]; &lt;span style=&#34;color:#228b22&#34;&gt;// 動態初始化，注意後面的[5]是指長度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;訪問數組內的元素&#34;&gt;訪問數組內的元素&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;沒特別的，一樣從0~長度-1。長度=array.length&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;舉例:&lt;code&gt;array[0]&lt;/code&gt;、&lt;code&gt;array[1]&lt;/code&gt;&amp;hellip;&lt;code&gt;array[array.length-1]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;遍歷&#34;&gt;遍歷&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;直接&lt;code&gt;print&lt;/code&gt;數組會得到類似&lt;code&gt;[I@1b6d3586&lt;/code&gt;這樣的一個地址&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; array.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(array[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上可用&lt;code&gt;foreach&lt;/code&gt;縮寫&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j : array) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(j);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 這是JAVA5後增加的foreach寫法，用在不管下標，專門只遍歷的情境，格式為
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(元素的數據類型 變量 : Collection集合or數組){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;各種元素的系統預設值&#34;&gt;各種元素的系統預設值&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;剛剛提到動態初始化時，只定了長度，元素內容由系統賦予預設值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;整型(byte、short、int)為&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;浮點數為&lt;code&gt;0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;char為&lt;code&gt;\u0000&lt;/code&gt;(ASCII碼的null)，不是&lt;code&gt;&#39;0&#39;&lt;/code&gt;也不是空格(空格的編號是&lt;code&gt;\u0020&lt;/code&gt;)，就顯示為空，要注意&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt;為&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用數據類型則為&lt;code&gt;null&lt;/code&gt;，就是空&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一維數組在記憶體中的情況&#34;&gt;一維數組在記憶體中的情況&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;比較複雜，引用課堂的截圖&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Kb411W75N?p=146&amp;amp;t=763.1&#34;&gt;https://www.bilibili.com/video/BV1Kb411W75N?p=146&amp;amp;t=763.1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20211119215010800.png&#34; alt=&#34;image-20211119215010800&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;棧裡面放局部變量&lt;/li&gt;
&lt;li&gt;堆裡面放&lt;code&gt;new&lt;/code&gt;出來的東西&lt;/li&gt;
&lt;li&gt;這張圖是簡單表示執行右上角的程式碼時記憶體中發生的事&lt;/li&gt;
&lt;li&gt;有瑕疵，因為&lt;code&gt;string&lt;/code&gt;也是引用類型，那個劉德華、張學友其實不是那樣&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-學生成績分級&#34;&gt;練習題-學生成績分級&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;輸入學生人數與成績，找出最高分，並依照最高分-10以內為A級、-20為B、-30為C、其餘不及格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入學生人數&amp;lt;數字正整數&amp;gt;...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; stuNum = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] stuScore = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[stuNum];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; maxScore = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; stuNum; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績&amp;lt;數字正整數&amp;gt;...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stuScore[i] = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (stuScore[i] &amp;gt; maxScore) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        maxScore = stuScore[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;成績登記完畢，最高分為&amp;#34;&lt;/span&gt; + maxScore);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; stuNum; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((maxScore - stuScore[i]) &amp;lt;= 10) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為A等級&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((maxScore - stuScore[i]) &amp;lt;= 20) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為B等級&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; ((maxScore - stuScore[i]) &amp;lt;= 30) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績為C等級&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;學生編號&amp;#34;&lt;/span&gt; + (i + 1) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;的成績不及格&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;二維數組&#34;&gt;二維數組&lt;/h1&gt;
&lt;h3 id=&#34;聲明&#34;&gt;聲明&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 靜態初始
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr1 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][]{{1, 2}, {3, 4, 5}, {6}};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 靜態+類型推斷
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr2 = {{1, 2}, {3, 4, 5}, {6}};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 動態初始1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;String[][] arr3 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String[4][5]; &lt;span style=&#34;color:#228b22&#34;&gt;//相當於一個4X5的表格
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 動態初始2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;String[][] arr4 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String[3][]; &lt;span style=&#34;color:#228b22&#34;&gt;// 已知行，省略列。反之報錯
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;String[][][] arr6 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; String[3][][]; &lt;span style=&#34;color:#228b22&#34;&gt;//相當於3X?X?的表格，總之第一個[](外層元素)必須指定長度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 也正確的寫法，容易混淆不建議
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[] arr5[] = {{1, 2}, {3, 4, 5}, {6}};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;遍歷-1&#34;&gt;遍歷&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr = {{1, 2, 3}, {4, 5}};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; arr.&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; arr[i].&lt;span style=&#34;color:#658b00&#34;&gt;length&lt;/span&gt;; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(arr[i][j]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;記憶體解析&#34;&gt;記憶體解析&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[3][4];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// [[I@1b6d3586，[[表示二維數組
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr[0]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 得到[I@4554617c，[表示一維數組，I表示類型是int，@地址位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[][] arr2 = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;[3][];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(arr2[0]); &lt;span style=&#34;color:#228b22&#34;&gt;// 得到null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;image-20211120132815535.png&#34; alt=&#34;image-20211120132815535&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;外層元素在棧，也是外層元素(第一個[])必須指定長度的原因&lt;/p&gt;
&lt;h3 id=&#34;練習題-二維數組邏輯判斷&#34;&gt;練習題-二維數組邏輯判斷&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211120135915226.png&#34; alt=&#34;image-20211120135915226&#34;&gt;&lt;/p&gt;
- https://yoziming.github.io/post/211121-agg-ja-06/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>台灣人常唸錯的IT英文單字</title>
        <link>https://yoziming.github.io/post/211120-it-english-taiwanese-problems/</link>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211120-it-english-taiwanese-problems/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211120-it-english-taiwanese-problems/ -&lt;h1 id=&#34;台灣人常唸錯的it英文單字&#34;&gt;台灣人常唸錯的IT英文單字&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;非母語有一些口音在所難免，我不求最正宗的發音，但至少不太要離譜甚至產生歧意，畢竟能夠順利溝通交流才是最重要的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cache，錯誤&amp;quot;catch&amp;quot;，正確它和&amp;quot;cash&amp;quot;同音&lt;/p&gt;
&lt;p&gt;archive，錯誤&amp;quot;阿起府&amp;quot;，正確&amp;quot;阿-凱f&amp;quot;，f幾乎不發音&lt;/p&gt;
&lt;p&gt;SQL，錯誤&amp;quot;circle&amp;quot;，正確&amp;quot;see-qual&amp;quot;&lt;/p&gt;
&lt;p&gt;hidden，錯誤&amp;quot;嗨-等&amp;quot;，正確&amp;quot;he-等&amp;quot;&lt;/p&gt;
&lt;p&gt;suite，錯誤&amp;quot;訴-特&amp;quot;，正確&amp;quot;sweet&amp;quot;，發音相同都是swēt&lt;/p&gt;
&lt;p&gt;virtual，錯誤&amp;quot;V-糗&amp;quot;，正確&amp;quot;ver-秋歐&amp;quot;，虛擬的&lt;/p&gt;
&lt;p&gt;visual，正確&amp;quot;V-九歐&amp;quot;，視覺的，微軟的Visual Studio Code是這個&lt;/p&gt;
&lt;p&gt;mobile，錯誤&amp;quot;哞比歐&amp;quot;，正確&amp;quot;ㄇㄡ-ㄅㄛˇ&amp;quot;，英式&amp;quot;哞百歐&amp;quot;&lt;/p&gt;
&lt;p&gt;maintain，man-ten，動詞維護&lt;/p&gt;
&lt;p&gt;maintenance，名詞維護，正確&amp;quot;咩-特-ㄋㄜˇ-死&amp;quot;4個音，重音在特&lt;/p&gt;
&lt;p&gt;module，正確&amp;quot;媽-九&amp;quot;&lt;/p&gt;
&lt;p&gt;enum，正確&amp;quot;衣-囊&amp;quot;，名詞枚舉&lt;/p&gt;
&lt;p&gt;enumerate，正確&amp;quot;以-new-merate&amp;quot;，動詞枚舉&lt;/p&gt;
&lt;p&gt;annotation，正確&amp;quot;A-ㄋ-tation&amp;quot;，名詞註解&lt;/p&gt;
&lt;p&gt;Azure，正確&amp;quot;阿九兒&amp;quot;，連一起速念&lt;/p&gt;
&lt;p&gt;parameter，錯誤&amp;quot;怕拉-咪特&amp;quot;，正確&amp;quot;ㄆ˙-ㄌㄩㄝ-ㄇ˙-ter&amp;quot;4個音，第一是輕聲ㄆ，重音在第二個音節&lt;/p&gt;
&lt;p&gt;separator，正確&amp;quot;ㄙㄟ-ㄆ˙-蕊特&amp;quot;，第二是輕聲ㄆ，重音在第三音節&lt;/p&gt;
&lt;p&gt;error，錯誤&amp;quot;ㄟ摟&amp;quot;，正確&amp;quot;ㄟ-惹&amp;quot;&lt;/p&gt;
&lt;p&gt;local，正確&amp;quot;low-口&amp;quot;&lt;/p&gt;
&lt;p&gt;locale，正確&amp;quot;low-考&amp;quot;，不要混為一音&lt;/p&gt;
&lt;p&gt;route，正確&amp;quot;辱-特t&amp;quot;&lt;/p&gt;
&lt;p&gt;router，錯誤&amp;quot;ㄖㄠ-特&amp;quot;，正確&amp;quot;ㄖㄨ-特er&amp;quot;&lt;/p&gt;
&lt;p&gt;servlet，&amp;ldquo;serv-let&amp;rdquo;，重音在let&lt;/p&gt;
&lt;p&gt;admin，錯誤&amp;quot;噁的命&amp;quot;，正確&amp;quot;A的-敏&amp;quot;&lt;/p&gt;
&lt;p&gt;format，錯誤&amp;quot;否-妹t&amp;quot;，正確&amp;quot;F歐-美t&amp;quot;&lt;/p&gt;
&lt;p&gt;Period，正確&amp;quot;P-re-诶&amp;quot;&lt;/p&gt;
&lt;p&gt;copy，錯誤&amp;quot;摳比&amp;quot;，正確&amp;quot;咖痞&amp;quot;&lt;/p&gt;
&lt;p&gt;lambda，正確&amp;quot;ㄌ一ㄢ-打&amp;quot;&lt;/p&gt;
&lt;p&gt;image，錯誤&amp;quot;一美舉&amp;quot;，正確&amp;quot;一米舉&amp;quot;&lt;/p&gt;
&lt;p&gt;Algorithm，正確&amp;quot;凹狗-rithm&amp;quot;&lt;/p&gt;
&lt;p&gt;width，錯誤&amp;quot;wide&amp;quot;，正確&amp;quot;with&amp;quot;，當作d不存在&lt;/p&gt;
&lt;p&gt;lock，錯誤&amp;quot;肉可&amp;quot;，正確&amp;quot;辣可&amp;quot;&lt;/p&gt;
&lt;p&gt;query，錯誤&amp;quot;誇-李&amp;quot;，正確&amp;quot;ㄎㄨㄧ-ㄜˇ-ry&amp;quot;3音連速念&lt;/p&gt;
&lt;p&gt;confirm，錯誤&amp;quot;康鳳&amp;quot;，正確&amp;quot;ken-firm&amp;quot;，firm=&amp;ldquo;份兒&amp;quot;連念。這是認證、確認的意思&lt;/p&gt;
&lt;p&gt;conform，錯誤&amp;quot;康鳳&amp;rdquo;，正確&amp;quot;ken-form&amp;quot;。這是符合的意思，兩字常常誤用誤念&lt;/p&gt;
&lt;p&gt;register，錯誤&amp;quot;re-季-ster&amp;quot;，正確&amp;quot;ㄌㄩㄝ-幾-ster&amp;quot;&lt;/p&gt;
&lt;p&gt;Arduino，正確&amp;quot;阿督衣no&amp;quot;&lt;/p&gt;
&lt;p&gt;result，錯誤&amp;quot;re-造&amp;quot;，正確&amp;quot;re-奏特&amp;quot;，奏特連念&lt;/p&gt;
&lt;p&gt;chrome，錯誤&amp;quot;恐龍米&amp;quot;，正確&amp;quot;窟窿&amp;quot;連念到近乎一個音&lt;/p&gt;
&lt;p&gt;null，有些人念&amp;quot;怒偶&amp;quot;，正宗應為&amp;quot;鬧&amp;quot;、或&amp;quot;NO&amp;quot;，但這跟區域有關係，就算誤念成nil大概也能懂，不用太強求&lt;/p&gt;
&lt;p&gt;record，做名詞紀錄時，正確&amp;quot;ㄌㄩㄝ-渴d&amp;quot;，d幾乎不發音&lt;/p&gt;
&lt;p&gt;record，做動詞紀錄時，正確&amp;quot;re-扣d&amp;quot;，規律幾乎都是名詞重音在前，動詞重音在後&lt;/p&gt;
&lt;p&gt;resume，做名詞履歷時，正確&amp;quot;ㄌㄩㄝ-su-美&amp;quot;，重音在前&lt;/p&gt;
&lt;p&gt;resume，做動詞恢復時，正確&amp;quot;re-zoom&amp;quot;，重音在後&lt;/p&gt;
&lt;p&gt;modem，錯誤&amp;quot;某店&amp;quot;，正確&amp;quot;ㄇㄡ-等&amp;quot;&lt;/p&gt;
&lt;p&gt;cancel，正確&amp;quot;ken-叟&amp;quot;，取消&lt;/p&gt;
&lt;p&gt;cancer，正確&amp;quot;ken-ser&amp;quot;，癌症，兩字常常誤用誤念&lt;/p&gt;
&lt;p&gt;guarantee，正確&amp;quot;ㄍㄟ-掄-替&amp;quot;&lt;/p&gt;
&lt;p&gt;standard，錯誤&amp;quot;stan-打&amp;quot;，正確&amp;quot;stan-得兒&amp;quot;&lt;/p&gt;
&lt;p&gt;execute，正確&amp;quot;ㄟ-ser-cute&amp;quot;&lt;/p&gt;
&lt;p&gt;compile，正確&amp;quot;康-派-偶&amp;quot;，動詞編譯&lt;/p&gt;
&lt;p&gt;compiler，正確&amp;quot;康-派l-惹&amp;quot;，l幾乎不發音，名詞編譯器&lt;/p&gt;
&lt;p&gt;exit，正確&amp;quot;ㄟㄎ-sit&amp;quot;，常誤念成exist&lt;/p&gt;
&lt;p&gt;vehicle，正確&amp;quot;V-诶口&amp;quot;&lt;/p&gt;
- https://yoziming.github.io/post/211120-it-english-taiwanese-problems/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>流程控制:嵌套循環、break與continue</title>
        <link>https://yoziming.github.io/post/211120-agg-ja-05/</link>
        <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211120-agg-ja-05/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211120-agg-ja-05/ -&lt;h1 id=&#34;嵌套循環&#34;&gt;嵌套循環&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;就是for中有for，有時候需要多花點時間理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;內層循環整個遍歷完，外層循環才執行一次&lt;/li&gt;
&lt;li&gt;假設外層循環要執行m次，內層循環要執行n次。整個跑完內層循環一共執行了m*n次&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-印菱形&#34;&gt;練習題-印菱形&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入想印的菱形邊長n=...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 上半部分(含中間最長邊)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= n; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; n - i; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; k = 0; k &amp;lt; i; k++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;* &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 下半部分(從最長-1開始)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= n; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; i; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; k = 0; k &amp;lt; n - i; k++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;* &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習題-乘法表&#34;&gt;練習題-乘法表&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 9; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 1; j &amp;lt;= 9; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; + j + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt; + i * j + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 只想要半邊則第二行j&amp;lt;=9改成j&amp;lt;=i
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習題-找完全數&#34;&gt;練習題-找完全數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;完全數（Perfect number），又稱完美數或完備數，是一些特殊的自然數：它所有的真因子（即除了自身以外的因數）的和，恰好等於它本身。例如6，它有因數1、2、3、6，除去它本身6外，其餘3個數相加，{1}+{2}+{3}=6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 1000; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 1; j &amp;lt; i; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % j == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sum += j;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (sum == i) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;為完全數&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;練習題-找質數&#34;&gt;練習題-找質數&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直觀版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 若把這行放在第一個循環中，則會聲明99次，占資源
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 2; i &amp;lt;= 10000; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 2; j &amp;lt; i; j++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % j == 0) { &lt;span style=&#34;color:#228b22&#34;&gt;// i被某數(2~自己-1)除盡
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 不是質數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;是質數&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 重置flag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小優化版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 若把這行放在第一個循環中，則會聲明99次，占資源
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 2; i &amp;lt;= 10000; i ++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 2; j &amp;lt; Math.&lt;span style=&#34;color:#658b00&#34;&gt;sqrt&lt;/span&gt;(i); j++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 優化1.開平方
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % j == 0) { &lt;span style=&#34;color:#228b22&#34;&gt;// i被某數(2~自己-1)除盡
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 不是質數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 優化2.找到一個因數就停
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (flag) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;是質數&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#228b22&#34;&gt;// 重置flag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;label簡潔版&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;label:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 2; i &amp;lt;= 10000; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; j = 2; j &amp;lt; Math.&lt;span style=&#34;color:#658b00&#34;&gt;sqrt&lt;/span&gt;(i); j++) { &lt;span style=&#34;color:#228b22&#34;&gt;// 優化1.開平方
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % j == 0) { &lt;span style=&#34;color:#228b22&#34;&gt;// i被某數(2~自己-1)除盡
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt; label; &lt;span style=&#34;color:#228b22&#34;&gt;// 找到任何因數就跳出(這裡要連跳出兩層，所以用label)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;是質數&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;補充-計算運行耗時&#34;&gt;補充-計算運行耗時&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;學到單元測試之前先用耗時當作運行效率的參考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; start = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// ...待測程式碼
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;long&lt;/span&gt; end = System.&lt;span style=&#34;color:#658b00&#34;&gt;currentTimeMillis&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;耗時為&amp;#34;&lt;/span&gt; + (end - start) + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;毫秒&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;break與continue&#34;&gt;break與continue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;break&lt;/code&gt;會&lt;strong&gt;跳出循環體&lt;/strong&gt;，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 10; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 5 == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 結果為1234
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;continue&lt;/code&gt;是&lt;strong&gt;跳過該次&lt;/strong&gt;循環體語句，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;lt;= 10; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % 5 == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;print&lt;/span&gt;(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 結果為12346789
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共通點:&lt;code&gt;break&lt;/code&gt;跟&lt;code&gt;continue&lt;/code&gt;之下都不能再聲明執行語句，否則報錯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;break&lt;/code&gt;跟&lt;code&gt;continue&lt;/code&gt;都只會跳過&lt;strong&gt;一層&lt;/strong&gt;(就近原則)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在&lt;code&gt;break&lt;/code&gt;跟&lt;code&gt;continue&lt;/code&gt;後面接&lt;code&gt;label&lt;/code&gt;使用達成跳轉，強烈不推薦&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;實作練習-家庭收支系統&#34;&gt;實作練習-家庭收支系統&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.Objects&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#008b45;text-decoration:underline&#34;&gt;java.util.Scanner&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;FamilyAccount&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; money = 10000;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        String detail = &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;收支\t變動\t餘額\t說明\n初始\t金額\t&amp;#34;&lt;/span&gt; + money + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t系統給你的&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (flag) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===家庭收支系統===&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===1.查看明細===&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===2.登記收入===&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===3.登記支出===&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===4.退    出===&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;請輸入&amp;lt;1-4&amp;gt;...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            String input = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取使用者輸入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (input) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===1.查看明細===&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(detail);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;明細結束!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===2.登記收入===&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入金額...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    String moneyInStr = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; moneyIn = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(moneyInStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    money += moneyIn;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入說明...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    String infoIn = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    detail += &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\n收入\t&amp;#34;&lt;/span&gt; + moneyInStr + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t\t&amp;#34;&lt;/span&gt; + money + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt; + infoIn;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;登記成功!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;===3.登記支出===&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入金額...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    String moneyOutStr = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; moneyOut = Integer.&lt;span style=&#34;color:#658b00&#34;&gt;parseInt&lt;/span&gt;(moneyOutStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    money -= moneyOut;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入說明...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    String infoOut = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    detail += &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\n支出\t&amp;#34;&lt;/span&gt; + moneyOutStr + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t\t&amp;#34;&lt;/span&gt; + money + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;\t&amp;#34;&lt;/span&gt; + infoOut;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;登記成功!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;確認退出?&amp;lt;Y/N&amp;gt;不分大小寫...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    String confirmExit = scan.&lt;span style=&#34;color:#658b00&#34;&gt;next&lt;/span&gt;(); &lt;span style=&#34;color:#228b22&#34;&gt;// 獲取使用者輸入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;                    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(confirmExit, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;) || Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(confirmExit, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        flag = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;歡迎下次使用!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(confirmExit, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;) || Objects.&lt;span style=&#34;color:#658b00&#34;&gt;equals&lt;/span&gt;(confirmExit, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;N&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;繼續使用&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入有誤，請重新輸入&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;知識點&#34;&gt;知識點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scan.next()&lt;/code&gt;收到空白內容(\t、\n、&amp;quot; &amp;ldquo;)它當作啥事都沒發生，比如我想接收&amp;quot;Y&amp;rdquo;，輸入&amp;quot;   Y&amp;quot;竟然也符合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比對&lt;code&gt;string&lt;/code&gt;使用&lt;code&gt;Objects.equals(目標string物件, &amp;quot;內容&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;string&lt;/code&gt;轉&lt;code&gt;int&lt;/code&gt;使用&lt;code&gt;int int_val = Integer.parseInt(str);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;關於中英數字混合使用&lt;code&gt;\t&lt;/code&gt;對不齊的原因與解法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t是補全&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;（&lt;/span&gt;8-前面字元的位元數%8&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;）&lt;/span&gt;的距離&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;也就是說前面有1個字元那麼在1個字元後輸出一個&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;則&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t的長度為7個字元長度
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;輸出結果對不齊是因為輸出的資料有些大於8個字元&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;有些小於8個字元
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;解法:用&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34; \t&amp;#34;&lt;/span&gt;(前面加一個空格)&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;或直接用&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;t來對齊
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211120-agg-ja-05/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>流程控制:if、switch、for、while</title>
        <link>https://yoziming.github.io/post/211119-agg-ja-04/</link>
        <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211119-agg-ja-04/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211119-agg-ja-04/ -&lt;h1 id=&#34;分支控制&#34;&gt;分支控制&lt;/h1&gt;
&lt;h3 id=&#34;if-else&#34;&gt;if-else&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;基礎都一樣不多贅述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特殊情況有人不加&lt;code&gt;{}&lt;/code&gt;，這種情境下就近原則且只控制一行(到第一個&lt;code&gt;;&lt;/code&gt;為止)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (1 == 2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;結果為
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有單行時可以接&lt;code&gt;else&lt;/code&gt;且也會就近選擇&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (1 == 2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;d&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;結果為d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多行時直接報錯&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (1 == 2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;報錯
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小結:不加&lt;code&gt;{}&lt;/code&gt;的全部拖出去打&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;switch-case&#34;&gt;switch-case&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;結構:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;switch&lt;/span&gt; (表達式) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 常量1:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 執行語句
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 常量2...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 預設執行語句
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;如果不加&lt;code&gt;break;&lt;/code&gt;就不會跳出，而是會穿透且之下的語句全都執行一遍&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基於上述特性，可以合併使用，舉例:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 1:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 2:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 3:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	 &lt;span style=&#34;color:#228b22&#34;&gt;// 執行語句123的情況
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 4:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;也可以用在需要壘加的情況&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;舉例
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 9:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a += 10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 8:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a += 5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;case&lt;/span&gt; 7:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a += 100
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表達式只能為6種類型: byte、short、char、int、枚舉、string，&lt;strong&gt;不能是bool&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;case&lt;/code&gt;後只能放常量，不能是範圍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;default&lt;/code&gt;不一定要有且位置是靈活可變的，但注意若不擺在最尾需要加入&lt;code&gt;break;&lt;/code&gt;，否則會多執行下一行，很蠢，不建議這樣用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分支控制小結&#34;&gt;分支控制小結&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;凡是可以用switch-case結構的都能轉成if-else，反之不成立&lt;/li&gt;
&lt;li&gt;兩種都可用的情況(條件不要太多)優先考慮switch-case，執行效率較高&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;循環控制&#34;&gt;循環控制&lt;/h1&gt;
&lt;h3 id=&#34;for&#34;&gt;for&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for的結構&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt;(初始條件;循環條件;疊代){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    循環體;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;題外話疊代與迭代&#34;&gt;題外話：「疊代」與「迭代」&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;「疊代」：累進取代，不斷重複進行後者加上前者、替換掉前者的動作；&lt;/li&gt;
&lt;li&gt;「迭代」：替換取代，表示幾個固定的物件彼此輪替取代的動作；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;繁體中文兩種用法都存在，迭代用於只有幾個條件在那邊不停輪換的情況，比如四季迭代。一般軟體用的應為疊代。&lt;/p&gt;
&lt;h3 id=&#34;獲取使用者輸入&#34;&gt;獲取使用者輸入&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Scanner scanner = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;System.in開啟了一個InputStream來獲取使用者的輸入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;把使用者的輸入傳給剛剛new建立的scanner物件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;這個scanner物件是來自java.util.Scanner包中定義的Scanner類
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;接著用scanner.next類型()來決定要接收的數據類型，舉例接收i
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; number = scanner.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;for練習題-最大公因數與最小公倍數&#34;&gt;for練習題-最大公因數與最小公倍數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;輸入m、n，求最大公因數與最小公倍數&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Scanner scanner = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入數字m...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; m = scanner.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入數字n...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; n = scanner.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; min = 0, max = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 1; i &amp;gt; 0; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (m % i == 0 &amp;amp;&amp;amp; n % i == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                min = i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i % m == 0 &amp;amp;&amp;amp; i % n == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                max = i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;數字&amp;#34;&lt;/span&gt; + m + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;與數字&amp;#34;&lt;/span&gt; + n + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;之最大公因數為&amp;#34;&lt;/span&gt; + min + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;最小公倍數為&amp;#34;&lt;/span&gt; + max);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 這個效率不夠高，改進: 先找出輸入的2數誰大
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 最大公因數=for循環從大往小減，遇到第一個就break
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;for練習題-水仙花數&#34;&gt;for練習題-水仙花數&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;水仙花數：是指一個n位的正整數(n&amp;gt;=3),它的每個數字的n次冪之和等於它本身。例如：1^3 + 5^3+ 3^3 = 153&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i = 100; i &amp;lt; 1000; i++) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; a = i / 100; &lt;span style=&#34;color:#228b22&#34;&gt;// 百位
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; b = i % 100 / 10; &lt;span style=&#34;color:#228b22&#34;&gt;// 十位
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; c = i % 10; &lt;span style=&#34;color:#228b22&#34;&gt;// 個位
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (i == (a * a * a + b * b * b + c * c * c)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;循環控制while&#34;&gt;循環控制while&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;其實教學影片中這是第5天的內容，不過while跟for類似所以我筆記寫一起了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;while的結構&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;初始條件;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(循環條件){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    循環體;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    疊代;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for跟while可以互相轉換，他們實際的差別在變量的作用域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因為while的初始條件寫在外面，循環結束也能使用(全局變量與局部變量的區別)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;do-while&#34;&gt;do-while&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;do-while的結構&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;初始條件;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;do&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    循環體;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    疊代;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt;(循環條件);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上來就至少執行一次循環跟疊代，然後才進入判斷&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;少用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;練習題-無限循環&#34;&gt;練習題-無限循環&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;輸入不限制數量的正負整數，直到輸入0為中止，顯示正負整數的數量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Scanner scan = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;new&lt;/span&gt; Scanner(System.&lt;span style=&#34;color:#658b00&#34;&gt;in&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; pos = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; neg = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; (; ; ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;輸入任意正負整數，0為中止...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; input = scan.&lt;span style=&#34;color:#658b00&#34;&gt;nextInt&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (input == 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;中止，正數個數為&amp;#34;&lt;/span&gt; + pos + &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;，負數個數為&amp;#34;&lt;/span&gt; + neg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (input &amp;gt; 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                pos++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                neg++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for ( ; ; )&lt;/code&gt;跟&lt;code&gt;while(true)&lt;/code&gt;相等&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;JAVA的if與for用起來跟go的差不多，就switch會穿透要記得&lt;code&gt;break&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;JAVA中聲明變量必須要賦值否則編譯報錯&lt;/li&gt;
&lt;li&gt;用if多個條件嵌套時正常從涵蓋範圍小往大寫，不要不加&lt;code&gt;{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;從go的角度看while沒啥必要性，do-while簡直邪道，盡量少用&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211119-agg-ja-04/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>IntelliJ IDEA設定與常用快捷鍵</title>
        <link>https://yoziming.github.io/post/211117-idea-shortkey/</link>
        <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211117-idea-shortkey/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211117-idea-shortkey/ -&lt;h1 id=&#34;idea基礎設定&#34;&gt;IDEA基礎設定&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安裝的根目錄，舉例&amp;hellip;\IntelliJ IDEA 2021.2.3\bin\idea64.exe.vmoptions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;編輯這個idea64.exe.vmoptions，改成-Xmx1024m -Xms2048m&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ctrl+alt+s開啟設定 -&amp;gt; plugins插件 -&amp;gt; 搜尋chinese -&amp;gt; 安裝重啟 -&amp;gt; 中文化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;plugins插件 -&amp;gt; 搜尋save actions-&amp;gt; 安裝重啟 -&amp;gt; 存檔時自動格式化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外觀-使用自定義字體打勾-Sarasa mono&amp;hellip;，大小改14&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更紗黑體Sarasa-Gothic&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/be5invis/Sarasa-Gothic&#34;&gt;https://github.com/be5invis/Sarasa-Gothic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;特性:融合Iosevka(程式碼常用的等寬字型)跟Source Han Sans(思源黑)，有等距、繁簡中日韓不缺字，簡直完美&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編譯器-字體-一樣改，大小我是設18、行高1.1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;插件&#34;&gt;插件&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;image-20220101103501090.png&#34; alt=&#34;image-20220101103501090&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20220113015947984.png&#34; alt=&#34;image-20220113015947984&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;常用快捷鍵&#34;&gt;常用快捷鍵&lt;/h1&gt;
&lt;h3 id=&#34;視窗&#34;&gt;視窗&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Close All Tabs : alt + w&lt;/li&gt;
&lt;li&gt;Terminal : ctrl + alt + 0&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;選取&#34;&gt;選取&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ctrl + E 最近使用的檔案列表&lt;/li&gt;
&lt;li&gt;选中下一个相同内容的快捷键(vs code中的Ctrl+D)：&lt;strong&gt;Alt + J&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;選中匹配的大括號ctrl+] 或 ctrl+[&lt;/li&gt;
&lt;li&gt;快速移動到警告處(黃標或紅標)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;以行為單位&#34;&gt;以「行」為單位&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;複製 : ctrl + D&lt;/li&gt;
&lt;li&gt;移動 : ctrl + shift + ↑/↓&lt;/li&gt;
&lt;li&gt;註解 : ctrl + /&lt;/li&gt;
&lt;li&gt;刪除 : ctrl+x(其實是剪下)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;以區塊為單位&#34;&gt;以「區塊」為單位&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;擴增選取 : ctrl + W&lt;/li&gt;
&lt;li&gt;遞減選取 : ctrl + shift + W&lt;/li&gt;
&lt;li&gt;更改大小寫 : ctrl + shift + U&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自動功能-&#34;&gt;自動功能 :&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;自動補全 : alt + enter&lt;/li&gt;
&lt;li&gt;自動產生 : alt + Ins&lt;/li&gt;
&lt;li&gt;自動排版 : ctrl + alt + L&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他&#34;&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;顯示形參列表:ctrl+p&lt;/li&gt;
&lt;li&gt;shift + shift  全域搜索&lt;/li&gt;
&lt;li&gt;查找當前文件結構(有哪些方法、屬性):ctrl+F12&lt;/li&gt;
&lt;li&gt;ctrl+alt+shift+n 找方法&lt;/li&gt;
&lt;li&gt;Ctrl+H查看當前接口或抽象的子類&lt;/li&gt;
&lt;li&gt;全部折疊ctrl + shift   + &lt;code&gt;-減號&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;個人設定&#34;&gt;個人設定&lt;/h1&gt;
&lt;h2 id=&#34;快捷鍵&#34;&gt;快捷鍵&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;image-20220101103933540.png&#34; alt=&#34;image-20220101103933540&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20220101103802306.png&#34; alt=&#34;image-20220101103802306&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;新專案設定&#34;&gt;新專案設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新專案設定，有時候覺得奇怪不是設定過怎又跑掉，原因是在這&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220113015536014.png&#34; alt=&#34;image-20220113015536014&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比較重要的是這個properties編碼跟save Actions插件的自動格式化、導包等等設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220113015702465.png&#34; alt=&#34;image-20220113015702465&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他舒適設定&#34;&gt;其他舒適設定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;限制開啟視窗數量:File-&amp;gt;Settings-&amp;gt;Editor-&amp;gt;General-&amp;gt;Editor Tab-&amp;gt;Tab limit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20220101102831547.png&#34; alt=&#34;image-20220101102831547&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;過濾顯示檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*.iml;*.idea;*.sh;*.classpath;*.project;*.settings;target;*.mvn;*.cmd;mvnw
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;image-20220113015412849.png&#34; alt=&#34;image-20220113015412849&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;代碼樣式&#34;&gt;代碼樣式&lt;/h2&gt;
&lt;h4 id=&#34;java&#34;&gt;Java&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;image-20220101103028728.png&#34; alt=&#34;image-20220101103028728&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20220101103119810.png&#34; alt=&#34;image-20220101103119810&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20220101103200393.png&#34; alt=&#34;image-20220101103200393&#34;&gt;&lt;/p&gt;
- https://yoziming.github.io/post/211117-idea-shortkey/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>運算符:邏輯運算、賦值、位運算與三元運算</title>
        <link>https://yoziming.github.io/post/211118-agg-ja-03/</link>
        <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211118-agg-ja-03/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211118-agg-ja-03/ -&lt;h1 id=&#34;運算符&#34;&gt;運算符&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;image-20211210202428227.png&#34; alt=&#34;image-20211210202428227&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;加減乘除&#34;&gt;加減乘除&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;基本都一樣不再贅述&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;-取餘的規則&#34;&gt;&lt;code&gt;%&lt;/code&gt; 取餘的規則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;結果的符號與被取餘的數符號相同，舉例&lt;code&gt;-12%5=-2&lt;/code&gt;、&lt;code&gt;12%-5=2&lt;/code&gt;、&lt;code&gt;-12%-5=-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;實際開發中取餘常用來判斷是否能除盡&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自增自減的規則&#34;&gt;自增自減的規則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;++a&lt;/code&gt;，(前++)先運算後取值，舉例&lt;code&gt;a=2;b=++a;&lt;/code&gt;結果&lt;code&gt;a=3;b=3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a++&lt;/code&gt;，先取值後運算，舉例&lt;code&gt;a=2;b=a++;&lt;/code&gt;結果&lt;code&gt;a=3;b=2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--a&lt;/code&gt;，先運算後取值，舉例&lt;code&gt;a=2;b=--a;&lt;/code&gt;結果&lt;code&gt;a=1;b=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a--&lt;/code&gt;，先取值後運算，舉例&lt;code&gt;a=2;b=a--;&lt;/code&gt;結果&lt;code&gt;a=1;b=2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;自增減不會改變數據類型(但可能會溢位)&lt;/li&gt;
&lt;li&gt;不可連用，舉例&lt;code&gt;a++++&lt;/code&gt;會報錯&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外+也能用在字符串聯接，舉例&lt;code&gt;&amp;quot;he&amp;quot;+&amp;quot;llo&amp;quot;=&amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;-賦值的規則&#34;&gt;&lt;code&gt;=&lt;/code&gt; 賦值的規則&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以連續賦值，舉例&lt;code&gt;int i1,i2;&lt;/code&gt;   &lt;code&gt;i1=i2=10;&lt;/code&gt;   &lt;code&gt;int i3=10,j3=20;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+=&lt;/code&gt;、&lt;code&gt;-=&lt;/code&gt;、&lt;code&gt;*=&lt;/code&gt;、&lt;code&gt;/=&lt;/code&gt;、&lt;code&gt;%=&lt;/code&gt; 不會改變數據類型&lt;/li&gt;
&lt;li&gt;面試題&lt;code&gt;n=10;&lt;/code&gt; &lt;code&gt;n+=(n++)+(++n);&lt;/code&gt; n=?&lt;/li&gt;
&lt;li&gt;解: 拆成 &lt;code&gt;n = n + 10 + 12 =32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;寫&lt;code&gt;==&lt;/code&gt;則是比較運算符，返回&lt;code&gt;boolean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;邏輯運算符&#34;&gt;邏輯運算符&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20211210202649381.png&#34; alt=&#34;image-20211210202649381&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;乍看邏輯跟短路結果是一樣，實際使用上差異為&lt;strong&gt;短路後的東西就不執行了&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;舉例: &lt;code&gt;b=false;&lt;/code&gt; &lt;code&gt;n=10;&lt;/code&gt; &lt;code&gt;b &amp;amp;&amp;amp; (n++&amp;gt;0)=false&lt;/code&gt;，但&lt;code&gt;n=10&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;位運算符&#34;&gt;位運算符&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20211210202716421.png&#34; alt=&#34;image-20211210202716421&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作的都是整數&lt;/li&gt;
&lt;li&gt;&amp;laquo; 向左移一位相當於*2，&amp;raquo;向右移一位相當於/2，有可能溢位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211210202744845.png&#34; alt=&#34;image-20211210202744845&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;三元運算符&#34;&gt;三元運算符&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20211210202847702.png&#34; alt=&#34;image-20211210202847702&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;結構: &lt;code&gt;(條件表達式) ? 表達式1 : 表達式2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;說明: 條件表達式=&lt;code&gt;boolean&lt;/code&gt;，如果是&lt;code&gt;true&lt;/code&gt;則執行表達式1，反之執行2&lt;/li&gt;
&lt;li&gt;表達式1 與 表達式2 要求類型一致(至少能裝進同一個類型)&lt;/li&gt;
&lt;li&gt;其實就是簡易版的&lt;code&gt;if&lt;/code&gt;，可以嵌套使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;優先級&#34;&gt;優先級&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;image-20211210202908276.png&#34; alt=&#34;image-20211210202908276&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本原則是從上到下，從左到右，括號優先&lt;/li&gt;
&lt;li&gt;自增減、賦值運算、三元運算才從右往左看&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211118-agg-ja-03/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>關鍵字、變量、數據類型與轉換</title>
        <link>https://yoziming.github.io/post/211117-agg-ja-02/</link>
        <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211117-agg-ja-02/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211117-agg-ja-02/ -&lt;h1 id=&#34;關鍵字&#34;&gt;關鍵字&lt;/h1&gt;
&lt;h3 id=&#34;關鍵字-1&#34;&gt;關鍵字&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;有特殊含意與用途，所有關鍵字都是小寫&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如:&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;new&lt;/code&gt;&amp;hellip;等等，後面都會一一接觸到&lt;/p&gt;
&lt;h3 id=&#34;保留字&#34;&gt;保留字&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;未來版本可能會用到而保留&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如:&lt;code&gt;goto&lt;/code&gt;、&lt;code&gt;const&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;標識符identifier&#34;&gt;標識符(identifier)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可以自己命名的(類、變量、函數&amp;hellip;等)就叫標識符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;由字母、數字、&lt;code&gt;_&lt;/code&gt;、&lt;code&gt;$&lt;/code&gt;組成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;數字不可為開頭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;能包含關鍵字但不能純用關鍵字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;嚴格區分大小寫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能包含空格&lt;/p&gt;
&lt;h5 id=&#34;標識符的命名規範&#34;&gt;標識符的命名規範&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;不強制但最好遵守&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包名:多單詞所有字母小寫&lt;code&gt;aaabbbccc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;類名、接口名:大駝峰(首字母大寫)&lt;code&gt;AaaBbbCcc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;變量名、方法名:開頭小寫後面首字母大寫(小駝峰)&lt;code&gt;aaaBbbCcc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;常量名:全大寫，用下畫線相連&lt;code&gt;AAA_BBB_CCC&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命名要有意義，見名知意&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;變量variable&#34;&gt;變量(variable)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;記憶體中的一個儲存區域，使用的基本單位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;必須先聲明，後使用&lt;/li&gt;
&lt;li&gt;作用域在其定義所在的一對&lt;code&gt;{}&lt;/code&gt;內，只在其作用域中有效&lt;/li&gt;
&lt;li&gt;同一作用域中不可重複&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;數據類型&#34;&gt;數據類型&lt;/h1&gt;
&lt;h3 id=&#34;基礎數據類型&#34;&gt;基礎數據類型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;六種數字類型（四個整數型，兩個浮點型），一種字符類型，還有一種布爾型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;byte&#34;&gt;&lt;strong&gt;byte&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;byte數據類型是8位、有符號的，以二進制補碼表示的整數&lt;/li&gt;
&lt;li&gt;最小值是-128（-2^7）最大值是127（2^7-1）預設值是0&lt;/li&gt;
&lt;li&gt;byte類型用在大型數組中節約空間，主要代替整數，因為byte變量佔用的空間只有int類型的四分之一&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;byte a = 100&lt;/code&gt;，&lt;code&gt;byte b = -50&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;short&#34;&gt;&lt;strong&gt;short&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;short數據類型是16位、有符號的以二進制補碼表示的整數&lt;/li&gt;
&lt;li&gt;最小值是-32768（-2^15）最大值是32767（2^15 - 1）預設值是0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Short&lt;/code&gt;數據類型也可以像&lt;code&gt;byte&lt;/code&gt;那樣節省空間 一個&lt;code&gt;short&lt;/code&gt;變量是&lt;code&gt;int&lt;/code&gt;型變量所佔空間的二分之一&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;short s = 1000&lt;/code&gt;，&lt;code&gt;short r = -20000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;int&#34;&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;int數據類型是32位、有符號的以二進制補碼表示的整數&lt;/li&gt;
&lt;li&gt;最小值是-2,147,483,648（-2^31）最大值是2,147,483,647（2^31 - 1）預設值是0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一般整型變量預設為&lt;code&gt;int&lt;/code&gt;類型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;int a = 100000&lt;/code&gt;, &lt;code&gt;int b = -200000&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;long&#34;&gt;&lt;strong&gt;long&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;long數據類型是64位、有符號的以二進制補碼表示的整數&lt;/li&gt;
&lt;li&gt;最小值是-9,223,372,036,854,775,808（-2^63）&lt;/li&gt;
&lt;li&gt;最大值是9,223,372,036,854,775,807（2^63 -1）&lt;/li&gt;
&lt;li&gt;這種類型主要使用在需要比較大整數的系統上&lt;/li&gt;
&lt;li&gt;必須以&lt;code&gt;L&lt;/code&gt;(大小都可)結尾，不加自動被當成&lt;code&gt;int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;預設值是0L&lt;/li&gt;
&lt;li&gt;例子： &lt;code&gt;long a = 100000L&lt;/code&gt;，&lt;code&gt;Long b = -200000L&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;float&#34;&gt;&lt;strong&gt;float&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;的儲存結構是1個符號位，8個指數位，23個尾數，符合&lt;code&gt;IEEE 754&lt;/code&gt;標準的浮點數&lt;/li&gt;
&lt;li&gt;可以看做&lt;code&gt;float&lt;/code&gt;只有24位來表示精度，所以&lt;code&gt;int&lt;/code&gt;或&lt;code&gt;long轉``float&lt;/code&gt;可能會有精度損失&lt;/li&gt;
&lt;li&gt;必須以&lt;code&gt;F&lt;/code&gt;(大小都可)結尾，不加報錯&lt;/li&gt;
&lt;li&gt;預設值是&lt;code&gt;0.0f&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;浮點數不能用來表示精確的值，如貨幣&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;float f1 = 234.5f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;double&#34;&gt;&lt;strong&gt;double&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;數據類型是雙精度、64位、符合&lt;code&gt;IEEE 754&lt;/code&gt;標準的浮點數&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浮點數的預設類型為&lt;code&gt;double&lt;/code&gt;類型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;類型同樣不能表示精確的值，如貨幣&lt;/li&gt;
&lt;li&gt;預設值是&lt;code&gt;0.0d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;double d1 = 123.4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;char&#34;&gt;&lt;strong&gt;char&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;char類型是一個單一的16位Unicode字符(兩個字節)&lt;/li&gt;
&lt;li&gt;最小值是&amp;rsquo;&lt;code&gt;\u0000&lt;/code&gt;&amp;rsquo;（即為0）最大值是&amp;rsquo;&lt;code&gt;\uffff&lt;/code&gt;&amp;rsquo;（即為65,535）&lt;/li&gt;
&lt;li&gt;char數據類型可以儲存任何字符，包含轉義字符(如&lt;code&gt;\n&lt;/code&gt;、&lt;code&gt;\t&lt;/code&gt;等等)&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;char letter = &#39;A&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;boolean&#34;&gt;&lt;strong&gt;boolean&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;數據類型表示一位的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只有兩個取值：&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;預設值是&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這種類型只作為一種標誌來記錄true/false情況&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;實際大小不定，取決於虛擬機&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;code&gt;boolean one = true&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自動類型提升隱式類型轉換&#34;&gt;自動類型提升(隱式類型轉換)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;針對上面7種基礎數據類型混合運算時(不含boolean)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不同類型運算時容量小的提升為大的，注意&lt;strong&gt;容量&lt;/strong&gt;指的是數的&lt;strong&gt;范蓋範圍&lt;/strong&gt;，例如佔64位的long可以提升成32位的float(代價是丟失精度)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;byte、char、short -&amp;gt; int -&amp;gt; long -&amp;gt; float -&amp;gt; double&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;char因為在0~65535有可能在byte與short之間變動，但總之byte、short、char三者做運算時結果必須為int型(例如&lt;code&gt;byte+byte=int&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;強制類型轉換顯式類型轉換&#34;&gt;強制類型轉換(顯式類型轉換)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;容量高轉低，自動類型提升的逆運算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;double&lt;/span&gt; d1 = 12.&lt;span style=&#34;color:#658b00&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; i1 = (&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;)d1; &lt;span style=&#34;color:#228b22&#34;&gt;// 截斷操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用強轉符()&lt;/li&gt;
&lt;li&gt;可能導致精度損失或溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;引用類型&#34;&gt;引用類型&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;包含:字符串(string)、類(class)、接口(interface)、數組(array)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在Java中，引用類型的變量非常類似於C/C++的指針 引用類型指向一個對象，指向對象的變量是引用變量 這些變量在聲明時被指定為一個特定的類型，比如Employee、Pubby等 變量一旦聲明後，類型就不能被改變了&lt;/li&gt;
&lt;li&gt;所有引用類型的預設值都是&lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一個引用變量可以用來引用與任何與之兼容的類型&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;Site site = new Site(&amp;quot;w3big&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字符串string&#34;&gt;字符串(string)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;string是一種特殊的引用類型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;聲明: &lt;code&gt;String s1 = &amp;quot;xxx&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;可以跟8種基礎數據類型做運算，且只能是連接運算(&lt;code&gt;+&lt;/code&gt;)，結果仍是&lt;code&gt;String&lt;/code&gt;類型&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;n進制&#34;&gt;N進制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;N進制轉十進制: 指數加權法&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;image-20211117191625174.png&#34; alt=&#34;image-20211117191625174&#34;&gt;&lt;/li&gt;
&lt;li&gt;十進制轉N進制:除N取餘的逆&lt;/li&gt;
&lt;li&gt;最高位(符號位): 0正1負&lt;/li&gt;
&lt;li&gt;正數: 原碼=反碼=補碼&lt;/li&gt;
&lt;li&gt;負數: 除符號位以外其餘取反&lt;/li&gt;
&lt;li&gt;補碼: 反碼 + 1(可能會進位)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;電子數據底層儲存的是補碼!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211117-agg-ja-02/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Java簡介、環境配置、HelloWorld</title>
        <link>https://yoziming.github.io/post/211116-agg-ja-01/</link>
        <pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211116-agg-ja-01/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211116-agg-ja-01/ -&lt;blockquote&gt;
&lt;p&gt;本筆記基於這份2019年4月的公開教學影片
尚硅谷Java入门视频教程(在线答疑+Java面试真题)
&lt;a href=&#34;https://www.bilibili.com/video/BV1Kb411W75N?p=1&#34;&gt;https://www.bilibili.com/video/BV1Kb411W75N?p=1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;認識java環境配置&#34;&gt;認識Java、環境配置&lt;/h1&gt;
&lt;h3 id=&#34;常用dos操作&#34;&gt;常用DOS操作&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;就是windows的cmd，影視中駭客情節常常出現的小黑窗，可以用文字操作基本的軟體功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cd=進入指定目錄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cd..=回上層&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cd=回到根目錄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;變更硬碟目錄=直接輸入d:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dir=列出當前目錄下的清單&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;del=刪除檔案(對文件夾使用=刪除文件內所有檔案)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;md=創建目錄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rd=刪除目錄&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exit=退出&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java體系在不同平台的版本演化&#34;&gt;Java體系在不同平台的版本演化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java SE，標準版，桌面級應用等，基礎API&lt;/li&gt;
&lt;li&gt;Java EE，企業版，主要用於Web開發，包含Servlet、JSP等技術&lt;/li&gt;
&lt;li&gt;Java ME，小型版，古老的PDA、手機等，已過時&lt;/li&gt;
&lt;li&gt;Java Card，面向小程序(Applets)，運行在小設備(如智能卡)等平台&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java語言特性&#34;&gt;Java語言特性&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;由繼承的脈絡可說JAVA是類C語言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;強制物件導向:總是基於&amp;quot;某件東西去做事&amp;quot;，得先搞懂何謂&amp;quot;類&amp;quot;與&amp;quot;物件&amp;quot;
&lt;ul&gt;
&lt;li&gt;三大特性:封裝、繼承、多態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;健壯性:強類型、異常處理、GC(垃圾回收)、丟棄指針等&lt;/li&gt;
&lt;li&gt;跨平台:只要平台能跑JVM(虛擬機)就能跑JAVA&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java的運行環境&#34;&gt;Java的運行環境&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK包含JRE包含JVM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JDK，Java Development Kit，開發工具包，給開發人員用的，包含了JRE以及編譯工具(javac.exe)、打包工具(jar.exe)&amp;hellip;等等。&lt;/li&gt;
&lt;li&gt;JRE，Java Runtime Environment，運行環境，包含JVM虛擬機和運作需要的核心類庫等等，簡單說就是運行由JDK做好的東西。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java環境配置&#34;&gt;Java環境配置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下載JDK 8u202版本，最後的商用免費版(若純個人使用不論版本都是免費的)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置環境變數(win10為例)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PATH=windows cmd執行命令語句時搜索執行檔的位置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;WIN10-設定-系統(左上)-關於(左下)-進階系統設定(右方)-進階-環境變數-系統變數
PATH=%JAVA_HOME%;%JAVA_HOME%\bin
JAVA_HOME=G:\Java\jdk1.8.0_202\ (你的JDK安裝位置)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;檢驗，任意處開一個cmd，輸入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -version
javac.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;java的編譯&#34;&gt;Java的編譯&lt;/h3&gt;
&lt;p&gt;.java(源文件) -&amp;gt; javac.exe(編譯) -&amp;gt; .class(二進制文件) -&amp;gt; java.exe(運行) -&amp;gt; 結果&lt;/p&gt;
&lt;h3 id=&#34;helloworld&#34;&gt;HelloWorld&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;記事本創建一個&lt;code&gt;HelloWorld.java&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;HelloWorld&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;(String[] args)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      System.&lt;span style=&#34;color:#658b00&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#658b00&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開啟cmd，編譯之&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;javac HelloWorld.java
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;執行剛剛編譯出來的HelloWorld.class&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java HelloWorld
(注意後面不要加.class，win10會報錯)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;java的注釋&#34;&gt;Java的注釋&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;編譯後的.class文件不包含注釋訊息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;單行注釋&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 這是一條單行注釋
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多行注釋(注意不可嵌套使用)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;這是多行注釋1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;這是多行注釋2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文檔注釋(JAVA特有)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;這是文檔注釋
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;@author 指定作者
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;@version 版本
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文檔注釋的內容可以被javadoc解析，生成說明文檔，舉例:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;javadoc -d xxx(生成說明的文件夾名稱) -author -version -encoding utf-8 xxx.java
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意兩點:首先需要是一個public class；若有編碼問題加入-encoding utf-8&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;小結&#34;&gt;小結&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;應用程式=演算法(關乎是否正確)+數據結構(關乎儲存的效率)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java的程序編寫-運行過程:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;編寫:透過IDE編輯，保存為.java格式
編譯:透過javac命令編譯，轉換為.class格式
運行:透過JRE運行
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在一個.java文件中可以聲明多個class(有幾個編譯時就產生幾個)，但最多只能有一個類為&lt;code&gt;public&lt;/code&gt;，且聲明為&lt;code&gt;public&lt;/code&gt;的類名必須與源文件名相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序的入口為&lt;code&gt;main()&lt;/code&gt;方法，格式固定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每一行執行語句都以分號&amp;quot;&lt;code&gt;;&lt;/code&gt;&amp;ldquo;結束。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持好習慣&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. 寫注釋
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 行尾風格&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;例如:&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#008b45;font-weight:bold&#34;&gt;HelloWorld&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 運算符號左右加空格&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;，&lt;/span&gt;例如:1 + 2 * 3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
- https://yoziming.github.io/post/211116-agg-ja-01/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>LeetCode Easy: 1、9、13</title>
        <link>https://yoziming.github.io/post/211116-leetcode-easy-1-13/</link>
        <pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211116-leetcode-easy-1-13/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211116-leetcode-easy-1-13/ -&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum&#34;&gt;1. Two Sum&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;求某數組中哪兩位數的和等於X&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// go    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// nums []int=傳入的數組；target=X
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;twoSum&lt;/span&gt;(nums []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, target &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;) []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	m := &lt;span style=&#34;color:#658b00&#34;&gt;make&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#658b00&#34;&gt;len&lt;/span&gt;(nums))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i, num := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;range&lt;/span&gt; nums {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; idx, ok := m[target-num]; ok {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{idx, i}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		m[num] = i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; []&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-number&#34;&gt;9. Palindrome Number&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;判斷是否為迴文數字，例如121&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// java
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;isPalindrome&lt;/span&gt;(&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 判斷是否迴文，如121、2332、456654
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 負數或尾數是0或&amp;lt;10的顯然可以排除
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; (x &amp;lt; 0 || (x != 0 &amp;amp;&amp;amp; x % 10 == 0))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 開始將數字不斷拆開直到左右對半分為止
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; res = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;while&lt;/span&gt; (x &amp;gt; res) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// res跑一趟，相當於取出個位數，並反著向左拚出原來的數據
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        res = res * 10 + x % 10;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// x跑一趟則相當於切掉最右邊的數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        x = x / 10;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// 舉例456654跑三輪的結果是這樣
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// res=4, 45, 456
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#228b22&#34;&gt;// x=45665, 4566, 456
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 如果是偶數位x==res，x == res / 10是給奇數用的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; (x == res || x == res / 10);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/roman-to-integer&#34;&gt;13. Roman to Integer&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;羅馬字母轉成數字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// go 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// s=傳入的羅馬字串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;romanToInt&lt;/span&gt;(s &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// 創一個map將所有羅馬字對應數值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; romanMap = &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;byte&lt;/span&gt;]&lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;int&lt;/span&gt;{&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;V&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;X&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;L&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;50&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;500&lt;/span&gt;, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#b452cd&#34;&gt;1000&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;var&lt;/span&gt; result = romanMap[s[&lt;span style=&#34;color:#658b00&#34;&gt;len&lt;/span&gt;(s)-&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]] &lt;span style=&#34;color:#228b22&#34;&gt;// 先取最右邊的那1位羅馬字是多少
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;for&lt;/span&gt; i := &lt;span style=&#34;color:#658b00&#34;&gt;len&lt;/span&gt;(s) - &lt;span style=&#34;color:#b452cd&#34;&gt;2&lt;/span&gt;; i &amp;gt;= &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;; i-- { &lt;span style=&#34;color:#228b22&#34;&gt;// 從右2羅馬字開始往左數
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; romanMap[s[i]] &amp;lt; romanMap[s[i+&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;]] { &lt;span style=&#34;color:#228b22&#34;&gt;// 如果羅馬字右邊&amp;gt;左邊，例如IV或IX這種情況，表示要減去左邊位
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			result -= romanMap[s[i]]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			result += romanMap[s[i]] &lt;span style=&#34;color:#228b22&#34;&gt;// 否則相加
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;// 循環至i=0，也就是最左邊的羅馬字位也算完即是最終答案
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; result
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/211116-leetcode-easy-1-13/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>修改css或js後瀏覽器快取不更新問題</title>
        <link>https://yoziming.github.io/post/211017-explorer-cache-problems/</link>
        <pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211017-explorer-cache-problems/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211017-explorer-cache-problems/ -&lt;h1 id=&#34;修改css或js後瀏覽器快取不更新問題&#34;&gt;修改css或js後瀏覽器快取不更新問題&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;當初我真的是被這個整到懷疑人生&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解決方式一：&lt;/p&gt;
&lt;p&gt;​    使用者按Ctrl + F5強制重新整理頁面或者手動清空了瀏覽器的快取。此時瀏覽器會重新向伺服器獲取CSS和JS檔案,新的檔案便會生效。&lt;/p&gt;
&lt;p&gt;解決方式二：&lt;/p&gt;
&lt;p&gt;​    但是使用者量過大的時候總不能讓每個使用者一一清理快取吧，於是便從程式碼的角度著手解決這個問題。在js後面新增版本號，讓瀏覽器把這個JS檔案當做新的檔案重新向伺服器獲取資源。&lt;/p&gt;
&lt;p&gt;加版本號前：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;type&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;th:src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@{/js/test/index.js}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;加版本號後：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;type&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#658b00&#34;&gt;th:src&lt;/span&gt;=&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;@{/js/test/index.js?v=1.0}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;實際上這種方法在web也被很廣泛的應用，有時候開網頁看到網址後面一串?t=65412378946之類的，原來就是用時間產生的亂數，專門用來防快取&lt;/p&gt;
&lt;h2 id=&#34;參考&#34;&gt;參考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.itread01.com/content/1548610940.html&#34;&gt;https://www.itread01.com/content/1548610940.html&lt;/a&gt;&lt;/p&gt;
- https://yoziming.github.io/post/211017-explorer-cache-problems/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker &amp; Hyper-V占用port問題</title>
        <link>https://yoziming.github.io/post/211015-docker-hyper-v-port-problem/</link>
        <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211015-docker-hyper-v-port-problem/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211015-docker-hyper-v-port-problem/ -&lt;h1 id=&#34;docker--hyper-v占用port問題&#34;&gt;Docker &amp;amp; Hyper-V占用port問題&lt;/h1&gt;
&lt;p&gt;在window下用docker desktop有時候遇上port被莫名佔用
用指令&lt;code&gt;netstat -ano | findstr xxx&lt;/code&gt;查詢xxx埠被誰佔用卻又顯示沒有&lt;/p&gt;
&lt;p&gt;原來是因為在window下用docker需要依賴hyper-v技術，
而這個hyper-v每次都會隨機搶走一部分tcp埠，使用命令可以得知應避開的範圍:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# powershell / cmd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netsh interface ipv4 show excludedportrange protocol=tcp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;如果避不開就手動叫hyper-v讓路&#34;&gt;如果避不開就手動叫Hyper-V讓路&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;關閉hyper-v&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# powershell / cmd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dism.exe /Online /&lt;span style=&#34;color:#658b00&#34;&gt;Disable-Feature&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#658b00&#34;&gt;Microsoft-Hyper&lt;/span&gt;-V
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置ipv4動態埠 / 或者配置需要的埠不被佔用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# powershell / cmd 管理員許可權&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# start 起始埠  num 表示可用埠數     按自己的需求來&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netsh int ipv4 &lt;span style=&#34;color:#658b00&#34;&gt;set &lt;/span&gt;dynamicport tcp start=30000 num=16383
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 叫他去用30000以後的阜
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;# 排除ipv4動態埠佔用 startport 起始埠 numberofports 埠數&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;netsh int ipv4 add excludedportrange protocol=tcp startport=50051 numberofports=1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 或是指定端口50051為要讓路的
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重新啟動hyper-v&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dism.exe /Online /Enable-Feature:Microsoft-Hyper-V /All
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fdocker%2Ffor-win%2Fissues%2F3171%23issuecomment-459205576&#34;&gt;https://github.com/docker/for-win/issues/3171#issuecomment-459205576&lt;/a&gt;&lt;/p&gt;
- https://yoziming.github.io/post/211015-docker-hyper-v-port-problem/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Linux常用操作、wsl2相關</title>
        <link>https://yoziming.github.io/post/211010-linux-common-operations/</link>
        <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211010-linux-common-operations/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211010-linux-common-operations/ -&lt;h1 id=&#34;linux常用操作&#34;&gt;Linux常用操作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ls：顯示檔或目錄資訊&lt;/li&gt;
&lt;li&gt;mkdir：目前的目錄下創建一個空目錄&lt;/li&gt;
&lt;li&gt;rmdir：要求目錄為空&lt;/li&gt;
&lt;li&gt;touch：生成一個空檔或更改檔的時間&lt;/li&gt;
&lt;li&gt;cp：複製檔或目錄&lt;/li&gt;
&lt;li&gt;mv：移動檔或目錄、檔或目錄改名&lt;/li&gt;
&lt;li&gt;rm：刪除檔或目錄&lt;/li&gt;
&lt;li&gt;ln：建立連結檔&lt;/li&gt;
&lt;li&gt;find：查找文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; 移動路徑&lt;/li&gt;
&lt;li&gt;“&lt;code&gt;.&lt;/code&gt;” 表示 目前的目錄&lt;/li&gt;
&lt;li&gt;“&lt;code&gt;..&lt;/code&gt;” 表示 上一級目錄&lt;/li&gt;
&lt;li&gt;“&lt;code&gt;-&lt;/code&gt;” 表示 上一次工作目錄&lt;/li&gt;
&lt;li&gt;“&lt;code&gt;~&lt;/code&gt;” 表示 用戶主目錄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo su root&lt;/code&gt; 取得su權限&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 解壓縮XX檔案到/usr/local
sudo tar -C /usr/local -xzvf go1.17.1.linux-amd64.tar.gz

// 文字編輯器
sudo gedit /home/yoziming/.config/go/env

// 檔案總管
sudo nautilus 

// 啟用go mod
go env -w GO111MODULE=on
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;wsl2相關&#34;&gt;wsl2相關&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;優文參考: &lt;a href=&#34;https://blog.csdn.net/qq_38856939/article/details/116528514&#34;&gt;https://blog.csdn.net/qq_38856939/article/details/116528514&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用xfce4圖形介面&#34;&gt;使用xfce4圖形介面&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;windows端&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;下載 X Server 例如 https://sourceforge.net/projects/vcxsrv/

安裝後打開XLaunch
第一步 display number 預設可能是-1，改成0
下一步 setart no client 預設不用改
第三步 勾選 no access control
即完成監聽，等待linux來連線

查看IP，使用指令 ipconfig
注意看的是這個:
乙太網路卡 vEthernet (WSL):
 IPv4 位址 . . . . . . . . . . . . : 172.31.144.1
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;linux端&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 更新apt本身
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade -y

// 安裝xfce4，約1G
sudo apt-get install xfce4

// 指定linux連到windows的端口，IP在windows看
export DISPLAY=172.31.144.1:0

// 啟動連線
startxfce4
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;注意IP可能會變動，並且可能要修改防火牆規則&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211010-linux-common-operations/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Kubernetes基礎認識</title>
        <link>https://yoziming.github.io/post/211006-k8s/</link>
        <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211006-k8s/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211006-k8s/ -&lt;h1 id=&#34;kubernetes基礎認識&#34;&gt;Kubernetes基礎認識&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;自動化地以容器的形式管理你的應用程式
To host your application in the form of containers in a automated fashion&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;image-20211014130933320.png&#34; alt=&#34;image-20211014130933320&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;名詞解釋&#34;&gt;名詞解釋&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cluster:集群，計算、儲存資源的集合。一個Cluster通常包含一個Controller Plane和數個Node，視需求而定(也可能有Multi-Controller Plane 的集群)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controller Plane:(以前叫Mater)控制主節點，調度指揮所
&lt;ul&gt;
&lt;li&gt;APIserver:管理整個 K8s 所需 API 的接口(Endpoint)，提供HTTP Rest介面的關鍵服務處理程序，是集群中各個節點的溝通橋樑&lt;/li&gt;
&lt;li&gt;etcd:存資料&lt;/li&gt;
&lt;li&gt;Scheduler:資源調配，例如調度Pod運行在哪個Node&lt;/li&gt;
&lt;li&gt;Controller-manager:總經理，負責管理並運行 &lt;code&gt;controller&lt;/code&gt; ，controller定義各種Pod的部屬特性(如最常用的Deployment)來滿足不同的業務場景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node:節點，讓物件(resource-objects)運行的實體或虛擬機器
&lt;ul&gt;
&lt;li&gt;kubelet:對應api-server的接口，可以看成每個Node上的&amp;quot;實際執行者&amp;quot;或&amp;quot;操作者&amp;quot;，負責接收來自api-server的訊息，並做出相對應的動作，例如，負責Pod對應的容器的建立、啟動或停止等。&lt;/li&gt;
&lt;li&gt;kube-proxy:維護網路規則(iptables)，這些規則允許從群集內部或外部的與Pod進行通訊。&lt;/li&gt;
&lt;li&gt;Container Runtime:容器的運行引擎，預設是Docker，也支援其他滿足CRI標準的。
&lt;ul&gt;
&lt;li&gt;Pod:可被調度的最小單位，每個Pod包含一或多個容器，Pod內共享生命週期、資源、通信(使用同一個網路namespace，即相同的IP與port)、儲存空間。通常使用是一個Pod中放一個容器；當需要高度共享資源時才會用一個Pod內多個容器的形式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;延伸觀念&#34;&gt;延伸觀念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Deployment:部屬，例如把Pod做橫向擴展，適用自動管理，或達成無停機系統升級&lt;/li&gt;
&lt;li&gt;Service:服務，Deployment可以部屬多個Pod，每個Pod都有自己的IP，隨時都在生滅浮動，外界如何訪問? 答案就是透過Service，可以說Controller負責運行Pod，而Service負責訪問Pod。&lt;/li&gt;
&lt;li&gt;Ingress:Service 中是將每個 Service 元件對外的 port number 跟 Node 上的 port number 做 mapping，這樣在我們的 Service 變多時，port number 以及分流規則的管理變得相當困難。而 Ingress 可以透過 HTTP/HTTPS，在我們眾多的 Service 前搭建一個 reverse-proxy。這樣 Ingress 可以幫助我們統一一個對外的 port number，並且根據 hostname 或是 pathname 決定封包要轉發到哪個 Service 上&lt;/li&gt;
&lt;li&gt;Namespace:命名空間，假如有多個用戶使用同一個Cluster，想把他們創建的Controller、Pod等資源分開，就靠Namespace。Namespace將物理的Cluster從邏輯上切成多個虛擬Cluster，每一個虛擬Cluster就是一個Namespace，不同Namespace中的資源完全隔離。K8s預設創建2個Namespace:
&lt;ul&gt;
&lt;li&gt;default:如果不指定，資源就預設放這&lt;/li&gt;
&lt;li&gt;kube-system:K8s自己創建的系統資源會放在這個Namespace中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211006-k8s/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>MySQL常用語句 &amp; Workbench</title>
        <link>https://yoziming.github.io/post/211005-mysql-cmd-workbench/</link>
        <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211005-mysql-cmd-workbench/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211005-mysql-cmd-workbench/ -&lt;h1 id=&#34;mysql-常用語句&#34;&gt;MySQL 常用語句&lt;/h1&gt;
&lt;p&gt;資料庫database&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create database XXX;
show databases;
use XXX;
drop database XXX;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;資料表table&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;create table mytable(school char(5),name char(10),id int);
show tables;
describe mytable; // 顯示這表有哪些欄位跟屬性
drop table mytable;
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from mytable; // 顯示mytable中所有資料

insert into mytable(school, name, id) values (&amp;#39;NCTU&amp;#39;,&amp;#39;Jerry&amp;#39;,&amp;#39;123&amp;#39;);
insert into mytable values (&amp;#39;NCTU&amp;#39;,&amp;#39;Jerry&amp;#39;,&amp;#39;123&amp;#39;);

update mytable set name = &amp;#39;HaHa&amp;#39; where id = &amp;#39;123&amp;#39;;

delete from mytable where name = &amp;#39;HaHa&amp;#39;;
delete from 表格; // 把表格內資料都刪除(但格式宣告還在)

select * from mytable where id = &amp;#39;123&amp;#39; order by name DESC;  // 資料表查詢+條件+排序 (DESC 代表由大到小排序)

load data local infile &amp;#34;c:\\data.txt&amp;#34; into table mytable; //匯入
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;mysql-workbench-常用操作&#34;&gt;MySQL Workbench 常用操作&lt;/h1&gt;
&lt;h3 id=&#34;欲編輯某張表的某個資料&#34;&gt;欲編輯某張表的某個資料&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在左方導航點開那張表，移到它的右上角可以看資訊、進入編輯模式等等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;image-20211016183042070.png&#34; alt=&#34;image-20211016183042070&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;對資料欄位左鍵2下修改，改完之後按Apply，會跳出sql語句的確定視窗，再次Apply後應用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;導出入資料&#34;&gt;導出/入資料 &lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;上方選到 Server &amp;gt; Data Import，會出現這個畫面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;image-20211016183300110.png&#34; alt=&#34;image-20211016183300110&#34;&gt;&lt;/p&gt;
&lt;p&gt;照著按就是了，導出也差不多，不過導出可以選擇是否含格式還是單純資料值&lt;/p&gt;
- https://yoziming.github.io/post/211005-mysql-cmd-workbench/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker啟用Redis</title>
        <link>https://yoziming.github.io/post/211002-docker-redis/</link>
        <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211002-docker-redis/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211002-docker-redis/ -&lt;h1 id=&#34;docker啟用redis&#34;&gt;Docker啟用Redis&lt;/h1&gt;
&lt;h2 id=&#34;抓映象檔&#34;&gt;抓映象檔&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull redis:6.0
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;拉一個6.0版本的redis&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;執行-image&#34;&gt;執行 Image&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --name redis6 -p 6379:6379 -d redis:6.0 redis-server --appendonly yes
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;–name redis6 ：將 Container 取名為 redis6&lt;/li&gt;
&lt;li&gt;-p 6379:6379 ：將 Container 的 6379 Port 映射到主機的 6379 Port (前面代表主機，後面代表容器)&lt;/li&gt;
&lt;li&gt;-d :後台執行 Container ，並返回ID&lt;/li&gt;
&lt;li&gt;redis-server –appendonly yes : 在 Container 執行 redis-server 啟動命令，並打開redis持久化配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;進入-container&#34;&gt;進入 Container&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec -it redis6 bash
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;-i ：即使沒有附加也保持STDIN 打開&lt;/li&gt;
&lt;li&gt;-t ：分配一個偽終端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料庫測試&#34;&gt;資料庫測試&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;redis-cli
set hello world
get hello
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/211002-docker-redis/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker啟用Mysql</title>
        <link>https://yoziming.github.io/post/211001-docker-mysql/</link>
        <pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211001-docker-mysql/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211001-docker-mysql/ -&lt;h1 id=&#34;docker啟用mysql&#34;&gt;Docker啟用Mysql&lt;/h1&gt;
&lt;h2 id=&#34;抓映象檔&#34;&gt;抓映象檔&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull mysql/mysql-server:8.0
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;拉一個8.0版本的mysql&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;執行-image&#34;&gt;執行 Image&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d -it --name mysql8 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=1234 -e MYSQL_DATABASE=mydb mysql:8 --default-authentication-plugin=mysql_native_password
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt;：同&lt;code&gt;--detach&lt;/code&gt;，以背景模式執行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v ~/mysql-docker-data:/var/lib/mysql&lt;/code&gt;：同&lt;code&gt;--volume&lt;/code&gt;，掛載host目錄到container目錄，也就是host的&lt;code&gt;~/mysql-docker-data&lt;/code&gt;會保存container &lt;code&gt;/var/lib/mysql&lt;/code&gt;的資料；windos docker app這樣做的話，資料是暫時的重開機後會不見。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-it&lt;/code&gt;：同&lt;code&gt;--interactive&lt;/code&gt;加&lt;code&gt;--tty&lt;/code&gt;，作用為運行container時可登入其bash操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--name mysql8&lt;/code&gt;，命名container名稱為&lt;code&gt;mysql8&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;：同&lt;code&gt;--publish&lt;/code&gt;。作用為將container的3306 port對映到&amp;quot;主機(host)&amp;ldquo;的3306 port&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;：同&lt;code&gt;--env&lt;/code&gt;，設定環境變數。&lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt;設定MySQL root帳號的登入密碼為&lt;code&gt;1234&lt;/code&gt;，&lt;code&gt;MYSQL_DATABASE&lt;/code&gt;設定資料庫名稱為&lt;code&gt;mydb&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mysql:8&lt;/code&gt;：&lt;code&gt;mysql&lt;/code&gt;為image名稱，&lt;code&gt;8&lt;/code&gt;為image tag。所以運行的是&lt;code&gt;mysql:8&lt;/code&gt;的image。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--default-authentication-plugin=mysql_native_password&lt;/code&gt;：把儲存密碼的方式改為MySQL 5的&lt;code&gt;mysql_native_password&lt;/code&gt;，因為MySQL 8的儲存方式預設為&lt;code&gt;caching_sha2_password&lt;/code&gt;，但一些免費的MySQL client圖形工具如Sequel Pro，Navicat等會無法連線，所以設定此參數。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;檢視運行中的容器&#34;&gt;檢視運行中的容器&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;進入-container&#34;&gt;進入 Container&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec mysql8 mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker exec&lt;/code&gt;指令的作用為在運行的container執行指令，所以意思就是在&lt;code&gt;mysql8&lt;/code&gt;這個container執行&lt;code&gt;mysql -u root -p&lt;/code&gt;的指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker container exec -it mysql8 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;遇到權限問題用這個&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;進入mysql&#34;&gt;進入Mysql&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mysql -uroot -p
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;新增-1-個開放外部連線的帳號&#34;&gt;新增 1 個開放外部連線的帳號&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CREATE USER &amp;#39;user01&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;1234&amp;#39;;
GRANT ALL ON your_database.* TO &amp;#39;user01&amp;#39;@&amp;#39;%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;IDENTIFIED BY &amp;lsquo;1234&amp;rsquo;=密碼&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;允許-mysql-被遠程訪問&#34;&gt;允許 MySQL 被遠程訪問&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;grant all privileges on *.* to &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;這是一個強力手段(有權限風險)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/211001-docker-mysql/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker常用指令與操作</title>
        <link>https://yoziming.github.io/post/210930-docker-common-operations/</link>
        <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210930-docker-common-operations/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210930-docker-common-operations/ -&lt;h1 id=&#34;docker常用操作&#34;&gt;Docker常用操作&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;官方 &lt;a href=&#34;https://docs.docker.com/engine/reference/run/&#34;&gt;https://docs.docker.com/engine/reference/run/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;容器運行前&#34;&gt;容器運行前&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;抓映像&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker pull xxx
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;容器運行中&#34;&gt;容器運行中&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;檢視運行中的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker ps
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;停止容器
&lt;ul&gt;
&lt;li&gt;啟動換成 &lt;code&gt;start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重啟換成 &lt;code&gt;restart&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;強殺換成 &lt;code&gt;kill&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker stop 容器名或ID
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;批次全部重啟
&lt;ul&gt;
&lt;li&gt;這個在windows docker也有效，特別適合自己練習專案用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awk &#39;{ print $1}&#39;&lt;/code&gt;那種在windows就不行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker restart $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;刪除容器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker rm -f 容器名或ID
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;檢視運行狀態(CPU、記憶體、I/O占用等等)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker stats -a
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;顯示運行日誌&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker logs 容器名或ID
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;查看詳情&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker inspect 容器名或ID
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;更新運行參數&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker update --restart=always 容器名或ID
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;進入 Container
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt; ：即使沒有附加也保持STDIN 打開&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt; ：分配一個偽終端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec -it  &amp;lt;container_id&amp;gt;  /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;容器內&#34;&gt;容器內&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;就是進到&lt;code&gt;/bin/sh&lt;/code&gt;之下，有個&lt;code&gt;$&lt;/code&gt;符號的狀態&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;locale&lt;/code&gt; 顯示container內的編碼&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;locale -a&lt;/code&gt; 顯示container可用的編碼&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通常會選用&lt;code&gt;C.UTF-8&lt;/code&gt;，但是沒特別設定過的就會是Linux預設&lt;code&gt;POSIX&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改方法: &lt;a href=&#34;https://ubuntuqa.com/zh-tw/article/9876.html&#34;&gt;https://ubuntuqa.com/zh-tw/article/9876.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; 秀出當前目錄內檔案與資料夾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; 前往某資料夾&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;複製檔案&#34;&gt;複製檔案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;從Host丟進容器&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker cp /path1宿主路徑 容器名或ID:/path2容器路徑
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;從容器中搬檔案出來&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker cp 容器名或ID:/path/to/folder /path2宿主路徑/
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;注意操作就如同Linux 系統的 &lt;code&gt;cp -a&lt;/code&gt;，路徑可以是檔案也可以是資料夾，結尾加不加&lt;code&gt;/&lt;/code&gt;會決定是要放到&lt;code&gt;XX&lt;/code&gt;還是&lt;code&gt;XX之下&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;docker-desktop&#34;&gt;docker-desktop&lt;/h1&gt;
&lt;p&gt;UI中的Volumes實際路徑，可以用瀏覽器訪問&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\\wsl$\docker-desktop-data\version-pack-data\community\docker\volumes\
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而在WSL2中的/mnt/wsl只是暫時的，如果要連接&lt;/p&gt;
&lt;p&gt;在windows的cmd中執行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net use h: \\wsl$\docker-desktop-data
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在WSL2 Ubuntu中執行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkdir /mnt/wsl2

sudo mount -t drvfs h: /mnt/wsl2
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;掛載相關&#34;&gt;掛載相關&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;範例: 掛載到window下的某個路徑&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d -p 8082:80 --name nginx -v G:/docker/nginx:/usr/share/nginx -v
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;但是這樣效率低，有時候還會因為windows跟linux編碼問題(例如檔頭、換行、空白權限之類的)出錯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;參考: &lt;a href=&#34;https://lufor129.medium.com/docker-%E4%B8%89-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9Cvolume-net-5f323965486&#34;&gt;https://lufor129.medium.com/docker-%E4%B8%89-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9Cvolume-net-5f323965486&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建議作法&#34;&gt;建議作法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用WSL2 Ubuntu當橋樑，開個terminal進到WSL虛擬機，再用linux下指令，這樣操作就都跟最常見的範例一樣&lt;/li&gt;
&lt;li&gt;要存取對應的檔案也很簡單，現在WSL2都支援直接GUI操作了(但要用win11)&lt;/li&gt;
&lt;li&gt;退一步可以用圖形化操作介面(X server)之類，也是非常快速便捷&lt;/li&gt;
&lt;li&gt;還有一招是VS code的remote插件，也很好用&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/210930-docker-common-operations/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Docker啟用MinIO</title>
        <link>https://yoziming.github.io/post/210929-docker-minio/</link>
        <pubDate>Wed, 29 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210929-docker-minio/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210929-docker-minio/ -&lt;h1 id=&#34;docker啟用minio儲存&#34;&gt;Docker啟用MinIO儲存&lt;/h1&gt;
&lt;h2 id=&#34;執行-image&#34;&gt;執行 Image&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -d --name minio -e &amp;#34;MINIO_ROOT_USER=root&amp;#34; -e &amp;#34;MINIO_ROOT_PASSWORD=root1234&amp;#34; -p 9000:9000 -p 9001:9001 minio/minio server /data --console-address &amp;#34;:9001&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name minio&lt;/code&gt;，命名container名稱為&lt;code&gt;minio&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v /data/minio:/data/minio&lt;/code&gt;該命令將主機 &lt;code&gt;/data/minio&lt;/code&gt; 目錄對映到容器中的 &lt;code&gt;/data/minio&lt;/code&gt; 目錄中&lt;/li&gt;
&lt;li&gt;MinIO 還提供了圖形管理介面，在瀏覽器輸入 &lt;code&gt;ip:9001&lt;/code&gt;即可檢視&lt;/li&gt;
&lt;li&gt;不管是圖形介面操作，還是客戶端操作，預設賬號密碼都為 &lt;code&gt;minioadmin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;環境變數，這裡用了自定義賬號密碼，賬號不能小於 3 字元，密碼不能小於 8 字元&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;go初始化&#34;&gt;Go初始化&lt;/h2&gt;
&lt;p&gt;導入&lt;code&gt;github.com/minio/minio-go/v7&lt;/code&gt;，注意這個後面的&lt;code&gt;v7&lt;/code&gt;，在自動引包時可能會漏掉，導致使用到舊版的同名函數而報錯&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;InitMinio&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ctx := context.&lt;span style=&#34;color:#008b45&#34;&gt;Background&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	endpoint := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;localhost:9000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	accessKeyID := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	secretAccessKey := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;root1234&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	useSSL := &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// Initialize minio client object.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	minioClient, err := minio.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;(endpoint, &amp;amp;minio.Options{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Creds:  credentials.&lt;span style=&#34;color:#008b45&#34;&gt;NewStaticV4&lt;/span&gt;(accessKeyID, secretAccessKey, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Secure: useSSL,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalln&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 創建預設的bucket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// Make a new bucket called mymusic.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	bucketName := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;mymusic&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	location := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;us-east-1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#228b22&#34;&gt;// 這個是AWS用的，詳細查他官方
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	err = minioClient.&lt;span style=&#34;color:#008b45&#34;&gt;MakeBucket&lt;/span&gt;(ctx, bucketName, minio.MakeBucketOptions{Region: location})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;// Check to see if we already own this bucket (which happens if you run this twice)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		exists, errBucketExists := minioClient.&lt;span style=&#34;color:#008b45&#34;&gt;BucketExists&lt;/span&gt;(ctx, bucketName)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; errBucketExists == &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; exists {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;We already own %s\n&amp;#34;&lt;/span&gt;, bucketName)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalln&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Successfully created %s\n&amp;#34;&lt;/span&gt;, bucketName)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#228b22&#34;&gt;// 試著上傳一個.zip
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    objectName := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;golden-oldies.zip&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    filePath := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;/tmp/golden-oldies.zip&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    contentType := &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;application/zip&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#228b22&#34;&gt;// Upload the zip file with FPutObject
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;    info, err := minioClient.&lt;span style=&#34;color:#008b45&#34;&gt;FPutObject&lt;/span&gt;(ctx, bucketName, objectName, filePath, minio.PutObjectOptions{ContentType: contentType})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalln&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Successfully uploaded %s of size %d\n&amp;#34;&lt;/span&gt;, objectName, info.Size)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;配合gin框架範例&#34;&gt;配合Gin框架範例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;// 假定要上傳頭像，先獲取圖片文件資訊
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	file, _ := ctx.&lt;span style=&#34;color:#008b45&#34;&gt;FormFile&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;avatar&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 這裡使用minioClient.PutObject（）方法上傳，入參是file.Open()。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	f, _ := file.&lt;span style=&#34;color:#008b45&#34;&gt;Open&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 新增一個哈希命名規則防止圖片覆蓋
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	m5 := md5.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	m5.&lt;span style=&#34;color:#008b45&#34;&gt;Write&lt;/span&gt;([]&lt;span style=&#34;color:#658b00&#34;&gt;byte&lt;/span&gt;(file.Filename+時間或uuid等等)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fileName_hash := hex.&lt;span style=&#34;color:#008b45&#34;&gt;EncodeToString&lt;/span&gt;(m5.&lt;span style=&#34;color:#008b45&#34;&gt;Sum&lt;/span&gt;(&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;// 上傳到minio
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	info, err := model.MinioClient.&lt;span style=&#34;color:#008b45&#34;&gt;PutObject&lt;/span&gt;(ctx, &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;avatar&amp;#34;&lt;/span&gt;, fileName_hash, f, -&lt;span style=&#34;color:#b452cd&#34;&gt;1&lt;/span&gt;, minio.PutObjectOptions{ContentType: &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;avatar&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		log.&lt;span style=&#34;color:#008b45&#34;&gt;Fatalln&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	log.&lt;span style=&#34;color:#008b45&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;Successfully uploaded %s of size %d\n&amp;#34;&lt;/span&gt;, file.Filename, info.Size)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;細節補充&#34;&gt;細節補充&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;minio儲存的單位是 BUCKETS(桶)，創建完之後預設的Access Policy為Private，外部無法訪問，要改成public才行&lt;/li&gt;
&lt;li&gt;預設上傳的檔案網址就是http://{endpoint}/{buckets}/{Filename}，只要BUCKETS是public就能直接訪問&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/210929-docker-minio/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>consul基礎使用練習</title>
        <link>https://yoziming.github.io/post/210928-consul-practice/</link>
        <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210928-consul-practice/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210928-consul-practice/ -&lt;h1 id=&#34;consul基礎使用練習&#34;&gt;consul基礎使用練習&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;想像去郵局辦事，consul類似於發號碼牌的那個機器&lt;/p&gt;
&lt;p&gt;伺服端(櫃台人員)去找consul註冊服務，比如說櫃台1~3提供儲蓄，櫃台4~6提供郵寄服務&lt;/p&gt;
&lt;p&gt;客戶進來透過服務發現，把要辦的事丟給consul，它查看哪個櫃台健康，幫你匹配對應的服務或叫號&lt;/p&gt;
&lt;p&gt;(感覺這例子不太完善，就&amp;hellip;類似的理解啦，實際用了才會懂)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下載&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 官網:
https://www.consul.io/downloads
# ubuntu shell: (下載&amp;gt;解壓縮&amp;gt;把二進位執行檔丟進去)
wget https://releases.hashicorp.com/consul/1.10.3/consul_1.10.3_linux_amd64.zip
unzip consul_1.10.3_linux_amd64.zip
sudo mv consul /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;測試&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;consul -h
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;啟動server&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -node=n1 -bind=192.168.234.128 -ui -rejoin -config-dir=/etc/consul.d/ -client 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這個IP=192.168.234.128=ubuntu的ip&lt;/p&gt;
&lt;p&gt;*若/etc/consul.d/不存在要先自己創&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看服務&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;http://192.168.234.128:8500/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;註冊自訂的健康檢查服務，範例:&lt;/p&gt;
&lt;p&gt;剛剛自訂的配置檔路徑/etc/consul.d/下新增一個web.json&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&amp;#34;service&amp;#34;: {
    &amp;#34;name&amp;#34;: &amp;#34;web&amp;#34;,
    &amp;#34;tags&amp;#34;: [&amp;#34;extract&amp;#34;, &amp;#34;verify&amp;#34;, &amp;#34;compare&amp;#34;, &amp;#34;idcard&amp;#34;],
    &amp;#34;address&amp;#34;: &amp;#34;192.168.234.128&amp;#34;,
    &amp;#34;port&amp;#34;: 9000,
    &amp;#34;check&amp;#34;: {
        &amp;#34;id&amp;#34;: &amp;#34;api&amp;#34;,
        &amp;#34;name&amp;#34;: &amp;#34;HTTP API on port 9000&amp;#34;,
        &amp;#34;http&amp;#34;: &amp;#34;http://localhost:9000&amp;#34;,
        &amp;#34;interval&amp;#34;: &amp;#34;10s&amp;#34;,
        &amp;#34;timeout&amp;#34;: &amp;#34;1s&amp;#34;
        }
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重啟server並查看服務&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20210929143815247.png&#34; alt=&#34;image-20210929143815247&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;結果是不健康，因為沒有東西回應它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;透過consul來傳遞一個簡單服務案例&#34;&gt;透過consul來傳遞一個簡單服務案例:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;person.proto&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;syntax=&amp;#34;proto3&amp;#34;;
package pb;
option go_package=&amp;#34;/.;pb&amp;#34;;
message Person{
    string name=1;
    int32 age=2;
}

service hello{
    rpc sayHello(Person) returns(Person);
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;context&amp;#34;
	&amp;#34;fmt&amp;#34;

	&amp;#34;github.com/hashicorp/consul/api&amp;#34;
	&amp;#34;github.com/my/repo/consul/pb&amp;#34;
)

type Children struct {
}

// 綁定方法實現接口
func (c *Children) SayHello(ctx context.Context, p *pb.Person) (*pb.Person, error) {
	p.Name = &amp;#34;hello&amp;#34; + p.Name
	return p, nil
}

func main() {
	// 1. 把grpc註冊到consul，初始化
	consulConfig := api.DefaultConfig()

	// 2. 創建consul對象
	consulClient, err := api.NewClient(consulConfig)
	if err != nil {
		fmt.Println(&amp;#34;api.NewClient err&amp;#34;, err)
		return
	}

	// 3. 告訴consul將要註冊的服務消息
	reg := api.AgentServiceRegistration{
		ID:      &amp;#34;bj38&amp;#34;,
		Tags:    []string{&amp;#34;grpc&amp;#34;, &amp;#34;consul&amp;#34;},
		Name:    &amp;#34;grpc And Consul&amp;#34;,
		Address: &amp;#34;127.0.0.1&amp;#34;,
		Port:    8800,
		Check: &amp;amp;api.AgentServiceCheck{
			CheckID:  &amp;#34;consul grpc test&amp;#34;,
			TCP:      &amp;#34;127.0.0.1:8800&amp;#34;,
			Timeout:  &amp;#34;1s&amp;#34;,
			Interval: &amp;#34;5s&amp;#34;,
		},
	}
	// 4. 註冊到consul上
	consulClient.Agent().ServiceRegister(&amp;amp;reg)
	fmt.Println(&amp;#34;服務啟動...&amp;#34;)

}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;client&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;context&amp;#34;
	&amp;#34;fmt&amp;#34;
	&amp;#34;strconv&amp;#34;

	&amp;#34;github.com/hashicorp/consul/api&amp;#34;
	&amp;#34;github.com/my/repo/consul/pb&amp;#34;
	&amp;#34;google.golang.org/grpc&amp;#34;
)

func main() {
	// 初始化consul
	consulConfig := api.DefaultConfig()
	consulClient, err := api.NewClient(consulConfig)
	if err != nil {
		fmt.Println(&amp;#34;api.NewClient err&amp;#34;, err)
	}

	// 服務發現，從consul上獲取健康的服務
	services, _, err := consulClient.Health().Service(&amp;#34;grpc And Consul&amp;#34;, &amp;#34;grpc&amp;#34;, true, nil)
	if err != nil {
		fmt.Println(&amp;#34;consulClient.Health().Service err&amp;#34;, err)
		return
	}
	// 拼接出服務的IP跟端口
	fmt.Println(services[0].Service.Address)
	fmt.Println(services[0].Service.Port)
	addr := services[0].Service.Address + &amp;#34;:&amp;#34; + strconv.Itoa(services[0].Service.Port)

	grpcConn, _ := grpc.Dial(addr, grpc.WithInsecure())

	grpcClient := pb.NewHelloClient(grpcConn)
	var person pb.Person
	person.Name = &amp;#34;Tom~&amp;#34;
	person.Age = 18

	p, err := grpcClient.SayHello(context.TODO(), &amp;amp;person)
	fmt.Println(p, err)

}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;記得隨便用個cmd 開啟consul當橋梁&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ consul agent -dev
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210928-consul-practice/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Golang下透過grpc調用服務案例</title>
        <link>https://yoziming.github.io/post/210927-grpc/</link>
        <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210927-grpc/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210927-grpc/ -&lt;h2 id=&#34;golang下透過grpc調用服務案例&#34;&gt;Golang下透過grpc調用服務案例&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;grpc簡單說就是跨平台(跨語言)調用各種服務的通用轉接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;對.proto文件使用轉譯指令:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;protoc --go_out=plugins=grpc:. *.proto
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;案例:透過grpc遠程傳遞一個調用teacher資料類型的服務&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;.proto:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;syntax=&amp;#34;proto3&amp;#34;;

option go_package=&amp;#34;/.;pb&amp;#34;;

message Teacher{
    int32 age=1;
    string name=2;
}

service SayName{
    rpc SayHello(Teacher) returns(Teacher);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;server:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Children struct{}

// 綁定類方法
func (c *Children) SayHello(ctx context.Context, t *pb.Teacher) (*pb.Teacher, error) {
	t.Name += &amp;#34;is sleeping&amp;#34;
	return t, nil
}

func main() {
	// 初始一個grpc對象
	grpcServer := grpc.NewServer()

	// 註冊服務
	pb.RegisterSayNameServer(grpcServer, new(Children))

	// 監聽
	listener, err := net.Listen(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:8899&amp;#34;)
	if err != nil {
		fmt.Println(&amp;#34;listen err&amp;#34;, err)
		return
	}
	fmt.Println(&amp;#34;server監聽中...&amp;#34;)
	defer listener.Close()

	// 啟動服務
	grpcServer.Serve(listener)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;client:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	// 連接grpc服務
	grpcConn, err := grpc.Dial(&amp;#34;127.0.0.1:8899&amp;#34;, grpc.WithInsecure())
	if err != nil {
		fmt.Println(&amp;#34;conn err&amp;#34;, err)
		return
	}
	defer grpcConn.Close()

	// 初起化客戶端
	gprcClient := pb.NewSayNameClient(grpcConn)

	// 創建並初始化接收對象
	var teacher pb.Teacher
	teacher.Age = 18
	teacher.Name = &amp;#34;Mary&amp;#34;

	// 調用遠程服務
	t, err := gprcClient.SayHello(context.TODO(), &amp;amp;teacher)
	fmt.Println(t, err)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210927-grpc/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Golang中使用ProtoBuf</title>
        <link>https://yoziming.github.io/post/210926-golang-protobuf/</link>
        <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210926-golang-protobuf/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210926-golang-protobuf/ -&lt;h2 id=&#34;golang中使用protobuf&#34;&gt;Golang中使用ProtoBuf&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;protobuf類似json，它體積更小效率更高，規範統一(沒有大小寫等困擾)。&lt;/p&gt;
&lt;p&gt;缺點是改動協議就要重新生成、數據本身是二進位沒有可讀性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下載，window系統選.exe，解壓縮放到$GOPATH/bin&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://github.com/protocolbuffers/protobuf/releases
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安裝golang對應的庫跟插件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go get github.com/golang/protobuf/proto
go get github.com/golang/protobuf/protoc-gen-go
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;測試&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;protoc -h 或 protoc --version
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;沒報錯就是成功&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;消息體舉例，xxx.proto&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 指定版本，不打3就會是2
syntax=&amp;#34;proto3&amp;#34;;

// 指定輸出位置&amp;amp;go包名，沒寫轉換不了
// option go_package =&amp;#34;path;name&amp;#34;;
option go_package =&amp;#34;/.&amp;#34;;  // 放在同一目錄下包名為__(空)

// 定義消息體，分配唯一編號 (不能用19000~19999)
message Student{
     int32 age = 1; // 可以不從1開始，但不可重複
     string name = 2;
     People p=3;
     repeated int32 score=4; // 數組
     Week w=5;
     // 聯合體
     oneof data{
         string teacher=6;
         string class=7;
     }
 }

// 消息體可以嵌套
message People{
    int32 weight=1;
}

// 定義枚舉類型
enum Week{
    Monday=0; // 必須從0開始
    Turesday=1;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成go文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;protoc --go_out=. *.proto
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;成功轉換出來的就會是一個xxx.pb.go的文件，可以點開看一下，它就是轉換成go語言的版本，記住不要修改這個檔案(他第一行就叫你不要修改)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;添加rpc服務&#34;&gt;添加rpc服務&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;語法:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;service 服務名{
	rpc 函數名(參數:消息體) returns (返回值:消息)
}
舉例:
service bj{
    rpc Say(People) returns (Student);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是rpc用的很廣，他不知道你要轉成給誰用的，於是要調用另一個生成的指令&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;protoc --go_out=plugins=grpc:. *.proto
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這就是grpc了，到下章繼續&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/210926-golang-protobuf/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>MVC &amp; Microservices</title>
        <link>https://yoziming.github.io/post/210920-mvc-microservices/</link>
        <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210920-mvc-microservices/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210920-mvc-microservices/ -&lt;h2 id=&#34;mvc架構&#34;&gt;MVC架構&lt;/h2&gt;
&lt;p&gt;Model:模型，管理資料庫(增刪改查)、業務邏輯、物件結構定義&lt;/p&gt;
&lt;p&gt;View:視圖，使用者實際在看、操作的介面(UI)，前端&lt;/p&gt;
&lt;p&gt;Controller:控制，接收請求、回覆結果，決定工作流程，算是Model跟View的中間人&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20211012085838544.png&#34; alt=&#34;image-20211012085838544&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;微服務架構microservices&#34;&gt;微服務架構（Microservices）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;單一職責:把業務邏輯拆分成無數個小區塊(Blocks)，負責單一任務，服務之間透過管道來通訊。&lt;/li&gt;
&lt;li&gt;輕量級通訊:使用不依賴語言或平台的格式，例如XML、JSON、protobuf。通常基於HTTP協議、符合REST風格來達成標準化、無狀態化。&lt;/li&gt;
&lt;li&gt;獨立開發、測試、部屬:顧名思義，都拆開了就可以分開做，不像傳統架構牽一髮而動全身。&lt;/li&gt;
&lt;li&gt;容器化:微服務既然能獨立作業了，就可以放到容器(Container)中，互相隔離互不干擾，達成快速部署、節省資源。Docker是目前最普遍的容器技術，Kubernetes(K8s)是常用來管理容器、協調整合的平台。&lt;/li&gt;
&lt;/ol&gt;
- https://yoziming.github.io/post/210920-mvc-microservices/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>GoogleSearchConsole</title>
        <link>https://yoziming.github.io/post/211020-blog-ga/</link>
        <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/211020-blog-ga/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/211020-blog-ga/ -&lt;h3 id=&#34;如何讓自己的blog被google搜尋到&#34;&gt;如何讓自己的blog被google搜尋到&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先你要跟google證明這個網站是你的，並且允許google的爬蟲機器人獲取你的網站資料，這樣別人才能在google上搜尋到你的網站&lt;/li&gt;
&lt;li&gt;同時也能夠使用google自訂搜尋方便自己查找資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;關於網站驗證&#34;&gt;關於網站驗證&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你同意後它才能把觸手深入你的網站，你可以自訂搜尋這個網站的資料權限&lt;/li&gt;
&lt;li&gt;google提供多種方法，我是選html標記，放在套用的主題的之下，舉例:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211128111531398.png&#34; alt=&#34;image-20211128111531398&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你換了主題記得也要重改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;image-20211204160157780.png&#34; alt=&#34;image-20211204160157780&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;hugo建立sitemap索引&#34;&gt;Hugo建立sitemap索引&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;提供sitemap索引讓google機器人更好抓你的網站&lt;/li&gt;
&lt;li&gt;Hugo內鍵就有這個功能，修改config.toml，插入:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[sitemap]
  changefreq = &amp;#39;weekly&amp;#39;
  filename = &amp;#39;sitemap.xml&amp;#39;
  priority = 0.5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;自訂搜尋&#34;&gt;自訂搜尋&lt;/h3&gt;
&lt;p&gt;大部分主題都有此功能，一樣修改config.toml即可:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;googleSearchCode = &amp;#34;你的SearchCode&amp;#34;
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/211020-blog-ga/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>HugoBlog的圖片插入方式</title>
        <link>https://yoziming.github.io/post/210930-blog-insert-image/</link>
        <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210930-blog-insert-image/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210930-blog-insert-image/ -&lt;h1 id=&#34;插入圖片的方式&#34;&gt;插入圖片的方式&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;常見有2種做法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;方法1&#34;&gt;方法1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在.\static\images\下放入的圖片會被打包上傳，然後從相對路徑引用那個圖片&lt;/li&gt;
&lt;li&gt;適和用在全站通用的資源，比如&lt;strong&gt;背景圖、縮圖&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方法2&#34;&gt;方法2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在.\content\post\下，每當有用到圖片一篇文章的就新增一個資料夾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;資料夾可以命名可自訂，然後進去把.md檔改名為&amp;quot;index.md&amp;quot;，圖片放同層&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;範例:&lt;img src=&#34;image-20211128105331357.png&#34; alt=&#34;image-20211128105331357&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這個方法比較好整理，每篇用到的圖片放在自己的資料夾中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
- https://yoziming.github.io/post/210930-blog-insert-image/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>用Hugo建立靜態Blog</title>
        <link>https://yoziming.github.io/post/210909-blog-hugo/</link>
        <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210909-blog-hugo/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210909-blog-hugo/ -&lt;h1 id=&#34;用githubhugo建立靜態blog&#34;&gt;用Github&amp;amp;Hugo建立靜態Blog&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;程式設計師寫blog再常見不過，好處多多不再贅述，但如何從0開始架出一個blog?&lt;/p&gt;
&lt;p&gt;我看了很多教學有各種高級的自動部署、netlify後台等等，照做時卻老是在一些關鍵點卡住。我這個土路雖然蠢笨但確實能做出東西，同樣新手可以試試。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安裝Chocolatey //程式安裝器，讓你從終端裝各種東西很方便&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://chocolatey.org/install
到這個網址，官方提供很多方法安裝，非常簡單快速一行搞定
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安裝hugo，有些佈景主題要用到加強版(extended)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;choco install hugo -confirm
choco install hugo-extended -confirm
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hugo new site &amp;lt;資料夾名稱&amp;gt; //建立一個root，相當於你個人網站的原始資料母巢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;挑主題，到https://themes.gohugo.io/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;套用主題，範例&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; cd &amp;lt;資料夾名稱&amp;gt;
 git init
 git submodule add https://github.com/AmazingRise/hugo-theme-diary.git themes/diary
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依照主題的說明文件修改根目錄下的config.toml
注意，config.toml中的第一項baseURL網址不要有&amp;quot;https://www.ooxx&amp;quot;，否則會造成一些未知的BUG。正確網址應為&amp;quot;https://你的username.github.io/&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到content/post/下開始寫一篇blog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開啟本地預覽，指令hugo server -F   //防止時差問題用-F&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隨意一個地方開啟網址http://localhost:1313/ 看看網站&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;網站沒問題就打包，指令hugo，會在root資料夾下多出一個public資料夾，裡面就是一個完整的網站準備丟去網路上發布&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;去gitHub建一個Repository(倉庫)，名稱強制為 你的username.github.io&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下載GitHub Desktop客戶端，可以把他理解成一個雲端，我要把本地public資料夾的內容透過它丟去gitHub上剛剛建的那個Repository(倉庫)裡，之後就能透過網站提供的gitPage功能實現個人網站的搭建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在gitHub網頁點進創建的username.github.io專案，右上角綠色&amp;quot;Code&amp;quot;點開，用桌面程式開啟&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程式開啟後他會要你選擇一個本地的位置去連結該倉庫，直接連結到root/public下看似方便但會導致一些麻煩&amp;amp;錯誤，菜雞如我是放在根目錄同級的位置，姑且稱這個資料夾叫雲端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把根目錄下public/裡面的內容copy一份到剛剛建立的雲端資料夾&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此時回到GitHub Desktop客戶端它會說檢測到本地有新東西準備要上傳，左下角Summary填一個描述(隨意填但必要，他就是讓你描述一下這批上傳的動作，以後冤有頭債有主)，然後點Commit to main，至此一切準備就緒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到右邊點第一次叫publish之類，後面那個按鍵會變成push origin，即是把資料正式上傳到網路上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;等個幾秒後到&amp;quot;https://username.github.io/&amp;ldquo;看看成果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;之後要更新就是content/post/下建立新的.md，寫完內容然後hugo打包之後push&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
- https://yoziming.github.io/post/210909-blog-hugo/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>一次性隊列</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-queue/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-queue/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-queue/ -&lt;h1 id=&#34;一次性隊列&#34;&gt;一次性隊列&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//用結構體管理隊列
type Queue struct {
	maxSize int
	array   [3]int
	front   int //隊列首(不包含)
	rear    int //隊尾(含)
}

//添加數據val到隊列
func (q *Queue) AddQueue(val int) (err error) {
	//先判斷是否已滿
	if q.rear == q.maxSize-1 {
		return errors.New(&amp;#34;queue full&amp;#34;)
	}
	q.rear++
	q.array[q.rear] = val
	return
}

//取出數據
func (q *Queue) GetQueue() (val int, err error) {
	//先判斷是否為空
	if q.rear == q.front {
		return -1, errors.New(&amp;#34;queue empty&amp;#34;)
	}
	q.front++
	val = q.array[q.front]
	return val, err

}

//顯示隊列
func (q *Queue) ShowQueue() {
	fmt.Println(&amp;#34;當前隊列=&amp;#34;)
	for i := q.front + 1; i &amp;lt;= q.rear; i++ {
		fmt.Printf(&amp;#34;array[%d]=%d\t&amp;#34;, i, q.array[i])
	}
	fmt.Println(&amp;#34;隊列顯示完畢&amp;#34;)
}

func main() {
	//創建一個隊列
	queue1 := Queue{
		maxSize: 3,
		front:   -1,
		rear:    -1,
	}
	var key string
	var val int
	for {
		fmt.Println(&amp;#34;\n等待操作中...&amp;#34;)
		fmt.Println(&amp;#34;輸入add 添加&amp;#34;)
		fmt.Println(&amp;#34;輸入get 取出&amp;#34;)
		fmt.Println(&amp;#34;輸入show 顯示&amp;#34;)
		fmt.Println(&amp;#34;輸入exit 離開&amp;#34;)

		fmt.Scanln(&amp;amp;key)
		switch key {
		case &amp;#34;add&amp;#34;:
			fmt.Println(&amp;#34;輸入要加入的數值...&amp;#34;)
			fmt.Scanln(&amp;amp;val)
			err := queue1.AddQueue(val)
			if err != nil {
				fmt.Println(err.Error())
			} else {
				fmt.Println(&amp;#34;加入成功&amp;#34;)
			}
		case &amp;#34;get&amp;#34;:
			val, err := queue1.GetQueue()
			if err != nil {
				fmt.Println(err.Error())
			} else {
				fmt.Println(&amp;#34;取出成功&amp;#34;, val)
			}

		case &amp;#34;show&amp;#34;:
			queue1.ShowQueue()
		case &amp;#34;exit&amp;#34;:
			os.Exit(0)
		}

	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-queue/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>二分樹的3種遍歷</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-bi-tree/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-bi-tree/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-bi-tree/ -&lt;h1 id=&#34;二分樹的3種遍歷&#34;&gt;二分樹的3種遍歷&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import &amp;#34;fmt&amp;#34;

type Hero struct {
	No    int
	Name  string
	Left  *Hero
	Right *Hero
}

//前序遍歷 先輸出root 再輸出左子樹 再輸出右子樹，會中左右一層層往下
func PreOrder(node *Hero) {
	if node != nil {
		fmt.Printf(&amp;#34;no=%d name=%s\n&amp;#34;, node.No, node.Name)
		PreOrder(node.Left)
		PreOrder(node.Right)
	}
}

//中序遍歷 左子樹 root 右子樹
func InfixOrder(node *Hero) {
	if node != nil {
		InfixOrder(node.Left)
		fmt.Printf(&amp;#34;no=%d name=%s\n&amp;#34;, node.No, node.Name)
		InfixOrder(node.Right)
	}
}

//後序遍歷 左子樹  右子樹 root，會一路到最左最下開始打
func PostOrder(node *Hero) {
	if node != nil {
		PostOrder(node.Left)
		PostOrder(node.Right)
		fmt.Printf(&amp;#34;no=%d name=%s\n&amp;#34;, node.No, node.Name)

	}
}

func main() {
	//建一個二分樹
	root := &amp;amp;Hero{
		No:   1,
		Name: &amp;#34;宋江&amp;#34;,
	}

	left1 := &amp;amp;Hero{
		No:   2,
		Name: &amp;#34;無用&amp;#34;,
	}

	right1 := &amp;amp;Hero{
		No:   3,
		Name: &amp;#34;你軌&amp;#34;,
	}
	root.Left = left1
	root.Right = right1
	right2 := &amp;amp;Hero{
		No:   4,
		Name: &amp;#34;林沖&amp;#34;,
	}
	right1.Right = right2
	node21 := &amp;amp;Hero{
		No:   21,
		Name: &amp;#34;無用-下左&amp;#34;,
	}
	node22 := &amp;amp;Hero{
		No:   22,
		Name: &amp;#34;無用-下右&amp;#34;,
	}
	left1.Left = node21
	left1.Right = node22

	PreOrder(root)
	fmt.Println(&amp;#34;==========&amp;#34;)
	InfixOrder(root)
	fmt.Println(&amp;#34;==========&amp;#34;)
	PostOrder(root)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-bi-tree/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>哈希表數據結構</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-hash/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-hash/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-hash/ -&lt;h1 id=&#34;哈希表數據結構&#34;&gt;哈希表數據結構&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;fmt&amp;#34;
	&amp;#34;os&amp;#34;
)

type Emp struct {
	Id   int
	Name string
	Next *Emp
}

func (e *Emp) ShowMe() {
	fmt.Printf(&amp;#34;链表%d 找到该雇员 %d\n&amp;#34;, e.Id%7, e.Id)
}

//不帶表頭，即第一個節點就放雇員資料
type EmpLink struct {
	Head *Emp
}

func (e *EmpLink) FindByIdEmpLink(id int) *Emp {
	cur := e.Head
	for {
		if cur != nil &amp;amp;&amp;amp; cur.Id == id {
			return cur
		} else if cur == nil {
			break
		}
		cur = cur.Next
	}
	return nil
}

//給EmpLink寫增加雇員方法，編號從小到大
func (e *EmpLink) AddEmpLink(emp *Emp) {
	cur := e.Head      //輔助指針
	var pre *Emp = nil //輔助指針pre在cur前面
	//如果當前EmpLink是空的
	if cur == nil {
		e.Head = emp
		return
	}
	//給emp找位置並插入
	for {
		if cur != nil {
			if cur.Id &amp;gt; emp.Id { //找到
				break
			}
			pre = cur
			cur = cur.Next
		} else {
			break
		}
	}
	pre.Next = emp
	emp.Next = cur
}

func (e *EmpLink) ShowLink() {
	//如果當前EmpLink是空的
	if e.Head == nil {
		fmt.Println(&amp;#34;當前鏈表為空&amp;#34;)
		return
	}
	cur := e.Head
	for {
		if cur != nil {
			fmt.Printf(&amp;#34;雇員ID=%d 名字=%s ~&amp;gt;&amp;#34;, cur.Id, cur.Name)
			cur = cur.Next
		} else {
			break
		}
	}
	fmt.Println()
}

//鏈表數組
type HashTable struct {
	LinkArr [7]EmpLink
}

//給HashTable寫增加雇員方法
func (h *HashTable) Add(emp *Emp) {
	//使用散列函數，確定雇員添到哪個鏈表
	linkNo := h.HashFun(emp.Id)
	//添加
	h.LinkArr[linkNo].AddEmpLink(emp)
}

//顯示所有HashTable雇員方法
func (h *HashTable) ShowAll() {
	for i := 0; i &amp;lt; len(h.LinkArr); i++ {
		h.LinkArr[i].ShowLink()
	}
}

//查找
func (h *HashTable) FindById(id int) *Emp {
	linkNo := h.HashFun(id)
	return h.LinkArr[linkNo].FindByIdEmpLink(id)
}

//散列函數
func (h *HashTable) HashFun(id int) int {
	return id % 7 //得到一個值，就是鏈表的下標
}

func main() {
	key := 0
	id := 0
	name := &amp;#34;&amp;#34;
	var hashTable HashTable
	for {
		fmt.Println(&amp;#34;===雇員系統===&amp;#34;)
		fmt.Println(&amp;#34;\t1.添加&amp;#34;)
		fmt.Println(&amp;#34;\t2.顯示&amp;#34;)
		fmt.Println(&amp;#34;\t3.查找&amp;#34;)
		fmt.Println(&amp;#34;\t4.退出&amp;#34;)
		fmt.Scanln(&amp;amp;key)
		switch key {
		case 1:
			fmt.Println(&amp;#34;輸入雇員ID&amp;#34;)
			fmt.Scanln(&amp;amp;id)
			fmt.Println(&amp;#34;輸入雇員 name&amp;#34;)
			fmt.Scanln(&amp;amp;name)
			emp := &amp;amp;Emp{
				Id:   id,
				Name: name,
			}
			hashTable.Add(emp)
		case 2:
			hashTable.ShowAll()
		case 3:
			fmt.Println(&amp;#34;輸入欲查雇員ID&amp;#34;)
			fmt.Scanln(&amp;amp;id)
			emp := hashTable.FindById(id)
			if emp == nil {
				fmt.Println(&amp;#34;不存在&amp;#34;)
			} else {
				emp.ShowMe()
			}
		case 4:
			os.Exit(0)
		default:
			fmt.Println(&amp;#34;輸入錯誤&amp;#34;)
		}
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-hash/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>單向鏈表</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-list/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-list/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-list/ -&lt;h1 id=&#34;單向鏈表&#34;&gt;單向鏈表&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type HeroNode struct {
	no   int
	name string
	next *HeroNode //表示指向下一個節點
}

//給鏈表插入節點
func Insert(head *HeroNode, newHeroNode *HeroNode) {
	//先找到最後的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		}
		temp = temp.next //不斷往下找
	}
	//把newHeroNode加到屁股
	temp.next = newHeroNode
}

//根據No從小到大插入
func InsertNo(head *HeroNode, newHeroNode *HeroNode) {
	//想找到適當的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		} else if temp.next.no &amp;gt; newHeroNode.no {
			//表示new要插到temp後
			break
		} else if temp.next.no == newHeroNode.no {
			//表示new這個編號已存在
			fmt.Println(newHeroNode.no, &amp;#34;該編號已存在&amp;#34;)
			return
		}
		temp = temp.next //不斷往下找

	}
	//把newHeroNode加到找到的地方
	newHeroNode.next = temp.next
	temp.next = newHeroNode
}

//根據no刪除一個節點
func DelHeroNode(head *HeroNode, id int) {
	//想找到適當的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		} else if temp.next.no == id {
			//表示找到了
			fmt.Println(id, &amp;#34;該編號已刪除&amp;#34;)
			temp.next = temp.next.next
			return
		}
		temp = temp.next //不斷往下找
	}

}

//顯示
func List(head *HeroNode) {
	//創建一個輔助
	temp := head
	if temp.next == nil { //空鏈表?
		fmt.Println(&amp;#34;空&amp;#34;)
		return
	}
	for {
		fmt.Printf(&amp;#34;[%d,%s]==&amp;gt;&amp;#34;, temp.next.no, temp.next.name)
		temp = temp.next      //不斷往下找
		if temp.next == nil { //到尾了
			fmt.Println(&amp;#34;完畢&amp;#34;)
			break
		}
	}
}

func main() {
	//創建一個頭節點(空的)
	head := &amp;amp;HeroNode{}
	hero1 := &amp;amp;HeroNode{
		no:   1,
		name: &amp;#34;宋江&amp;#34;,
	}
	hero2 := &amp;amp;HeroNode{
		no:   2,
		name: &amp;#34;李奎&amp;#34;,
	}
	hero3 := &amp;amp;HeroNode{
		no:   3,
		name: &amp;#34;李軌&amp;#34;,
	}
	hero4 := &amp;amp;HeroNode{
		no:   3,
		name: &amp;#34;321&amp;#34;,
	}
	InsertNo(head, hero3)
	InsertNo(head, hero1)
	InsertNo(head, hero2)
	InsertNo(head, hero4)
	List(head)
	DelHeroNode(head, 2)
	List(head)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-list/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>插入&amp;選擇&amp;快速排序</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-quick-sort/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-quick-sort/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-quick-sort/ -&lt;h1 id=&#34;插入選擇快速排序&#34;&gt;插入&amp;amp;選擇&amp;amp;快速排序&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//選擇排序
func SelectSort(array *[6]int) {
	for j := 0; j &amp;lt; len(array)-1; j++ {
		min := array[j]
		minIndex := j
		//尋找最小的下標
		for i := j + 1; i &amp;lt; len(array); i++ {
			if min &amp;gt; array[i] {
				min = array[i]
				minIndex = i
			}
		}
		if minIndex != j {
			array[j], array[minIndex] = array[minIndex], array[j]
		}
		fmt.Printf(&amp;#34;第%d次交換後 %v\n&amp;#34;, j+1, *array)
	}

}

//插入排序
func InsertSort(arr *[6]int) {
	for j := 1; j &amp;lt; len(arr); j++ {
		//給第二個元素找位置
		insertVal := arr[j]
		insertIndex := j - 1 //下標
		//由大到小
		for insertIndex &amp;gt;= 0 &amp;amp;&amp;amp; arr[insertIndex] &amp;lt; insertVal {
			arr[insertIndex+1] = arr[insertIndex] //數據後移
			insertIndex--
		}
		//插入
		if insertIndex+1 != j {
			arr[insertIndex+1] = insertVal
		}
		fmt.Printf(&amp;#34;第%d次插入後 %v\n&amp;#34;, j, *arr)
	}

}

//快速排序
func QuickSort(left int, right int, array *[6]int) {
	l := left
	r := right
	pivot := array[(left+right)/2] //中軸

	//比pivot小就放到左邊，反之亦然
	for l &amp;lt; r {
		for array[l] &amp;lt; pivot {
			l++
		}
		for array[r] &amp;gt; pivot {
			r--
		}
		if l &amp;gt;= r { //表示分割完成
			break
		}
		//如果沒完成就交換
		array[l], array[r] = array[r], array[l]
		//改善
		if array[l] == pivot {
			r--
		}
		if array[r] == pivot {
			l++
		}
	}
	//防卡住
	if l == r {
		l++
		r--
	}
	if left &amp;lt; r {
		QuickSort(left, r, array)
	}
	if right &amp;gt; l {
		QuickSort(l, right, array)
	}

}

func main() {
	// var array = [6]int{10, 34, 19, 100, 80, -5}
	// // SelectSort(&amp;amp;array)
	// // InsertSort(&amp;amp;array)
	// // fmt.Println(array)
	// QuickSort(0, len(array)-1, &amp;amp;array)
	// fmt.Println(array)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-quick-sort/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>模擬棧&amp;四則運算</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-stack/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-stack/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-stack/ -&lt;h1 id=&#34;模擬棧四則運算&#34;&gt;模擬棧&amp;amp;四則運算&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//模擬棧的使用
type Stack struct {
	MaxTop int //最大可存個數
	Top    int //頂
	arr    [20]int
}

func (s *Stack) Push(val int) (err error) {
	//先判斷是否滿
	if s.Top == s.MaxTop-1 {
		fmt.Println(&amp;#34;stack full&amp;#34;)
		return errors.New(&amp;#34;stack full&amp;#34;)
	}
	//放入數據
	s.Top++
	s.arr[s.Top] = val
	return
}

func (s *Stack) Pop() (val int, err error) {
	//先判斷是否空
	if s.Top == -1 {
		fmt.Println(&amp;#34;stack empty&amp;#34;)
		return 0, errors.New(&amp;#34;stack empty&amp;#34;)
	}
	//彈出數據
	val = s.arr[s.Top]
	s.Top--
	return val, nil
}

//遍歷
func (s *Stack) List() {
	//先判斷是否空
	if s.Top == -1 {
		fmt.Println(&amp;#34;stack empty&amp;#34;)
		return
	}
	fmt.Println(&amp;#34;stack now=&amp;#34;)
	for i := s.Top; i &amp;gt;= 0; i-- {
		fmt.Printf(&amp;#34;arr[%d]=%d\n&amp;#34;, i, s.arr[i])
	}
}

//判斷字符是數字還運算符號
func (s *Stack) IsOper(val int) bool {
	if val == 42 || val == 43 || val == 45 || val == 47 {
		//ASC碼的+-*/
		return true
	} else {
		return false
	}
}

//運算
func (s *Stack) Cal(n1, n2, oper int) int {
	res := 0
	switch oper {
	case 42:
		res = n2 * n1
	case 43:
		res = n2 + n1
	case 45:
		res = n2 - n1
	case 47:
		res = n2 / n1
	default:
		fmt.Println(&amp;#34;運算符號錯誤&amp;#34;)
	}
	return res
}

//優先級
func (s *Stack) Priority(oper int) int {
	res := 0
	if oper == 42 || oper == 47 {
		res = 1
	} else if oper == 43 || oper == 45 {
		res = 0
	}
	return res
}

func main() {
	// stack := &amp;amp;Stack{
	// 	MaxTop: 5,  //最多存5個
	// 	Top:    -1, //表示棧為空
	// }
	// stack.Push(1)
	// stack.Push(2)
	// stack.Push(3)
	// stack.Push(4)
	// stack.Push(5)
	// stack.Push(6)
	// p1, _ := stack.Pop()
	// fmt.Println(&amp;#34;彈出&amp;#34;, p1)
	// p1, _ = stack.Pop()
	// fmt.Println(&amp;#34;彈出&amp;#34;, p1)
	// p1, _ = stack.Pop()
	// fmt.Println(&amp;#34;彈出&amp;#34;, p1)
	// p1, _ = stack.Pop()
	// fmt.Println(&amp;#34;彈出&amp;#34;, p1)
	// p1, _ = stack.Pop()
	// fmt.Println(&amp;#34;彈出&amp;#34;, p1)

	//四則運算練習

	//數字棧
	numStack := &amp;amp;Stack{
		MaxTop: 20,
		Top:    -1,
	}

	//運算符號
	operStack := &amp;amp;Stack{
		MaxTop: 20,
		Top:    -1,
	}

	exp := &amp;#34;30+20*6+1&amp;#34;
	n1 := 0
	n2 := 0
	oper := 0
	res := 0
	keepNum := &amp;#34;&amp;#34;

	//定義一個index來掃描
	index := 0
	for {
		ch := exp[index : index+1]  //字符串
		temp := int([]byte(ch)[0])  //對應的ASC碼
		if operStack.IsOper(temp) { //說明是符號
			if operStack.Top == -1 { //說明是空棧
				operStack.Push(temp) //就入
			} else {
				if operStack.Priority(operStack.arr[operStack.Top]) &amp;gt;= operStack.Priority(temp) {
					//比較一下棧頂的運算符號優先級，如果有先乘除的
					n1, _ = numStack.Pop()
					n2, _ = numStack.Pop()
					oper, _ = operStack.Pop()
					res = operStack.Cal(n1, n2, oper)
					//算完塞回去
					numStack.Push(res)
					operStack.Push(temp)
				} else {
					operStack.Push(temp)
				}
			}
		} else {
			//處理多位數，看index後面是不是運算符號
			//拼接
			keepNum += ch

			if index == len(exp)-1 { //如果已經到最後
				val, _ := strconv.ParseInt(keepNum, 10, 64)
				numStack.Push(int(val))
			} else {
				if operStack.IsOper(int([]byte(exp[index+1 : index+2])[0])) {
					val, _ := strconv.ParseInt(keepNum, 10, 64)
					numStack.Push(int(val))
					keepNum = &amp;#34;&amp;#34;
				}
			}
			//從ASC轉回數字
			// val, _ := strconv.ParseInt(ch, 10, 64)
			// numStack.Push(int(val))
		}
		//判斷是否繼續掃描
		if index+1 == len(exp) {
			break
		}
		index++
	}

	for {
		if operStack.Top == -1 {
			break
		}
		n1, _ = numStack.Pop()
		n2, _ = numStack.Pop()
		oper, _ = operStack.Pop()
		res = operStack.Cal(n1, n2, oper)
		//算完塞回去
		numStack.Push(res)
	}
	final, _ := numStack.Pop()
	fmt.Printf(&amp;#34;算式%s=%v&amp;#34;, exp, final)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-stack/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>環形單向鏈表</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-circle-list/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-circle-list/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-circle-list/ -&lt;h1 id=&#34;環形單向鏈表&#34;&gt;環形單向鏈表&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type CatNode struct {
	no   int
	name string
	next *CatNode
}

func Insert(head *CatNode, newCatNode *CatNode) {
	//判斷是否第一隻貓
	if head.next == nil {
		head.no = newCatNode.no
		head.name = newCatNode.name
		head.next = head //構成環形
		fmt.Println(*newCatNode, &amp;#34;已初始化並加入環形鏈表&amp;#34;)
		return
	}

	//定義一個變量找到環形最後一個
	temp := head
	for {
		if temp.next == head {
			break
		}
		temp = temp.next

	}
	temp.next = newCatNode
	fmt.Println(*newCatNode, &amp;#34;已加入環形鏈表&amp;#34;)
	newCatNode.next = head

}

func Del(head *CatNode, id int) *CatNode {
	temp := head
	helper := head
	if temp.next == nil {
		fmt.Println(&amp;#34;這是一個空鏈表&amp;#34;)
		return head
	}
	if temp.next == head { //只有一點
		temp.next = nil
		fmt.Println(id, &amp;#34;已刪除&amp;#34;)
		return head
	}

	//helper放到尾
	for {
		if helper.next == head {
			break
		}
		helper = helper.next
	}

	flag := true
	for {
		if temp.next == head { //說明比到最後一個了
			break
		}
		if temp.no == id {
			if temp == head { //說明刪除的是頭
				head = head.next
			}
			helper.next = temp.next
			fmt.Println(id, &amp;#34;已刪除&amp;#34;)
			flag = false
			break
		}
		temp = temp.next     //移動比較用
		helper = helper.next //一旦找到要刪除的點
	}
	if flag {
		if temp.no == id {
			helper.next = temp.next
			fmt.Println(id, &amp;#34;已刪除&amp;#34;)
		} else {
			fmt.Println(id, &amp;#34;找不到&amp;#34;)
		}
	}
	return head
}

func List(head *CatNode) {
	temp := head
	if temp.next == nil {
		fmt.Println(&amp;#34;空的環形鏈表&amp;#34;)
		return
	}
	for {
		fmt.Printf(&amp;#34;貓id=%d name=%s ~&amp;gt;&amp;#34;, temp.no, temp.name)
		if temp.next == head {
			break
		}
		temp = temp.next
	}
	fmt.Println()
}

func main() {
	head := &amp;amp;CatNode{}
	cat1 := &amp;amp;CatNode{
		no:   1,
		name: &amp;#34;tom&amp;#34;,
	}
	cat2 := &amp;amp;CatNode{
		no:   2,
		name: &amp;#34;bbb&amp;#34;,
	}
	cat3 := &amp;amp;CatNode{
		no:   3,
		name: &amp;#34;ccc&amp;#34;,
	}

	Insert(head, cat1)
	Insert(head, cat2)
	Insert(head, cat3)
	List(head)
	// Del(head, 2)
	// List(head)
	head = Del(head, 4)
	List(head)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-circle-list/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>稀疏數組</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-array3/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-array3/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-array3/ -&lt;h1 id=&#34;稀疏數組&#34;&gt;稀疏數組&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type ValNode struct {
	row int //橫的
	col int //直的
	val int
}

func main() {
	//創建數組範例
	var chessMap [11][11]int
	chessMap[1][2] = 1
	chessMap[2][3] = 2

	//輸出看樣子
	for _, v := range chessMap {
		for _, v2 := range v {
			fmt.Printf(&amp;#34;%d\t&amp;#34;, v2)
		}
		fmt.Println()
	}

	//轉成稀疏數組，思路:遍歷他，創造一個結構體，發現有值就放進對應的切片
	var sparseArr []ValNode
	//紀錄規模跟預設值
	valNode0 := ValNode{
		row: 11,
		col: 11,
		val: 0,
	}
	sparseArr = append(sparseArr, valNode0)

	for i, v := range chessMap {
		for j, k := range v {
			if k != 0 {
				valNodeFind := ValNode{
					row: i,
					col: j,
					val: k,
				}
				sparseArr = append(sparseArr, valNodeFind)
			}
		}
	}
	//輸出這個數組看看
	for i, valNode := range sparseArr {
		fmt.Printf(&amp;#34;%d: %d %d %d\n&amp;#34;, i, valNode.row, valNode.col, valNode.val)
	}

	//恢復
	var chessMapRe [11][11]int
	for i, v := range sparseArr {
		if i != 0 { //跳過第一row
			chessMapRe[v.row][v.col] = v.val

		}
	}

	//輸出看樣子
	for _, v := range chessMapRe {
		for _, v2 := range v {
			fmt.Printf(&amp;#34;%d\t&amp;#34;, v2)
		}
		fmt.Println()
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-array3/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>約瑟夫問題</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-josephus/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-josephus/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-josephus/ -&lt;h1 id=&#34;約瑟夫問題&#34;&gt;約瑟夫問題&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Boy struct {
	No   int
	Next *Boy //指向下一個小孩的指針
}

func addBoy(num int) *Boy {
	//num表示小孩的個數，*Boy返回第一個小孩的指針
	first := &amp;amp;Boy{}
	temp := &amp;amp;Boy{}
	if num &amp;lt; 1 {
		fmt.Println(&amp;#34;num值錯誤&amp;#34;)
		return first
	}

	for i := 1; i &amp;lt;= num; i++ {
		boy := &amp;amp;Boy{
			No: i,
		}
		if i == 1 {
			first = boy //不變
			temp = boy
			temp.Next = first
		} else {
			temp.Next = boy
			temp = boy
			temp.Next = first //構成環形
		}
	}
	return first
}

func show(first *Boy) {
	if first.Next == nil {
		fmt.Println(&amp;#34;列表為空&amp;#34;)
		return
	}
	temp := first
	for {
		fmt.Printf(&amp;#34;編號%d~&amp;gt;&amp;#34;, temp.No)
		if temp.Next == first {
			break
		}
		temp = temp.Next
	}
}

func play(first *Boy, k int, m int) {
	//從第k人開始報數m出列
	if first.Next == nil {
		fmt.Println(&amp;#34;列表為空&amp;#34;)
		return
	}
	tail := first
	for {
		if tail.Next == first {
			break
		}
		tail = tail.Next
	}
	//讓first移動到k
	for i := 0; i &amp;lt; k-1; i++ {
		first = first.Next
		tail = tail.Next
	}

	//開始數m
	for {
		for i := 1; i &amp;lt;= m-1; i++ {
			first = first.Next
			tail = tail.Next
		}
		fmt.Println(first.No, &amp;#34;出列&amp;#34;)
		first = first.Next
		tail.Next = first

		//退出
		if tail == first {
			break
		}
	}
	fmt.Println(first.No, &amp;#34;為最後一個&amp;#34;)
}
func main() {
	first := addBoy(41)
	show(first)
	fmt.Println()
	play(first, 1, 3)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-josephus/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>迷宮遞迴</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-recursive/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-recursive/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-recursive/ -&lt;h1 id=&#34;迷宮遞迴&#34;&gt;迷宮遞迴&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func SetWay(myMap *[8][7]int, a int, b int) bool {
	//a,b 表示對地圖的那個點測試

	//找到出口
	if myMap[6][5] == 2 {
		return true
	} else {
		//繼續找
		if myMap[a][b] == 0 { //可探測的點
			myMap[a][b] = 2            //踩上去了，再探上下左右，但是我知道要往下往右探
			if SetWay(myMap, a+1, b) { //下
				return true
			} else if SetWay(myMap, a, b+1) { //右
				return true
			} else if SetWay(myMap, a-1, b) { //上
				return true
			} else if SetWay(myMap, a, b-1) { //左
				return true
			} else { //死路
				myMap[a][b] = 3
				return false
			}
		} else { //不可探測的點
			return false
		}
	}
}
func main() {
	//定義地圖 1=牆壁 0=沒走過的點 2=通路 3=走過的死路
	var myMap [8][7]int

	//四周設置圍牆
	for i := 0; i &amp;lt; 7; i++ {
		myMap[0][i] = 1
		myMap[7][i] = 1
	}
	for i := 0; i &amp;lt; 8; i++ {
		myMap[i][0] = 1
		myMap[i][6] = 1
	}
	myMap[3][1] = 1
	myMap[3][2] = 1

	//看樣子
	for i := 0; i &amp;lt; 8; i++ {
		for j := 0; j &amp;lt; 7; j++ {
			fmt.Print(myMap[i][j], &amp;#34; &amp;#34;)
		}
		fmt.Println()
	}

	SetWay(&amp;amp;myMap, 1, 1)
	fmt.Println(&amp;#34;已探完&amp;#34;)

	for i := 0; i &amp;lt; 8; i++ {
		for j := 0; j &amp;lt; 7; j++ {
			fmt.Print(myMap[i][j], &amp;#34; &amp;#34;)
		}
		fmt.Println()
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-recursive/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>雙向鏈表</title>
        <link>https://yoziming.github.io/post/210815-agg-go-al-double-chain-list/</link>
        <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210815-agg-go-al-double-chain-list/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210815-agg-go-al-double-chain-list/ -&lt;h1 id=&#34;雙向鏈表&#34;&gt;雙向鏈表&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type HeroNode struct {
	no   int
	name string
	pre  *HeroNode //表示指向前一個節點
	next *HeroNode //表示指向下一個節點
}

//給鏈表插入節點
func Insert(head *HeroNode, newHeroNode *HeroNode) {
	//先找到最後的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		}
		temp = temp.next //不斷往下找
	}
	//把newHeroNode加到屁股
	temp.next = newHeroNode
	newHeroNode.pre = temp
}

//根據No從小到大插入
func InsertNo(head *HeroNode, newHeroNode *HeroNode) {
	//想找到適當的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		} else if temp.next.no &amp;gt; newHeroNode.no {
			//表示new要插到temp後
			break
		} else if temp.next.no == newHeroNode.no {
			//表示new這個編號已存在
			fmt.Println(newHeroNode.no, &amp;#34;該編號已存在&amp;#34;)
			return
		}
		temp = temp.next //不斷往下找

	}
	//把newHeroNode加到找到的地方
	newHeroNode.next = temp.next
	newHeroNode.pre = temp
	if temp.next != nil {
		temp.next.pre = newHeroNode //temp的下一個的前一個=新
	}
	temp.next = newHeroNode
}

//根據no刪除一個節點
func DelHeroNode(head *HeroNode, id int) {
	//想找到適當的節點，創建一個輔助
	temp := head
	for {
		if temp.next == nil { //表示找到最後
			break
		} else if temp.next.no == id {
			//表示找到了
			fmt.Println(id, &amp;#34;該編號已刪除&amp;#34;)
			temp.next = temp.next.next
			if temp.next != nil {
				temp.next.pre = temp
			}
			return
		}
		temp = temp.next //不斷往下找
	}

}

//顯示
func List(head *HeroNode) {
	//創建一個輔助
	temp := head
	if temp.next == nil { //空鏈表?
		fmt.Println(&amp;#34;空&amp;#34;)
		return
	}
	for {
		fmt.Printf(&amp;#34;[%d,%s]==&amp;gt;&amp;#34;, temp.next.no, temp.next.name)
		temp = temp.next      //不斷往下找
		if temp.next == nil { //到尾了
			fmt.Println(&amp;#34;完畢&amp;#34;)
			break
		}
	}
}

func main() {
	//創建一個頭節點(空的)
	head := &amp;amp;HeroNode{}
	hero1 := &amp;amp;HeroNode{
		no:   1,
		name: &amp;#34;宋江&amp;#34;,
	}
	hero2 := &amp;amp;HeroNode{
		no:   2,
		name: &amp;#34;李奎&amp;#34;,
	}
	hero3 := &amp;amp;HeroNode{
		no:   3,
		name: &amp;#34;李軌&amp;#34;,
	}
	InsertNo(head, hero3)
	InsertNo(head, hero1)
	InsertNo(head, hero2)

	List(head)
	DelHeroNode(head, 3)
	List(head)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210815-agg-go-al-double-chain-list/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>channel通道</title>
        <link>https://yoziming.github.io/post/210810-agg-go-channel/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-channel/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-channel/ -&lt;h1 id=&#34;channel通道&#34;&gt;channel通道&lt;/h1&gt;
&lt;h2 id=&#34;lock-sync與chan基本認識&#34;&gt;lock sync與chan基本認識&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//階乘1-n 把各個數放到map中 用goroutine完成
var (
	myMap = make(map[int]int, 10)
	//聲明一個全局的互斥鎖
	lock sync.Mutex
	//來點管道 記得要make初始化才能用
	intChan chan int = make(chan int, 3)

	//聲明類型為空接口可以接收任意類型
	allChan chan interface{} = make(chan interface{}, 5)
	//注意後面沒聲明容量則不給用
)

type Cat struct {
	Name string
	Age  int
}

func test(n int) {
	res := 1
	for i := 1; i &amp;lt;= n; i++ {
		res = res * i
	}
	//把res放進mayMap
	//加鎖
	lock.Lock()
	myMap[n] = res
	//解鎖
	lock.Unlock()
}

func main() {
	//啟用多個協程
	for i := 1; i &amp;lt;= 1; i++ {
		go test(i)
	}
	//如果不加鎖concurrent map iteration and map write
	lock.Lock()
	for i, v := range myMap {
		fmt.Printf(&amp;#34;map[%d]=%v\n&amp;#34;, i, v)
	}
	lock.Unlock()

	//看看管道
	fmt.Println(intChan)
	//出來是一個地址，表示誰要經過這 (當然本身也有一個地址但不重要)
	fmt.Printf(&amp;#34;長度=%v 容量=%v\n&amp;#34;, len(intChan), cap(intChan))

	//向管道寫入數據
	intChan &amp;lt;- 10
	fmt.Printf(&amp;#34;長度=%v 容量=%v\n&amp;#34;, len(intChan), cap(intChan))
	num1 := 5
	intChan &amp;lt;- num1
	intChan &amp;lt;- 1
	fmt.Printf(&amp;#34;長度=%v 容量=%v\n&amp;#34;, len(intChan), cap(intChan))
	//intChan &amp;lt;- 12 //超過3個太長報錯

	//從管道取數據
	var num2 int = &amp;lt;-intChan
	fmt.Println(num2)
	fmt.Printf(&amp;#34;長度=%v 容量=%v\n&amp;#34;, len(intChan), cap(intChan))
	//先進先出，取完超過一樣報錯
	num3 := &amp;lt;-intChan
	fmt.Println(num3)
	fmt.Printf(&amp;#34;長度=%v 容量=%v\n&amp;#34;, len(intChan), cap(intChan))

	//關於allChan
	allChan &amp;lt;- 10
	allChan &amp;lt;- &amp;#34;ABC&amp;#34;
	cat1 := Cat{&amp;#34;小花&amp;#34;, 3}
	allChan &amp;lt;- cat1
	//可以亂塞一通

	//想拿到第三個元素 先把兩個推出來
	&amp;lt;-allChan
	&amp;lt;-allChan

	newCat := &amp;lt;-allChan //從管道中取出來的cat1
	fmt.Printf(&amp;#34;類型=%T 值=%v\n&amp;#34;, newCat, newCat)
	// fmt.Printf(&amp;#34;%v\n&amp;#34;, newCat.Name) //雖然類型一樣但這樣用不通過
	//必須類型斷言
	a := newCat.(Cat)
	fmt.Printf(&amp;#34;%v\n&amp;#34;, a.Name)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;只讀或寫&#34;&gt;只讀或寫&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//chan可以只讀或只寫
	// chan1 chan int //可讀可寫
	var chan2 chan&amp;lt;- int = make(chan int, 3) //只寫
	chan2 &amp;lt;- 20
	// num:=&amp;lt;-chan2//報錯
	fmt.Println(chan2)

	var chan3 &amp;lt;-chan int = make(chan int, 3)
	num2 := &amp;lt;-chan3
	fmt.Println(num2)
	chan3 &amp;lt;- 10 //報錯
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;遍歷chan&#34;&gt;遍歷chan&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//用close關掉channel就不能往內加(但是可以拿出)
	var intChan chan int = make(chan int, 3)
	intChan &amp;lt;- 100
	intChan &amp;lt;- 200
	close(intChan)
	// intChan &amp;lt;- 300 //錯誤
	n1 := &amp;lt;-intChan
	fmt.Println(n1)

	//遍歷
	intChan2 := make(chan int, 100)
	for i := 0; i &amp;lt; 100; i++ {
		intChan2 &amp;lt;- i * 2 //放100個數據(2,4,6...進去)
	}
	//得用for:=range用一般for遍歷會報錯
	//如果已經close遍歷完就會自動停止，如果沒有先關掉會deadlock
	close(intChan2)
	for v := range intChan2 {
		fmt.Println(v)
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;阻塞&#34;&gt;阻塞&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func writeData(intChan chan int) {
	for i := 1; i &amp;lt;= 50; i++ {
		intChan &amp;lt;- i
		fmt.Printf(&amp;#34;writeData=%v\n&amp;#34;, i)
		// time.Sleep(time.Second / 1000)
	}
	close(intChan) //寫完就關
}
func readData(intChan chan int, exitChan chan bool) {
	for {
		v, ok := &amp;lt;-intChan
		// time.Sleep(time.Second / 1000)
		if !ok {
			break
		}
		fmt.Printf(&amp;#34;readData讀取到數據=%v\n&amp;#34;, v)
	}
	//讀取完=任務完成 其實這裡不管對exitChan做啥都無所謂，重點是有調用他就能阻塞main
	exitChan &amp;lt;- true
	close(exitChan)
}

func main() {

	intChan := make(chan int, 5)
	//即使管道小 寫的慢讀得快或相反，他會排隊，重點不要阻塞死鎖就能繼續
	exitChan := make(chan bool, 1)

	go writeData(intChan)
	go readData(intChan, exitChan)
	if &amp;lt;-exitChan { //重點就是這個判斷調用到一個管道有跨到子函數的就能阻塞住main
		fmt.Println(&amp;#34;任務完成&amp;#34;)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;用select解決阻塞&#34;&gt;用select解決阻塞&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func sayH() {
	for i := 0; i &amp;lt; 10; i++ {
		time.Sleep(time.Second / 10)
		fmt.Println(&amp;#34;hello&amp;#34;)
	}
}

func test() {
	defer func() {
		if err := recover(); err != nil {
			fmt.Println(&amp;#34;test錯誤&amp;#34;, err)
		}
	}()
	myMap := make(map[int]string)
	myMap[0] = &amp;#34;我家&amp;#34;
	fmt.Println(myMap)
}

func main() {

	go sayH()
	go test()
	fmt.Println(&amp;#34;hellom&amp;#34;)

	intChan := make(chan int, 10)
	for i := 0; i &amp;lt; 10; i++ {
		intChan &amp;lt;- i
	}

	stringChan := make(chan string, 5)
	for i := 0; i &amp;lt; 5; i++ {
		stringChan &amp;lt;- &amp;#34;hello&amp;#34; + fmt.Sprintf(&amp;#34;%d&amp;#34;, i)
	}
	//傳統方法遍歷，如果不關閉會阻塞 就導致deadlock
	//實際開發不好確定哪時候關閉，就用select解決
	for {
		select {
		//就算沒關閉，只要阻塞他就往其他case移動
		case v := &amp;lt;-intChan:
			fmt.Printf(&amp;#34;intChan取出%d\n&amp;#34;, v)
		case v := &amp;lt;-stringChan:
			fmt.Printf(&amp;#34;stringChan取出%s\n&amp;#34;, v)
		default:
			fmt.Println(&amp;#34;取完了&amp;#34;)
			return
		}
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-channel/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>const常量</title>
        <link>https://yoziming.github.io/post/210810-agg-go-const/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-const/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-const/ -&lt;h1 id=&#34;const常量&#34;&gt;const常量&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;常量 聲明時必須賦值、不能修改、只能是bool、數值、string，賦值需是一個確定的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	const tax int = 10
	const x = 9 / 3
	// const c = 9 / a //因為a可能是一個變量所以這樣不行
	// var a int = 3
	fmt.Println(tax, x)

	const (
		a = iota //表示a=0
		b        //b=a+1
		c        //c=b+1
	)
	fmt.Println(a, b, c)

	const (
		d = iota
		e
		f, g = iota, iota
	)
	fmt.Println(d, e, f, g)

	//其他程式語言常量會用全大寫，go中沒限制，且一樣用首字母大小來控制使用範圍
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-const/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>defer臨走前啟用</title>
        <link>https://yoziming.github.io/post/210810-agg-go-defer/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-defer/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-defer/ -&lt;h1 id=&#34;defer臨走前啟用&#34;&gt;defer臨走前啟用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;退出函數前才執行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func sum(n1, n2 int) int {
	defer fmt.Println(&amp;#34;ok1&amp;#34;, n1)
	defer fmt.Println(&amp;#34;ok2&amp;#34;, n2)
	//defer棧先入後出
	n1++
	n2++
	res := n1 + n2
	fmt.Println(&amp;#34;ok3 res=&amp;#34;, res)
	return res

}
func main() {
	res := sum(10, 20)
	fmt.Println(&amp;#34;res=&amp;#34;, res)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-defer/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>goroutine</title>
        <link>https://yoziming.github.io/post/210810-agg-go-goroutine/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-goroutine/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-goroutine/ -&lt;h1 id=&#34;goroutine&#34;&gt;goroutine&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;進程=程序在操作系統中的一次進行過程&lt;/p&gt;
&lt;p&gt;線程=執行實例的最小單位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一個進程可以創建多個線程且併發執行&lt;/li&gt;
&lt;li&gt;一個程序至少包含一個進程，一個進程至少包含一個線程&lt;/li&gt;
&lt;li&gt;併發=多線程程序在單核上運行&lt;/li&gt;
&lt;li&gt;併行=多線程程序在多核上運行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GO的主線程(可以理解為進程)，一個GO進程上可以起很多協程，協程可以理解為輕量級的線程，協程特點:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有獨立的棧空間&lt;/li&gt;
&lt;li&gt;共享程序堆空間&lt;/li&gt;
&lt;li&gt;調度由用戶控制&lt;/li&gt;
&lt;li&gt;為輕量級的線程&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func test() {
	for i := 0; i &amp;lt; 10; i++ {
		fmt.Println(&amp;#34;test()Hello,world&amp;#34; + strconv.Itoa(i))
		time.Sleep(time.Second / 10)
	}
}

func main() {
	go test() //開啟一個協程
	//如果主線程退出了，即使協程還沒執行完，也會退出
	//協程可以自己先結束
	for i := 0; i &amp;lt; 10; i++ {
		fmt.Println(&amp;#34;main()Hello,go&amp;#34; + strconv.Itoa(i))
		time.Sleep(time.Second / 10)
	}
	go test() //開啟一個協程，主線程退出了，即使協程還沒執行完，也會退出

	//查邏輯CPU數量
	cpuNum := runtime.NumCPU()
	fmt.Println(cpuNum)
	//設置最大線程數量
	runtime.GOMAXPROCS(cpuNum)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-goroutine/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Go使用mysql與事務操作</title>
        <link>https://yoziming.github.io/post/210810-agg-go-mysql/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-mysql/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-mysql/ -&lt;h1 id=&#34;go使用mysql與事務操作&#34;&gt;Go使用mysql與事務操作&lt;/h1&gt;
&lt;h3 id=&#34;基本操作&#34;&gt;基本操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;#34;database/sql&amp;#34;
	&amp;#34;fmt&amp;#34;

	_ &amp;#34;github.com/go-sql-driver/mysql&amp;#34;
)

var db *sql.DB // 是一個連接池對象

// user 接收數據
type user struct {
	id   int
	name string
	age  int
}

func initDB() (err error) {
	dsn := &amp;#34;root:root@tcp(127.0.0.1:3306)/sql_test&amp;#34;
	db, err = sql.Open(&amp;#34;mysql&amp;#34;, dsn) // 這個db要用全局的，重要!
	if err != nil {
		return
	}
	err = db.Ping()
	if err != nil {
		return
	} else {
		fmt.Println(&amp;#34;連接成功&amp;#34;)
	}
	return
}

// 查詢一個
func find1() {
	var u1 user
	sqlStr := `select id, name, age from user where id=?;`
	rowObj := db.QueryRow(sqlStr, 1)
	err := rowObj.Scan(&amp;amp;u1.id, &amp;amp;u1.name, &amp;amp;u1.age)
	if err != nil {
		fmt.Println(&amp;#34;Scan failed!&amp;#34;, err)
		return
	}
	fmt.Println(u1)
}

// findMore 查詢多個
func findMore() {
	sqlStr := `select id, name, age from user where id &amp;gt; ?;`
	rows, _ := db.Query(sqlStr, 0)
	defer rows.Close()

	for rows.Next() {
		var u user
		err := rows.Scan(&amp;amp;u.id, &amp;amp;u.name, &amp;amp;u.age)
		if err != nil {
			return
		}
		fmt.Println(u)
	}
}

func update(newAge int, id int) {
	sqlStr := &amp;#34;update user set age=? where id = ?&amp;#34;
	ret, err := db.Exec(sqlStr, newAge, id)
	if err != nil {
		fmt.Println(err)
		return
	}
	n, err := ret.RowsAffected()
	if err != nil {
		return
	}
	fmt.Println(&amp;#34;更新了&amp;#34;, n, &amp;#34;行數據&amp;#34;)
}

func delete(id int) {
	sqlStr := &amp;#34;delete from user where id = ?&amp;#34;
	ret, err := db.Exec(sqlStr, id)
	if err != nil {
		fmt.Println(err)
		return
	}
	n, err := ret.RowsAffected()
	if err != nil {
		return
	}
	fmt.Println(&amp;#34;更新了&amp;#34;, n, &amp;#34;行數據&amp;#34;)
}

func main() {
	err := initDB()
	if err != nil {
		fmt.Println(&amp;#34;init DB failed&amp;#34;, err)
	}

	preInsert()
	// findMore()
	// update(90, 2)
	// delete(2)
	findMore()
}

func insert() {
	sqlStr := `insert into user(name, age) values(&amp;#34;AAC&amp;#34;, 18)`
	ret, err := db.Exec(sqlStr)
	if err != nil {
		fmt.Println(&amp;#34;insert failed!&amp;#34;, err)
		return
	}
	// 插入後能拿到對應的ID
	id, _ := ret.LastInsertId()
	fmt.Println(&amp;#34;id=&amp;#34;, id)
}

func preInsert() {
	sqlStr := &amp;#34;insert into user(name, age) values(?,?)&amp;#34;
	stmt, err := db.Prepare(sqlStr)
	if err != nil {
		return
	}
	defer stmt.Close()
	for i := 1; i &amp;lt; 10; i++ {
		_, _ = stmt.Exec(&amp;#34;人物&amp;#34;, i)

	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mysql事務操作&#34;&gt;mysql事務操作&lt;/h3&gt;
&lt;p&gt;事務：一個最小的不可再分的工作單元；通常一個事務對應一個完整的業務(例如銀行帳戶轉帳業務，該業務就是一個最小的工作單元)，同時這個完整的業務需要執行多次的DML(insert、update、delete)語句共同聯合完成。A轉帳給B，這裡面就需要執行兩次update操作。在MySQL中只有使用了Innodb資料庫引擎的資料庫或表才支援事務。交易處理可以用來維護資料庫的完整性，保證成批的SQL語句要麼全部執行，要麼全部不執行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事務的ACID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常事務必須滿足4個條件（ACID）：原子性（Atomicity，或稱不可分割性）、一致性（Consistency）、隔離性（Isolation，又稱獨立性）、持久性（Durability）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原子性 一個事務（transaction）中的所有操作，要麼全部完成，要麼全部不完成，不會結束在中間某個環節。事務在執行過程中發生錯誤，會被回滾（Rollback）到事務開始前的狀態，就像這個事務從來沒有執行過一樣。&lt;/li&gt;
&lt;li&gt;一致性 在事務開始之前和事務結束以後，資料庫的完整性沒有被破壞。這表示寫入的資料必須完全符合所有的預設規則，這包含資料的精確度、串聯性以及後續資料庫可以自發性地完成預定的工作。&lt;/li&gt;
&lt;li&gt;隔離性 資料庫允許多個併發事務同時對其資料進行讀寫和修改的能力，隔離性可以防止多個事務併發執行時由於交叉執行而導致資料的不一致。事務隔離分為不同級別，包括讀未提交（Read uncommitted）、讀提交（read committed）、可重複讀（repeatable read）和序列化（Serializable）。&lt;/li&gt;
&lt;li&gt;持久性 交易處理結束後，對資料的修改就是永久的，即便系統故障也不會丟失。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;#34;database/sql&amp;#34;
	&amp;#34;fmt&amp;#34;

	_ &amp;#34;github.com/go-sql-driver/mysql&amp;#34;
)

var db *sql.DB // 是一個連接池對象

// user 接收數據
type user struct {
	id   int
	name string
	age  int
}

func initDB() (err error) {
	dsn := &amp;#34;root:root@tcp(127.0.0.1:3306)/sql_test&amp;#34;
	db, err = sql.Open(&amp;#34;mysql&amp;#34;, dsn) // 這個db要用全局的，重要!
	if err != nil {
		return
	}
	err = db.Ping()
	if err != nil {
		return
	} else {
		fmt.Println(&amp;#34;連接成功&amp;#34;)
	}
	return
}

func transaction() {
	tx, err := db.Begin()
	if err != nil {
		fmt.Println(&amp;#34;begin failed!&amp;#34;, err)
		return
	}

	sqlStr1 := &amp;#34;update user set age=age-2 where id=1&amp;#34;
	sqlStr2 := &amp;#34;update user set age=age+2 where id=3&amp;#34;
	ret1, err := tx.Exec(sqlStr1)
	if err != nil {
		tx.Rollback()
		return
	}
	affRow1, err := ret1.RowsAffected()
	if err != nil {
		tx.Rollback()
		return
	}
	ret2, err := tx.Exec(sqlStr2)
	if err != nil {
		tx.Rollback()
		return
	}
	affRow2, err := ret2.RowsAffected()
	if err != nil {
		tx.Rollback()
		return
	}
	fmt.Println(affRow1, affRow2)
	if affRow1 == 1 &amp;amp;&amp;amp; affRow2 == 1 {
		tx.Commit()
		fmt.Println(&amp;#34;已提交&amp;#34;)
	} else {
		tx.Rollback()
	}

}

func findMore() {
	sqlStr := `select id, name, age from user where id &amp;gt; ?;`
	rows, _ := db.Query(sqlStr, 0)
	defer rows.Close()

	for rows.Next() {
		var u user
		err := rows.Scan(&amp;amp;u.id, &amp;amp;u.name, &amp;amp;u.age)
		if err != nil {
			return
		}
		fmt.Println(u)
	}
}

func main() {

	initDB()
	findMore()
	transaction()
	findMore()
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-mysql/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>JSON序列化</title>
        <link>https://yoziming.github.io/post/210810-agg-go-json/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-json/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-json/ -&lt;h1 id=&#34;json序列化&#34;&gt;JSON序列化&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON 格式 {&amp;ldquo;鍵&amp;rdquo;:&amp;ldquo;值&amp;rdquo;}  {&amp;ldquo;鍵&amp;rdquo;:&amp;ldquo;值&amp;rdquo;,&amp;ldquo;鍵2&amp;rdquo;:&amp;ldquo;值2&amp;rdquo;} {&amp;ldquo;鍵&amp;rdquo;:&amp;ldquo;值&amp;rdquo;,&amp;ldquo;鍵2&amp;rdquo;:[&amp;ldquo;值2數組&amp;rdquo;,值2數組]}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Monster struct {
	Name string  `json:&amp;#34;name&amp;#34;` //反射機制
	Age  int     `json:&amp;#34;age&amp;#34;`
	Sal  float64 `json:&amp;#34;sal&amp;#34;`
}

func test1() {
	monster1 := Monster{
		Name: &amp;#34;牛魔王&amp;#34;,
		Age:  50,
		Sal:  8000.0,
	}
	data, err := json.Marshal(&amp;amp;monster1)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(data))
}

//把map序列化
func testMap() {
	var mapA map[string]interface{} = make(map[string]interface{})
	mapA[&amp;#34;name&amp;#34;] = &amp;#34;紅孩兒&amp;#34;
	mapA[&amp;#34;age&amp;#34;] = 18
	data, err := json.Marshal(&amp;amp;mapA)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(data))

}

//切片序列化
func testSlice() {
	var slice1 []map[string]interface{}
	var m1 map[string]interface{} = make(map[string]interface{})
	m1[&amp;#34;name&amp;#34;] = &amp;#34;珍娜&amp;#34;
	m1[&amp;#34;age&amp;#34;] = 40
	slice1 = append(slice1, m1)
	var m2 map[string]interface{} = make(map[string]interface{})
	m2[&amp;#34;name&amp;#34;] = &amp;#34;索爾&amp;#34;
	m2[&amp;#34;age&amp;#34;] = 25
	slice1 = append(slice1, m2)
	data, err := json.Marshal(slice1)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(data))

}

//基本數據類型序列化，沒啥意義 因為他沒有key 就只會轉出一個string
func testFloat64() {
	var num1 float64 = 123.45
	data, err := json.Marshal(num1)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(data))

}

//反序列化
func unmarshal() {
	str := `{&amp;#34;name&amp;#34;:&amp;#34;牛魔王&amp;#34;,&amp;#34;age&amp;#34;:50,&amp;#34;sal&amp;#34;:8000}`
	//用`...`包起來保留原格式

	//定義一個實例來接收 這個接收的格式一定要能符合對應
	var heroes Monster
	err := json.Unmarshal([]byte(str), &amp;amp;heroes)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(heroes)
}
func unmarshalMap() {
	str := `{&amp;#34;age&amp;#34;:18,&amp;#34;name&amp;#34;:&amp;#34;紅孩兒&amp;#34;}`
	var a map[string]interface{}
	//不用make因為unmarshal函數內封裝了
	err := json.Unmarshal([]byte(str), &amp;amp;a)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(a)
}

func main() {
	test1()
	testMap()
	testSlice()
	testFloat64()
	unmarshal()
	unmarshalMap()
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-json/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Map集合</title>
        <link>https://yoziming.github.io/post/210810-agg-go-map/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-map/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-map/ -&lt;h1 id=&#34;map集合&#34;&gt;Map集合&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	// map[key類型] value類型
	var m1 map[int]int = make(map[int]int)

	//key類型通常是int or string
	//value 通常是數字 or string or map or struct
	//只聲明不會給內存，要make才初始化才能用(跟切片一樣)
	m1[1] = 100
	m1[2] = 200
	m1[3] = 300
	m1[1] = 1000
	//key不能重複，後賦予的頂掉前面
	fmt.Println(m1)

	var m2 = make(map[string]string)
	m2[&amp;#34;AV&amp;#34;] = &amp;#34;sss&amp;#34;
	fmt.Println(m2)

	//推薦寫法
	m3 := make(map[string]string)
	m3[&amp;#34;一號&amp;#34;] = &amp;#34;台北&amp;#34;
	m3[&amp;#34;二奧&amp;#34;] = &amp;#34;桃園&amp;#34;
	fmt.Println(m3)

	m4 := map[int]int{1: 10, 2: 20, 3: 30}
	fmt.Println(m4)

	//學生姓名+性別
	m5 := make(map[string](map[string]string))
	m5[&amp;#34;stu01&amp;#34;] = make(map[string]string) //不能少
	m5[&amp;#34;stu01&amp;#34;][&amp;#34;name&amp;#34;] = &amp;#34;tom&amp;#34;
	m5[&amp;#34;stu01&amp;#34;][&amp;#34;sex&amp;#34;] = &amp;#34;男&amp;#34;
	m5[&amp;#34;stu02&amp;#34;] = make(map[string]string) //不能少
	m5[&amp;#34;stu02&amp;#34;][&amp;#34;name&amp;#34;] = &amp;#34;mary&amp;#34;
	m5[&amp;#34;stu02&amp;#34;][&amp;#34;sex&amp;#34;] = &amp;#34;女&amp;#34;
	fmt.Println(m5)
	fmt.Println(m5[&amp;#34;stu01&amp;#34;])
	fmt.Println(m5[&amp;#34;stu01&amp;#34;][&amp;#34;sex&amp;#34;])

	var m6 = make(map[int]int)
	m6[1] = 10
	m6[2] = 20
	delete(m6, 1) //delete=刪除key
	delete(m6, 3) //delete空的東西也不會報錯
	//沒有辦法把key全刪除，要就用遍歷
	fmt.Println(m6)
	//重新分配一次=清空，但是格式要跟本來一樣
	m6 = make(map[int]int)
	fmt.Println(m6)

	//查找
	var m7 = make(map[int]int)
	m7[1] = 111
	m7[2] = 222
	val, ok := m7[2] //把一個map中的一個key賦給a,b 其中a=value b=bool(是否存在)
	fmt.Println(val, ok)
	if ok {
		fmt.Printf(&amp;#34;m7存在key&amp;#39;1&amp;#39;且值為%v\n&amp;#34;, val)
	} else {
		fmt.Printf(&amp;#34;m7不存在key&amp;#39;n&amp;#39;\n&amp;#34;)
	}

	//遍歷
	//因為map裡面的key-value不一定是連續的數字，所以不能用for而要用for:=range
	//m5 := make(map[string](map[string]string))

	for k, v := range m5 {
		fmt.Printf(&amp;#34;k=%v \n&amp;#34;, k)
		for k2, v2 := range v {
			fmt.Printf(&amp;#34;	k2=%v v=%v \n&amp;#34;, k2, v2)
		}

	}

	//長度=有幾對
	m8 := map[int]int{1: 10, 2: 20, 3: 30}
	fmt.Println(len(m8))

	//map切片
	//使用一個map來記錄monster的name跟age，且monster數量可以動態變化

	var mon []map[string]string = make([]map[string]string, 2)
	if mon[0] == nil {
		mon[0] = make(map[string]string, 2)
		mon[0][&amp;#34;name&amp;#34;] = &amp;#34;牛魔王&amp;#34;
		mon[0][&amp;#34;age&amp;#34;] = &amp;#34;500&amp;#34;
	}
	if mon[1] == nil {
		mon[1] = make(map[string]string, 2)
		mon[1][&amp;#34;name&amp;#34;] = &amp;#34;玉兔&amp;#34;
		mon[1][&amp;#34;age&amp;#34;] = &amp;#34;300&amp;#34;
	}

	// if mon[2] == nil {
	// 	mon[2] = make(map[string]string, 2)
	// 	mon[2][&amp;#34;name&amp;#34;] = &amp;#34;111&amp;#34;
	// 	mon[2][&amp;#34;age&amp;#34;] = &amp;#34;3440&amp;#34;
	// } //這樣寫越界
	//用append 先定義monster信息
	newMon := map[string]string{
		&amp;#34;name&amp;#34;: &amp;#34;新妖怪&amp;#34;,
		&amp;#34;age&amp;#34;:  &amp;#34;200&amp;#34;,
	}
	mon = append(mon, newMon)

	fmt.Println(mon)

	//用結構體更好，例如學號是唯一
	type Stu struct {
		Name    string
		Age     int
		Address string
	}
	stumaps := make(map[string]Stu)
	//創建學生
	stu1 := Stu{&amp;#34;tom&amp;#34;, 18, &amp;#34;經&amp;#34;}
	stu2 := Stu{&amp;#34;mary&amp;#34;, 50, &amp;#34;KJH&amp;#34;}
	stumaps[&amp;#34;no1&amp;#34;] = stu1
	stumaps[&amp;#34;no2&amp;#34;] = stu2
	fmt.Println(stumaps)
	//遍歷
	for k, v := range stumaps {
		fmt.Printf(&amp;#34;學號=%v\n&amp;#34;, k)
		fmt.Printf(&amp;#34;	姓名=%v\n&amp;#34;, v.Name)
		fmt.Printf(&amp;#34;	年紀=%v\n&amp;#34;, v.Age)
		fmt.Printf(&amp;#34;	住址=%v\n&amp;#34;, v.Address)
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-map/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>new與make的區別</title>
        <link>https://yoziming.github.io/post/210810-agg-go-new-make/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-new-make/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-new-make/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	num1 := 100
	fmt.Printf(&amp;#34;類型=%T,值=%v,地址=%v\n&amp;#34;, num1, num1, &amp;amp;num1)
	num2 := new(int) //*int
	fmt.Printf(&amp;#34;類型=%T,值=%v,地址=%v\n&amp;#34;, num2, num2, &amp;amp;num2)

	//new用來分配類型
	//make用來分配內存
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-new-make/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Redis基本操作</title>
        <link>https://yoziming.github.io/post/210810-agg-go-redis/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-redis/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-redis/ -&lt;h1 id=&#34;redis基本操作&#34;&gt;Redis基本操作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本地在cmd輸入&lt;code&gt;redis-cli&lt;/code&gt;啟動操作用戶端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遠端連接:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ redis-cli -h host -p port -a password

// 範例
$ redis-cli -h 127.0.0.1 -p 6379 -a &amp;#34;mypass&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PING&lt;/code&gt;測試連接&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;數據&#34;&gt;數據&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;數據結構類似JSON都是Key-Value&lt;/li&gt;
&lt;li&gt;五大數據類型String、Hash、List、Set、Zset&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string&#34;&gt;String&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最基本的字串，value最大值=512M&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;set(如果存在就相當於修改)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;get&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;del (很多指令可以用tab協助完成)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setex(幾秒後自毀)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hash&#34;&gt;Hash&lt;/h3&gt;
&lt;p&gt;指令:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HSET key field value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;hget、hdel&lt;/p&gt;
&lt;p&gt;一次設多項(空格隔開)hmset、hmget&lt;/p&gt;
&lt;p&gt;hlen:統計有幾個元素&lt;/p&gt;
&lt;p&gt;hexists:看field是否存在&lt;/p&gt;
&lt;h3 id=&#34;list&#34;&gt;List&lt;/h3&gt;
&lt;p&gt;是個有序的鏈表，元素的值可以重複，可以把東西加在頭或尾&lt;/p&gt;
&lt;p&gt;指令:lpush 從左往管子裡塞東西，一直推擠過去&lt;/p&gt;
&lt;p&gt;lrange 0 end (最左是0 1 2 3&amp;hellip;，也可以用負數 -1表示最後一個 -2表示倒數第2&lt;/p&gt;
&lt;p&gt;比如說lrange 0 -1 =從左開始全顯示&lt;/p&gt;
&lt;p&gt;rpush 從右邊加東西 (就順序上來說比較習慣)&lt;/p&gt;
&lt;p&gt;lpop / rpop 從左或右取出數據(彈走了)&lt;/p&gt;
&lt;p&gt;del key 刪掉就沒了&lt;/p&gt;
&lt;p&gt;lindex 按照索引下標獲得元素(從左到右0開始)&lt;/p&gt;
&lt;p&gt;llen 長度&lt;/p&gt;
&lt;h3 id=&#34;set&#34;&gt;Set&lt;/h3&gt;
&lt;p&gt;String類型的無序集合(元素的值不能重複)&lt;/p&gt;
&lt;p&gt;舉例 存放email不該重複 (重複加了無效)&lt;/p&gt;
&lt;p&gt;指令saad&lt;/p&gt;
&lt;p&gt;smembers 印出所有值&lt;/p&gt;
&lt;p&gt;sismember 判斷值是否成員&lt;/p&gt;
&lt;p&gt;srem 刪除指定值&lt;/p&gt;
- https://yoziming.github.io/post/210810-agg-go-redis/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Reflect反射</title>
        <link>https://yoziming.github.io/post/210810-agg-go-reflect/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-reflect/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-reflect/ -&lt;h1 id=&#34;reflect反射&#34;&gt;reflect反射&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func reflectTest01(b interface{}) {
	//通過反射獲取傳入的各種訊息
	//先拿reflect.Type
	rType := reflect.TypeOf(b)
	fmt.Println(&amp;#34;rType=&amp;#34;, rType)

	rVal := reflect.ValueOf(b)
	fmt.Println(&amp;#34;rVal=&amp;#34;, rVal)
	// n1:=10+rVal //rVal他看起來是int但其實是type reflect.Value
	n1 := 10 + rVal.Int() //用.Int()轉換後就可以了
	// n3 := rVal.Float()//像這樣也不行的，一定要確認類型
	fmt.Println(&amp;#34;n1=&amp;#34;, n1)
	// fmt.Println(&amp;#34;n3=&amp;#34;, n3)

	//把rVal轉回interface{}
	iV := rVal.Interface()
	n2 := iV.(int)
	fmt.Println(&amp;#34;n2=&amp;#34;, n2)
}

func reflectTest02(b interface{}) {
	//通過反射獲取傳入的各種訊息
	//先拿reflect.Type
	rType := reflect.TypeOf(b)
	fmt.Println(&amp;#34;rType=&amp;#34;, rType)

	rVal := reflect.ValueOf(b)
	fmt.Println(&amp;#34;rVal=&amp;#34;, rVal)

	//把rVal轉回interface{}
	iV := rVal.Interface()
	//斷言回來
	n2, ok := iV.(Student)
	if !ok {
		fmt.Println(&amp;#34;從interface{}轉換回Student失敗&amp;#34;)
	}
	fmt.Println(&amp;#34;n2=&amp;#34;, n2)
	fmt.Println(&amp;#34;n2.Name=&amp;#34;, n2.Name)

	//獲取變量對應的kind，可以從Type也能從val拿。
	//比如這個type是包名.Student，kind是stuct，可以說定義上kind包含type
	fmt.Println(&amp;#34;kind=&amp;#34;, rType.Kind())
	fmt.Println(&amp;#34;kind=&amp;#34;, rVal.Kind())

}

type Student struct {
	Name string
	Age  int
}

func main() {
	var num int = 100
	reflectTest01(num)
	fmt.Println(&amp;#34;===============================&amp;#34;)
	stu := Student{
		Name: &amp;#34;tom&amp;#34;,
		Age:  20,
	}
	reflectTest02(stu)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;修改變量&#34;&gt;修改變量&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func reflect01(b interface{}) {
	rVal := reflect.ValueOf(b)
	fmt.Println(&amp;#34;rVal=&amp;#34;, rVal)
	rType := reflect.TypeOf(b)
	fmt.Println(&amp;#34;rType=&amp;#34;, rType)

	iV := rVal.Interface()
	vNew, ok := iV.(float64)
	if ok {
		fmt.Println(&amp;#34;轉換成功 vNew=&amp;#34;, vNew)
	} else {
		fmt.Println(&amp;#34;err&amp;#34;)
	}
}
func main() {
	var v float64 = 1.2
	reflect01(v)

	// var str string = &amp;#34;tom&amp;#34;  //錯誤示範
	// fs := reflect.ValueOf(str)
	// fs.SetString(&amp;#34;jack&amp;#34;)
	// fmt.Println(str)

	var str string = &amp;#34;tom&amp;#34;
	fs := reflect.ValueOf(&amp;amp;str)
	fs.Elem().SetString(&amp;#34;jack&amp;#34;)
	fmt.Println(str)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;實踐&#34;&gt;實踐&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Monster struct {
	Name  string `json:&amp;#34;name&amp;#34;`
	Age   int    `json:&amp;#34;age&amp;#34;`
	Score float64
}

//方法打印m值
func (m Monster) Print() {
	fmt.Println(m)
}

//方法 求2和
func (m Monster) GetSum(n1, n2 int) int {
	return n1 + n2
}

//方法 接收4值給Monster
func (m Monster) Set(n string, a int, s float64) {
	m.Name = n
	m.Age = a
	m.Score = s
}

//反射實例
func TestStruct(a interface{}) {
	typ := reflect.TypeOf(a)
	val := reflect.ValueOf(a)
	kd := val.Kind()
	if kd != reflect.Struct {
		fmt.Println(&amp;#34;傳入的不是結構體&amp;#34;)
		return
	}
	//獲取該結構有幾字段
	num := val.NumField()
	fmt.Println(&amp;#34;struct有幾個字段=&amp;#34;, num)

	//遍歷所有字段
	for i := 0; i &amp;lt; num; i++ {
		fmt.Printf(&amp;#34;Field%d 值為%v\n&amp;#34;, i, val.Field(i))
		//獲取struct標籤
		tagVal := typ.Field(i).Tag.Get(&amp;#34;json&amp;#34;)
		if tagVal != &amp;#34;&amp;#34; {
			fmt.Printf(&amp;#34;Field%d tag為%v\n&amp;#34;, i, tagVal)
		}
	}
	//獲取結構體有幾個方法
	numOfMethod := val.NumMethod()
	fmt.Println(&amp;#34;方法有&amp;#34;, numOfMethod)
	//調用第[]個方法且call調用他(傳入參數值)
	//但他這個是方法的首字(asc碼)當排序的 我們的方法是G P S開頭 (1)=第2個
	val.Method(1).Call(nil)
	//試著調用getsum 他call傳入的是要[]reflect.Value
	var params []reflect.Value
	params = append(params, reflect.ValueOf(10))
	params = append(params, reflect.ValueOf(20))
	res := val.MethodByName(&amp;#34;GetSum&amp;#34;).Call(params)
	fmt.Println(&amp;#34;res=&amp;#34;, res[0].Int())
}

func main() {

	var a Monster = Monster{
		Name:  &amp;#34;牛梅王&amp;#34;,
		Age:   500,
		Score: 87,
	}
	TestStruct(a)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-reflect/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>RPC</title>
        <link>https://yoziming.github.io/post/210927-rpc/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210927-rpc/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210927-rpc/ -&lt;h3 id=&#34;server&#34;&gt;server&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/ 用接口，讓服務端註冊RPC的時候，就能確保他合法

type World struct{}

func (w *World) HelloWorld(name string, resp *string) error {
	*resp = name + &amp;#34;你好&amp;#34;
	return nil
	// 如果這個return的返回值不為空，
	// 那無論傳出的參數是否有值，服務端都不會給東西
	// (就你給你error)
}

// 用接口，讓服務端註冊RPC的時候，就能確保他合法
type MyInerface interface {
	HelloWorld(string *string) error
}

// 調用方法時，給i傳參，參數是實現HelloWorld方法的對象
func RegsiterService(i MyInerface) {
	rpc.RegisterName(&amp;#34;hello&amp;#34;, i)
}
func main() {
	// 1.註冊RPC服務 綁定對象方法
	err := rpc.RegisterName(&amp;#34;hello&amp;#34;, new(World))
	if err != nil {
		fmt.Println(&amp;#34;註冊RPC服務失敗&amp;#34;, err)
	}

	// 2.開始監聽
	listener, err := net.Listen(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:8899&amp;#34;)
	if err != nil {
		fmt.Println(&amp;#34;listener failed&amp;#34;, err)
		return
	}
	fmt.Println(&amp;#34;server開始監聽...&amp;#34;)
	defer listener.Close()
	// 3.建立連接
	conn, err := listener.Accept()
	if err != nil {
		fmt.Println(&amp;#34;Accept failed&amp;#34;, err)
		return
	}
	fmt.Println(&amp;#34;連接成功&amp;#34;)
	defer conn.Close()
	// 4.綁訂服務
	jsonrpc.ServeConn(conn)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;client&#34;&gt;client&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;#34;fmt&amp;#34;
	&amp;#34;net/rpc&amp;#34;
	&amp;#34;net/rpc/jsonrpc&amp;#34;
)

func main01() {
	// 1.用RPC連接伺服器
	// conn, err := rpc.Dial(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:8899&amp;#34;)
	conn, err := jsonrpc.Dial(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:8899&amp;#34;)
	if err != nil {
		fmt.Println(&amp;#34;Accept failed&amp;#34;, err)
		return
	}
	defer conn.Close()
	// 2.遠程調用函數
	var reply = &amp;#34;&amp;#34;
	err = conn.Call(&amp;#34;hello.HelloWorld&amp;#34;, &amp;#34;張三&amp;#34;, &amp;amp;reply)
	if err != nil {
		fmt.Println(&amp;#34;Call failed&amp;#34;, err)
		return
	}
	fmt.Println(reply)
}

func main() {
	// myClient := InitClient(&amp;#34;127.0.0.1:8899&amp;#34;)
	// var resp string
	// err := myClient.HelloWorld(&amp;#34;李四&amp;#34;, &amp;amp;resp)
	// if err != nil {
	// 	fmt.Println(&amp;#34;HelloWorld failed&amp;#34;, err)
	// 	return
	// }
	// fmt.Println(resp, err)
}

type MyClient struct {
	c *rpc.Client
}

// 把c初始化下面才能調用
// func InitClient(addr string) {
// 	conn, _ := jsonrpc.Dial(&amp;#34;tcp&amp;#34;, addr)
// 	return MyClient{c: conn}
// }

func (m *MyClient) HelloWorld(a string, b *string) error {
	return m.c.Call(&amp;#34;hello.HelloWorld&amp;#34;, a, b)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210927-rpc/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Split切分字串</title>
        <link>https://yoziming.github.io/post/210810-agg-go-split/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-split/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-split/ -&lt;h1 id=&#34;split切分字串&#34;&gt;Split切分字串&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// abc,b=&amp;gt;[a c]
func Split(str, sep string) []string {
	// str=&amp;#34;bsfcvjkhbafs&amp;#34; sep=&amp;#34;b&amp;#34;
	var ret = make([]string, 0, strings.Count(str, sep)+1)
	index := strings.Index(str, sep)
	for index &amp;gt;= 0 {
		ret = append(ret, str[:index])
		str = str[index+len(sep):]
		index = strings.Index(str, sep)
	}
	ret = append(ret, str)
	return ret
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-split/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>Test單元測試</title>
        <link>https://yoziming.github.io/post/210810-agg-go-test/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-test/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-test/ -&lt;h1 id=&#34;test單元測試&#34;&gt;Test單元測試&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;單元測試目的是驗證程式碼(例如一個方法)本身的邏輯是否正確&lt;/li&gt;
&lt;li&gt;單元測試應排除外部依賴（Database、File System IO）&lt;/li&gt;
&lt;li&gt;單元測試應該是隨時隨地都要能正確執行&lt;/li&gt;
&lt;li&gt;單元測試的標題需要具備好的可讀性、明確、標題與測試的內容精確吻合
例：「public void GetTest_帶入會員ID＿應回該ID搜尋到的會員資料DTO」，盡量符合：受測方法＿傳入參數意義＿期望得到的結果&lt;/li&gt;
&lt;li&gt;一個測試只應該關注一件事情，如果受測目標有多種狀況，應該分成好幾個測試去涵蓋所有邏輯&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;3A原則&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Arrange = 準備受測物件、參數、預期結果&lt;/li&gt;
&lt;li&gt;Act = 執行受測方法&lt;/li&gt;
&lt;li&gt;Assert = 驗證執行結果與預測結果是否一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;calgo&#34;&gt;cal.go&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func addUpper(n int) int {
	res := 0
	for i := 0; i &amp;lt;= n; i++ {
		res = +i
	}
	return res
}

func getSub(n1, n2 int) int {
	return n1 - n2
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;cal_testgo&#34;&gt;cal_test.go&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func TestAddUpper(t *testing.T) {
	//調用
	res := addUpper(10)
	if res != 55 {
		t.Fatalf(&amp;#34;AddUpper(10)執行錯誤 期望=%v 實際=%v&amp;#34;, 55, res)
	}
	t.Logf(&amp;#34;執行正確&amp;#34;)
}

func TestHello(t *testing.T) {
	fmt.Println(&amp;#34;hello&amp;#34;)
}

func TestGetSub(t *testing.T) {
	res2 := getSub(5, 10)
	if res2 != 10 {
		t.Fatalf(&amp;#34;getSub(5, 10)執行錯誤 期望=%v 實際=%v&amp;#34;, 10, res2)
	}
	t.Logf(&amp;#34;執行正確&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;測性能&#34;&gt;測性能&lt;/h2&gt;
&lt;h4 id=&#34;splitgo&#34;&gt;Split.go&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// abc,b=&amp;gt;[a c]
func Split(str, sep string) []string {
	// str=&amp;#34;bsfcvjkhbafs&amp;#34; sep=&amp;#34;b&amp;#34;
	var ret = make([]string, 0, strings.Count(str, sep)+1)
	index := strings.Index(str, sep)
	for index &amp;gt;= 0 {
		ret = append(ret, str[:index])
		str = str[index+len(sep):]
		index = strings.Index(str, sep)
	}
	ret = append(ret, str)
	return ret
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;split_testgo&#34;&gt;Split_test.go&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func BenchmarkSplit(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		Split(&amp;#34;a:b:c&amp;#34;, &amp;#34;:&amp;#34;)
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-test/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>WaitGroup鎖</title>
        <link>https://yoziming.github.io/post/210810-agg-go-waitgroup/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-waitgroup/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-waitgroup/ -&lt;h1 id=&#34;waitgroup鎖&#34;&gt;WaitGroup鎖&lt;/h1&gt;
&lt;h3 id=&#34;讀寫鎖&#34;&gt;讀寫鎖&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var x = 0
var wg sync.WaitGroup
var rwlock sync.RWMutex

func write() {
	rwlock.Lock()
	x = x + 1
	time.Sleep(time.Millisecond * 10)
	rwlock.Unlock()
	wg.Done()
}

func read() {
	// lock.Lock()
	rwlock.RLock() //鎖讀
	time.Sleep(time.Millisecond)
	rwlock.RUnlock()
	// lock.Unlock()
	wg.Done()
}

func main() {
	start := time.Now()
	for i := 0; i &amp;lt; 10; i++ {
		wg.Add(1)
		go write()
	}
	for i := 0; i &amp;lt; 1000; i++ {
		wg.Add(1)
		go read()
	}
	wg.Wait()
	end := time.Now()
	fmt.Println(end.Sub(start))
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;互斥鎖&#34;&gt;互斥鎖&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var x = 0
var wg sync.WaitGroup
var lock sync.Mutex

func add() {
	for i := 0; i &amp;lt; 50000; i++ {
		lock.Lock()
		x = x + 1
		lock.Unlock()
	}
	wg.Done()
}

func main() {
	wg.Add(2)
	go add()
	go add()
	wg.Wait()
	fmt.Println(x)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-waitgroup/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>二維數組</title>
        <link>https://yoziming.github.io/post/210810-agg-go-array/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-array/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-array/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
// 000000
// 001000
// 020300
// 000000
func main() {
	var arr [4][6]int
	arr[1][2] = 1
	arr[2][1] = 2
	arr[2][3] = 3
	//遍歷
	for i := 0; i &amp;lt; len(arr); i++ {
		for j := 0; j &amp;lt; len(arr[i]); j++ {
			fmt.Print(arr[i][j], &amp;#34; &amp;#34;)
		}
		fmt.Println()
	}
	//遍歷range
	for i, v := range arr {
		for j, v2 := range v {
			fmt.Printf(&amp;#34;arr[%v][%v]=%v \t&amp;#34;, i, j, v2)
		}

		fmt.Println()
	}
	//三班五學生
	var score [3][5]float64
	for i := 0; i &amp;lt; len(score); i++ {
		for j := 0; j &amp;lt; len(score[i]); j++ {
			fmt.Printf(&amp;#34;輸入第%v班第%v位成績&amp;#34;, i+1, j+1)
			fmt.Scanln(&amp;amp;score[i][j])
		}

	}
	cal(score)

}
func cal(score [3][5]float64) {
	total := 0.0
	for i := 0; i &amp;lt; len(score); i++ {
		sum := 0.0
		for j := 0; j &amp;lt; len(score[i]); j++ {
			sum = sum + score[i][j]
		}
		total += sum
		fmt.Printf(&amp;#34;第%d班的總分為%v 平均分%v \n&amp;#34;, i+1, sum, sum/5)
	}
	fmt.Printf(&amp;#34;總分為%v 平均分%v \n&amp;#34;, total, total/15)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-array/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>冒泡排序</title>
        <link>https://yoziming.github.io/post/210810-agg-go-bubble-sort/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-bubble-sort/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-bubble-sort/ -&lt;h1 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var arr1 = [...]int{5, 9, 6, 8, 7, 3, 4, 2, 1, 6}

func main() {
	s1 := arr1[:]
	bubbleSort(s1)
	fmt.Println(arr1)
}

func bubbleSort(x []int) {
	for j := 1; j &amp;lt; len(x); j++ {
		for i := 0; i &amp;lt; len(x)-1; i++ {
			if x[i] &amp;gt; x[i+1] {
				x[i], x[i+1] = x[i+1], x[i]
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-bubble-sort/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>函數封裝的金字塔</title>
        <link>https://yoziming.github.io/post/210810-agg-go-pyramid/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-pyramid/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-pyramid/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;fmt&amp;#34;
)

var input int

func jin(input int) {

	for i := 1; i &amp;lt;= input; i++ {
		for k := 1; k &amp;lt;= input-i; k++ {
			fmt.Print(&amp;#34; &amp;#34;)
		}
		for j := 1; j &amp;lt;= 2*i-1; j++ {
			if j == 1 || j == 2*i-1 || i == input {
				fmt.Print(&amp;#34;*&amp;#34;)
			} else {
				fmt.Print(&amp;#34; &amp;#34;)
			}
		}
		fmt.Println()
	}
}

func main() {
	fmt.Println(&amp;#34;層數=?&amp;#34;)
	fmt.Scanln(&amp;amp;input)
	jin(input)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-pyramid/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>函數綁定方法</title>
        <link>https://yoziming.github.io/post/210810-agg-go-method/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-method/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-method/ -&lt;h1 id=&#34;函數綁定方法&#34;&gt;函數綁定方法&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;方法:結構體的行為，自訂義的結構都可以有方法，方法是作用在指定類型上(綁定的)&lt;/p&gt;
&lt;p&gt;方法就是跟一種類型綁定的函數，因為綁定數據類型了就可以偷雞，具體表現在省指針&lt;/p&gt;
&lt;p&gt;定義方法時候寫的是func(a ABC) //後面怎樣調用都是值拷貝&lt;/p&gt;
&lt;p&gt;定義方法時候寫的是func(a *ABC)//後面怎樣調用都是真實地址&lt;/p&gt;
&lt;p&gt;要調用方法，只能透過那種類型的的數據變量 例如a1.ABC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;fmt&amp;#34;
)

type Person struct {
	Name string
}

//給Person類型綁定一個方法
func (p Person) test() {
	p.Name = &amp;#34;jack&amp;#34;
	fmt.Println(&amp;#34;test()=&amp;#34;, p.Name)
}

//給Person類型添加一個speak方法，輸出xxx是好人
func (p Person) speak() {
	fmt.Println(p.Name, &amp;#34;是一個好人&amp;#34;)
}

//添加一個計算方法算+1...+100
func (p Person) count() {
	res := 0
	for i := 1; i &amp;lt;= 100; i++ {
		res += i
	}
	fmt.Println(p.Name, &amp;#34;計算的結果是&amp;#34;, res)
}

//添加一個計算方法算+1...+n
func (p Person) count2(n int) {
	res := 0
	for i := 1; i &amp;lt;= n; i++ {
		res += i
	}
	fmt.Println(p.Name, &amp;#34;計算的結果是&amp;#34;, res)
}

//添加一個方法計算2個值的和並返回
func (p Person) getSum(n1, n2 int) int {
	return n1 + n2
}

//為了提高效率，通常把方法跟結構的指針綁定
type Circle struct {
	radius float64
}

func (c *Circle) area() float64 {
	c.radius = 10.0                   //因為傳來的是指針，如果在函數裡改他就等於改真實地址了
	return 3.14 * c.radius * c.radius //語法糖 本來應該是要寫(*c)來計算的
}

//給某方法實現方法String()
type Student struct {
	Name string
	Age  int
}

func (stu *Student) String() string {
	str := fmt.Sprintf(&amp;#34;Name=%v Age=%v&amp;#34;, stu.Name, stu.Age)
	return str
}

//練習題
type MeUtils struct {
	//123
}

func (mu MeUtils) Print(m int, n int) {
	for i := 1; i &amp;lt;= m; i++ {
		for j := 1; j &amp;lt;= n; j++ {
			fmt.Print(&amp;#34;*&amp;#34;)
		}
		fmt.Println()
	}

}

func main() {
	var p Person
	p.Name = &amp;#34;tom&amp;#34;
	p.test() //調用方法
	fmt.Println(&amp;#34;main=&amp;#34;, p.Name)
	//test()//報錯的
	//總的來說就是把test方法跟Person類型綁定，而這個test只能用Person類型調用
	//傳的是形參 (函數裡的是一個副本)
	//---------------------------------------------以下開始應用練習
	p.speak()
	p.count()
	p.count2(1000)
	res := p.getSum(10, 20)
	fmt.Println(res)

	//創建變量嘗試調用area
	var c Circle
	c.radius = 5.0
	res2 := c.area() //語法糖 本來應該是要寫(&amp;amp;c).area()的
	fmt.Println(res2)

	//調用Student
	stu1 := Student{
		Name: &amp;#34;tom&amp;#34;,
		Age:  18,
	}
	//如果實現了*Student類型的String方法就會自動調用
	fmt.Println(&amp;amp;stu1)

	//練習題
	var mu MeUtils
	mu.Print(5, 10)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-method/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>切片</title>
        <link>https://yoziming.github.io/post/210810-agg-go-slice/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-slice/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-slice/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//切片的類型是引用(傳遞的時候也是引用地址)
	//切片長度可變(不像數組)
	var arr1 = [5]int{1, 2, 3, 4, 5}
	s1 := arr1[1:3] //表示切arr的[1 2] 左開右閉(含左不含右)
	//var slice=arr[0:end]簡寫[:end]
	//[start:len(arr)]=[start:]
	//[0:len(arr)]=[:]
	fmt.Println(&amp;#34;s1內容是&amp;#34;, s1)
	fmt.Println(&amp;#34;s1長度是&amp;#34;, len(s1))
	fmt.Println(&amp;#34;s1容量是&amp;#34;, cap(s1))
	fmt.Printf(&amp;#34;s1第一個地址是%p\n&amp;#34;, &amp;amp;s1[0])
	fmt.Printf(&amp;#34;arr1[1]地址是%p\n&amp;#34;, &amp;amp;arr1[1])
	s1[0] = 33
	fmt.Println(&amp;#34;arr1內容是&amp;#34;, arr1)

	//var 切片名[]type=make([]type,len,cap)
	var s2 []float64 = make([]float64, 5, 10)
	fmt.Println(s2)
	//var 變量=make(類型)
	var s22 = make([]float64, 5, 10)
	fmt.Println(s22)
	var s3 []int = []int{1, 2, 3, 4, 5}
	fmt.Println(s3)
	//用append動態追加
	s3 = append(s3, 6, 7, 8, 9)
	fmt.Println(s3)
	s3 = append(s3, s3...) //...表示擴展
	//用append的時候 其實是創建一個新的arr，值拷貝過去，然後重新指向
	s3[10] = 600
	fmt.Println(s3)

	//用copy 要求2者都是切片類型
	//短的賦給長的 後面沒東西就保持原樣(0)
	//長的賦給短的 不會自動擴容 依照短的
	var s4 = make([]int, 20)
	fmt.Println(s4)
	copy(s4, s3)
	fmt.Println(s4)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切string&#34;&gt;切string&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;	str := &amp;#34;hello@yozimingfight!&amp;#34;
	//string是一個byte數組，所以可以切片擷取
	s1 := str[6:]
	fmt.Println(s1)
	//但是string是不可變的，不能用s1[0]=&amp;#39;z&amp;#39;這樣想改變一個字
	//看做一個read only的切片

	//可以轉[]byte或[]rune 修改 後轉回去
	arr1 := []byte(str)
	arr1[0] = &amp;#39;z&amp;#39;
	str = string(arr1)
	fmt.Println(str)
	//byte不能處理中文字(3字節)
	arr2 := []rune(str)
	arr2[0] = &amp;#39;我&amp;#39;
	str = string(arr2)
	fmt.Println(str)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;切片練習-費波納數列&#34;&gt;切片練習-費波納數列&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func fbn(n int) []uint64 {
	var s1 []uint64 = make([]uint64, n)
	if n &amp;lt; 2 {
		s1[0] = 1
		return s1
	} else {
		s1[0] = 1
		s1[1] = 1
		for i := 2; i &amp;lt; n; i++ {
			s1[i] = s1[i-1] + s1[i-2]
		}
		return s1
	}
}

func main() {
	a := fbn(1)
	fmt.Println(a)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-slice/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>匿名函數與閉包</title>
        <link>https://yoziming.github.io/post/210810-agg-go-closure/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-closure/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-closure/ -&lt;h1 id=&#34;匿名函數&#34;&gt;匿名函數&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	res := func(n1, n2 int) int {
		return n1 + n2
	}(10, 20)
	fmt.Println(res)
	a := func(n1, n2 int) int {
		return n1 - n2
	}
	res = a(10, 5)
	fmt.Println(res)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;閉包&#34;&gt;閉包&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//累加器
func Add() func(int) int { //Add是一個函數，返回的數據類型是func(int) int

	var n int = 10 //返回的是一個匿名函數，那這個函數用到函數外的n，因此形成一個整體稱為閉包
	return func(x int) int {
		n = n + x
		return n
		//閉包是類，函數是操作，n是字段，函數+使用n構成閉包
		//n只初始化一次
	}
}
func main() {
	a := Add()
	fmt.Println(a(1))
	fmt.Println(a(2))
	fmt.Println(a(3))

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;案例2&#34;&gt;案例2&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func makeSuffix(suffix string) func(string) string {
	return func(name string) string {
		if !strings.HasSuffix(name, suffix) {
			return name + suffix
		}
		return name
	}
}
func main() {
	f := makeSuffix(&amp;#34;.jpg&amp;#34;)
	fmt.Println(f(&amp;#34;654&amp;#34;))
	fmt.Println(f(&amp;#34;123.jpg&amp;#34;))

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-closure/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>命令行參數Args&amp;Flag</title>
        <link>https://yoziming.github.io/post/210810-agg-go-args-flag/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-args-flag/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-args-flag/ -&lt;h1 id=&#34;命令行參數argsflag&#34;&gt;命令行參數Args&amp;amp;Flag&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	fmt.Println(&amp;#34;命令行參數有&amp;#34;, len(os.Args))
	//遍歷os.Args切片 得到所有輸入的參數值
	for i, v := range os.Args {
		fmt.Printf(&amp;#34;args[%v]=%v\n&amp;#34;, i, v)
	}
	fmt.Println(&amp;#34;=====================&amp;#34;)

	//flag方法 先定義幾個變量用於接收參數值
	var user string
	var pwd string
	var host string
	var port int

	flag.StringVar(&amp;amp;user, &amp;#34;u&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;帳號 預設為空&amp;#34;)
	flag.StringVar(&amp;amp;pwd, &amp;#34;pwd&amp;#34;, &amp;#34;&amp;#34;, &amp;#34;密碼 預設為空&amp;#34;)
	flag.StringVar(&amp;amp;host, &amp;#34;h&amp;#34;, &amp;#34;localhost&amp;#34;, &amp;#34;主機 預設為localhost&amp;#34;)
	flag.IntVar(&amp;amp;port, &amp;#34;port&amp;#34;, 3306, &amp;#34;端口 預設為3306&amp;#34;)
	//前面有亂打的字就不行 比如...exe 12354 -u tom會調用預設

	flag.Parse() //這個一定要調用

	//輸出結果
	fmt.Printf(&amp;#34;user=%v pwd=%v host=%v port=%v&amp;#34;,
		user, pwd, host, port)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-args-flag/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>字串轉換常用函數</title>
        <link>https://yoziming.github.io/post/210810-agg-go-string-conver/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-string-conver/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-string-conver/ -&lt;h1 id=&#34;字串轉換常用函數&#34;&gt;字串轉換常用函數&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
var str string = &amp;#34;abc123中文&amp;#34;

func main() {
	fmt.Println(&amp;#34;長度=&amp;#34;, len(str))
	r := []rune(str)
	for i := 0; i &amp;lt; len(r); i++ {
		fmt.Printf(&amp;#34;遍歷=%q\n&amp;#34;, r[i])
	}
	//轉成整數 Atoi
	n, err := strconv.Atoi(&amp;#34;5421&amp;#34;)
	if err != nil {
		fmt.Println(&amp;#34;錯誤,err&amp;#34;)
	} else {
		fmt.Println(&amp;#34;轉換成&amp;#34;, n)
		//整數轉字串
		str2 := strconv.Itoa(654231)
		fmt.Printf(&amp;#34;類型是%T\n&amp;#34;, str2)
		//轉byte
		var bytes = []byte(&amp;#34;hello&amp;#34;)
		fmt.Printf(&amp;#34;bytes=%v \n&amp;#34;, bytes)
		//byte轉回字串
		str3 := string([]byte{97, 98, 99})
		fmt.Printf(&amp;#34;str3=%v \n&amp;#34;, str3)
		//10進制轉2,8,16返回字串
		str4 := strconv.FormatInt(123, 2)
		fmt.Printf(&amp;#34;str4類型是%T,值=%v \n&amp;#34;, str4, str4)
		//查找子串
		b := strings.Contains(&amp;#34;seafood&amp;#34;, &amp;#34;foo&amp;#34;)
		fmt.Printf(&amp;#34;b類型是%T,值=%v \n&amp;#34;, b, b)
		//統計符合數量
		c := strings.Count(&amp;#34;sgfjklewshfrrrrrr&amp;#34;, &amp;#34;r&amp;#34;)
		fmt.Printf(&amp;#34;c類型是%T,值=%v \n&amp;#34;, c, c)
		//不分大小寫 (因為==是分的)
		d := strings.EqualFold(&amp;#34;ABCd&amp;#34;, &amp;#34;aBcD&amp;#34;)
		fmt.Printf(&amp;#34;d類型是%T,值=%v \n&amp;#34;, d, d)
		//查找第一次出現的子串位置
		i := strings.Index(&amp;#34;sdaf654abc&amp;#34;, &amp;#34;a&amp;#34;)
		fmt.Printf(&amp;#34;i類型是%T,值=%v \n&amp;#34;, i, i)
		//查找最後出現的子串位置
		l := strings.LastIndex(&amp;#34;sdaf654abc&amp;#34;, &amp;#34;a&amp;#34;)
		fmt.Printf(&amp;#34;l類型是%T,值=%v \n&amp;#34;, l, l)
		//替換文字
		str5 := &amp;#34;瘟疫之地有瘟疫,瘟疫病人身上有瘟疫&amp;#34;
		r := strings.Replace(str5, &amp;#34;瘟疫&amp;#34;, &amp;#34;痔瘡&amp;#34;, 2)
		fmt.Println(&amp;#34;原句&amp;#34;, str5)
		fmt.Printf(&amp;#34;r類型是%T,值=%v \n&amp;#34;, r, r)
		//依照指定的字串分割成切片
		s := strings.Split(&amp;#34;hello,world,ok&amp;#34;, &amp;#34;,&amp;#34;)
		fmt.Printf(&amp;#34;s類型是%T,值=%v \n&amp;#34;, s, s)
		//大小寫轉換
		cap := &amp;#34;DDDDssss&amp;#34;
		cap = strings.ToLower(cap)
		fmt.Println(cap)
		cap = strings.ToUpper(cap)
		fmt.Println(cap)
		//去掉左右兩邊空格
		sp := strings.TrimSpace(&amp;#34;  KJHF JKLH LKJ  ..   &amp;#34;)
		fmt.Println(sp)
		//去掉左右指定 //TrimLeft // TrimRight
		lr := strings.Trim(&amp;#34;!!KJHFJHG!!!&amp;#34;, &amp;#34;!&amp;#34;)
		fmt.Println(lr)
		//判斷開頭或結束  //HasSuffix
		s6 := strings.HasPrefix(&amp;#34;ftp://192.164.2.1&amp;#34;, &amp;#34;ftp&amp;#34;)
		fmt.Printf(&amp;#34;s6類型是%T,值=%v \n&amp;#34;, s6, s6)
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-string-conver/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-ini解析器</title>
        <link>https://yoziming.github.io/post/210820-agg-go-proj-ini-parser/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-agg-go-proj-ini-parser/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210820-agg-go-proj-ini-parser/ -&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;用來解析.ini文檔格式是否有問題&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;fmt&amp;#34;
	&amp;#34;io/ioutil&amp;#34;
	&amp;#34;reflect&amp;#34;
	&amp;#34;strings&amp;#34;
)

type RedisConfig struct {
	Host     string `ini:&amp;#34;host&amp;#34;`
	Port     int    `ini:&amp;#34;port&amp;#34;`
	Password string `ini:&amp;#34;password&amp;#34;`
	Database int    `ini:&amp;#34;database&amp;#34;`
}
type MysqlConfig struct {
	Address  string `ini:&amp;#34;address&amp;#34;`
	Port     int    `ini:&amp;#34;port&amp;#34;`
	Password string `ini:&amp;#34;password&amp;#34;`
	Username string `ini:&amp;#34;username&amp;#34;`
}

type Config struct {
	MysqlConfig `ini:&amp;#34;mysql&amp;#34;`
	RedisConfig `ini:&amp;#34;redis&amp;#34;`
}

func loadIni(fileName string, data interface{}) (err error) {
	// 0. 參數校驗
	// 0.1 傳來的data必須是結構體類型指針
	t := reflect.TypeOf(data)
	// fmt.Println(t.Kind())
	if t.Kind() != reflect.Ptr {
		err = fmt.Errorf(&amp;#34;傳來的data必須是指針&amp;#34;)
		return
	}
	if t.Elem().Kind() != reflect.Struct {
		err = fmt.Errorf(&amp;#34;傳來的data必須是結構體類型指針&amp;#34;)
		return
	}
	// 1. 讀取文件~&amp;gt;Byte類型
	b, err := ioutil.ReadFile(fileName)
	if err != nil {
		return
	}
	//轉成字符串
	lineSlice := strings.Split(string(b), &amp;#34;\r\n&amp;#34;)
	// fmt.Println(lineSlice)
	// 2. 一行一行讀取數據
	var structName string
	for idx, line := range lineSlice {
		line = strings.TrimSpace(line) //去除多餘空格
		// 2.1 如果是註釋就跳過
		if strings.HasPrefix(line, &amp;#34;;&amp;#34;) || strings.HasPrefix(line, &amp;#34;#&amp;#34;) {
			continue
		}
		//純空行就跳過
		if len(line) == 0 {
			continue
		}
		// 2.2 如果是[]開頭表示是節
		if strings.HasPrefix(line, &amp;#34;[&amp;#34;) {
			if line[0] != &amp;#39;[&amp;#39; || line[len(line)-1] != &amp;#39;]&amp;#39; {
				err = fmt.Errorf(&amp;#34;line:%d syntax error&amp;#34;, idx+1)
				return
			}
			//去掉這行的首尾跟空格拿到內容
			section := strings.TrimSpace(line[1 : len(line)-1])
			if len(section) == 0 {
				err = fmt.Errorf(&amp;#34;line:%d syntax error&amp;#34;, idx+1)
				return
			}
			//根據section去data反射對應的結構體
			for i := 0; i &amp;lt; t.Elem().NumField(); i++ {
				field := t.Elem().Field(i)
				if section == field.Tag.Get(&amp;#34;ini&amp;#34;) {
					//說明找到了，把字段名記下
					structName = field.Name
					fmt.Println(section, structName)
				}

			}

		} else {
			// 2.3 剩下的就是分割的鍵值對
			//先排除異常的行
			if strings.Index(line, &amp;#34;=&amp;#34;) == -1 || strings.HasPrefix(line, &amp;#34;=&amp;#34;) {
				err = fmt.Errorf(&amp;#34;line:%d syntax error&amp;#34;, idx+1)
				return
			}
			index := strings.Index(line, &amp;#34;=&amp;#34;)
			key := strings.TrimSpace(line[:index])
			// value := strings.TrimSpace(line[:index+1])
			v := reflect.ValueOf(data)
			sValue := v.Elem().FieldByName(structName) //拿到嵌套結構體的值信息
			sType := sValue.Type()                     //拿到嵌套結構體的類型信息
			if sType.Kind() != reflect.Struct {
				err = fmt.Errorf(&amp;#34;%s應該為一個結構體&amp;#34;, structName)
				return
			}
			var fieldName string
			//遍歷嵌套結構體每一個字段 判斷tag是否=key
			for i := 0; i &amp;lt; sValue.NumField(); i++ {
				field := sType.Field(i)
				if field.Tag.Get(&amp;#34;ini&amp;#34;) == key {
					fieldName = field.Name
					break
				}
			}
			//根據fieldName取出字段賦值
			fileObj := sValue.FieldByName(fieldName)
			fmt.Println(fieldName, fileObj)
		}

	}
	return
}

func main() {
	var cfg Config
	err := loadIni(&amp;#34;C:/config.ini&amp;#34;, &amp;amp;cfg)
	if err != nil {
		panic(err)
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-agg-go-proj-ini-parser/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-txt文本批次取代器</title>
        <link>https://yoziming.github.io/post/210820-agg-go-proj-txt-replace/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-agg-go-proj-txt-replace/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210820-agg-go-proj-txt-replace/ -&lt;h1 id=&#34;實作練習-txt文本批次取代器&#34;&gt;實作練習-txt文本批次取代器&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;自己寫用來一次取代多個名詞，去除多餘空格或符號等等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;bufio&amp;#34;
	&amp;#34;fmt&amp;#34;
	&amp;#34;io&amp;#34;
	&amp;#34;os&amp;#34;
	&amp;#34;strings&amp;#34;
)

var data []string = make([]string, 128)

func main() {
	readByBufio()
	for _, v := range data {
		if v == &amp;#34;&amp;#34; {
			break
		}
		fmt.Print(v)
	}

}
func readByBufio() {
	file, err := os.Open(&amp;#34;C:/test.txt&amp;#34;)
	if err != nil {
		fmt.Printf(&amp;#34;os.Open err %s\n&amp;#34;, err)
		return
	}
	defer file.Close()
	reader := bufio.NewReader(file)
	for i := 0; ; i++ {
		line, err := reader.ReadString(&amp;#39;\n&amp;#39;)
		if err == io.EOF {
			return
		}
		if err != nil {
			fmt.Printf(&amp;#34;reader.ReadString err %s\n&amp;#34;, err)
			return
		}
		line = strings.ReplaceAll(line, &amp;#34;++&amp;#34;, &amp;#34;+&amp;#34;) //去除多餘++
		line = strings.ReplaceAll(line, &amp;#34;  &amp;#34;, &amp;#34; &amp;#34;) //去除多餘空格
		line = strings.ReplaceAll(line, &amp;#34;*&amp;#34;, &amp;#34;&amp;#34;)   //去除多餘*
		line = strings.ReplaceAll(line, &amp;#34;AAAA&amp;#34;, &amp;#34;BBBB&amp;#34;)
		line = strings.ReplaceAll(line, &amp;#34;&amp;#34;, &amp;#34;&amp;#34;)
		data[i] = line
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-agg-go-proj-txt-replace/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-多人聊天室</title>
        <link>https://yoziming.github.io/post/210820-agg-go-proj-chatroom/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-agg-go-proj-chatroom/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210820-agg-go-proj-chatroom/ -&lt;h1 id=&#34;實作練習-多人聊天室&#34;&gt;實作練習-多人聊天室&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本來很傻的檔案代碼一個一個貼，後來學了github的專案管理就放到那了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yoziming/go-practice-chatroom&#34;&gt;https://github.com/yoziming/go-practice-chatroom&lt;/a&gt;&lt;/p&gt;
- https://yoziming.github.io/post/210820-agg-go-proj-chatroom/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-客戶名單管理系統</title>
        <link>https://yoziming.github.io/post/210820-agg-go-proj-user-list/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-agg-go-proj-user-list/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210820-agg-go-proj-user-list/ -&lt;h1 id=&#34;實作練習-客戶名單管理系統&#34;&gt;實作練習-客戶名單管理系統&lt;/h1&gt;
&lt;h3 id=&#34;model&#34;&gt;model&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Customer struct {
	Id     int
	Name   string
	Gender string
	Age    int
	Phone  string
	Email  string
}

//使用工廠模式返回一個實例
func NewCustomer(id int, name string, gender string,
	age int, phone string, email string) Customer {
	return Customer{
		Id:     id,
		Name:   name,
		Gender: gender,
		Age:    age,
		Phone:  phone,
		Email:  email,
	}
}

//返回用戶訊息
func (c Customer) GetInfo() string {
	info := fmt.Sprintf(&amp;#34;%v	%v	%v	%v	%v	%v&amp;#34;,
		c.Id, c.Name, c.Gender, c.Age, c.Phone, c.Email)
	return info

}

//用戶創建
func NewCustomer2(name string, gender string,
	age int, phone string, email string) Customer {
	return Customer{
		Name:   name,
		Gender: gender,
		Age:    age,
		Phone:  phone,
		Email:  email,
	}
}

//修改
func (c *Customer) Reset(name string, gender string, age int, phone string, email string) {
	if name != &amp;#34;&amp;#34; {
		c.Name = name
	}
	if gender != &amp;#34;&amp;#34; {
		c.Gender = gender
	}
	if age != 0 {
		c.Age = age
	}
	if phone != &amp;#34;&amp;#34; {
		c.Phone = phone
	}
	if email != &amp;#34;&amp;#34; {
		c.Email = email
	}

}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;view&#34;&gt;view&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
type customerView struct {
	key             string //接收用戶輸入
	loop            bool   //是否循環回到主頁面
	customerService *service.CustomerService
}

//顯示主菜單
func (cv *customerView) mainMenu() {
	for {
		fmt.Println(&amp;#34;\n---客戶訊息管理系統---&amp;#34;)
		fmt.Println(&amp;#34;   1 添加新客戶&amp;#34;)
		fmt.Println(&amp;#34;   2 修改客戶&amp;#34;)
		fmt.Println(&amp;#34;   3 刪除客戶&amp;#34;)
		fmt.Println(&amp;#34;   4 客戶列表&amp;#34;)
		fmt.Println(&amp;#34;   5 退出&amp;#34;)
		fmt.Print(&amp;#34;請選擇(1-5)...&amp;#34;)
		fmt.Scanln(&amp;amp;cv.key)
		switch cv.key {
		case &amp;#34;1&amp;#34;:
			fmt.Println(&amp;#34;你選擇的是...1 添加新客戶&amp;#34;)
			cv.add()
		case &amp;#34;2&amp;#34;:
			fmt.Println(&amp;#34;你選擇的是...2 修改客戶&amp;#34;)
		case &amp;#34;3&amp;#34;:
			fmt.Println(&amp;#34;你選擇的是...3 刪除客戶&amp;#34;)
			cv.delete()
		case &amp;#34;4&amp;#34;:
			fmt.Println(&amp;#34;你選擇的是...4 客戶列表&amp;#34;)
			cv.list()
		case &amp;#34;5&amp;#34;:
			fmt.Println(&amp;#34;你選擇的是...5 退出&amp;#34;)
			cv.loop = false
		default:
			fmt.Println(&amp;#34;輸入有誤，請重新輸入...&amp;#34;)
		}
		if !cv.loop {
			break
		}
	}
	fmt.Println(&amp;#34;你已成功退出客戶訊息管理系統!&amp;#34;)
}

//得到用戶輸入並添加
func (cv *customerView) add() {
	fmt.Println(&amp;#34;---添加新客戶---&amp;#34;)
	fmt.Println(&amp;#34;輸入姓名...&amp;#34;)
	name := &amp;#34;&amp;#34;
	fmt.Scanln(&amp;amp;name)
	fmt.Println(&amp;#34;輸入性別...&amp;#34;)
	gender := &amp;#34;&amp;#34;
	fmt.Scanln(&amp;amp;gender)
	fmt.Println(&amp;#34;輸入年齡...&amp;#34;)
	age := 0
	fmt.Scanln(&amp;amp;age)
	fmt.Println(&amp;#34;輸入電話...&amp;#34;)
	phone := &amp;#34;&amp;#34;
	fmt.Scanln(&amp;amp;phone)
	fmt.Println(&amp;#34;輸入信箱...&amp;#34;)
	email := &amp;#34;&amp;#34;
	fmt.Scanln(&amp;amp;email)
	//構建一個Customer實例
	//id要系統分配
	customer := model.NewCustomer2(name, gender, age, phone, email)
	//調用
	if cv.customerService.Add(customer) {
		fmt.Println(&amp;#34;添加完成!&amp;#34;)
	} else {
		fmt.Println(&amp;#34;添加失敗!&amp;#34;)
	}

}

//修改
// func (cs *customerView) Reset() {
// 	var id int
// 	fmt.Println(&amp;#34;请输入需要修改的用户ID(无需请输入-1)&amp;#34;)
// 	fmt.Scanln(&amp;amp;id)
// 	if id == -1 {
// 		return
// 	}
// 	resetIndex := cs.customerService.FindById(id)
// 	if resetIndex == -1 {
// 		fmt.Println(&amp;#34;改用户不存在&amp;#34;)
// 	} else {
// 		_, name, gender, age, phone, email := cs.customerService[resetIndex].GetInfo()
// 		fmt.Printf(&amp;#34;姓名(%v):&amp;#34;, name)
// 		fmt.Scanln(&amp;amp;name)
// 		fmt.Printf(&amp;#34;性别(%v):&amp;#34;, gender)
// 		fmt.Scanln(&amp;amp;gender)
// 		fmt.Printf(&amp;#34;年龄(%v):&amp;#34;, age)
// 		fmt.Scanln(&amp;amp;age)
// 		fmt.Printf(&amp;#34;电话(%v):&amp;#34;, phone)
// 		fmt.Scanln(&amp;amp;phone)
// 		fmt.Printf(&amp;#34;邮箱(%v):&amp;#34;, email)
// 		fmt.Scanln(&amp;amp;email)
// 		cs.customerService.List()[resetIndex].Reset(name, gender, age, phone, email)

// 	// }

// }

//刪除用戶
func (cv *customerView) delete() {
	fmt.Println(&amp;#34;---刪除客戶---&amp;#34;)
	fmt.Println(&amp;#34;輸入ID(-1=退出)...&amp;#34;)
	id := -1
	fmt.Scanln(&amp;amp;id)
	if id == -1 {
		return //放棄刪除
	}
	fmt.Println(&amp;#34;確認是否刪除?(Y/N)&amp;#34;)
	var choice string = &amp;#34;&amp;#34;
	fmt.Scanln(&amp;amp;choice)
	if choice == &amp;#34;y&amp;#34; || choice == &amp;#34;Y&amp;#34; {
		if cv.customerService.Delete(id) {
			fmt.Println(&amp;#34;刪除完成!&amp;#34;)
		} else {
			fmt.Println(&amp;#34;刪除失敗，該ID不存在&amp;#34;)
		}
	}

}

//顯示所有客戶信息
func (cv *customerView) list() {
	customers := cv.customerService.List()
	fmt.Println(&amp;#34;---客戶列表---&amp;#34;)
	fmt.Println(&amp;#34;編號\t姓名\t性別\t年齡\t電話\t信箱&amp;#34;)
	for i := range customers {
		fmt.Println(customers[i].GetInfo())

	}

	fmt.Println(&amp;#34;---客戶列表末尾---&amp;#34;)
}

func main() {
	//創建一個customerView的實例並運行顯示
	customerView := customerView{
		key:  &amp;#34;&amp;#34;,
		loop: true,
	}
	//對customerService字段初始化
	customerView.customerService = service.NewCustomerService()

	customerView.mainMenu()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;controler&#34;&gt;controler&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//完成對Customer的操作
type CustomerService struct {
	customers []model.Customer
	//聲明一個字段，表示當前切片有幾個客戶
	customerNum int //還能作為新客戶的id+1
}

//寫一個方法返回*CustomerService，就是Customer的切片
func NewCustomerService() *CustomerService {
	customerService := &amp;amp;CustomerService{}
	//初始化一個客戶
	customerService.customerNum = 1
	customer := model.NewCustomer(1, &amp;#34;摺紙&amp;#34;, &amp;#34;女&amp;#34;, 15, &amp;#34;110&amp;#34;, &amp;#34;001@x.mail&amp;#34;)
	customerService.customers = append(customerService.customers, customer)
	return customerService

}

//返回客戶切片
func (cs *CustomerService) List() []model.Customer {
	return cs.customers
}

//添加客戶到customer切片
func (cs *CustomerService) Add(customer model.Customer) bool {
	//添加一個分配ID的規則
	cs.customerNum++
	customer.Id = cs.customerNum
	cs.customers = append(cs.customers, customer)
	return true
}

//根據id尋找對應切片的下標
func (cs *CustomerService) FindById(id int) int {
	index := -1 //找不到則返回-1
	for i := 0; i &amp;lt; len(cs.customers); i++ {
		if cs.customers[i].Id == id {
			//找到了
			index = i
		}
	}
	return index
}

//刪除
func (cs *CustomerService) Delete(id int) bool {
	index := cs.FindById(id)
	if index == -1 {
		return false
	}
	//從切片中刪除一個元素
	cs.customers = append(cs.customers[:index], cs.customers[index+1:]...)
	return true
}

//修改
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-agg-go-proj-user-list/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-家庭收支小app</title>
        <link>https://yoziming.github.io/post/210820-agg-go-proj-family-count/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-agg-go-proj-family-count/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210820-agg-go-proj-family-count/ -&lt;h1 id=&#34;實作練習-家庭收支小app&#34;&gt;實作練習-家庭收支小app&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type MyMoney struct {
	key     string  //鍵入值
	note    string  //收支說明
	balance float64 //餘額
	money   float64 //收支
	flag    bool    //判斷是否有明細
	details string  //詳細
	loop    bool    //循環
}

//綁定方法
func (mm *MyMoney) MainMenu() {
	for {
		if !mm.loop {
			break
		}
		fmt.Println(&amp;#34;\n-----------------家庭收支记账软件-----------------&amp;#34;)
		fmt.Println(&amp;#34;                  1 收支明细&amp;#34;)
		fmt.Println(&amp;#34;                  2 登记收入&amp;#34;)
		fmt.Println(&amp;#34;                  3 登记支出&amp;#34;)
		fmt.Println(&amp;#34;                  4 退出软件&amp;#34;)
		fmt.Print(&amp;#34;請選擇(1-4)...&amp;#34;)
		fmt.Scanln(&amp;amp;mm.key)

		switch mm.key {
		case &amp;#34;1&amp;#34;:
			mm.showDetails()
		case &amp;#34;2&amp;#34;:
			mm.income()
		case &amp;#34;3&amp;#34;:
			mm.outcome()
		case &amp;#34;4&amp;#34;:
			mm.exit()
		default:
			fmt.Println(&amp;#34;輸入錯誤，返回主選單&amp;#34;)
		}
	}
}

func (mm *MyMoney) showDetails() {
	fmt.Println(&amp;#34;\n-----------------收支明细-----------------&amp;#34;)
	if mm.flag {
		fmt.Println(mm.details)
	} else {
		fmt.Println(&amp;#34;當前沒有明細&amp;#34;)
	}
}

func (mm *MyMoney) income() {
	fmt.Println(&amp;#34;\n-----------------登记收入-----------------&amp;#34;)
	fmt.Println(&amp;#34;輸入收入金額...&amp;#34;)
	fmt.Scanln(&amp;amp;mm.money)
	mm.balance += mm.money
	fmt.Println(&amp;#34;輸入收入說明...&amp;#34;)
	fmt.Scanln(&amp;amp;mm.note)
	mm.details += fmt.Sprintf(&amp;#34;\n收入\t%v\t	%v\t	%v&amp;#34;, mm.balance, mm.money, mm.note)
	mm.flag = true
}

func (mm *MyMoney) outcome() {
	fmt.Println(&amp;#34;本次支出金额:&amp;#34;)
	fmt.Scanln(&amp;amp;mm.money)
	//这里需要做一个必要的判断
	mm.balance -= mm.money
	fmt.Println(&amp;#34;本次支出说明:&amp;#34;)
	fmt.Scanln(&amp;amp;mm.note)
	mm.details += fmt.Sprintf(&amp;#34;\n支出\t%v\t	%v\t	%v&amp;#34;, mm.balance, mm.money, mm.note)
	mm.flag = true
}

func (mm *MyMoney) exit() {
	fmt.Println(&amp;#34;確定使否退出?(Y/N)&amp;#34;)
	choice := &amp;#34;&amp;#34;
	for {
		fmt.Scanln(&amp;amp;choice)
		if choice == &amp;#34;Y&amp;#34; || choice == &amp;#34;N&amp;#34; {
			break
		}
		fmt.Println(&amp;#34;錯誤，確定使否退出?(Y/N)&amp;#34;)
	}
	if choice == &amp;#34;Y&amp;#34; {
		fmt.Println(&amp;#34;\n-----------------結束-----------------&amp;#34;)
		mm.loop = false
	} else {
		mm.loop = true
	}
}

//工廠模式
func NewMyMoney() *MyMoney {
	return &amp;amp;MyMoney{
		key:     &amp;#34;&amp;#34;,
		loop:    true,
		balance: 10000.0,
		money:   0.0,
		note:    &amp;#34;&amp;#34;,
		flag:    false,
		details: &amp;#34;收支\t账户金额\t收支金额\t说 明&amp;#34;,
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-agg-go-proj-family-count/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>實作練習-點對點聊天</title>
        <link>https://yoziming.github.io/post/210820-agg-go-proj-p2pchat/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210820-agg-go-proj-p2pchat/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210820-agg-go-proj-p2pchat/ -&lt;h1 id=&#34;實作練習-點對點聊天&#34;&gt;實作練習-點對點聊天&lt;/h1&gt;
&lt;h3 id=&#34;servergo&#34;&gt;server.go&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	fmt.Println(&amp;#34;伺服器開始監聽&amp;#34;)
	listen, err := net.Listen(&amp;#34;tcp&amp;#34;, &amp;#34;0.0.0.0:8888&amp;#34;) //0.0.0.0 寫4位ip v4 v6都能用
	if err != nil {
		fmt.Println(&amp;#34;監聽失敗&amp;#34;, err)
		return
	}
	defer listen.Close() //主程式退出後就關閉監聽
	// fmt.Printf(&amp;#34;listen succes=%v\n&amp;#34;, listen)
	for {
		//開啟監聽端口8888
		time.Sleep(time.Microsecond)
		fmt.Println(&amp;#34;等待連接中...&amp;#34;)
		conn, err := listen.Accept()
		if err != nil {
			fmt.Println(&amp;#34;Accept()err=&amp;#34;, err)
		} else {
			fmt.Printf(&amp;#34;conn suc con=%v 客戶端ip=%v\n&amp;#34;, conn, conn.RemoteAddr().String())
		}
		//準備啟動一個協程
		go process(conn)
	}
}

func process(conn net.Conn) {
	//循環接收客戶端送來的數據
	defer conn.Close()
	fmt.Printf(&amp;#34;伺服器等待%s客戶端輸入...\n&amp;#34;, conn.RemoteAddr().String())
	for {
		//創建一個新的切片
		buf := make([]byte, 1024)
		n, err := conn.Read(buf) //從conn讀取
		//等待客戶端通過conn發送信息
		//如果客戶端沒有write,那協程就阻塞在這

		if err != nil {
			fmt.Println(&amp;#34;客戶端Read err&amp;#34;, err)
			return
		}
		fmt.Print(string(buf[:n])) //不用換行因為接收來的就包含\n
		//來的是一個byte切片 讀到[:n]剛好，後面還有玩意不是要的
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;clientgo&#34;&gt;client.go&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	conn, err := net.Dial(&amp;#34;tcp&amp;#34;, &amp;#34;127.0.0.1:8888&amp;#34;)
	if err != nil {
		fmt.Println(&amp;#34;client dial err=&amp;#34;, err)
		return
	}
	fmt.Printf(&amp;#34;conn suc con=%v 主機端ip=%v\n&amp;#34;, conn, conn.RemoteAddr().String())
	//客戶端讀取輸入行

	for {

		reader := bufio.NewReader(os.Stdin) //代表標準輸入(終端)
		fmt.Println(&amp;#34;等待輸入... (exit=離開)&amp;#34;)
		data, err := reader.ReadString(&amp;#39;\n&amp;#39;) //代表接受到\n為止
		if err != nil {
			fmt.Println(&amp;#34;ReadString&amp;#34;, err)
		}
		//如果輸入exit就退出
		line := strings.Trim(data, &amp;#34;\n\r&amp;#34;)
		if line == &amp;#34;exit&amp;#34; {
			fmt.Println(&amp;#34;客戶端已退出&amp;#34;)
			break
		}
		//從客戶端發送數據
		n, err := conn.Write([]byte(data))
		if err != nil {
			fmt.Println(&amp;#34;conn.Write&amp;#34;, err)
		}
		fmt.Printf(&amp;#34;客戶端發送了%d字節的數據\n&amp;#34;, n)

	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210820-agg-go-proj-p2pchat/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>對有序數列進行二分查找</title>
        <link>https://yoziming.github.io/post/210810-agg-go-binary-search/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-binary-search/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-binary-search/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//對有序數列進行二分查找
var arr1 = [...]int{5, 9, 6, 8, 7, 3, 4, 2, 1, 0}

func bubble(x []int) {
	for j := 1; j &amp;lt; len(x); j++ {
		for i := 0; i &amp;lt; len(x)-1; i++ {
			if x[i] &amp;gt; x[i+1] {
				x[i], x[i+1] = x[i+1], x[i]
			}
		}
	}
}
func bi(x int, s []int, left int, right int) {
	middle := (right + left) / 2
	if left &amp;gt; right {
		fmt.Println(&amp;#34;找不到&amp;#34;)
		return
	}
	if x &amp;lt; s[middle] {
		//在左邊
		bi(x, s, left, middle-1)
	} else if x &amp;gt; s[middle] {
		//在右邊
		bi(x, s, middle+1, right)
	} else {
		fmt.Println(&amp;#34;找到下標=&amp;#34;, middle)
	}

}
func main() {
	s1 := arr1[:]
	bubble(s1)
	fmt.Println(s1)
	bi(9, s1, 0, len(s1)-1)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-binary-search/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>工廠模式</title>
        <link>https://yoziming.github.io/post/210810-agg-go-factory/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-factory/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-factory/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//工廠模式
// 假如有些要公用的東西又不想用大寫讓人隨意改了 例如結構體、結構體內的字段等等
// 我就在那個包裏建一個方法，這個方法本身大寫，在方法中原地調用那些本來是大寫的玩意
// 返回一個相同的值過來，相當於那在那個包里把該封裝的都封好，拿出來的就是產品

import (
	&amp;#34;fmt&amp;#34;
)

type Student struct {
	Name  string
	Age   int
	Score float64
}

func (s *Student) Say() string {
	infoStr := fmt.Sprintf(&amp;#34;信息 name=[%v] age=[%v] score=[%v]&amp;#34;,
		s.Name, s.Age, s.Score)
	return infoStr
}

func main() {
	var s1 = Student{
		Name:  &amp;#34;tom&amp;#34;,
		Score: 98,
		Age:   18, //不依賴順序
	}
	res := s1.Say()
	fmt.Println(res)

	//其他創建結構變量同時指定值的方法:
	stu2 := Student{&amp;#34;Jack&amp;#34;, 20, 100} //項目順序都要有對應
	fmt.Println(stu2)
	//返回結構的指針
	var stu3 = &amp;amp;Student{&amp;#34;Mary&amp;#34;, 28, 5}
	fmt.Println(*stu3)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-factory/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>拷貝檔案</title>
        <link>https://yoziming.github.io/post/210810-agg-go-io-copy/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-io-copy/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-io-copy/ -&lt;h1 id=&#34;拷貝一個檔案&#34;&gt;拷貝一個檔案&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//定義一個函數接收2個路徑
func CopyFile(dstFileName, srcFileName string) (written int64, err error) {
	srcFile, err := os.Open(srcFileName)
	if err != nil {
		fmt.Println(err)
	}
	defer srcFile.Close()
	//通過srcFile獲取到reader
	reader := bufio.NewReader(srcFile)

	//打開dstFileName
	dstFile, err := os.OpenFile(dstFileName, os.O_WRONLY|os.O_CREATE, 0666)
	if err != nil {
		fmt.Println(err)
	}

	//通過dstFile獲取到writer
	writer := bufio.NewWriter(dstFile)
	defer dstFile.Close()
	return io.Copy(writer, reader)

}

func main() {
	src := &amp;#34;C:/01.mkv&amp;#34; //原始檔
	dst := &amp;#34;C:/food2.mkv&amp;#34;
	_, err := CopyFile(dst, src)
	if err == nil {
		fmt.Println(&amp;#34;拷貝完成&amp;#34;)
	} else {
		fmt.Println(&amp;#34;拷貝失敗&amp;#34;)
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-io-copy/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>接口interface</title>
        <link>https://yoziming.github.io/post/210810-agg-go-interface/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-interface/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-interface/ -&lt;h1 id=&#34;接口interface&#34;&gt;接口interface&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;例如定義 只要滿足&amp;quot;會跑&amp;quot;且&amp;quot;會叫&amp;quot;的就是&amp;quot;動物&amp;quot;，&lt;/p&gt;
&lt;p&gt;那不管你是啥玩意只要實現會跑跟會叫，我就當你是動物，就能用動物的接口去調用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//接口內不能有變量，方法也不能實現
type Usb interface {
	//聲明兩個沒實現的方法
	Start()
	Stop()
}

type Usb2 interface {
	//接口是不需要顯示聲明，只要能實現就都能調用
	Start()
	Stop()
	//假如我多聲明一個沒實現的方法在接口內就不能調用
	Test() //有方法沒實現，導致Usb2這個接口不能用
}
type Phone struct {
}

//讓Phone實現USB接口的方法
func (p Phone) Start() {
	fmt.Println(&amp;#34;手機啟動&amp;#34;)
}
func (p Phone) Stop() {
	fmt.Println(&amp;#34;手機停止&amp;#34;)
}

type Camera struct {
}

func (c Camera) Start() {
	fmt.Println(&amp;#34;相機啟動~~&amp;#34;)
}
func (c Camera) Stop() {
	fmt.Println(&amp;#34;相機停止&amp;#34;)
}

//電腦
type Computer struct {
}

func (c Computer) Working(usb Usb) { //接受一個Usb的接口類型
	//通過usb變量來調用Start等方法
	fmt.Println(&amp;#34;電腦連接usb中...&amp;#34;)
	usb.Start()
	usb.Stop()

}
func main() {
	computer := Computer{}
	phone := Phone{}
	camera := Camera{}

	//關鍵
	computer.Working(phone)
	computer.Working(camera)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;接口繼承&#34;&gt;接口繼承&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;繼承主要在於復用性跟可維護性
接口價值在於擴展性(設計好規範(方法)，讓其他類型去實現&lt;/p&gt;
&lt;p&gt;繼承是 is a的關係 例如 學生是個人
接口是 like a的關係 例如 學生會說英語&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (m *Monkey) climb() {
	fmt.Println(m.Name, &amp;#34;生來會爬樹&amp;#34;)
}

//聲明接口
type BirdAble interface {
	Flying()
}

func (lm *LittleMonkey) Flying() {
	fmt.Println(lm.Name, &amp;#34;學會飛了&amp;#34;)
}

func main() {
	var monkey1 LittleMonkey
	monkey1.Name = &amp;#34;悟空&amp;#34;
	monkey1.climb()
	monkey1.Flying()

}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;接口實踐排序&#34;&gt;接口實踐排序&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Hero struct {
	Name string
	Age  int
}

//聲明一個Hero結構體的切片類型
type HeroSlice []Hero

//實現接口
func (hs HeroSlice) Len() int {
	return len(hs)
}

func (hs HeroSlice) Less(i, j int) bool {
	//return hs[i].Age &amp;lt; hs[j].Age //Less就是決定使用哪個字段來排序
	return hs[i].Name &amp;lt; hs[j].Name //Less就是決定使用哪個字段來排序
}

func (hs HeroSlice) Swap(i, j int) {
	hs[i], hs[j] = hs[j], hs[i]
}

func main() {
	//定義一個數組跟切片
	var intSlice = []int{5, 3, 1, 2, 4}
	//來排序
	sort.Ints(intSlice)
	fmt.Println(intSlice)

	//系統提供的方法

	//創建切片內容
	var heroes HeroSlice
	for i := 0; i &amp;lt; 10; i++ {
		hero := Hero{
			Name: fmt.Sprintf(&amp;#34;英雄%d&amp;#34;, rand.Intn(100)),
			Age:  rand.Intn(100),
		}
		//放進切片 隨機創建了十個hero放進heroes這個切片
		heroes = append(heroes, hero)
	}

	//排序前
	for _, v := range heroes {
		fmt.Println(v)
	}

	//調用sort.Sort
	sort.Sort(heroes)
	//因為我的結構體能實現接口，就可以享受這些方便
	fmt.Println(&amp;#34;---排序後---&amp;#34;)
	for _, v := range heroes {
		fmt.Println(v)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;類型斷言&#34;&gt;類型斷言&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func TypeJudge(items ...interface{}) {
	for index, x := range items {
		switch x.(type) {
		case bool:
			fmt.Printf(&amp;#34;第%v個參數是bool類型,值是%v\n&amp;#34;, index+1, x)
		case int, int32, int64:
			fmt.Printf(&amp;#34;第%v個參數是int類型,值是%v\n&amp;#34;, index+1, x)
		case string:
			fmt.Printf(&amp;#34;第%v個參數是string類型,值是%v\n&amp;#34;, index+1, x)
		default:
			fmt.Printf(&amp;#34;第%v個參數是不明類型,值是%v\n&amp;#34;, index+1, x)
		}
	}
}

func main() {
	var n1 float64 = 2.3
	var n2 int = 30
	var name string = &amp;#34;tom&amp;#34;
	n4 := 300

	TypeJudge(n1, n2, name, n4)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-interface/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>數組</title>
        <link>https://yoziming.github.io/post/210810-agg-go-array1/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-array1/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-array1/ -&lt;h1 id=&#34;數組&#34;&gt;數組&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	var n1 [3]int = [3]int{1, 2, 3}
	var n2 = [3]int{4, 5, 6}
	//長度聲明後就不能變化
	var n3 = [...]int{7, 8, 9}
	//數組長度是類型的一部分 [3]int != [4]int
	var n4 = [...]string{0: &amp;#34;李四&amp;#34;, 1: &amp;#34;張三&amp;#34;, 5: &amp;#34;王武&amp;#34;}
	n5 := []int{5, 5, 5, 5, 5}
	//[]int 這樣定義其實是切片

	fmt.Println(n1)
	fmt.Println(n2)
	fmt.Println(n3)
	fmt.Println(n4)
	fmt.Println(n5)

	n9 := fmt.Sprintf(&amp;#34;%.2f&amp;#34;, 9.888888)
	fmt.Println(n9)

	var score [5]float64
	for i := 0; i &amp;lt; len(score); i++ {
		fmt.Println(&amp;#34;輸入成績&amp;#34;)
		fmt.Scanln(&amp;amp;score[i])
	}
	for i := 0; i &amp;lt; len(score); i++ {
		fmt.Printf(&amp;#34;score[%d]=%v\n&amp;#34;, i, score[i])

	}
	arr := [3]int{11, 22, 33}
	fmt.Println(arr)
	test(&amp;amp;arr)
	fmt.Println(arr)

}

func test(a *[3]int) {
	a[0] = 88
	var arr4 = [3]string{&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;}
	b := 3
	arr4[b] = &amp;#34;tom&amp;#34;
	fmt.Println(arr4)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;遍歷數組&#34;&gt;遍歷數組&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	arr1 := []int{1, 2, 3, 4, 5, 6, 7}
	for index, value := range arr1 {
		fmt.Printf(&amp;#34;index=%v,value=%v\n&amp;#34;, index, value)
	}
	for _, v := range arr1 {
		fmt.Printf(&amp;#34;%v&amp;#34;, v)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;應用練習&#34;&gt;應用練習&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	var az [26]byte
	for i := 0; i &amp;lt; len(az); i++ {
		az[i] = &amp;#39;A&amp;#39; + byte(i)
		fmt.Printf(&amp;#34;%c &amp;#34;, az[i])

	}

	var n1 = [...]int{1, 2, 6, 8, -5, 99, 44, 3, 0}
	max := n1[0]
	for i := 1; i &amp;lt; len(n1); i++ {
		if max &amp;lt; n1[i] {
			max = n1[i]
		}

	}
	fmt.Printf(&amp;#34;%v\n&amp;#34;, max)

	var n2 = [...]int{1, 2, 6, 8, -5, 99, 44, 3, 0}
	var sum int
	for _, v := range n2 {
		sum = sum + v
	}
	fmt.Printf(&amp;#34;和=%v\n&amp;#34;, sum)
	fmt.Printf(&amp;#34;平均=%v\n&amp;#34;, sum/len(n2))
	//我要保留平均的小數點
	fmt.Printf(&amp;#34;平均=%.2f\n&amp;#34;, float64(sum)/float64(len(n2)))

	//要求:隨機生成5個數字，並反轉後打印
	//思路:隨機 rand.Init()，放進數組，把數組反轉，打印

	var arr3 [5]int
	rand.Seed(time.Now().UnixNano())
	for i := 0; i &amp;lt; len(arr3); i++ {
		arr3[i] = rand.Intn(100) //0&amp;lt;=n&amp;lt;100
	}
	fmt.Println(arr3)
	//順序翻轉
	for i := 0; i &amp;lt; len(arr3)/2; i++ {
		arr3[i], arr3[len(arr3)-i-1] = arr3[len(arr3)-i-1], arr3[i]
	}
	fmt.Println(arr3)
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-array1/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>文字檔案讀取寫入</title>
        <link>https://yoziming.github.io/post/210810-agg-go-io-reader/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-io-reader/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-io-reader/ -&lt;h2 id=&#34;讀取&#34;&gt;讀取&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//打開一個文件
	file, err := os.Open(&amp;#34;c:/test.txt&amp;#34;)
	//有人叫file對象/指針/文件句柄
	if err != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err)
	}
	//看看文件是啥
	fmt.Printf(&amp;#34;file=%v\n&amp;#34;, file)
	//退出函數就關閉文件
	defer file.Close()

	//創建一個帶緩衝的reader，預設大小是4096
	reader := bufio.NewReader(file)
	for {
		str, err := reader.ReadString(&amp;#39;\n&amp;#39;) //讀到換行就結束
		fmt.Print(str)
		if err == io.EOF { //表示文件末尾
			break
		}
	}
	fmt.Println(&amp;#34;\n讀取結束&amp;#34;)

	//用ioutil.ReadFile一次讀完
	//這個包已經封裝了open跟close了，只適用在檔案大小不大的情境
	file2 := &amp;#34;c:/test.txt&amp;#34;
	str2, err2 := ioutil.ReadFile(file2)
	if err2 != nil {
		fmt.Println(err)
	}
	fmt.Printf(&amp;#34;%s&amp;#34;, str2) //原本輸出是[]byte,用%s轉

	//創建一個新檔案，寫入5句話
	filePath := &amp;#34;c:/abc.txt&amp;#34;
	file3, err3 := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666)
	if err3 != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err3)
		return
	}
	defer file3.Close() //及時關閉文件
	str3 := &amp;#34;hello\r\n&amp;#34;
	writer3 := bufio.NewWriter(file3)
	for i := 0; i &amp;lt; 5; i++ {
		writer3.WriteString(str3)
	}
	writer3.Flush() //因為本來是存在buf區要把它實際寫出來

	//覆蓋一個檔案，寫入3句話
	filePath4 := &amp;#34;c:/abc2.txt&amp;#34;
	file4, err4 := os.OpenFile(filePath4, os.O_WRONLY|os.O_TRUNC, 0666)
	if err3 != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err4)
		return
	}
	defer file4.Close() //及時關閉文件
	str4 := &amp;#34;覆蓋\r\n&amp;#34;
	writer4 := bufio.NewWriter(file4)
	for i := 0; i &amp;lt; 3; i++ {
		writer4.WriteString(str4)
	}
	writer4.Flush() //因為本來是存在buf區要把它實際寫出來

	//打開一個檔案abc，追加寫入3句話
	file5, err4 := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, 0666)
	if err3 != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err4)
		return
	}
	defer file5.Close() //及時關閉文件
	str5 := &amp;#34;追加\r\n&amp;#34;
	writer5 := bufio.NewWriter(file5)
	for i := 0; i &amp;lt; 3; i++ {
		writer5.WriteString(str5)
	}
	writer5.Flush() //因為本來是存在buf區要把它實際寫出來

	//打開一個檔案abc，讀取打印出來並追加寫入5句話
	file6, err4 := os.OpenFile(filePath, os.O_RDWR|os.O_APPEND, 0666)
	if err3 != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err4)
		return
	}
	//先讀取
	reader6 := bufio.NewReader(file6)
	for {
		str, err := reader6.ReadString(&amp;#39;\n&amp;#39;)
		if err == io.EOF { //如果讀到末尾
			break
		}
		fmt.Print(str)
	}
	defer file6.Close() //及時關閉文件
	str6 := &amp;#34;追加2BBB\r\n&amp;#34;
	writer6 := bufio.NewWriter(file6)
	for i := 0; i &amp;lt; 5; i++ {
		writer6.WriteString(str6)
	}
	writer6.Flush() //因為本來是存在buf區要把它實際寫出來

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;寫入&#34;&gt;寫入&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
func main() {
	//打開一個文件
	file, err := os.Open(&amp;#34;c:/test.txt&amp;#34;)
	//有人叫file對象/指針/文件句柄
	if err != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err)
	}
	//看看文件是啥
	fmt.Printf(&amp;#34;file=%v\n&amp;#34;, file)
	//退出函數就關閉文件
	defer file.Close()

	//創建一個帶緩衝的reader，預設大小是4096
	reader := bufio.NewReader(file)
	for {
		str, err := reader.ReadString(&amp;#39;\n&amp;#39;) //讀到換行就結束
		fmt.Print(str)
		if err == io.EOF { //表示文件末尾
			break
		}
	}
	fmt.Println(&amp;#34;\n讀取結束&amp;#34;)

	//用ioutil.ReadFile一次讀完
	//這個包已經封裝了open跟close了，只適用在檔案大小不大的情境
	file2 := &amp;#34;c:/test.txt&amp;#34;
	str2, err2 := ioutil.ReadFile(file2)
	if err2 != nil {
		fmt.Println(err)
	}
	fmt.Printf(&amp;#34;%s&amp;#34;, str2) //原本輸出是[]byte,用%s轉

	//創建一個新檔案，寫入5句話
	filePath := &amp;#34;c:/abc.txt&amp;#34;
	file3, err3 := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666)
	if err3 != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err3)
		return
	}
	defer file3.Close() //及時關閉文件
	str3 := &amp;#34;hello\r\n&amp;#34;
	writer3 := bufio.NewWriter(file3)
	for i := 0; i &amp;lt; 5; i++ {
		writer3.WriteString(str3)
	}
	writer3.Flush() //因為本來是存在buf區要把它實際寫出來

	//覆蓋一個檔案，寫入3句話
	filePath4 := &amp;#34;c:/abc2.txt&amp;#34;
	file4, err4 := os.OpenFile(filePath4, os.O_WRONLY|os.O_TRUNC, 0666)
	if err3 != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err4)
		return
	}
	defer file4.Close() //及時關閉文件
	str4 := &amp;#34;覆蓋\r\n&amp;#34;
	writer4 := bufio.NewWriter(file4)
	for i := 0; i &amp;lt; 3; i++ {
		writer4.WriteString(str4)
	}
	writer4.Flush() //因為本來是存在buf區要把它實際寫出來

	//打開一個檔案abc，追加寫入3句話
	file5, err4 := os.OpenFile(filePath, os.O_WRONLY|os.O_APPEND, 0666)
	if err3 != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err4)
		return
	}
	defer file5.Close() //及時關閉文件
	str5 := &amp;#34;追加\r\n&amp;#34;
	writer5 := bufio.NewWriter(file5)
	for i := 0; i &amp;lt; 3; i++ {
		writer5.WriteString(str5)
	}
	writer5.Flush() //因為本來是存在buf區要把它實際寫出來

	//打開一個檔案abc，讀取打印出來並追加寫入5句話
	file6, err4 := os.OpenFile(filePath, os.O_RDWR|os.O_APPEND, 0666)
	if err3 != nil {
		fmt.Println(&amp;#34;open file err=&amp;#34;, err4)
		return
	}
	//先讀取
	reader6 := bufio.NewReader(file6)
	for {
		str, err := reader6.ReadString(&amp;#39;\n&amp;#39;)
		if err == io.EOF { //如果讀到末尾
			break
		}
		fmt.Print(str)
	}
	defer file6.Close() //及時關閉文件
	str6 := &amp;#34;追加2BBB\r\n&amp;#34;
	writer6 := bufio.NewWriter(file6)
	for i := 0; i &amp;lt; 5; i++ {
		writer6.WriteString(str6)
	}
	writer6.Flush() //因為本來是存在buf區要把它實際寫出來

	//將c:/abc的內容導入到c:abc2

	fileAPath := &amp;#34;c:/abc.txt&amp;#34;
	fileBPath := &amp;#34;c:/abc2.txt&amp;#34;

	data, err9 := ioutil.ReadFile(fileAPath)
	if err9 != nil {
		fmt.Println(&amp;#34;文件讀取錯誤&amp;#34;, err9)
		return
	}
	err = ioutil.WriteFile(fileBPath, data, 0666)
	if err != nil {
		fmt.Println(&amp;#34;文件讀取錯誤&amp;#34;, err)
		return
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-io-reader/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>文檔字符統計</title>
        <link>https://yoziming.github.io/post/210810-agg-go-txt/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-txt/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-txt/ -&lt;h1 id=&#34;文檔字符統計&#34;&gt;文檔字符統計&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//保存結果用
type CharCount struct {
	ChCount    int //英文字數
	NumCount   int //
	SpaceCount int
	OtherCount int
}

func main() {
	//思路 打開一個文件 創一個reader每讀取一行就去統計，將結果保存到一個結構體
	fileName := &amp;#34;c:/abc.txt&amp;#34;
	file, err := os.Open(fileName)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer file.Close()
	//來個實例
	var count CharCount
	reader := bufio.NewReader(file)

	//開始讀取
	for {
		str, err := reader.ReadString(&amp;#39;\n&amp;#39;)
		//這存在BUG 當行不換行做結尾就統計不到
		if err == io.EOF {
			break
		}
		for _, v := range str {
			switch {
			case v &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; v &amp;lt;= &amp;#39;z&amp;#39;:
				fallthrough
			case v &amp;gt;= &amp;#39;A&amp;#39; &amp;amp;&amp;amp; v &amp;lt;= &amp;#39;Z&amp;#39;:
				count.ChCount++
			case v == &amp;#39; &amp;#39; || v == &amp;#39;\t&amp;#39;:
				count.SpaceCount++
			case v &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; v &amp;lt;= &amp;#39;9&amp;#39;:
				count.NumCount++
			default:
				count.OtherCount++
			}
		}
	}
	fmt.Printf(&amp;#34;字符=%v 數字=%v 空格=%v 其他=%v&amp;#34;,
		count.ChCount, count.NumCount, count.SpaceCount, count.OtherCount)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-txt/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>日期時間</title>
        <link>https://yoziming.github.io/post/210810-agg-go-date-time/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-date-time/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-date-time/ -&lt;h1 id=&#34;日期時間&#34;&gt;日期時間&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	//1.獲取當前本地時間
	now := time.Now()
	fmt.Printf(&amp;#34;now=%v,type=%T&amp;#34;, now, now) //返回的類型是struct
	//2.通過now獲取各種詳細
	fmt.Printf(&amp;#34;年=%v,type=%T\n&amp;#34;, now.Year(), now.Year())
	fmt.Printf(&amp;#34;月=%v,type=%T\n&amp;#34;, now.Month(), now.Month())
	fmt.Printf(&amp;#34;月=%v,type=%T\n&amp;#34;, int(now.Month()), int(now.Month()))
	fmt.Printf(&amp;#34;日=%v,type=%T\n&amp;#34;, now.Day(), now.Day())
	fmt.Printf(&amp;#34;時=%v,type=%T\n&amp;#34;, now.Hour(), now.Hour())
	fmt.Printf(&amp;#34;分=%v,type=%T\n&amp;#34;, now.Minute(), now.Minute())
	fmt.Printf(&amp;#34;秒=%v,type=%T\n&amp;#34;, now.Second(), now.Second())
	fmt.Printf(&amp;#34;星期=%v,type=%T\n&amp;#34;, now.Weekday(), now.Weekday())
	fmt.Printf(&amp;#34;星期=%v\n&amp;#34;, int(now.Weekday()))
	//3.格式化日期時間
	dateStr := fmt.Sprintf(&amp;#34;年月日時分=%d-%d-%d %d:%d\n&amp;#34;, now.Year(), now.Month(),
		now.Day(), now.Minute(), now.Second())
	fmt.Println(dateStr)
	//4.蛋疼的指定格式
	fmt.Println(now.Format(&amp;#34;2006-01-02 15:04:05&amp;#34;))
	fmt.Println(now.Format(&amp;#34;2006-01-02&amp;#34;))
	fmt.Println(now.Format(&amp;#34;06&amp;#34;))
	fmt.Println(now.Format(&amp;#34;01&amp;#34;))
	fmt.Println(now.Format(&amp;#34;03&amp;#34;))
	fmt.Println(now.Format(&amp;#34;01-02-06 03 04 05&amp;#34;))
	//123456=月日時分秒年
	//5.時間常量&amp;amp;休眠
	//每隔固定時間打印數字，打到100退出
	for i := 0; i &amp;lt;= 100; i++ {
		fmt.Println(i)
		time.Sleep(time.Millisecond)
	}
	//6.獲取時間戳unix unixNano
	fmt.Println(now.Unix())
	fmt.Println(now.UnixNano())

	//跑之前的時間
	start := now.Unix()
	test()
	end := now.Unix()
	fmt.Printf(&amp;#34;耗時%v&amp;#34;, end-start)
}

//7.統計函數執行時間
func test() {
	str := &amp;#34;&amp;#34;
	for i := 0; i &amp;lt; 100000; i++ {
		str = str + &amp;#34;hello&amp;#34; + strconv.Itoa(i)
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-date-time/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>結構體</title>
        <link>https://yoziming.github.io/post/210810-agg-go-struct/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-struct/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-struct/ -&lt;h1 id=&#34;結構體&#34;&gt;結構體&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Cat struct {
	Name  string
	Age   int
	Color string
	// S1    []int //可以是切片 但是預設值為nil(沒分配空間，一樣要先make後才能用)
}

//結構體是一個值類型，預設是值拷貝，比如cat1跟cat2是獨立存在兩個空間

func main() {
	//創建Cat的變量
	var cat1 Cat
	cat1.Name = &amp;#34;小花&amp;#34;
	cat1.Age = 18
	cat1.Color = &amp;#34;花&amp;#34;
	fmt.Println(&amp;#34;cat1=&amp;#34;, cat1)
	// cat1.S1 = make([]int, 10)
	// cat1.S1[0] = 100
	// fmt.Println(&amp;#34;cat1=&amp;#34;, cat1)

	//推薦方式
	cat2 := Cat{&amp;#34;小黑&amp;#34;, 5, &amp;#34;black&amp;#34;}
	fmt.Println(cat2)

	//方法3
	//var c *C=new(C)
	var cat3 *Cat = new(Cat)
	//因為cat3是一個指針
	(*cat3).Name = &amp;#34;小白&amp;#34;
	//語法糖 cat3.Age也可以 ，不建議
	cat3.Age = 6
	fmt.Println(*cat3)

	//方法4
	//var c *C=&amp;amp;C{}
	//因為c是一個指針 本來應該要用*...但是不用也行 草
	var cat4 *Cat = &amp;amp;Cat{&amp;#34;阿皇&amp;#34;, 0, &amp;#34;Yellow&amp;#34;}
	cat4.Name = &amp;#34;阿煌&amp;#34;
	(*cat4).Age = 1
	fmt.Println(*cat4)

	type Person struct {
		Name string `json:&amp;#34;name&amp;#34;`
		Age  int    `json:&amp;#34;age&amp;#34;`
	}

	p1 := Person{&amp;#34;aaa&amp;#34;, 10}
	fmt.Println(p1)
	var p2 *Person = &amp;amp;p1
	// fmt.Println(*p2.Age) //這樣寫會報錯。因為.的優先級比*高
	fmt.Println(p2.Age) //語法糖

	//用type重定義(類似於取別名)但是他會認為是2種類型
	type Per Person
	// var p3 Person = Person{&amp;#34;tommy&amp;#34;, 5}
	// var p4 Per
	// //p3=p4 //這樣會報錯
	// p4 = Per(p3) //這樣強轉
	// fmt.Println(p3, p4)
	fmt.Println(&amp;#34;--------------&amp;#34;)
	//struct的每個字段上可以寫一個tag，該tag可以通過反射機制獲取，常用於序列化
	pj := Per{&amp;#34;李四&amp;#34;, 44}
	jsonStr, err := json.Marshal(pj) //返回的是byte
	if err != nil {
		fmt.Println(&amp;#34;錯誤&amp;#34;)
	}
	fmt.Println(string(jsonStr)) //返回的是byte所以加一個string

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-struct/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>繼承</title>
        <link>https://yoziming.github.io/post/210810-agg-go-inherit/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-inherit/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-inherit/ -&lt;h1 id=&#34;繼承&#34;&gt;繼承&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Student struct {
	Name  string
	Age   int
	Score int
	//共有的字段
}

type Pupil struct {
	Student //套入
	Covid19 bool
}

type College struct {
	Student //套入指針效率更好
	SexExp  bool
}

func (stu *Student) ShowInfo() {
	fmt.Printf(&amp;#34;姓名=%v 年齡=%v 成績=%v\n&amp;#34;, stu.Name, stu.Age, stu.Score)
}

func (stu *Student) SetScore(s int) {
	stu.Score = s
}

func (p *Pupil) Test() {
	fmt.Println(&amp;#34;小學生考試&amp;#34;)
}

func main() {
	pupilA := &amp;amp;Pupil{}
	pupilA.Student.Name = &amp;#34;tome&amp;#34;
	pupilA.Student.Age = 8
	pupilA.Covid19 = true

	pupilA.Test()
	pupilA.Student.SetScore(66)
	pupilA.Student.ShowInfo()
	fmt.Println(&amp;#34;是否得肺炎&amp;#34;, pupilA.Covid19)

	C1 := College{}
	C1.Student.Name = &amp;#34;John&amp;#34;
	C1.Age = 23 //其實可以省略.Student
	C1.SexExp = false

	C1.Student.SetScore(39)
	C1.ShowInfo() //其實可以省略.Student
	fmt.Println(&amp;#34;是否破處&amp;#34;, C1.SexExp)

	//如果有低能把結構體跟匿名結構體用了相同的字段或方法，會採取就近訪問原則
	// 如果在一個結構中嵌入多個匿名結構，且匿名結構有同名的字段，那就必須指明匿名結構否則報錯

	//組合
	var d D
	d.a.Name = &amp;#34;xxxx&amp;#34; //有名字的結構體訪問時就要上完整名字
}

//組合
type D struct {
	a Student //有名字的結構體
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-inherit/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>錯誤處理</title>
        <link>https://yoziming.github.io/post/210810-agg-go-err/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-err/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-err/ -&lt;h1 id=&#34;錯誤處理&#34;&gt;錯誤處理&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;test&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#228b22&#34;&gt;//捕捉異常
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;//內置函數recover就是找是否異常
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err := &lt;span style=&#34;color:#658b00&#34;&gt;recover&lt;/span&gt;(); err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; { &lt;span style=&#34;color:#228b22&#34;&gt;//err不為空=有錯
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;			fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;錯誤&amp;#34;&lt;/span&gt;, err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	n1 := &lt;span style=&#34;color:#b452cd&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	n2 := &lt;span style=&#34;color:#b452cd&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	res := n1 / n2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(res)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;//讀取文件名稱，錯誤就報錯
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;readConf&lt;/span&gt;(name &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;string&lt;/span&gt;) (err &lt;span style=&#34;color:#00688b;font-weight:bold&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; name == &lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;config.ini&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	} &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#228b22&#34;&gt;//返回自訂錯誤
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#228b22&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;return&lt;/span&gt; errors.&lt;span style=&#34;color:#008b45&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;文件錯誤&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;test02&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	err := &lt;span style=&#34;color:#008b45&#34;&gt;readConf&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;config.in564&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;if&lt;/span&gt; err != &lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#658b00&#34;&gt;panic&lt;/span&gt;(err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;02繼續執行...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8b008b;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#008b45&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#008b45&#34;&gt;test&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;01繼續執行...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#008b45&#34;&gt;test02&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fmt.&lt;span style=&#34;color:#008b45&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#cd5555&#34;&gt;&amp;#34;03繼續執行...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;- https://yoziming.github.io/post/210810-agg-go-err/ - Yoziming</description>
        </item>
    
    
    
        <item>
        <title>順序查找</title>
        <link>https://yoziming.github.io/post/210810-agg-go-sequential-search/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-agg-go-sequential-search/</guid>
        <description>柚子茶室 https://yoziming.github.io/post/210810-agg-go-sequential-search/ -&lt;h1 id=&#34;順序查找&#34;&gt;順序查找&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	names := [4]string{&amp;#34;A&amp;#34;, &amp;#34;B&amp;#34;, &amp;#34;C&amp;#34;, &amp;#34;D&amp;#34;}
	var input = &amp;#34;&amp;#34;
	fmt.Println(&amp;#34;輸入...&amp;#34;)
	fmt.Scanln(&amp;amp;input)
	//順序查找
	// for i := 0; i &amp;lt; len(names); i++ {
	// 	if input == names[i] {
	// 		fmt.Printf(&amp;#34;找到%v,下標=%v \n&amp;#34;, input, i)
	// 		break
	// 	} else if i == len(names)-1 {
	// 		fmt.Println(&amp;#34;比對失敗...&amp;#34;)
	// 	}

	//順序查找2
	index := -1
	for i := 0; i &amp;lt; len(names); i++ {
		if input == names[i] {
			index = i
			break
		}
	}
	if index != -1 {
		fmt.Printf(&amp;#34;找到%v,下標=%v \n&amp;#34;, input, index)
	} else {
		fmt.Println(&amp;#34;比對失敗...&amp;#34;)
	}
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-agg-go-sequential-search/ - Yoziming</description>
        </item>
    
    
    
    
    
    
  </channel>
</rss> 