<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yoziming&#39; Blog</title>
    <link>https://yoziming.github.io/</link>
    <description>Recent content on yoziming&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>yoziming</copyright>
    <lastBuildDate>Wed, 17 Nov 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://yoziming.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>const常量</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-const%E5%B8%B8%E9%87%8F/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-const%E5%B8%B8%E9%87%8F/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-const%E5%B8%B8%E9%87%8F/ -&lt;h1 id=&#34;const常量&#34;&gt;const常量&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;常量 聲明時必須賦值、不能修改、只能是bool、數值、string，賦值需是一個確定的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	const tax int = 10
	const x = 9 / 3
	// const c = 9 / a //因為a可能是一個變量所以這樣不行
	// var a int = 3
	fmt.Println(tax, x)

	const (
		a = iota //表示a=0
		b        //b=a+1
		c        //c=b+1
	)
	fmt.Println(a, b, c)

	const (
		d = iota
		e
		f, g = iota, iota
	)
	fmt.Println(d, e, f, g)

	//其他程式語言常量會用全大寫，go中沒限制，且一樣用首字母大小來控制使用範圍
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-const%E5%B8%B8%E9%87%8F/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>defer臨走前啟用</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-defer%E8%87%A8%E8%B5%B0%E5%89%8D%E5%95%9F%E7%94%A8/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-defer%E8%87%A8%E8%B5%B0%E5%89%8D%E5%95%9F%E7%94%A8/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-defer%E8%87%A8%E8%B5%B0%E5%89%8D%E5%95%9F%E7%94%A8/ -&lt;h1 id=&#34;defer臨走前啟用&#34;&gt;defer臨走前啟用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;退出函數前才執行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func sum(n1, n2 int) int {
	defer fmt.Println(&amp;quot;ok1&amp;quot;, n1)
	defer fmt.Println(&amp;quot;ok2&amp;quot;, n2)
	//defer棧先入後出
	n1++
	n2++
	res := n1 + n2
	fmt.Println(&amp;quot;ok3 res=&amp;quot;, res)
	return res

}
func main() {
	res := sum(10, 20)
	fmt.Println(&amp;quot;res=&amp;quot;, res)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-defer%E8%87%A8%E8%B5%B0%E5%89%8D%E5%95%9F%E7%94%A8/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>goroutine</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-goroutine%E4%B8%A6%E7%99%BC/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-goroutine%E4%B8%A6%E7%99%BC/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-goroutine%E4%B8%A6%E7%99%BC/ -&lt;h1 id=&#34;goroutine&#34;&gt;goroutine&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;進程=程序在操作系統中的一次進行過程&lt;/p&gt;
&lt;p&gt;線程=執行實例的最小單位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一個進程可以創建多個線程且併發執行&lt;/li&gt;
&lt;li&gt;一個程序至少包含一個進程，一個進程至少包含一個線程&lt;/li&gt;
&lt;li&gt;併發=多線程程序在單核上運行&lt;/li&gt;
&lt;li&gt;併行=多線程程序在多核上運行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GO的主線程(可以理解為進程)，一個GO進程上可以起很多協程，協程可以理解為輕量級的線程，協程特點:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有獨立的棧空間&lt;/li&gt;
&lt;li&gt;共享程序堆空間&lt;/li&gt;
&lt;li&gt;調度由用戶控制&lt;/li&gt;
&lt;li&gt;為輕量級的線程&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func test() {
	for i := 0; i &amp;lt; 10; i++ {
		fmt.Println(&amp;quot;test()Hello,world&amp;quot; + strconv.Itoa(i))
		time.Sleep(time.Second / 10)
	}
}

func main() {
	go test() //開啟一個協程
	//如果主線程退出了，即使協程還沒執行完，也會退出
	//協程可以自己先結束
	for i := 0; i &amp;lt; 10; i++ {
		fmt.Println(&amp;quot;main()Hello,go&amp;quot; + strconv.Itoa(i))
		time.Sleep(time.Second / 10)
	}
	go test() //開啟一個協程，主線程退出了，即使協程還沒執行完，也會退出

	//查邏輯CPU數量
	cpuNum := runtime.NumCPU()
	fmt.Println(cpuNum)
	//設置最大線程數量
	runtime.GOMAXPROCS(cpuNum)

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-goroutine%E4%B8%A6%E7%99%BC/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Go使用mysql與事務操作</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-go%E4%BD%BF%E7%94%A8mysql%E8%88%87%E4%BA%8B%E5%8B%99%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-go%E4%BD%BF%E7%94%A8mysql%E8%88%87%E4%BA%8B%E5%8B%99%E6%93%8D%E4%BD%9C/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-go%E4%BD%BF%E7%94%A8mysql%E8%88%87%E4%BA%8B%E5%8B%99%E6%93%8D%E4%BD%9C/ -&lt;h1 id=&#34;go使用mysql與事務操作&#34;&gt;Go使用mysql與事務操作&lt;/h1&gt;
&lt;h3 id=&#34;基本操作&#34;&gt;基本操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;quot;database/sql&amp;quot;
	&amp;quot;fmt&amp;quot;

	_ &amp;quot;github.com/go-sql-driver/mysql&amp;quot;
)

var db *sql.DB // 是一個連接池對象

// user 接收數據
type user struct {
	id   int
	name string
	age  int
}

func initDB() (err error) {
	dsn := &amp;quot;root:root@tcp(127.0.0.1:3306)/sql_test&amp;quot;
	db, err = sql.Open(&amp;quot;mysql&amp;quot;, dsn) // 這個db要用全局的，重要!
	if err != nil {
		return
	}
	err = db.Ping()
	if err != nil {
		return
	} else {
		fmt.Println(&amp;quot;連接成功&amp;quot;)
	}
	return
}

// 查詢一個
func find1() {
	var u1 user
	sqlStr := `select id, name, age from user where id=?;`
	rowObj := db.QueryRow(sqlStr, 1)
	err := rowObj.Scan(&amp;amp;u1.id, &amp;amp;u1.name, &amp;amp;u1.age)
	if err != nil {
		fmt.Println(&amp;quot;Scan failed!&amp;quot;, err)
		return
	}
	fmt.Println(u1)
}

// findMore 查詢多個
func findMore() {
	sqlStr := `select id, name, age from user where id &amp;gt; ?;`
	rows, _ := db.Query(sqlStr, 0)
	defer rows.Close()

	for rows.Next() {
		var u user
		err := rows.Scan(&amp;amp;u.id, &amp;amp;u.name, &amp;amp;u.age)
		if err != nil {
			return
		}
		fmt.Println(u)
	}
}

func update(newAge int, id int) {
	sqlStr := &amp;quot;update user set age=? where id = ?&amp;quot;
	ret, err := db.Exec(sqlStr, newAge, id)
	if err != nil {
		fmt.Println(err)
		return
	}
	n, err := ret.RowsAffected()
	if err != nil {
		return
	}
	fmt.Println(&amp;quot;更新了&amp;quot;, n, &amp;quot;行數據&amp;quot;)
}

func delete(id int) {
	sqlStr := &amp;quot;delete from user where id = ?&amp;quot;
	ret, err := db.Exec(sqlStr, id)
	if err != nil {
		fmt.Println(err)
		return
	}
	n, err := ret.RowsAffected()
	if err != nil {
		return
	}
	fmt.Println(&amp;quot;更新了&amp;quot;, n, &amp;quot;行數據&amp;quot;)
}

func main() {
	err := initDB()
	if err != nil {
		fmt.Println(&amp;quot;init DB failed&amp;quot;, err)
	}

	preInsert()
	// findMore()
	// update(90, 2)
	// delete(2)
	findMore()
}

func insert() {
	sqlStr := `insert into user(name, age) values(&amp;quot;AAC&amp;quot;, 18)`
	ret, err := db.Exec(sqlStr)
	if err != nil {
		fmt.Println(&amp;quot;insert failed!&amp;quot;, err)
		return
	}
	// 插入後能拿到對應的ID
	id, _ := ret.LastInsertId()
	fmt.Println(&amp;quot;id=&amp;quot;, id)
}

func preInsert() {
	sqlStr := &amp;quot;insert into user(name, age) values(?,?)&amp;quot;
	stmt, err := db.Prepare(sqlStr)
	if err != nil {
		return
	}
	defer stmt.Close()
	for i := 1; i &amp;lt; 10; i++ {
		_, _ = stmt.Exec(&amp;quot;人物&amp;quot;, i)

	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mysql事務操作&#34;&gt;mysql事務操作&lt;/h3&gt;
&lt;p&gt;事務：一個最小的不可再分的工作單元；通常一個事務對應一個完整的業務(例如銀行帳戶轉帳業務，該業務就是一個最小的工作單元)，同時這個完整的業務需要執行多次的DML(insert、update、delete)語句共同聯合完成。A轉帳給B，這裡面就需要執行兩次update操作。在MySQL中只有使用了Innodb資料庫引擎的資料庫或表才支援事務。交易處理可以用來維護資料庫的完整性，保證成批的SQL語句要麼全部執行，要麼全部不執行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事務的ACID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常事務必須滿足4個條件（ACID）：原子性（Atomicity，或稱不可分割性）、一致性（Consistency）、隔離性（Isolation，又稱獨立性）、持久性（Durability）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原子性 一個事務（transaction）中的所有操作，要麼全部完成，要麼全部不完成，不會結束在中間某個環節。事務在執行過程中發生錯誤，會被回滾（Rollback）到事務開始前的狀態，就像這個事務從來沒有執行過一樣。&lt;/li&gt;
&lt;li&gt;一致性 在事務開始之前和事務結束以後，資料庫的完整性沒有被破壞。這表示寫入的資料必須完全符合所有的預設規則，這包含資料的精確度、串聯性以及後續資料庫可以自發性地完成預定的工作。&lt;/li&gt;
&lt;li&gt;隔離性 資料庫允許多個併發事務同時對其資料進行讀寫和修改的能力，隔離性可以防止多個事務併發執行時由於交叉執行而導致資料的不一致。事務隔離分為不同級別，包括讀未提交（Read uncommitted）、讀提交（read committed）、可重複讀（repeatable read）和序列化（Serializable）。&lt;/li&gt;
&lt;li&gt;持久性 交易處理結束後，對資料的修改就是永久的，即便系統故障也不會丟失。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;quot;database/sql&amp;quot;
	&amp;quot;fmt&amp;quot;

	_ &amp;quot;github.com/go-sql-driver/mysql&amp;quot;
)

var db *sql.DB // 是一個連接池對象

// user 接收數據
type user struct {
	id   int
	name string
	age  int
}

func initDB() (err error) {
	dsn := &amp;quot;root:root@tcp(127.0.0.1:3306)/sql_test&amp;quot;
	db, err = sql.Open(&amp;quot;mysql&amp;quot;, dsn) // 這個db要用全局的，重要!
	if err != nil {
		return
	}
	err = db.Ping()
	if err != nil {
		return
	} else {
		fmt.Println(&amp;quot;連接成功&amp;quot;)
	}
	return
}

func transaction() {
	tx, err := db.Begin()
	if err != nil {
		fmt.Println(&amp;quot;begin failed!&amp;quot;, err)
		return
	}

	sqlStr1 := &amp;quot;update user set age=age-2 where id=1&amp;quot;
	sqlStr2 := &amp;quot;update user set age=age+2 where id=3&amp;quot;
	ret1, err := tx.Exec(sqlStr1)
	if err != nil {
		tx.Rollback()
		return
	}
	affRow1, err := ret1.RowsAffected()
	if err != nil {
		tx.Rollback()
		return
	}
	ret2, err := tx.Exec(sqlStr2)
	if err != nil {
		tx.Rollback()
		return
	}
	affRow2, err := ret2.RowsAffected()
	if err != nil {
		tx.Rollback()
		return
	}
	fmt.Println(affRow1, affRow2)
	if affRow1 == 1 &amp;amp;&amp;amp; affRow2 == 1 {
		tx.Commit()
		fmt.Println(&amp;quot;已提交&amp;quot;)
	} else {
		tx.Rollback()
	}

}

func findMore() {
	sqlStr := `select id, name, age from user where id &amp;gt; ?;`
	rows, _ := db.Query(sqlStr, 0)
	defer rows.Close()

	for rows.Next() {
		var u user
		err := rows.Scan(&amp;amp;u.id, &amp;amp;u.name, &amp;amp;u.age)
		if err != nil {
			return
		}
		fmt.Println(u)
	}
}

func main() {

	initDB()
	findMore()
	transaction()
	findMore()
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-go%E4%BD%BF%E7%94%A8mysql%E8%88%87%E4%BA%8B%E5%8B%99%E6%93%8D%E4%BD%9C/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>JSON序列化</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-json%E5%BA%8F%E5%88%97%E5%8C%96/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-json%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-json%E5%BA%8F%E5%88%97%E5%8C%96/ -&lt;h1 id=&#34;json序列化&#34;&gt;JSON序列化&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;JSON 格式 {&amp;ldquo;鍵&amp;rdquo;:&amp;ldquo;值&amp;rdquo;}  {&amp;ldquo;鍵&amp;rdquo;:&amp;ldquo;值&amp;rdquo;,&amp;ldquo;鍵2&amp;rdquo;:&amp;ldquo;值2&amp;rdquo;} {&amp;ldquo;鍵&amp;rdquo;:&amp;ldquo;值&amp;rdquo;,&amp;ldquo;鍵2&amp;rdquo;:[&amp;ldquo;值2數組&amp;rdquo;,值2數組]}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Monster struct {
	Name string  `json:&amp;quot;name&amp;quot;` //反射機制
	Age  int     `json:&amp;quot;age&amp;quot;`
	Sal  float64 `json:&amp;quot;sal&amp;quot;`
}

func test1() {
	monster1 := Monster{
		Name: &amp;quot;牛魔王&amp;quot;,
		Age:  50,
		Sal:  8000.0,
	}
	data, err := json.Marshal(&amp;amp;monster1)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(data))
}

//把map序列化
func testMap() {
	var mapA map[string]interface{} = make(map[string]interface{})
	mapA[&amp;quot;name&amp;quot;] = &amp;quot;紅孩兒&amp;quot;
	mapA[&amp;quot;age&amp;quot;] = 18
	data, err := json.Marshal(&amp;amp;mapA)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(data))

}

//切片序列化
func testSlice() {
	var slice1 []map[string]interface{}
	var m1 map[string]interface{} = make(map[string]interface{})
	m1[&amp;quot;name&amp;quot;] = &amp;quot;珍娜&amp;quot;
	m1[&amp;quot;age&amp;quot;] = 40
	slice1 = append(slice1, m1)
	var m2 map[string]interface{} = make(map[string]interface{})
	m2[&amp;quot;name&amp;quot;] = &amp;quot;索爾&amp;quot;
	m2[&amp;quot;age&amp;quot;] = 25
	slice1 = append(slice1, m2)
	data, err := json.Marshal(slice1)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(data))

}

//基本數據類型序列化，沒啥意義 因為他沒有key 就只會轉出一個string
func testFloat64() {
	var num1 float64 = 123.45
	data, err := json.Marshal(num1)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(data))

}

//反序列化
func unmarshal() {
	str := `{&amp;quot;name&amp;quot;:&amp;quot;牛魔王&amp;quot;,&amp;quot;age&amp;quot;:50,&amp;quot;sal&amp;quot;:8000}`
	//用`...`包起來保留原格式

	//定義一個實例來接收 這個接收的格式一定要能符合對應
	var heroes Monster
	err := json.Unmarshal([]byte(str), &amp;amp;heroes)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(heroes)
}
func unmarshalMap() {
	str := `{&amp;quot;age&amp;quot;:18,&amp;quot;name&amp;quot;:&amp;quot;紅孩兒&amp;quot;}`
	var a map[string]interface{}
	//不用make因為unmarshal函數內封裝了
	err := json.Unmarshal([]byte(str), &amp;amp;a)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(a)
}

func main() {
	test1()
	testMap()
	testSlice()
	testFloat64()
	unmarshal()
	unmarshalMap()
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-json%E5%BA%8F%E5%88%97%E5%8C%96/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Map集合</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-map%E9%9B%86%E5%90%88/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-map%E9%9B%86%E5%90%88/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-map%E9%9B%86%E5%90%88/ -&lt;h1 id=&#34;map集合&#34;&gt;Map集合&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	// map[key類型] value類型
	var m1 map[int]int = make(map[int]int)

	//key類型通常是int or string
	//value 通常是數字 or string or map or struct
	//只聲明不會給內存，要make才初始化才能用(跟切片一樣)
	m1[1] = 100
	m1[2] = 200
	m1[3] = 300
	m1[1] = 1000
	//key不能重複，後賦予的頂掉前面
	fmt.Println(m1)

	var m2 = make(map[string]string)
	m2[&amp;quot;AV&amp;quot;] = &amp;quot;sss&amp;quot;
	fmt.Println(m2)

	//推薦寫法
	m3 := make(map[string]string)
	m3[&amp;quot;一號&amp;quot;] = &amp;quot;台北&amp;quot;
	m3[&amp;quot;二奧&amp;quot;] = &amp;quot;桃園&amp;quot;
	fmt.Println(m3)

	m4 := map[int]int{1: 10, 2: 20, 3: 30}
	fmt.Println(m4)

	//學生姓名+性別
	m5 := make(map[string](map[string]string))
	m5[&amp;quot;stu01&amp;quot;] = make(map[string]string) //不能少
	m5[&amp;quot;stu01&amp;quot;][&amp;quot;name&amp;quot;] = &amp;quot;tom&amp;quot;
	m5[&amp;quot;stu01&amp;quot;][&amp;quot;sex&amp;quot;] = &amp;quot;男&amp;quot;
	m5[&amp;quot;stu02&amp;quot;] = make(map[string]string) //不能少
	m5[&amp;quot;stu02&amp;quot;][&amp;quot;name&amp;quot;] = &amp;quot;mary&amp;quot;
	m5[&amp;quot;stu02&amp;quot;][&amp;quot;sex&amp;quot;] = &amp;quot;女&amp;quot;
	fmt.Println(m5)
	fmt.Println(m5[&amp;quot;stu01&amp;quot;])
	fmt.Println(m5[&amp;quot;stu01&amp;quot;][&amp;quot;sex&amp;quot;])

	var m6 = make(map[int]int)
	m6[1] = 10
	m6[2] = 20
	delete(m6, 1) //delete=刪除key
	delete(m6, 3) //delete空的東西也不會報錯
	//沒有辦法把key全刪除，要就用遍歷
	fmt.Println(m6)
	//重新分配一次=清空，但是格式要跟本來一樣
	m6 = make(map[int]int)
	fmt.Println(m6)

	//查找
	var m7 = make(map[int]int)
	m7[1] = 111
	m7[2] = 222
	val, ok := m7[2] //把一個map中的一個key賦給a,b 其中a=value b=bool(是否存在)
	fmt.Println(val, ok)
	if ok {
		fmt.Printf(&amp;quot;m7存在key&#39;1&#39;且值為%v\n&amp;quot;, val)
	} else {
		fmt.Printf(&amp;quot;m7不存在key&#39;n&#39;\n&amp;quot;)
	}

	//遍歷
	//因為map裡面的key-value不一定是連續的數字，所以不能用for而要用for:=range
	//m5 := make(map[string](map[string]string))

	for k, v := range m5 {
		fmt.Printf(&amp;quot;k=%v \n&amp;quot;, k)
		for k2, v2 := range v {
			fmt.Printf(&amp;quot;	k2=%v v=%v \n&amp;quot;, k2, v2)
		}

	}

	//長度=有幾對
	m8 := map[int]int{1: 10, 2: 20, 3: 30}
	fmt.Println(len(m8))

	//map切片
	//使用一個map來記錄monster的name跟age，且monster數量可以動態變化

	var mon []map[string]string = make([]map[string]string, 2)
	if mon[0] == nil {
		mon[0] = make(map[string]string, 2)
		mon[0][&amp;quot;name&amp;quot;] = &amp;quot;牛魔王&amp;quot;
		mon[0][&amp;quot;age&amp;quot;] = &amp;quot;500&amp;quot;
	}
	if mon[1] == nil {
		mon[1] = make(map[string]string, 2)
		mon[1][&amp;quot;name&amp;quot;] = &amp;quot;玉兔&amp;quot;
		mon[1][&amp;quot;age&amp;quot;] = &amp;quot;300&amp;quot;
	}

	// if mon[2] == nil {
	// 	mon[2] = make(map[string]string, 2)
	// 	mon[2][&amp;quot;name&amp;quot;] = &amp;quot;111&amp;quot;
	// 	mon[2][&amp;quot;age&amp;quot;] = &amp;quot;3440&amp;quot;
	// } //這樣寫越界
	//用append 先定義monster信息
	newMon := map[string]string{
		&amp;quot;name&amp;quot;: &amp;quot;新妖怪&amp;quot;,
		&amp;quot;age&amp;quot;:  &amp;quot;200&amp;quot;,
	}
	mon = append(mon, newMon)

	fmt.Println(mon)

	//用結構體更好，例如學號是唯一
	type Stu struct {
		Name    string
		Age     int
		Address string
	}
	stumaps := make(map[string]Stu)
	//創建學生
	stu1 := Stu{&amp;quot;tom&amp;quot;, 18, &amp;quot;經&amp;quot;}
	stu2 := Stu{&amp;quot;mary&amp;quot;, 50, &amp;quot;KJH&amp;quot;}
	stumaps[&amp;quot;no1&amp;quot;] = stu1
	stumaps[&amp;quot;no2&amp;quot;] = stu2
	fmt.Println(stumaps)
	//遍歷
	for k, v := range stumaps {
		fmt.Printf(&amp;quot;學號=%v\n&amp;quot;, k)
		fmt.Printf(&amp;quot;	姓名=%v\n&amp;quot;, v.Name)
		fmt.Printf(&amp;quot;	年紀=%v\n&amp;quot;, v.Age)
		fmt.Printf(&amp;quot;	住址=%v\n&amp;quot;, v.Address)
	}

}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-map%E9%9B%86%E5%90%88/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>new與make的區別</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-new%E8%88%87make%E7%9A%84%E5%8D%80%E5%88%A5/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-new%E8%88%87make%E7%9A%84%E5%8D%80%E5%88%A5/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-new%E8%88%87make%E7%9A%84%E5%8D%80%E5%88%A5/ -&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	num1 := 100
	fmt.Printf(&amp;quot;類型=%T,值=%v,地址=%v\n&amp;quot;, num1, num1, &amp;amp;num1)
	num2 := new(int) //*int
	fmt.Printf(&amp;quot;類型=%T,值=%v,地址=%v\n&amp;quot;, num2, num2, &amp;amp;num2)

	//new用來分配類型
	//make用來分配內存
}
&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-new%E8%88%87make%E7%9A%84%E5%8D%80%E5%88%A5/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Redis基本操作</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-redis%E5%9F%BA%E7%A4%8E/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-redis%E5%9F%BA%E7%A4%8E/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-redis%E5%9F%BA%E7%A4%8E/ -&lt;h1 id=&#34;redis基本操作&#34;&gt;Redis基本操作&lt;/h1&gt;
&lt;p&gt;0.啟動cmd&amp;gt;redis-cli&lt;/p&gt;
&lt;p&gt;1.數據結構類似JSON都是Key-Value&lt;/p&gt;
&lt;p&gt;2.五大數據類型String、Hash、List、Set、Zset&lt;/p&gt;
&lt;p&gt;2-1.String:最基本的字串，value最大值=512M&lt;/p&gt;
&lt;p&gt;指令:set(如果存在就相當於修改)、get、del (很多指令可以用tab協助完成)&lt;/p&gt;
&lt;p&gt;setex(幾秒後自毀)&lt;/p&gt;
&lt;p&gt;2-2.Hash:類似於Map&lt;/p&gt;
&lt;p&gt;指令:hset key field value、hget、hdel&lt;/p&gt;
&lt;p&gt;一次設多項(空格隔開)hmset、hmget&lt;/p&gt;
&lt;p&gt;hlen:統計有幾個元素&lt;/p&gt;
&lt;p&gt;hexists:看field是否存在&lt;/p&gt;
&lt;p&gt;2-3.List:是個有序的鏈表，元素的值可以重複，可以把東西加在頭或尾&lt;/p&gt;
&lt;p&gt;指令:lpush 從左往管子裡塞東西，一直推擠過去&lt;/p&gt;
&lt;p&gt;lrange 0 end (最左是0 1 2 3&amp;hellip;，也可以用負數 -1表示最後一個 -2表示倒數第2&lt;/p&gt;
&lt;p&gt;比如說lrange 0 -1 =從左開始全顯示&lt;/p&gt;
&lt;p&gt;rpush 從右邊加東西 (就順序上來說比較習慣)&lt;/p&gt;
&lt;p&gt;lpop / rpop 從左或右取出數據(彈走了)&lt;/p&gt;
&lt;p&gt;del key 刪掉就沒了&lt;/p&gt;
&lt;p&gt;lindex 按照索引下標獲得元素(從左到右0開始)&lt;/p&gt;
&lt;p&gt;llen 長度&lt;/p&gt;
&lt;p&gt;2-4.Set:String類型的無序集合(元素的值不能重複)&lt;/p&gt;
&lt;p&gt;舉例 存放email不該重複 (重複加了無效)&lt;/p&gt;
&lt;p&gt;指令saad&lt;/p&gt;
&lt;p&gt;smembers 印出所有值&lt;/p&gt;
&lt;p&gt;sismember 判斷值是否成員&lt;/p&gt;
&lt;p&gt;srem 刪除指定值&lt;/p&gt;
- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-redis%E5%9F%BA%E7%A4%8E/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>Reflect反射</title>
        <link>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-reflect%E5%8F%8D%E5%B0%84/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-reflect%E5%8F%8D%E5%B0%84/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-reflect%E5%8F%8D%E5%B0%84/ -&lt;h1 id=&#34;reflect反射&#34;&gt;reflect反射&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func reflectTest01(b interface{}) {
	//通過反射獲取傳入的各種訊息
	//先拿reflect.Type
	rType := reflect.TypeOf(b)
	fmt.Println(&amp;quot;rType=&amp;quot;, rType)

	rVal := reflect.ValueOf(b)
	fmt.Println(&amp;quot;rVal=&amp;quot;, rVal)
	// n1:=10+rVal //rVal他看起來是int但其實是type reflect.Value
	n1 := 10 + rVal.Int() //用.Int()轉換後就可以了
	// n3 := rVal.Float()//像這樣也不行的，一定要確認類型
	fmt.Println(&amp;quot;n1=&amp;quot;, n1)
	// fmt.Println(&amp;quot;n3=&amp;quot;, n3)

	//把rVal轉回interface{}
	iV := rVal.Interface()
	n2 := iV.(int)
	fmt.Println(&amp;quot;n2=&amp;quot;, n2)
}

func reflectTest02(b interface{}) {
	//通過反射獲取傳入的各種訊息
	//先拿reflect.Type
	rType := reflect.TypeOf(b)
	fmt.Println(&amp;quot;rType=&amp;quot;, rType)

	rVal := reflect.ValueOf(b)
	fmt.Println(&amp;quot;rVal=&amp;quot;, rVal)

	//把rVal轉回interface{}
	iV := rVal.Interface()
	//斷言回來
	n2, ok := iV.(Student)
	if !ok {
		fmt.Println(&amp;quot;從interface{}轉換回Student失敗&amp;quot;)
	}
	fmt.Println(&amp;quot;n2=&amp;quot;, n2)
	fmt.Println(&amp;quot;n2.Name=&amp;quot;, n2.Name)

	//獲取變量對應的kind，可以從Type也能從val拿。
	//比如這個type是包名.Student，kind是stuct，可以說定義上kind包含type
	fmt.Println(&amp;quot;kind=&amp;quot;, rType.Kind())
	fmt.Println(&amp;quot;kind=&amp;quot;, rVal.Kind())

}

type Student struct {
	Name string
	Age  int
}

func main() {
	var num int = 100
	reflectTest01(num)
	fmt.Println(&amp;quot;===============================&amp;quot;)
	stu := Student{
		Name: &amp;quot;tom&amp;quot;,
		Age:  20,
	}
	reflectTest02(stu)

}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;修改變量&#34;&gt;修改變量&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func reflect01(b interface{}) {
	rVal := reflect.ValueOf(b)
	fmt.Println(&amp;quot;rVal=&amp;quot;, rVal)
	rType := reflect.TypeOf(b)
	fmt.Println(&amp;quot;rType=&amp;quot;, rType)

	iV := rVal.Interface()
	vNew, ok := iV.(float64)
	if ok {
		fmt.Println(&amp;quot;轉換成功 vNew=&amp;quot;, vNew)
	} else {
		fmt.Println(&amp;quot;err&amp;quot;)
	}
}
func main() {
	var v float64 = 1.2
	reflect01(v)

	// var str string = &amp;quot;tom&amp;quot;  //錯誤示範
	// fs := reflect.ValueOf(str)
	// fs.SetString(&amp;quot;jack&amp;quot;)
	// fmt.Println(str)

	var str string = &amp;quot;tom&amp;quot;
	fs := reflect.ValueOf(&amp;amp;str)
	fs.Elem().SetString(&amp;quot;jack&amp;quot;)
	fmt.Println(str)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;實踐&#34;&gt;實踐&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Monster struct {
	Name  string `json:&amp;quot;name&amp;quot;`
	Age   int    `json:&amp;quot;age&amp;quot;`
	Score float64
}

//方法打印m值
func (m Monster) Print() {
	fmt.Println(m)
}

//方法 求2和
func (m Monster) GetSum(n1, n2 int) int {
	return n1 + n2
}

//方法 接收4值給Monster
func (m Monster) Set(n string, a int, s float64) {
	m.Name = n
	m.Age = a
	m.Score = s
}

//反射實例
func TestStruct(a interface{}) {
	typ := reflect.TypeOf(a)
	val := reflect.ValueOf(a)
	kd := val.Kind()
	if kd != reflect.Struct {
		fmt.Println(&amp;quot;傳入的不是結構體&amp;quot;)
		return
	}
	//獲取該結構有幾字段
	num := val.NumField()
	fmt.Println(&amp;quot;struct有幾個字段=&amp;quot;, num)

	//遍歷所有字段
	for i := 0; i &amp;lt; num; i++ {
		fmt.Printf(&amp;quot;Field%d 值為%v\n&amp;quot;, i, val.Field(i))
		//獲取struct標籤
		tagVal := typ.Field(i).Tag.Get(&amp;quot;json&amp;quot;)
		if tagVal != &amp;quot;&amp;quot; {
			fmt.Printf(&amp;quot;Field%d tag為%v\n&amp;quot;, i, tagVal)
		}
	}
	//獲取結構體有幾個方法
	numOfMethod := val.NumMethod()
	fmt.Println(&amp;quot;方法有&amp;quot;, numOfMethod)
	//調用第[]個方法且call調用他(傳入參數值)
	//但他這個是方法的首字(asc碼)當排序的 我們的方法是G P S開頭 (1)=第2個
	val.Method(1).Call(nil)
	//試著調用getsum 他call傳入的是要[]reflect.Value
	var params []reflect.Value
	params = append(params, reflect.ValueOf(10))
	params = append(params, reflect.ValueOf(20))
	res := val.MethodByName(&amp;quot;GetSum&amp;quot;).Call(params)
	fmt.Println(&amp;quot;res=&amp;quot;, res[0].Int())
}

func main() {

	var a Monster = Monster{
		Name:  &amp;quot;牛梅王&amp;quot;,
		Age:   500,
		Score: 87,
	}
	TestStruct(a)

}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210810-%E5%B0%9A%E7%A1%85%E8%B0%B7go%E5%9F%BA%E7%A4%8E%E8%AA%B2-reflect%E5%8F%8D%E5%B0%84/ - yoziming</description>
        </item>
    
    
    
        <item>
        <title>RPC</title>
        <link>https://yoziming.github.io/post/210927-rpc/</link>
        <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://yoziming.github.io/post/210927-rpc/</guid>
        <description>yoziming&#39; Blog https://yoziming.github.io/post/210927-rpc/ -&lt;h3 id=&#34;server&#34;&gt;server&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/ 用接口，讓服務端註冊RPC的時候，就能確保他合法

type World struct{}

func (w *World) HelloWorld(name string, resp *string) error {
	*resp = name + &amp;quot;你好&amp;quot;
	return nil
	// 如果這個return的返回值不為空，
	// 那無論傳出的參數是否有值，服務端都不會給東西
	// (就你給你error)
}

// 用接口，讓服務端註冊RPC的時候，就能確保他合法
type MyInerface interface {
	HelloWorld(string *string) error
}

// 調用方法時，給i傳參，參數是實現HelloWorld方法的對象
func RegsiterService(i MyInerface) {
	rpc.RegisterName(&amp;quot;hello&amp;quot;, i)
}
func main() {
	// 1.註冊RPC服務 綁定對象方法
	err := rpc.RegisterName(&amp;quot;hello&amp;quot;, new(World))
	if err != nil {
		fmt.Println(&amp;quot;註冊RPC服務失敗&amp;quot;, err)
	}

	// 2.開始監聽
	listener, err := net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;127.0.0.1:8899&amp;quot;)
	if err != nil {
		fmt.Println(&amp;quot;listener failed&amp;quot;, err)
		return
	}
	fmt.Println(&amp;quot;server開始監聽...&amp;quot;)
	defer listener.Close()
	// 3.建立連接
	conn, err := listener.Accept()
	if err != nil {
		fmt.Println(&amp;quot;Accept failed&amp;quot;, err)
		return
	}
	fmt.Println(&amp;quot;連接成功&amp;quot;)
	defer conn.Close()
	// 4.綁訂服務
	jsonrpc.ServeConn(conn)
}

&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;client&#34;&gt;client&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;net/rpc&amp;quot;
	&amp;quot;net/rpc/jsonrpc&amp;quot;
)

func main01() {
	// 1.用RPC連接服務器
	// conn, err := rpc.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;127.0.0.1:8899&amp;quot;)
	conn, err := jsonrpc.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;127.0.0.1:8899&amp;quot;)
	if err != nil {
		fmt.Println(&amp;quot;Accept failed&amp;quot;, err)
		return
	}
	defer conn.Close()
	// 2.遠程調用函數
	var reply = &amp;quot;&amp;quot;
	err = conn.Call(&amp;quot;hello.HelloWorld&amp;quot;, &amp;quot;張三&amp;quot;, &amp;amp;reply)
	if err != nil {
		fmt.Println(&amp;quot;Call failed&amp;quot;, err)
		return
	}
	fmt.Println(reply)
}

func main() {
	// myClient := InitClient(&amp;quot;127.0.0.1:8899&amp;quot;)
	// var resp string
	// err := myClient.HelloWorld(&amp;quot;李四&amp;quot;, &amp;amp;resp)
	// if err != nil {
	// 	fmt.Println(&amp;quot;HelloWorld failed&amp;quot;, err)
	// 	return
	// }
	// fmt.Println(resp, err)
}

type MyClient struct {
	c *rpc.Client
}

// 把c初始化下面才能調用
// func InitClient(addr string) {
// 	conn, _ := jsonrpc.Dial(&amp;quot;tcp&amp;quot;, addr)
// 	return MyClient{c: conn}
// }

func (m *MyClient) HelloWorld(a string, b *string) error {
	return m.c.Call(&amp;quot;hello.HelloWorld&amp;quot;, a, b)
}

&lt;/code&gt;&lt;/pre&gt;- https://yoziming.github.io/post/210927-rpc/ - yoziming</description>
        </item>
    
    
  </channel>
</rss> 