<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>microservice on 柚子茶室</title>
    <link>https://yoziming.github.io/tags/microservice/</link>
    <description>Recent content in microservice on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Yoziming</copyright>
    <lastBuildDate>Thu, 20 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yoziming.github.io/tags/microservice/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>後台:商品分類、網關轉發微服務、跨域</title>
      <link>https://yoziming.github.io/post/220120-gulimall-03-gateway/</link>
      <pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220120-gulimall-03-gateway/</guid>
      <description>後台頁面  別的項目學過了，這邊快速跳過，只記幾個新知識
 計算屬性與監聽器 過濾器 組件化  可以復用的模板
  沒有el屬性，不與頁面中的元素綁定 template就是他的HTML模板 data()必須是一個函數而非物件   局部組件  用componments聲明，其中的key名就是標簽名    生命週期  參考 https://book.vue.tw/CH1/1-7-lifecycle.html  腳手架創建表單  之前這邊手動要先去router創建右邊的導航欄，腳手架可以用可視化工具直接創造，非常方便 自己要實現的部分只剩接後端API的網址與資料呈現  javax問題  啟動renren-fast服務時因為引用了common模組(為了讓後台的server也能上nacos服務發現)，又出了點問題，排查了半天  package javax.validation.constraints does not exist 解法: &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-validation&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  我感覺人人開源這個項目已經跟不上時代了，網路上目前2022年1月比較推薦的是若依腳手架，他這個star超高全站第2，也有一直在維護，issue處理很積極，有機會嘗試看看 https://gitee.com/y_project/RuoYi  後端  現在要實現在後台檢視商品列表功能，進到product模組的controller，寫查詢的控制器與服務、實現類 要返回的資料是這種表格   三級樹形列表，老師這邊一次sql查出全部資料然後用stream工具類操作賦好值，實在太強。我想看懂就花了大半天，還是老實for循環，或是多查幾次SQL吧&amp;hellip;  /** * 三級樹型列表 * * @return */ @Override public List&amp;lt;CategoryEntity&amp;gt; listTree() { // 查所有分類  List&amp;lt;CategoryEntity&amp;gt; entities = baseMapper.</description>
    </item>
    
    <item>
      <title>服務註冊nacos、feign、Gateway</title>
      <link>https://yoziming.github.io/post/220119-gulimall-02-nacos/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220119-gulimall-02-nacos/</guid>
      <description>SpringCloud自由配 結合SpringCloud Alibaba最終的技術搭配方案
 SpringCloud Alibaba - Nacos: 註冊中心 (服務發現/註冊) SpringCloud Alibaba- Nacos: 配置中心 (動態配置管理) SpringCloud Ribbon: 負載均衡 SpringCloud Feign: 聲明式HTTP客户端(調用遠程服務) SpringCloud Alibaba - Sentinel: 服務容錯(限流、降級、熔斷) SpringCloud Gateway: API 網關 (webflux 編程模式) SpringCloud Sleuth: 調用鏈監控 SpringCloud Alibaba - Seata: 原Fescar, 即分佈式事務解決方案  版本需求關係  SpringCloud 版本配不上，開都開不起來
 https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E
Nacos註冊  https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html
  導依賴  &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-discovery&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.6.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  docker啟動nacos  --env 配置環境 MODE=standalong 單節點 --name nacos 映象名稱為nacos -d 背景啟動    # 拉映像 docker pull nacos/nacos-server # 啟動容器 docker run --env MODE=standalone --name nacos -d -p 8848:8848 -e JVM_XMS=256m -e JVM_XMX=256m -e JVM_XMN=256m -e JVM_MMS=256m nacos/nacos-server  這東西不限制會吃超多記憶體 預設網址為localhost:8848/nacos，帳號密碼都是nacos  註冊服務 在應用的 /resource /application.</description>
    </item>
    
    <item>
      <title>consul基礎使用練習</title>
      <link>https://yoziming.github.io/post/210928-consul-practice/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/210928-consul-practice/</guid>
      <description>consul基礎使用練習  想像去郵局辦事，consul類似於發號碼牌的那個機器
伺服端(櫃台人員)去找consul註冊服務，比如說櫃台1~3提供儲蓄，櫃台4~6提供郵寄服務
客戶進來透過服務發現，把要辦的事丟給consul，它查看哪個櫃台健康，幫你匹配對應的服務或叫號
(感覺這例子不太完善，就&amp;hellip;類似的理解啦，實際用了才會懂)
   下載
# 官網: https://www.consul.io/downloads # ubuntu shell: (下載&amp;gt;解壓縮&amp;gt;把二進位執行檔丟進去) wget https://releases.hashicorp.com/consul/1.10.3/consul_1.10.3_linux_amd64.zip unzip consul_1.10.3_linux_amd64.zip sudo mv consul /usr/local/bin/   測試
consul -h   啟動server
consul agent -server -bootstrap-expect 1 -data-dir /tmp/consul -node=n1 -bind=192.168.234.128 -ui -rejoin -config-dir=/etc/consul.d/ -client 0.0.0.0 這個IP=192.168.234.128=ubuntu的ip
*若/etc/consul.d/不存在要先自己創
  查看服務
http://192.168.234.128:8500/   註冊自訂的健康檢查服務，範例:
剛剛自訂的配置檔路徑/etc/consul.d/下新增一個web.json
{&amp;quot;service&amp;quot;: { &amp;quot;name&amp;quot;: &amp;quot;web&amp;quot;, &amp;quot;tags&amp;quot;: [&amp;quot;extract&amp;quot;, &amp;quot;verify&amp;quot;, &amp;quot;compare&amp;quot;, &amp;quot;idcard&amp;quot;], &amp;quot;address&amp;quot;: &amp;quot;192.168.234.128&amp;quot;, &amp;quot;port&amp;quot;: 9000, &amp;quot;check&amp;quot;: { &amp;quot;id&amp;quot;: &amp;quot;api&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;HTTP API on port 9000&amp;quot;, &amp;quot;http&amp;quot;: &amp;quot;http://localhost:9000&amp;quot;, &amp;quot;interval&amp;quot;: &amp;quot;10s&amp;quot;, &amp;quot;timeout&amp;quot;: &amp;quot;1s&amp;quot; } } }   重啟server並查看服務</description>
    </item>
    
    <item>
      <title>MVC &amp; Microservices</title>
      <link>https://yoziming.github.io/post/210920-mvc-microservices/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/210920-mvc-microservices/</guid>
      <description>MVC架構 Model:模型，管理資料庫(增刪改查)、業務邏輯、物件結構定義
View:視圖，使用者實際在看、操作的介面(UI)，前端
Controller:控制，接收請求、回覆結果，決定工作流程，算是Model跟View的中間人
微服務架構（Microservices）  單一職責:把業務邏輯拆分成無數個小區塊(Blocks)，負責單一任務，服務之間透過管道來通訊。 輕量級通訊:使用不依賴語言或平台的格式，例如XML、JSON、protobuf。通常基於HTTP協議、符合REST風格來達成標準化、無狀態化。 獨立開發、測試、部屬:顧名思義，都拆開了就可以分開做，不像傳統架構牽一髮而動全身。 容器化:微服務既然能獨立作業了，就可以放到容器(Container)中，互相隔離互不干擾，達成快速部署、節省資源。Docker是目前最普遍的容器技術，Kubernetes(K8s)是常用來管理容器、協調整合的平台。  </description>
    </item>
    
  </channel>
</rss>
