<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on 柚子茶室</title>
    <link>https://yoziming.github.io/tags/algorithm/</link>
    <description>Recent content in algorithm on 柚子茶室</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Yoziming</copyright>
    <lastBuildDate>Tue, 08 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://yoziming.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode Easy: 66</title>
      <link>https://yoziming.github.io/post/220208-leetcode-easy-66/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220208-leetcode-easy-66/</guid>
      <description>\66. Plus One  沒頭緒時，可以先列出多種結果，拆解歸納相似之處 像這題+1其實就只有兩種情況，9或其他  class Solution { /** * Input: digits = [4,3,2,1] * Output: [4,3,2,2] * Explanation: The array represents the integer 4321. * Incrementing by one gives 4321 + 1 = 4322. * Thus, the result should be [4,3,2,2]. */ // 從最後一位數開始遍歷(向前)，不為9時直接加一，為9時讓當前元素重置為0(進位了)  public int[] plusOne(int[] digits) { for (int i = digits.length - 1; i &amp;gt;= 0; i--) { // 如果等於 9 ，重置為0  if (digits[i] == 9){ digits[i] = 0; } else { // 不為9，直接加一返回  digits[i] ++; return digits; } } // 循環出來如果沒返回(原數字剛好是999之類的情況)，  // 所有的位都已經重置為0了 ，只需要數組擴容，在第一位數加一即可  digits = new int[digits.</description>
    </item>
    
    <item>
      <title>LeetCode Easy: 35-58</title>
      <link>https://yoziming.github.io/post/220205-leetcode-easy-35/</link>
      <pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220205-leetcode-easy-35/</guid>
      <description>\35. Search Insert Position  二分查找  核心思路是&amp;quot;下一輪的搜索區間&amp;quot; 然後逐步縮小區間    public int searchInsert(int[] nums, int target) { // 右邊界最大的數有可能就是答案(最衰的情況下)，他的index就是長度  int len = nums.length, left = 0, right = len; // 開始迫近  while (left &amp;lt; right) { // 每輪都重新定義中間數，注意小數點會被捨去  int mid = left + (right - left) / 2; // 如果目標更大  if (nums[mid] &amp;lt; target) { // 成為新的左標，下一輪搜尋[mid + 1...right]  left = mid + 1; // 因為小數點會被捨去，所以這邊+1  } else { // 成為新的右標，下一輪搜尋[left.</description>
    </item>
    
    <item>
      <title>LeetCode Easy: 26-28</title>
      <link>https://yoziming.github.io/post/220203-leetcode-easy-26-28/</link>
      <pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/220203-leetcode-easy-26-28/</guid>
      <description>\26. Remove Duplicates from Sorted Array  數組去重
  想對數組做啥，都可以考慮雙指針  public int removeDuplicates(int[] nums) { // 起始第一個指針從頭開始  int p = 0; // 第二個指針，從p+1開始  for (int q = 1; q &amp;lt; nums.length; ) { // 如果不一樣  if (nums[p] != nums[q]) { // 就把q往前搬，讓不一樣的數緊貼著第一個指針  nums[p + 1] = nums[q]; // 並且讓第一個指針P移往下一步  p++; } // 如果數字一樣表示要被忽略，q往後移，直到找到不同的數字  q++; } //  return p + 1; } \27.</description>
    </item>
    
    <item>
      <title>LeetCode Easy: 14、20、21</title>
      <link>https://yoziming.github.io/post/211209-leetcode-easy-14-21/</link>
      <pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211209-leetcode-easy-14-21/</guid>
      <description>\14. Longest Common Prefix  找最長共通前綴
  .substring(0, j) 左閉右開  public String longestCommonPrefix(String[] strs) { // 當字符串數組長度為 0 時則公共前綴為空，直接返回  if (strs.length == 0) { return &amp;#34;&amp;#34;; } // 令最長公共前綴 ans 的值為第一個字符串(&amp;#34;flower&amp;#34;)，進行初始化  String ans = strs[0]; // 與全部的字符串{&amp;#34;flower&amp;#34;, &amp;#34;flow&amp;#34;, &amp;#34;flight&amp;#34;}開始比較  for (int i = 1; i &amp;lt; strs.length; i++) { // 從切出字符串的第一個字開始循環  int j = 0; // 開始比較有幾位一樣，直到自己的長度，或其他字串的長度  for (; j &amp;lt; ans.length() &amp;amp;&amp;amp; j &amp;lt; strs[i].</description>
    </item>
    
    <item>
      <title>LeetCode Easy: 1、9、13</title>
      <link>https://yoziming.github.io/post/211116-leetcode-easy-1-13/</link>
      <pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yoziming.github.io/post/211116-leetcode-easy-1-13/</guid>
      <description>1. Two Sum
 求某數組中哪兩位數的和等於X
 // go // nums []int=傳入的數組；target=X func twoSum(nums []int, target int) []int { m := make(map[int]int, len(nums)) for i, num := range nums { if idx, ok := m[target-num]; ok { return []int{idx, i} } m[num] = i } return []int{0, 0} } 9. Palindrome Number
 判斷是否為迴文數字，例如121
 // java public boolean isPalindrome(int x) { // 判斷是否迴文，如121、2332、456654  // 負數或尾數是0或&amp;lt;10的顯然可以排除  if (x &amp;lt; 0 || (x !</description>
    </item>
    
  </channel>
</rss>
